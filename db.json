{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/daodao.ico","path":"images/daodao.ico","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/daodao.jpg","path":"images/daodao.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/daodao.png","path":"images/daodao.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/author.png","path":"images/author.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/LICENSE","path":"lib/Han/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/README.md","path":"lib/Han/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/LICENSE","path":"lib/fancybox/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/README.md","path":"lib/fancybox/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/LICENSE","path":"lib/jquery_lazyload/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pangu/LICENSE","path":"lib/pangu/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pangu/README.md","path":"lib/pangu/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/LICENSE","path":"lib/three/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/README.md","path":"lib/three/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.min.css","path":"lib/fancybox/source/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.min.js","path":"lib/fancybox/source/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pangu/dist/pangu.js","path":"lib/pangu/dist/pangu.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pangu/dist/pangu.js.map","path":"lib/pangu/dist/pangu.js.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pangu/dist/pangu.min.js","path":"lib/pangu/dist/pangu.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pangu/dist/pangu.min.js.map","path":"lib/pangu/dist/pangu.min.js.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/banner.png","path":"images/banner.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/bg.png","path":"images/bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"4e951c617bd02cf1b5ee8c26201a665afd0a23e3","modified":1519118032000},{"_id":"source/resume.html","hash":"f08dda23fdea9e578624b7c0338f98bc0db7ca66","modified":1520329020000},{"_id":"source/robots.txt","hash":"04c627ebeb42f30361b011ec9be7630b5e954575","modified":1518879357000},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1518722478000},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1518722478000},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1518722478000},{"_id":"themes/hexo-theme-next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1518722478000},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1518722478000},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1518722478000},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1518722478000},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1518722478000},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1518722478000},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"f0190c7d83a98464549a6b3a51bb206148d88e1b","modified":1518722478000},{"_id":"themes/hexo-theme-next/README.md","hash":"6da098a5242d0fdf85166be38bd31d9a52ffca84","modified":1522340429000},{"_id":"themes/hexo-theme-next/_config.yml","hash":"1dbfc7ab5bfca146e2b084559392645b722db8a7","modified":1540439715108},{"_id":"themes/hexo-theme-next/bower.json","hash":"1a6516123c947cfca8b21f562565800e8768eb26","modified":1522340429000},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"d8807bbc82be89d16bcaf08b1855008b3fe92cab","modified":1518722478000},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1518722478000},{"_id":"themes/hexo-theme-next/package.json","hash":"de13bd178fe644c46ed1148fefaffb5f75811a06","modified":1522340429000},{"_id":"themes/hexo-theme-next/.git/MERGE_MODE","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522340429000},{"_id":"source/_discarded/20180403111507.md","hash":"a6f13b7ef69cc4a37aa0ce0e0d33da04f3542337","modified":1523201329000},{"_id":"source/_discarded/20180403145706.md","hash":"266cad2cc023b816cf5b6f165752d4a5764c300a","modified":1523201323000},{"_id":"source/_posts/.NET-Core-不同程序集中存在相同命名空间时的解决思路.md","hash":"5f2d13389b037474d492c4c772aac244b5c6d427","modified":1540437882855},{"_id":"source/_posts/1283-最小周长.md","hash":"07824f1c268b83b63cf1b1201e64a119f10bce67","modified":1520391822000},{"_id":"source/_posts/C#-TextBox-Ctrl+A全选.md","hash":"9e4c8750c078417b37aef3a2529d39d8631cf660","modified":1520391822000},{"_id":"source/_posts/C#激爽特性——扩展方法.md","hash":"532f1c6b471492dcb951b24f067c700ad71c542c","modified":1520391822000},{"_id":"source/_posts/C#线性筛法求出范围内的所有质数.md","hash":"10d6819a355a38cdc9622384711353b0dc47b559","modified":1520391822000},{"_id":"source/_posts/C#读取CPU序列号、硬盘ID、网卡MAC地址，生成机器码.md","hash":"2a9d37e98bcc9e94a89a1306e97f70a18476257d","modified":1520391822000},{"_id":"source/_posts/C#调用迅雷、IDM下载方法汇总.md","hash":"37a08d98438b2e833bb1111223925be829e32fc4","modified":1520439950000},{"_id":"source/_posts/MVC学习笔记索引帖.md","hash":"6fea967c921d680c14f2325911a4a0be7b0a949f","modified":1520391822000},{"_id":"source/_posts/Net-Core-2-0-EFCore-MySQL-System-TypeLoadException-occurred-问题解决.md","hash":"7b77295d6bbb9d4acaf7297d0210a8cefcd70d85","modified":1523272742000},{"_id":"source/_posts/Prim算法.md","hash":"47791439e50097c6f4cbc3742e78fc9291e63738","modified":1520391822000},{"_id":"source/_posts/Rtmp-Hls直播、点播服务器部署与配置.md","hash":"25cdedb3eacfeda5868fbcf504455228a0dc75b3","modified":1520391822000},{"_id":"source/_posts/Selenium-PhantomJS-巧妙过渡到-Firefox-Chrome.md","hash":"8c71b19e003cdf0392ddbf78741ce6e88d269201","modified":1540439178177},{"_id":"source/_posts/redhat7.3配置163-yum源.md","hash":"ff793a46e21b88aa389c3ea35e783fb69554a739","modified":1520391822000},{"_id":"source/_posts/【51NOD刷题】1182-完美字符串.md","hash":"daee2a81e5f326b9ca5fafc07987395a6651c93b","modified":1520908280000},{"_id":"source/_posts/【51NOD刷题】1284-2-3-5-7的倍数.md","hash":"6314ad15093cc58fbfe02265b32de47b5a77d7d1","modified":1520391822000},{"_id":"source/_posts/【51NOD刷题】1289-大鱼吃小鱼.md","hash":"cb6181dec0538bca73a6d9ed2715832c69b70c10","modified":1520391822000},{"_id":"source/_posts/【51NOD刷题】1305-Pairwise-Sum-and-Divide.md","hash":"5191681a170fb79a6224a5959c05e4d7b566e985","modified":1520391822000},{"_id":"source/_posts/【51NOD刷题】1344-走格子.md","hash":"83f93b1c9370798385e6bda3b91ff9c0b1dddfed","modified":1520391822000},{"_id":"source/_posts/【51NOD刷题】1347 旋转字符串.md","hash":"dfbe55bcab06e29dc75607a2c4ec5e02986191fa","modified":1520391822000},{"_id":"source/_posts/【51NOD刷题】1381 硬币游戏.md","hash":"3a4c1d442eaffd1b9b32bc4e867cfb6ebd56d3e5","modified":1520391822000},{"_id":"source/_posts/【MVC学习笔记】1.项目结构搭建及单个类在各个层次中的实现.md","hash":"a922ecda2ee4a0d283e2e0a963b9221c49c0e025","modified":1520391822000},{"_id":"source/_posts/【51NOD刷题】2020 排序相减.md","hash":"9056fa0ad50827c17225dbdbd87b650b0c943fd1","modified":1520391822000},{"_id":"source/_posts/【MVC学习笔记】2.使用T4模板生成其他类的具体实现.md","hash":"8c7606efbd0796cfb726f12317be2cd4456c5b61","modified":1520391822000},{"_id":"source/_posts/【MVC学习笔记】3.使用Spring.Net应用IOC（依赖倒置）.md","hash":"455908ab8b7970f199273ea2bdb7fe912022f975","modified":1520391822000},{"_id":"source/_posts/【MVC学习笔记】4.使用Log4Net来进行错误日志的记录.md","hash":"95f21da0bc77434ddd370c260f081e741c30dba7","modified":1520391822000},{"_id":"source/_posts/【MVC学习笔记】5.使用Controller来代替Filter完成登录验证（Session校验）.md","hash":"9e8ebb2446df4e76608f132d7eb4e7fa2d9ac79b","modified":1520391822000},{"_id":"source/_posts/【MVC学习笔记】6.-使用Memcache+Cookie解决分布式系统共享登录状态.md","hash":"a3d22a620336588ba404b4e3a910d58565d368c3","modified":1520391822000},{"_id":"source/_posts/【MVC学习笔记】7.使用极验验证来制作更高逼格的验证码.md","hash":"5ad746ad39ad9648b4355ab9c316ef2cc8cf5e8b","modified":1520391822000},{"_id":"source/_posts/【单例】使用同步基元变量来检测程序是否已运行.md","hash":"f4f50a6c83062b45668fcbe72f9ef95201d1bc0d","modified":1520391822000},{"_id":"source/_posts/【新手学Java】使用beanUtils控制javabean.md","hash":"b498a11f90f8b7acbdb7a68ab7c8b6d2938b4266","modified":1520391822000},{"_id":"source/_posts/【新手学Java】使用内省(Introspector)操作JavaBean属性.md","hash":"ae0686f85412e8094eb7a9f4f78c2b1bc1ad0e3a","modified":1520391822000},{"_id":"source/_posts/【新手学Java】反射学习笔记.md","hash":"8aaec91f95d187396db2a53831719f02f413f961","modified":1520391822000},{"_id":"source/_posts/【爬虫学习笔记】C#-使用-ScrapySharp-并行下载天涯图片.md","hash":"08de055d60ed4c0cdd221ebdaf12056e77c06a1c","modified":1520391822000},{"_id":"source/_posts/【爬虫学习笔记】C#基于ARSoft.Tools.Net的DNS解析模块（半成品）.md","hash":"6e64f1e0ea6ca7689c6748af27f4c570d8be348f","modified":1520391822000},{"_id":"source/_posts/【爬虫学习笔记】DNS解析服务增加缓存机制.md","hash":"1f3bf12b7a4861369bbab2b1d6542238249e36ef","modified":1520391822000},{"_id":"source/_posts/【爬虫学习笔记】MemoryCache缓存的用法学习.md","hash":"42fe8feb1c32849ad7af08ebeced46ceeb93d82c","modified":1520391822000},{"_id":"source/_posts/【爬虫学习笔记】ScrapySharp简单封装为Requester.md","hash":"e6444b954ca7e946f07521a9a38cd4e11aab0aa4","modified":1520391822000},{"_id":"source/_posts/【爬虫学习笔记】Url过滤模块UrlFilter.md","hash":"b62f67ffc43d549ab013a85c6b62a5a9abf8e40b","modified":1520391822000},{"_id":"source/_posts/【爬虫学习笔记】基于-SimHash-的去重复处理模块ContentSeen的构建.md","hash":"c94cda7a1795773dd5104ea4aaa59a85aabc29a9","modified":1520391822000},{"_id":"source/_posts/【爬虫学习笔记】基于Bloom-Filter的url去重模块UrlSeen.md","hash":"f09b71d9bfa9c21baeb4c66164e151e12aef659f","modified":1520391822000},{"_id":"source/_posts/【爬虫学习笔记】用于提取网页中所有链接的-Extractor-模块.md","hash":"70b50e8e0c445a4ed89da8ae1ed699806ba24b7c","modified":1520391822000},{"_id":"source/_posts/【迷宫中的算法实践】迷宫生成算法——Prim算法.md","hash":"ad747f701adf7801a2f93b041849a87a922dcd81","modified":1520391822000},{"_id":"source/_posts/【迷宫中的算法实践】迷宫生成算法——递归分割算法.md","hash":"d6b11e10b506e01e16c1b806732d8e061cd69f92","modified":1520391822000},{"_id":"source/_posts/【迷宫中的算法实践】迷宫问题算法综述.md","hash":"fecf33be2d2844285612ae86d468673075666729","modified":1520391822000},{"_id":"source/_posts/一木禾网盘下载分析及批量获取下载地址的实现（上）.md","hash":"33b3f58f39776bbc0dd80f3b228c1d3428409cfe","modified":1520391822000},{"_id":"source/_posts/一木禾网盘文件下载地址批量获取实现.md","hash":"cc1a8cdfa19159aeb33d6c5e92f92f819c0baf62","modified":1520391822000},{"_id":"source/_posts/使用GeoIP2获取IP的地理位置信息.md","hash":"e7ceae140cbf9fe91840bef71cd4e4a3e4c9ffdd","modified":1520391822000},{"_id":"source/_posts/使用委托解决方法的跨线程调用问题.md","hash":"323e90ee6ee430be97e6925d474d49a384f68c35","modified":1520391822000},{"_id":"source/_posts/关于20180313.md","hash":"170091f27a94b283a2b63336966c0bfe741a9713","modified":1520996374000},{"_id":"source/_posts/关于C#调用广州医保HG_Interface.dll调用的一些总结（外部组件异常）.md","hash":"974463e6e3d05b0156e955585e48bc79d55777c5","modified":1520391822000},{"_id":"source/_posts/如何在IIS中托管Asp.Net-Core应用.md","hash":"5304e2853524992b305aa0124a89f8e687293b2f","modified":1540372361878},{"_id":"source/_posts/安装DotNetCore.1.0.1-VS2015Tools.Preview2.0.2出现0x80072f8a未指定的错误.md","hash":"f11141d3d1232cd53a6f96e5adefac50e24900e9","modified":1520391822000},{"_id":"source/_posts/新手正式入驻博客园.md","hash":"0739820444170aed5d72d15025d6ba9186ff2c6a","modified":1520391822000},{"_id":"source/_posts/查看当前IP和归属地的方法.md","hash":"dfd2e499c3695e3bf96fe2ba56d4f5ccad1ed6d5","modified":1520391822000},{"_id":"source/_posts/模块化InnoSetup依赖项安装.md","hash":"0e5e8829b03f88efbff9e14f8ba4b9d99cac3bad","modified":1520391822000},{"_id":"source/_posts/百度语音测试.md","hash":"410baa6217a90099a10825e2ada18ae34f502929","modified":1520391822000},{"_id":"source/_posts/缺少google-api密钥,因此chromium的部分功能将无法使用”的解决办法.md","hash":"28a35fa66535f7c949d969efd304f3b95667c229","modified":1520391822000},{"_id":"source/_posts/讯飞语音识别Demo.md","hash":"20fa37cea0047e1f9eeff03fb8c024dd34443fe9","modified":1520391822000},{"_id":"source/tags/index.md","hash":"c990057bcf446679e871f3c901ed75a7e01511bd","modified":1518946068000},{"_id":"themes/hexo-theme-next/.git/COMMIT_EDITMSG","hash":"be0d5ab2dbf67de4933ba49f9eae2a6f81e0dd06","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/FETCH_HEAD","hash":"727b249ef66f565fa29351a4acde8e730d6982e3","modified":1522341016000},{"_id":"themes/hexo-theme-next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1518722478000},{"_id":"themes/hexo-theme-next/.git/MERGE_HEAD","hash":"c8e6cc11516b4bae45059b12a5027bf1c8dec7fe","modified":1522340429000},{"_id":"themes/hexo-theme-next/.git/MERGE_MSG","hash":"e856ab41d1737955bc29611fb0da176b24ec8998","modified":1522340429000},{"_id":"themes/hexo-theme-next/.git/ORIG_HEAD","hash":"334ac93c99adc6e4a3ab7716f8bce8ccda661d02","modified":1522340429000},{"_id":"themes/hexo-theme-next/.git/config","hash":"d0b1ef8383d74a0a94c77b4762f10af4c0ea820c","modified":1518722478000},{"_id":"themes/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1518722473000},{"_id":"themes/hexo-theme-next/.git/index","hash":"9f6ea6aad99007610151e5cbc0ab2a0f14b1f843","modified":1540372007137},{"_id":"themes/hexo-theme-next/.git/packed-refs","hash":"97c3b9c4d6dde5bffe3141329c522e5f3e1a1e4f","modified":1518722478000},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"22f2ccc5522563b67c8663849fc1d6cbae93a8ff","modified":1522340429000},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"2a1eef7678e6ad7ed6ded3e4d968c1983e4bd9a0","modified":1522340429000},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1522340429000},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"36201119490a04107c8179b10202548a9d0e5e60","modified":1518722478000},{"_id":"themes/hexo-theme-next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1518722478000},{"_id":"themes/hexo-theme-next/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1522340429000},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1518722478000},{"_id":"themes/hexo-theme-next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1522340429000},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1518722478000},{"_id":"themes/hexo-theme-next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1518722478000},{"_id":"themes/hexo-theme-next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1518722478000},{"_id":"themes/hexo-theme-next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"157491579fa631aca8850917df1fb95028ad663d","modified":1522340429000},{"_id":"themes/hexo-theme-next/docs/LICENSE","hash":"5b702310012d480b40529fd10cf1872f687277a0","modified":1518722478000},{"_id":"themes/hexo-theme-next/docs/MATH.md","hash":"bdbbcaf88f86de3d762fd1459fd5a0893cf4bce6","modified":1518722478000},{"_id":"themes/hexo-theme-next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1518722478000},{"_id":"themes/hexo-theme-next/languages/_en.yml","hash":"b63928657ff5fc2a6e71e4cc0dcde2d35b33e31d","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/ar.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/bg.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/bn.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/cs.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/da.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"bfd74445c7f17fdc859551d648b6a03e2eed2561","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/el.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/es.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/et.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/fa.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/fi.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"1bca7176ff846db5b063f4a90a653eed377b6909","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/he.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/hi.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/hr.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/hu.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"4cda8f32dacebda3479e3a0c9d688050388897f2","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"6199268268f4b460b5d193c9a5a30622fc97fcdc","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"36732b432ac39cff022bca5700b6fef1330be0d3","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/jv.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"0753fbef09df65937586760996535bf00197c548","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/lt.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/lv.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/ms.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"2692731e1e9887b390bc6241f38a234bdb621947","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/no.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/pa.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/pl.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"3542d4ecafb6f91427128df8b75b1824e0255405","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"681cde6ddbc998d6a36ffe857aaf6f0252ecfb29","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/ro.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"fcc0d39145cad81ba640d4de9364330739a289b5","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/sl.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/sr.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/sv.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/th.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"5de1bf8d1a4ee01d62d45683fe4d5571f8ff93a4","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/uk.yml","hash":"1409bf8d19c9d094f37add2435eca054a6e82b44","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"4501ebf0ba7ac51c7cb19e11bd24711f49d6d8da","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"13f9136bf3f62f54d74da1951e6c385cb349ad1c","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"6301bbc9e2cae953a49fce73936c31ba9c3b8000","modified":1522340429000},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"68fdb53fed12075358d52d7e25ba037cc6540d02","modified":1522340429000},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"354a81e1ad0257e15d1c2e90b3f1c7ed893cec3f","modified":1522340429000},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"678a6cab739b54da9dfb2d6634848cffdc7aab6a","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"fbf2c3d14c3e5730fad75d7d106bf7f070ccd69c","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"ceba7287574c429a235aa7a62bf7a3dc1efb265a","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1518722478000},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"176952dfe3605c2ab57f3f7cdbac4f2487825c41","modified":1518722478000},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1518722478000},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1518722478000},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1518722478000},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520565751000},{"_id":"source/_discarded/ded/sdasdad.md","hash":"e80293218c6a5b2e7b10654483aa1548e1ef957b","modified":1520186775000},{"_id":"themes/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1520565751000},{"_id":"themes/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1520565751000},{"_id":"themes/hexo-theme-next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1520565751000},{"_id":"themes/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1520565751000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1520565751000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1520565751000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1520565751000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1520565751000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1520565751000},{"_id":"themes/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1520565751000},{"_id":"themes/hexo-theme-next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1520565751000},{"_id":"themes/hexo-theme-next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1520565751000},{"_id":"themes/hexo-theme-next/.git/logs/HEAD","hash":"8afb5a810a6646f1bca4116d197be183c844dfb5","modified":1522340415000},{"_id":"themes/hexo-theme-next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1520565751000},{"_id":"themes/hexo-theme-next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1520565751000},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"137aa5ce71e9572389ffcbcb75d919a58d470dbd","modified":1522340429000},{"_id":"themes/hexo-theme-next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1520565751000},{"_id":"themes/hexo-theme-next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1522340429000},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1522340429000},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"edf2c5603e828fa8bfba91b1e3f2ff44ff46f17e","modified":1522340429000},{"_id":"themes/hexo-theme-next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1520565751000},{"_id":"themes/hexo-theme-next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1520565751000},{"_id":"themes/hexo-theme-next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"4e3f7b4d92ef3687480de67c9951aac235f33769","modified":1522340429000},{"_id":"themes/hexo-theme-next/docs/zh-CN/MATH.md","hash":"08c630dc7bd479e49d7d5aa813df628e7726bd7f","modified":1520565751000},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"7966c04dbebf1e18a6eb6c19e7cc92b23c0e65bd","modified":1522340429000},{"_id":"themes/hexo-theme-next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"1ec7a0e9ac64b2c84aa1fd7ba2c662be1dbcb407","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"949bf640c011689e518ad480299ab19785df4b80","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_macro/post-related.swig","hash":"e8dfb86eb62b9c2bc1435d6d1afa95d3b4c7b931","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"13beda90ea472bc716e7ae594c8f4601e85ce258","modified":1522340429000},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"8dc3b6ba76c389aaa0810cbd0df206f7096d76a0","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"2d8e3b4a211d55f4861eb2375b6fdd786484bf71","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"616ffee93e84958e72ee0f996808f866c4ccdbf7","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_partials/breadcrumb.swig","hash":"4b48fdbfe3bf41ddeda4ff74c1ff17ab9f15c14e","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"2e8c3df265e9ae38003d1321fb80fb3b12cb6a97","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"a86f302a65a5680bdbc8bbdb9e1017090b28385b","modified":1522340429000},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"8d5e1fa07626c42593b46cd44918d0380c47f54d","modified":1522340429000},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"206cbd6ac9ca6a219a8516f59beae25b3c770199","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1522340429000},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_partials/sub-menu.swig","hash":"65d7158eac90867d0e4d8f6eeda7fb77e346b09c","modified":1522340429000},{"_id":"themes/hexo-theme-next/layout/_third-party/bookmark.swig","hash":"ed62ea83d3f2c9db2ea57bf23a7d765ed82504c2","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_third-party/github-banner.swig","hash":"736cb278fa09d3b4ed6f305b56353941ea918793","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"debba9b7110f635204a15df148194d4c2fd2668b","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_third-party/pangu.swig","hash":"ccf0035086e14dcefa24c2907301edf4c37d5448","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_scripts/noscript.swig","hash":"f8c7e729ad6e72b4c705a2c5d5041589c2b4cc52","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"f134aeb8d5bee351e5277edb92ac694af314b75f","modified":1520565751000},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"496e3846f353d253dad944b2ed8fdc4e02dcc28a","modified":1520565751000},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"5c87817385986748617fa87dee9cba654566adcd","modified":1520565751000},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"4f928ef9ad0ae8e3d766352b8861bc22f96de5d8","modified":1520565751000},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"2118895d2d5e379240b27399a6c988a74f25a427","modified":1520565751000},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"696157d4e4382fdbe29c674b0f4b433d47db449b","modified":1520565751000},{"_id":"themes/hexo-theme-next/scripts/tags/include-raw.js","hash":"1f7bafba9cf3c94f5735873bd52e93ddcf37f8a2","modified":1520565751000},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"d8bfb2974c6afef2c085642857b70b6569b4a097","modified":1520565751000},{"_id":"themes/hexo-theme-next/scripts/tags/lazy-image.js","hash":"92c0ead5f503cfc4ee7c254ebfb00a2623fa1890","modified":1520565751000},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"1cec218c9fcaa8fb4144bf9d0b39babcaafac8d4","modified":1520565751000},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"2a62e2a11e9cdcc69e538d856d6f9ce228a07c93","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"7d45441371e5eb6edd79e6a20e2adbd7911e50d9","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/avatar.png","hash":"d52889766259b24bd83bfe02633a3572915f1ffd","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/daodao.ico","hash":"51b9dcbadb69b142accd2ea27ffb4e6ce1453598","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/daodao.jpg","hash":"017e13645840944ce251535c23d45b558ed0d4ac","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/daodao.png","hash":"99bdfe302b34ab244606df7f15603106327192bd","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"0a3e8a7868de8a320a0a1a8f3bf6262bd84d12f0","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"f8c3e8f62e7539ddda5c9e5a45041ac19f834b63","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1520565751000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/images/author.png","hash":"b5917e126474994a2254ead9d9495ac1416789d3","modified":1520565751000},{"_id":"themes/hexo-theme-next/.git/objects/07/cfca79ec95418849e01485c3d64b9a2e509036","hash":"d50a71533c0e9e91911315c3c3f5aeaec1a75393","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/56/82be51e606a90658f4affec4b4271427e3c322","hash":"161df5b45585700e5684592371afd5fbe74aeb27","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/62/b75e772818209ed2bbfa9e8f3e89b870bc0983","hash":"1a35142182dc03373a0f309a5bb09c05c6584dbc","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/64/1faf215db64bddc30cb06482e2678daf690436","hash":"a37e7144009dd073a49a5e5a98dfffcfd97370d0","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/69/5b364a1f63144d712e7f43fb0c7a44449778c1","hash":"3cce9c69e082e9a73fd979d55f06fdeda73cf8a2","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/70/635343a136c9e673c30381b39f5822faa4dadf","hash":"c277e7c7b69c8e6ae0838c4074b3e7ba965ae07d","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/75/18f536c81052e6954d1b04600e80329b7d0290","hash":"840c8a857ac16c365b824757bf836f11538f066e","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/85/5c3d5beefe1ed95aae48adb5b5762c8185293f","hash":"5e9f20bbdc1a43dc2b6ee7e6dce7e784acad03e9","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/8a/56946e927d6a6ed26458190c4d68ba03f2a472","hash":"9de90d8df23c2ded1dbf4e6c6fdd810cb0553747","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/8b/b3e7c0add27e72c48d05cd56b8e1ee5b01557c","hash":"a8d88ed70c39c88a379a1a71fc75317c3ce6c191","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/93/50a6a19126efb090949332aa936d1a3a4b4993","hash":"ed7704a2f645ca0f056f0362c457bbd446b71f09","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/a2/dc89765a7f230d43d362e179d41d505b04ab0d","hash":"ddba7166fa7d80142e68ad57add9a1815a04aefc","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/a3/d35b5d9ef34b9cfc3e011468dd85078a05ac71","hash":"82531c1f93461f97eb15ae09cd22d92b34767448","modified":1522340429000},{"_id":"themes/hexo-theme-next/.git/objects/b2/3f43fd8b2cc72be403c4a87130bcb1c136dfa0","hash":"c86397bfc080f1fa1f5c7214b00cf2cb25b17bd2","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/bc/8d895e44825d2cae2d2c28a26f11217e5f44b0","hash":"e40ae4d4176a6711db1c1b7356c95db31af2286b","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/d5/cd69db7be2cc20488cf2970ccfe905b7833d62","hash":"8ad3409b2b98ae8c0327bee7b0913e6504203b35","modified":1522340429000},{"_id":"themes/hexo-theme-next/.git/objects/d7/be2c692c379d0e3ec54572394c4be84a765bdc","hash":"2844193e436176247e6c36d6ba77a1a225afde7d","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/e7/61ea35bc17bab1358a78a8a4bed475e744db04","hash":"b0b0830b1538920a034d557305d59d45c306fe7a","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/f0/639504d704dcbefe65c0942db5fe4962cac4ea","hash":"157367ad9053498c243f2574f37fe3c437a6ff06","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/ff/852743c6012f324c704114072371ac3babb568","hash":"818b3deefa8227b7bf17913aa1b25a90b7e28842","modified":1522340944000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-b0d9a99086f6d8be9cf8cfcb22019d9006031942.idx","hash":"3d30cc8d8f95817051d0bfc774a32727f4baf84b","modified":1522340385000},{"_id":"themes/hexo-theme-next/.git/refs/heads/master","hash":"334ac93c99adc6e4a3ab7716f8bce8ccda661d02","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v6.0.5","hash":"5cabae7037c56a42dc3ee8fc38d90faf7f3d9642","modified":1522340385000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v6.0.6","hash":"b8d542012c19aa43e5fa988f88309f5986136b93","modified":1522340386000},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-badge-1.swig","hash":"9508bf0d9adbc15fdeea415972a70e6216ea5235","modified":1522340429000},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-badge-2.swig","hash":"138cc7ad34d82ef59c526f83205defdae4274722","modified":1522340429000},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-item.swig","hash":"fcba6931b2424118fecc6dfe4527c10147c50235","modified":1522340429000},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.swig","hash":"2048f9a47bfcc14b689d776028626f46d2865732","modified":1522340429000},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.swig","hash":"60555b19a3b4bf203baa9bc0ea6267674f95235c","modified":1522340429000},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"c43f41b7f3c0743d1e673af2e787ea34a67fc9cb","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"d67d9a176a276cdab6f2bcb7eb3650fbca5459c4","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"cfc932c5db04fef64cc56d3ba0b8ddf3a15a63bd","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"7973b4741863362cd9d023216de4a43eb23dc227","modified":1522340429000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"a693a2c00497471d06113443f548b676ee2e527d","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"292cdd1059b76d3d10486b71c99d9afb3e59ea44","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"787d482d797c38e77d69629ebb88d45f972216b7","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"18a58db53f1eef50462ee0065d4445b7fbb04fb5","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"7cf0c589d95a2d1848266ffe2357e91c95d2e7f8","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"de1fac9bb3f0cab88b1ed1950f76c7eb0037aeda","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"ab181c036cda9656f87bb1a749e3e7cbc437f012","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.swig","hash":"30e9e55d9af2ced6e6b156a042026a8b480f0ab0","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.swig","hash":"860de4ce6fccc516d2f779a4b600a4214d8c18e2","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.swig","hash":"9a865d013b6d273bbbfc3999e8657844b0c48752","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"71c897f9b107dd0de1b7f649633cf583c206a9db","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"26a1b8b4aa96ee9089c06db326b834ee709dbd77","modified":1520442007000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"4d6dd32dae6f0ea93d43c5cfa0106b6cb46c3b00","modified":1522340429000},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"8b5fc9e6621a5de04ae7d9ef117683c69965fb00","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"b89e68789e6dac24e00250528f4fc9ae8aa3599b","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"534b9dec93f3e235c217b97314d4bf513fa3e5ba","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/images/alipay.jpg","hash":"e03bfce63faca42ec858bcac4c35da5e19dd25de","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/wechatpay.jpg","hash":"5e0896ba8ddec2bb5eab10128e9726c38f521ac2","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"6c30aab4822b189d1fe9b20ca5272fd8d3ebe998","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"bea49fc6392bd38fb6f80d041d95d23051423aa2","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"02acfa1862d5e4345d6a7cee08841cc9e2fb0259","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"d626e9c4d91c5308db11b7bae6e0c20f703d38c2","modified":1522340429000},{"_id":"themes/hexo-theme-next/source/lib/Han/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/README.md","hash":"990d5f1127a0c147902f5f5dfe7b9b60f5a10470","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/README.md","hash":"f438a7daeb1845d95b333d34925899438a3abd6f","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.bower.json","hash":"9c0e38750e26eb9e83e2b5ab9e069b66f0965ce4","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/LICENSE","hash":"7713a1753ce88f2c7e6b054ecc8e4c786df76300","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/README.md","hash":"10e4cb3bb98f6b9806bedbb8dbbc00151bad4c70","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"9f18b8b9a35b301805387f18cafd982404a3c1f9","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"4d80ae239b597668665451a9515fba20543ac673","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/pace/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/README.md","hash":"ddcd2834d847f37b8ee77858bd03d31f70f55fb7","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pangu/LICENSE","hash":"0b609305c50cdc3f1ef5ec9e7d2e174f7f99a183","modified":1520441343000},{"_id":"themes/hexo-theme-next/source/lib/pangu/README.md","hash":"727e7a3d9467a2738aa1428668b1fe68bc45a6a2","modified":1520441343000},{"_id":"themes/hexo-theme-next/source/lib/three/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1519693103000},{"_id":"themes/hexo-theme-next/source/lib/three/README.md","hash":"6dd1906f6928a2d2dd5bfa12a28474e8cc650a77","modified":1519693103000},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1519693103000},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1519693103000},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1519693103000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1518722478000},{"_id":"themes/hexo-theme-next/.git/objects/00/6efecc9ee238d2d551f33ae78326731f34a2ba","hash":"40a37ed71936b1db8a3db8d00cfff69b40b0c463","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/a6/b143fe364675e0b3226dc5ebf24e9e2104584f","hash":"470d7b226d3a40a92e9b050ab6c06a29ff2de6c1","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/eb/f37fb00bc29134ce54dc75a1a548fe4e5dcd9b","hash":"57610cdfe90888f2aa9dbc3fea05d761ad80c9c0","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-29963be082383668717b8872646d33a2f1df7cee.idx","hash":"141107d2102d174c4525813f5a1b19c540587d5a","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1518722478000},{"_id":"themes/hexo-theme-next/.git/logs/refs/heads/master","hash":"8afb5a810a6646f1bca4116d197be183c844dfb5","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1518722478000},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/i18n","hash":"ac28bd03bc67e6764c5cf979960dd8e1338c036e","modified":1522340385000},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/master","hash":"c8e6cc11516b4bae45059b12a5027bf1c8dec7fe","modified":1522340385000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1518722478000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"97bb39756e85f5b27bba7f43270105ad01d736c9","modified":1522340429000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"52bc8ba71b91d954530b35dfc63b402a02b1321d","modified":1522340429000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"c08eb379718fa5af267fd8c5fe9b926003c0c7c7","modified":1522340429000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1522340429000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"f3aa863adf972569b72f2df6bc6a914e7daace99","modified":1522340429000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"2ccb9bdc309b7c1ef183a3dbb0a4621bec54a328","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"3cc7646583218d16925ced7b70865e63a901d4a7","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"ab7eb1d66e300264a225feb6f8bed55683c96cdf","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"cc961108b12ab97d9216606ceb1cd1cd31ab20f0","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"df16dc995eb9ad498df2edcfc3e20528fc9aa133","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0518b982e73308ba3fba6d511cc6cc1a84930c21","modified":1522340429000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1522340429000},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/config","hash":"f992bb0545945f9d0b31f7d131a0641420058a36","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1520441329000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/index","hash":"68c382e6ffd9c98e8872361969ac090c1897c097","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/packed-refs","hash":"6e2c4e71af7f142cc38f974c70328b7b85a30e91","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/config","hash":"38a5217786c605dd5378be8b7ac62fd93a7c8404","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1519692960000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/index","hash":"787e5924cd7b78015330ee0055071dc648ff62d1","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/packed-refs","hash":"60cebf9a6bcd88fd6b2132480cdef3ebf7a7dcf7","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/config","hash":"a69d81d3b555e2041616ba3396299bfdde7ac6f6","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1520441539000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/index","hash":"cf45e872f9e608a1579b1ee3ca4b5a01ae426679","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/packed-refs","hash":"a1338c173c56e17c1fb2c7a539ccd3a7eb0da164","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"f7b9796b5b50c2c267eae284fefb6456ba83d656","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.min.css","hash":"84adea69673c392c1d34a5a316e8e5960aa348b5","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.min.js","hash":"b9a1185936351c902a3dfa179a3fde1d81d0ae68","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/config","hash":"c43b1314943c0531c9a3eda1ea7842e7c9d4eb5b","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1520441653000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/index","hash":"a9e7bcecc1678a6460da7dd33f2472394485fa70","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/packed-refs","hash":"3fc39e985e9f6593f545758c828d9e0c2f1e4f02","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/config","hash":"5ec54f716b5769e0a9b2023e0b4545a3478f8ee2","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1519693389000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/index","hash":"dbb2bad642b28e0aba2e111da4c19db9845955e0","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/packed-refs","hash":"8969ad5f03b6da5b2cdc8b3e8be0deddf92ee1fd","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/config","hash":"48b8e34305ab1a3899705ec98de64390d70f2035","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1520441230000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/index","hash":"694eef1154ad9e5f1bcb797c15ad1bbc0a9833ce","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/packed-refs","hash":"2423e57d7b82d584aa814481ceeff0055b991cda","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1520441343000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/config","hash":"7d6a68f782a6832bed4c3385ac0a83f7a97946c4","modified":1520441343000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1520441339000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/index","hash":"db32d08165c58b72f416c637d248aafad5f70275","modified":1520441343000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/packed-refs","hash":"53b18dbcc9940bac320a19779536f55b17810585","modified":1520441343000},{"_id":"themes/hexo-theme-next/source/lib/pangu/dist/pangu.js","hash":"0804dc1b42abd7d405bd8f80af69a1a142a3e99a","modified":1520441343000},{"_id":"themes/hexo-theme-next/source/lib/pangu/dist/pangu.js.map","hash":"6a7c5927e3410ed4dfe14caa9fb2eb115d85e5e7","modified":1520441343000},{"_id":"themes/hexo-theme-next/source/lib/pangu/dist/pangu.min.js","hash":"da7cf96f57cee01041851ff273bda880d06ad061","modified":1520441343000},{"_id":"themes/hexo-theme-next/source/lib/pangu/dist/pangu.min.js.map","hash":"1aa0d935665a2f075bbc4b5f0a53bbfaece12c5b","modified":1520441343000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1519693103000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/config","hash":"0f73a2e95c545a74869566a72afe722d075b8331","modified":1519693103000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1519693095000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/index","hash":"5be9c1a601ce736a72dc6421069d37a1c552aad6","modified":1519693103000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/packed-refs","hash":"3e9cbba9f328f4378f17624962e553d1a6020e3f","modified":1519693103000},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1518722478000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-b0d9a99086f6d8be9cf8cfcb22019d9006031942.pack","hash":"8c6461c793940d49f32dc5e8de73d6889435eb5a","modified":1522340385000},{"_id":"themes/hexo-theme-next/source/images/banner.png","hash":"3fd1945053340102d1f712786077fff1483b7fd3","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/images/bg.png","hash":"c34366140a0250afbd73d62abdc58b1e00e10355","modified":1520565751000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1518722478000},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/i18n","hash":"9184bb38edbe7c2261f646facc104c71418e7a5e","modified":1522340385000},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/HEAD","hash":"f78d0d2660c9cd11d1a8f2eda71a595fe639ceb6","modified":1518722478000},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/master","hash":"0a32911204c6f46cec0aaae5e1dc6912d6d90d0f","modified":1522340385000},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"7dd247c8869fdefb5a007045d00f3ef8ceecf300","modified":1522340429000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/github-banner.styl","hash":"3f3d2a43d1a326bad25b633c8ec9ddd87867224c","modified":1522340429000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"835c1340571bd6c4ec263c482cf13283fb047e49","modified":1522340429000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"630be616447a982413030e561bbd3a80ac14b120","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"317c9ceda655e9dc373ce8e7b71d20b794fce9a4","modified":1522340429000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"eed81f136f9e52032e2fa901df4fb82a0f7f5872","modified":1522340429000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"1faeb3fca899df9d033e4e6ad9a4867cdce7ef9d","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9e05a2232faabb41bcebb51d545d897a76f077da","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"94d76e6da600a36d80e2470326ebb6b3be447ccb","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"d79c051abb8ab7b5ee5da29a28587704fd5108f5","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"f4d8144c22544bdb89787c14ab9d39578dae4b7c","modified":1522340429000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"acfdd76b1c90d2e384affb3d0006a39b524609d2","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"0b9c4140d7bc526553553552c3ed92da7c81e0b6","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1520441329000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1520441329000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1520441329000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1520441329000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1520441329000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1520441329000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1520441329000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1520441329000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1520441329000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1520441329000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1520441329000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1520441329000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/logs/HEAD","hash":"6f52b4079aa11a5c7b6b5423dc170cd627430a5c","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1519692960000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1519692960000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1519692960000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1519692960000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1519692960000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1519692960000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1519692960000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1519692960000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1519692960000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1519692960000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1519692960000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1519692960000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/logs/HEAD","hash":"f698e98d0c38aad730d494ce43ecd80e2fb45df4","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1520441539000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1520441539000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1520441539000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1520441539000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1520441539000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1520441539000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1520441539000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1520441539000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1520441539000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1520441539000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1520441539000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1520441539000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/logs/HEAD","hash":"b6e6a20a18abe12c167c8a81283e807acbc66f30","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"e72794707ef26fbdf5995532d91d95766173ecd4","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"e72794707ef26fbdf5995532d91d95766173ecd4","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1520441653000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1520441653000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1520441653000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1520441653000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1520441653000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1520441653000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1520441653000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1520441653000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1520441653000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1520441653000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1520441653000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1520441653000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/logs/HEAD","hash":"1b46a867dcecd2c07580b84e7d747bc55bc1a593","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1518722478000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1519693389000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1519693389000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1519693389000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1519693389000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1519693389000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1519693389000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1519693389000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1519693389000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1519693389000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1519693389000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1519693389000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1519693389000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/logs/HEAD","hash":"178c5a7453e2a334ef5b3fafeb6c5927e16fafe4","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1520441230000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1520441230000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1520441230000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1520441230000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1520441230000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1520441230000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1520441230000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1520441230000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1520441230000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1520441230000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1520441230000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1520441230000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/logs/HEAD","hash":"4aec2094bf423bb2b44f83c50bc0a0ffaee5dbe4","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1520441339000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1520441339000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1520441339000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1520441339000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1520441339000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1520441339000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1520441339000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1520441339000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1520441339000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1520441339000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1520441339000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1520441339000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/logs/HEAD","hash":"19dd875408eec021561131cd90d58a2576d0e4d6","modified":1520441343000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1519693095000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1519693095000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1519693095000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1519693095000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1519693095000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1519693095000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1519693095000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1519693095000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1519693095000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1519693095000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1519693095000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1519693095000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/logs/HEAD","hash":"5e13a17af695005551c9ef4d2cff0ff1fd4a0577","modified":1519693103000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.bower.json","hash":"9c0e38750e26eb9e83e2b5ab9e069b66f0965ce4","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/LICENSE","hash":"7713a1753ce88f2c7e6b054ecc8e4c786df76300","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/README.md","hash":"10e4cb3bb98f6b9806bedbb8dbbc00151bad4c70","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/README.md","hash":"ddcd2834d847f37b8ee77858bd03d31f70f55fb7","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1519693040000},{"_id":"themes/hexo-theme-next/.git/objects/67/ab1bf7d7b6873599f0eb8633333a6b4565adc9","hash":"9e23247a3573c74c9b6d0565cf80da06be791607","modified":1522340415000},{"_id":"themes/hexo-theme-next/.git/objects/cf/03ba1e4448f56267a321a896580067d8878570","hash":"a2757d14b5fab5b782380c999ebfe9375ccc972c","modified":1522340415000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/01/1e06c7aa90464f2b1d40aae05cf9d69e7667f1","hash":"e9888d4243b096c91da6cd30a348734b88c652e4","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/02/c49afbd642c373142ce96b321820b2e31136dc","hash":"1e84c7eb747dd99355ec99a190aca59f10f38a61","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/14/222c5cf0874b3d006fcab6244c9e34c13cae11","hash":"32841604a28018f255ed74be25a3fed374729561","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/1b/d905fca417b7dc6e1091fbf5dcb99a8e3f44a3","hash":"f904eb01291a0c87f34747183435918e4696a960","modified":1520441331000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/1b/2d9ec86c12358ba35f7db597cccb93c4977154","hash":"7e90faafec65ae60455922b819ad373460c708c4","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/1a/dff38de35c5dcd90b1c9abb363d60cedc677c3","hash":"e3bb99642f5f820b6e41c5a2dbeaa5a5e7629cf9","modified":1520441331000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/29/c753eafb74ec88615f947d25acb4659340747d","hash":"5d0cc15f306cc2c34a9107c6aeb3576b90343956","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/2c/e2f46ca183a46f1b06517b1a2a8f96bcaab1b8","hash":"e9a8ddf8b0af2f52063c05075df107b7aacc0d91","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/47/b5af07d4d3fd429c6f4b405ff9acd5f4ee7975","hash":"0e69266d563abb092c5b40035331345f771021c2","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/57/3ad3f32f0689138c4d6f7007621e0cf2bf23ea","hash":"fdb2d9e977cbbd0b44059cf61d5baad92f9df016","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/4b/5f7d0162b051571cc9d87ba674ef913a7c5a29","hash":"8738e2f3453a3192d07fb0267d9f9194b910bee7","modified":1520441331000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/5f/7d3c8d8a6340f1efccc4b3eac842788c1628ec","hash":"af2accb69f344e9cfc870ca7dbe8d25c9e103318","modified":1520441331000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1520441331000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/6c/cc84f8ea3543926a1a1e78b5c50a56c0dc8025","hash":"8b4b97a1e3e0089940bc797e8ee3d6eca9d09d28","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/72/c270d58afaf026bd65fea390e277b6d63aa22f","hash":"2ebc915da4f2146762025c321bbd54fca1e7b9eb","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/75/976c6dc20178b5d24b07ba76700a73205a9b52","hash":"532198fa938fafd2b53dd45193e65a7c8c0f8c84","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/77/8fba47fc8f68467fb45002edcd717a71a4ea18","hash":"896ae007894c3f537f1723674f06740489bbf73c","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/7d/713d14ed6c435cc41223736376f9e41f8001ed","hash":"fe9cd361e4ab229e32f8a0303b108a5386d09429","modified":1520441331000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/84/5b1bc2898c9924eff3e1b0bd92b6178b4908db","hash":"7c8453a9632d2e4b2720c4a7d50b289936699d1c","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/8a/7ee041ca7a999ccd5f35177f9f806232b93738","hash":"627b29c5fa02783ab8130433036db571143e564f","modified":1520441331000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/9b/afab6ef59ce585cbc456d03770e167d2a3c9e2","hash":"32c4243f56b9334f340559d9e7bb7140aadb5959","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/a3/8e5bd4193fa1f52aa27eb2a7f32cf103d20a57","hash":"d8897f2030f55a50c5dcea877dd5b0f9a3a977d5","modified":1520441331000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/a5/57ad3eeef222d2387e98f4418b0438655a2765","hash":"cdaa150ec84c29d84750ef44aa586a600f901d63","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/aa/9916f898bfa69c88a84d6f0e99a549c8831d07","hash":"74c546dc2710eba88138d6a12df1d3e05e03ae35","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/ad/cf15c7f3d6cb69da502326740997e4a0e3bae3","hash":"0d53088c3633db9d45f69b6c12fd3f2cd4d53062","modified":1520441331000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/af/46be34010c865593eec22d79552334f3fac3f1","hash":"5d8888376467232bd9a13f99c8c76a386a5505e5","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/b3/7c278058df61bbd959c9f775f80f3a24b49a16","hash":"3429c10084546b79746b6b0e9f3e4b29fa6443e4","modified":1520441331000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/c3/a4e2326f7650fde4756dadf7c67484cf14aa4b","hash":"4b0e77607c87ea06fe9b612b8ee7cd99f87be559","modified":1520441331000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/cb/cf355438829a21ee86cb3f116a68daab599b5d","hash":"163216cd6c2b363b3bbdf32da39142dbd4ca690b","modified":1520441331000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/e1/f0b9c30d5426977a4685d63a0cef6fd6abdd89","hash":"103eeacd4a6750c0e7313b84a571373fa8369579","modified":1520441331000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/d3/6ccff12388f072c23857d33c6abd1f57b3dc86","hash":"a8d4bddb3c913051763dc7d2d3cfc243ef181701","modified":1520441331000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/e6/02654d32318f5c7135c521ee586f93235452a7","hash":"c6dc38516b0cefe68f0d466f43afffc9d31c2428","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/e2/d2e185fbd7d888a3658fe97dde4ba595290caf","hash":"4edae1bf781e76b61bdc43395a76574c0d20107b","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/e7/237bfe33deeeec901fb5f0a60bac33cbb446d7","hash":"6589766fc012cfd184f634e3747d944efe405797","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/f0/a838932f748272263bc294b178b9a3297a1295","hash":"77694c0d730fa2582dc473d3d3ee782156f4cf74","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/refs/heads/master","hash":"ee343043f53b3ea48b689ba9c558932a01928d24","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/2a/f622a4d7df40a2708946e91d6d7a0df1dc468c","hash":"3da7207fb18d361b83c56f4e35f67e9e945abd82","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/45/9262fe92f0115707bf8d8764f1886bc5e7c9e0","hash":"36040483f8af76775b7e4b6d87cec53729625399","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/5a/69ce9c2e4a1a34f6063ae9a121af1555669c69","hash":"dad25cc0f450e2827b5676975f4a70636e3fd2c8","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/69/39233ece53c9bdb9a1faf3271ed5768b034aad","hash":"5a770d418c1bb7b0f031f4d5416530002032fcf3","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/75/de2b8fa62d52690de32c351c63ab6446104ed5","hash":"52d10122d633ce4895a0690c5955e1b356f5a391","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/86/1c9f4241fe0eb6af02ad770d5ce04c1f68972b","hash":"7005c3e36015a4af30d4b91bd5a849a7861a073e","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/90/f6477118d05f5f96ce0a63c6f18b7b2baea200","hash":"385f58e92981f27fa54eb52bf60424e87c70a9d8","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/98/67d1132e0e50bbb7df754a63358d70741df6d5","hash":"3cb710a1faee73c08036f5e2df7df3a7ce29e9dd","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/aa/da83ad9aa55faa2b34ede31b1d41e16966f80b","hash":"b304541ab95b7969a63ba2ec4f60f5391bd8bb44","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/d4/95d28a8fab74d23908f6ccef9e4db2625fbacb","hash":"59e6067b0a806deee7bda6460b36c0f63e2e1db5","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/refs/heads/master","hash":"5442226ab36d787824e89f50241336839b376133","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/objects/00/c03f6be011e8878608eec12f68caf42b73f38e","hash":"8516bd35bc8f9223e13de5877778c8d14d49d6db","modified":1520441545000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/objects/19/3567a3107003507fafacd255c349857e417926","hash":"ef5eab75e8c6998cb223edb4eb8a26c4cfc9415c","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/objects/36/9bab09306448a2970d378b59bb21c059edad63","hash":"877e0c15623d0d6ff8f09bb627fc60a489f3c105","modified":1520441545000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/objects/54/0a7b36ee26decfc3f0f34bf73bc85c48899128","hash":"2e5447a9dd879d71368e9dddd34d93849d00b934","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/objects/78/068b93f813cecbbd50c8247de547035009d512","hash":"4bc2bee779bd7e3cca13ee34801cf1e12585e5ae","modified":1520441545000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/objects/89/9d7a75b543fbed2a785f67d995bc77e06eb2e9","hash":"5651e2b80703225f642625c0fb2646543096d2cf","modified":1520441545000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/objects/7b/15d3cb03fda86241f8b2b335f04e9b9de0e1c4","hash":"d1fe3bd82c90f7d93874798a8ee8ebf1391d7207","modified":1520441545000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/objects/92/4369c371444afb18fb86309229f5b4c24c6cf4","hash":"9eb6fa8ff9081e6650f6bee350d21567df105737","modified":1520441545000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/objects/94/a9ed024d3859793618152ea559a168bbcbb5e2","hash":"1c2d080a86f03eb960e112a94910a5115addf57a","modified":1520441545000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/objects/aa/654e17af8c354994f706c4e33bba6b5b70caeb","hash":"22b1bdf0b0974bf5e9022953ac26066056c235ff","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/objects/ac/97c2cc9f61c52753abe4174a4a74b2064e5af0","hash":"272e74036b0612de83d9d0aa9604d3edf888b249","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/objects/bd/e1f741357b44b49290d43fdd193125202fef81","hash":"9beefc75cc0c37d04e98dd13b51ad85df40e77b9","modified":1520441545000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/objects/c2/fc5def1b6c38369e5e8b849adb956bd79b549e","hash":"27f03b9616e615b2724bac0fa4507d152697f3f1","modified":1520441545000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/objects/f6/bb280a0b2c68256a8e906b35c6976c80c1b3be","hash":"5daaee11fc384fbe0f02c7123036c954ee9a73fd","modified":1520441545000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/refs/heads/master","hash":"01fe0b1cf911f9e2e30415be1c967b1eaae2ee38","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/objects/0d/dbe7d4eb11134cfb5fa14b3e190bd9fb3ed82b","hash":"95af863cce08aad6f65d6932af9ef732712740f7","modified":1520441655000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/objects/18/e1abd47f6274ffd7ed82dc00decd1c00c6e323","hash":"5a569722fa4f206672376b71c3e1c16f643e64f7","modified":1520441655000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/objects/3a/f4f9d6f14e39b48e9c449de1c660e245a2bc27","hash":"bf9503b3af60d018a7b9ad9e177b424b14a970e5","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/objects/61/c39a632ceeb8d42b91481c0b54970cf035267a","hash":"dfb032f767e71a01cf332cfec0eca764ae7073d6","modified":1520441655000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1520441655000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/objects/86/c3d4aeba88b97f37cd9f6b70bf2d57a7a21826","hash":"fff2a0379207fb85c1508fc1c63bed957c294202","modified":1520441655000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/objects/9f/d0fb1402a4c303aebe2f19463f7e6a1e220cd5","hash":"b830d61384e84ba93984d0db1609bd2d4ad81300","modified":1520441655000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/objects/b1/be81d4f11e36095d68afc4502fdb16aaf944be","hash":"3a5ba6f240fb736ae697059d327f635fbf1bec20","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/objects/b2/5dad1c30c8b4830293330b60d39c75f7e3886e","hash":"8206eb6b273e8e6ac85535f0f7a645d3c3394885","modified":1520441655000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/objects/cf/0642795f0b53282dac0e2978ae6d1b03b365b5","hash":"7c8b1e12e4d34a5e3295e98f25a3529a7f33479e","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/objects/cf/abed7d73eee3176b90b91f3dd656666d8c639d","hash":"bda6cd7c2f9d7b568498f96a3d4248563034eabe","modified":1520441655000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/objects/ef/3f987c6490745eedd60367aa3c25413f69879d","hash":"b9bdc7896f4e609871226f46720d5e425e0f65b5","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/refs/heads/master","hash":"f3112ca048dc1b13166ee07ff877ef05c4d65c81","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/objects/08/d4d5ef639d45881e2c31089252871109b3cb0e","hash":"e1d5e486a1d20a1cb219a6998fcb9549f84ca0a7","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/objects/0d/fe01dbfc3817db9740f7d9593e6c0d0ce4bcfe","hash":"40d7c408638a545f5d206dacc7a666562ae863b6","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/objects/1e/6843316b3b3be83c6296e38edbcf7a1a389eaa","hash":"b85a7e69e5655a3e37e9fc6d0f7e2bacdbff58fc","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/objects/3a/9ca03dafb2e0a3ee0132e998e1f95146a1187b","hash":"b2a3ed46595b48486b9ba48cc3718cb981f62533","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/objects/49/94fde5a528c6dcf575d1300c9feb7a790580dd","hash":"849400735df951aba8ed44ba0a66b4d7c13c09a8","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/objects/92/9d3c446aba8ac3a7854bca3fa99071ec0f1b0a","hash":"324298d9a7b50c2a0640053f01aeaa53e8d1a7ca","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/objects/99/99f3981a0f624ec98a63f2bef6b59ab5a4a130","hash":"e3318de2933bd40a6b707e06d63d97a72d2a41b6","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/objects/a0/bb6371002f36c275d90ef0a78f4e951c1b36a4","hash":"e73b2d57d9528243fa4163d4078ff74f274aa159","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/objects/b8/7cfcee7b6c989840000d9f5e3bfe75287e7450","hash":"51ead0dc580f672ab9fab6ae4b4b49918b813574","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/objects/cb/5cc9434249607fc442175e3e6c31f3a8cb7a04","hash":"ee1bd67de46a7e6c3a47a1abe0487a2b741d6be4","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/refs/heads/master","hash":"9ef09061a35e49941bd5089e9dbdb63a020885b9","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/00/13175fe71888324d9142744034e8296501174a","hash":"0ad0e50f7fe91fe14491924aa4b1e2e8f060a5cd","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/1c/159365320ef5dde63906912f3df067376b40d0","hash":"1dd6b7373c3f9c67e34aa319c9c08fd0f667156a","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/23/4f9b3e93f06a85cb2ec01acc872ccdc2bec7cb","hash":"63f8640eceff35a80175a102fcbd8789e690cfaa","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/35/a749d823ad0aae6111a76dc501a1170478f376","hash":"e757129fb6bca3170b62b05f3e850e4b55f3ae88","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/3e/dcd352d2a1a60dbb6a43e7e9f00bab8b55791a","hash":"725bf5094855cd943dd1cd351906fb1ebec1d861","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/41/28e69301ad36a283c0fc523f3aef89644d2467","hash":"d8b985cf431fbdc5b4fa3be89e27db7a3437c920","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/49/0db22b657dd64430d003fe2831905a54858b22","hash":"43694656c4c331cfa3667afca630bd486ac0d0fe","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/4d/fbb499a4f7b2f26a535c335cd66c966ff8b261","hash":"14e4cdcc137045c7efed32f796273d40c9fcef87","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/53/3d55db0342c2b011ac05703c3b42e88a25c1ed","hash":"c48454760d2e04602a5499188b33d38839c58aee","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/60/0378418401f2b0e7c58407a7bbc5a5196cfa51","hash":"20489d796247dda758599f40cbfcf14d194ef64a","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/82/8dcba3c8a21de08d1eb38f2eee453b51543188","hash":"629aad2ee2e564790e78cd46e99ad396544960ab","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/84/a17ac7b4fe9cea559de91f00af88f810bff7f1","hash":"b41b6d3cbccd75b711f0523bba1c26bf19b0a862","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/8b/b4535a79cc15127f8906b24c4e0bb4a38a5947","hash":"9c2d65a63f18929b09f3592dda064f24309ff98b","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/97/1e8a1f2ad6d45f693980c106af0aead9d1c215","hash":"e45f0963920a53a57f6b53d178e5b05a8e315189","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/9b/3058068409f2282607ebb91717d7a6a1406230","hash":"651c5857021e11dc397df86dbe0f01e6c7dc7f16","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/a6/dbd9c99e726f621e2bdcd3c6fe2795a5d4272d","hash":"25350dd31f504af7206610ced355d162aabda8dd","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/aa/813c5a6398600e01b740696cd889eb3becad84","hash":"c62a1513ca820dc59fe1cd6d9ec16c92e0e2fbf0","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/c0/05c71f1a000d8187df58083d215c962d7f5505","hash":"dffd212ca2ec705233fabe82a6f483d6be4b151d","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/de/79ab6539ac3702aaac64b879d95e6575f4eefa","hash":"0046fefd52ed4679e0fee757cc91ced94e3ddc12","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/f3/0e0a99bb016267bde55537dd47b3657ae59544","hash":"8bf0bc17a6111b6a82981073133f33cc8e815c41","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/refs/heads/master","hash":"3190f62cf3c4f9eccb1e54c8f7289ed7e6955767","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/objects/08/52519b95abd33154998c5680271aaf67f8e106","hash":"f8c789e5cf42a5dba5ad7fa380bc45ce80df80d7","modified":1520441342000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/objects/37/180cbe56dc95fe1a9e0b3de00b61b11aff3e7f","hash":"193cabbb4af1308bec54a5b99b35385ca13ea5ac","modified":1520441342000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/objects/6d/0d46c3fbd28f9537143108712f9941ab8363f8","hash":"07befbdc872ee282846ca782852ef7163ad7f385","modified":1520441342000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/objects/7f/afb14e3df3d5494e74aa96d5b25fe0dee7c787","hash":"d9a7aa765fcef890d16c2d65f853a01ab9ced476","modified":1520441342000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/objects/e8/f4305b379951c7f220930e72e9c621fb3469ef","hash":"6989cfa9149252690b2897e5f8a28675e257e822","modified":1520441342000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/objects/ee/34b05fd5e668a48ec9108c61a9cb7fbfba3462","hash":"07e1e94f3ffcbca994bc631830665fc56517899d","modified":1520441342000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/objects/f4/f5a021a51f1d1793884318fd2f5a5498169a6b","hash":"c93b4a05458b1d11e943e9eb88a894a37a3b2dfe","modified":1520441342000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/objects/f7/bd3c723d5b2947d4d0b7c0e5ce118054f22c2b","hash":"b26d8ef5455e3b929a64166af6bb4f89fa4d351e","modified":1520441342000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/objects/fa/62fee9eeddb232bd001f58f0ebd30e947db226","hash":"2e20bce6f6a81710e6e067681944a9ca13a13c35","modified":1520441342000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/refs/heads/master","hash":"20ecc53983248064b3342e28a181958762f8306b","modified":1520441343000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/09/3d290f60c3b467d503633531d7ce7cdd42dd75","hash":"ab09bc8bfc9079e408dc6facc1bfd9aa5d6bdef9","modified":1519693103000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/1b/3d1cd16f3e6ce99ea92c7e9c0b78ee30a8c346","hash":"16569e1c4912fd762f32b13de839d05b9c319e54","modified":1519693100000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/21/77c1416c8e91ed918b6d3cf7f333d99d659a24","hash":"7330016805a652c2153bfcfbdd4c3c50e5b5a642","modified":1519693103000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/3c/6fef4314903036253335d4550346f6b927c721","hash":"1ee4e7d110363dc5e2676b675c7f7030731cf3a5","modified":1519693100000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/67/6b9f6189356d0201fd72dd6f98db19628a2ff5","hash":"250795ea0af79524945e66b28f233eb8bd9ee7dd","modified":1519693100000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1519693100000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/79/ae5f64ea4be7e1a108b2f1fc8afbca7bfa1fba","hash":"4e28517d80599b1a6051b1d3f657654aca6333b9","modified":1519693100000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/7f/6a7ddb8a04644dc980d83c9878b4621acf82f5","hash":"c517caf5d47c9f1eba2ced6800dab03e2e29a130","modified":1519693100000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/82/69b6fd29a514f9bd746497b298176228bd4061","hash":"cf527c08b5d88d72939a61446d128eba2fb94be2","modified":1519693100000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/89/b7ae569312ae577534d7b58647232fb48bfb08","hash":"a265c0a7e24267bd82d11a48f091d2241edc0080","modified":1519693100000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/d0/32ce3fe05be57b72cc925f86149497229cda13","hash":"59e5036e95b496852ad3b918eac2e4b28a5951f2","modified":1519693103000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/e0/52c7542703df4969a95779bd4dc58b568bcb5e","hash":"b1ccf1650011f74939f07233834bdff21baf4952","modified":1519693100000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/e5/6e96bd99ebe3f0dc8f02c979703c3666f6dd9e","hash":"b971fcaae8424ea1b507379afdcdff74359a1525","modified":1519693103000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/refs/heads/master","hash":"f17437f700f7d1a2476f16b375d982f5cd36ddc2","modified":1519693103000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/config","hash":"a69d81d3b555e2041616ba3396299bfdde7ac6f6","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1519693029000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/index","hash":"e04547f8650b968f9ae7af2012b794f1b52f1f6c","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/packed-refs","hash":"a1338c173c56e17c1fb2c7a539ccd3a7eb0da164","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/source/jquery.fancybox.css","hash":"f7b9796b5b50c2c267eae284fefb6456ba83d656","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/source/jquery.fancybox.min.css","hash":"84adea69673c392c1d34a5a316e8e5960aa348b5","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/source/jquery.fancybox.min.js","hash":"b9a1185936351c902a3dfa179a3fde1d81d0ae68","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/config","hash":"48b8e34305ab1a3899705ec98de64390d70f2035","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1519693037000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/index","hash":"3b89f7383e83482a638e0180db8756e25514f53f","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/packed-refs","hash":"2423e57d7b82d584aa814481ceeff0055b991cda","modified":1519693040000},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1519693103000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/logs/refs/heads/master","hash":"6f52b4079aa11a5c7b6b5423dc170cd627430a5c","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/logs/refs/heads/master","hash":"f698e98d0c38aad730d494ce43ecd80e2fb45df4","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/logs/refs/heads/master","hash":"b6e6a20a18abe12c167c8a81283e807acbc66f30","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/logs/refs/heads/master","hash":"1b46a867dcecd2c07580b84e7d747bc55bc1a593","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/logs/refs/heads/master","hash":"178c5a7453e2a334ef5b3fafeb6c5927e16fafe4","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/logs/refs/heads/master","hash":"4aec2094bf423bb2b44f83c50bc0a0ffaee5dbe4","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/logs/refs/heads/master","hash":"19dd875408eec021561131cd90d58a2576d0e4d6","modified":1520441343000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1520441343000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/logs/refs/heads/master","hash":"5e13a17af695005551c9ef4d2cff0ff1fd4a0577","modified":1519693103000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/76/310b5a7e93e66e7d98aaab2960d6354b2288c5","hash":"84de52193b47c83d01eb8800b063ccd83ad42cf9","modified":1519693103000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1519693103000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1519693029000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1519693029000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1519693029000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1519693029000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1519693029000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1519693029000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1519693029000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1519693029000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1519693029000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1519693029000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1519693029000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1519693029000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/logs/HEAD","hash":"466430934b4dd854baf1370e9932a9acf987011a","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"e72794707ef26fbdf5995532d91d95766173ecd4","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/source/jquery.fancybox.js","hash":"e72794707ef26fbdf5995532d91d95766173ecd4","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1519693037000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1519693037000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1519693037000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1519693037000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1519693037000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1519693037000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1519693037000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1519693037000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1519693037000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1519693037000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1519693037000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1519693037000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/logs/HEAD","hash":"bd8642441efa10f201d831cb8bd9c89d90cc2ece","modified":1519693040000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/logs/refs/remotes/origin/HEAD","hash":"6f52b4079aa11a5c7b6b5423dc170cd627430a5c","modified":1520441332000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/logs/refs/remotes/origin/HEAD","hash":"f698e98d0c38aad730d494ce43ecd80e2fb45df4","modified":1519692966000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.git/logs/refs/remotes/origin/HEAD","hash":"b6e6a20a18abe12c167c8a81283e807acbc66f30","modified":1520441547000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.git/logs/refs/remotes/origin/HEAD","hash":"1b46a867dcecd2c07580b84e7d747bc55bc1a593","modified":1520441656000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.git/logs/refs/remotes/origin/HEAD","hash":"178c5a7453e2a334ef5b3fafeb6c5927e16fafe4","modified":1519693394000},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/logs/refs/remotes/origin/HEAD","hash":"4aec2094bf423bb2b44f83c50bc0a0ffaee5dbe4","modified":1520441234000},{"_id":"themes/hexo-theme-next/source/lib/pangu/.git/logs/refs/remotes/origin/HEAD","hash":"19dd875408eec021561131cd90d58a2576d0e4d6","modified":1520441343000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/logs/refs/remotes/origin/HEAD","hash":"5e13a17af695005551c9ef4d2cff0ff1fd4a0577","modified":1519693103000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/objects/19/3567a3107003507fafacd255c349857e417926","hash":"ef5eab75e8c6998cb223edb4eb8a26c4cfc9415c","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/objects/00/c03f6be011e8878608eec12f68caf42b73f38e","hash":"8516bd35bc8f9223e13de5877778c8d14d49d6db","modified":1519693033000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/objects/36/9bab09306448a2970d378b59bb21c059edad63","hash":"877e0c15623d0d6ff8f09bb627fc60a489f3c105","modified":1519693033000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/objects/54/0a7b36ee26decfc3f0f34bf73bc85c48899128","hash":"2e5447a9dd879d71368e9dddd34d93849d00b934","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/objects/78/068b93f813cecbbd50c8247de547035009d512","hash":"4bc2bee779bd7e3cca13ee34801cf1e12585e5ae","modified":1519693033000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/objects/7b/15d3cb03fda86241f8b2b335f04e9b9de0e1c4","hash":"d1fe3bd82c90f7d93874798a8ee8ebf1391d7207","modified":1519693033000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/objects/89/9d7a75b543fbed2a785f67d995bc77e06eb2e9","hash":"5651e2b80703225f642625c0fb2646543096d2cf","modified":1519693033000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/objects/92/4369c371444afb18fb86309229f5b4c24c6cf4","hash":"9eb6fa8ff9081e6650f6bee350d21567df105737","modified":1519693033000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/objects/94/a9ed024d3859793618152ea559a168bbcbb5e2","hash":"1c2d080a86f03eb960e112a94910a5115addf57a","modified":1519693033000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/objects/aa/654e17af8c354994f706c4e33bba6b5b70caeb","hash":"22b1bdf0b0974bf5e9022953ac26066056c235ff","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/objects/ac/97c2cc9f61c52753abe4174a4a74b2064e5af0","hash":"272e74036b0612de83d9d0aa9604d3edf888b249","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/objects/bd/e1f741357b44b49290d43fdd193125202fef81","hash":"9beefc75cc0c37d04e98dd13b51ad85df40e77b9","modified":1519693033000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/objects/c2/fc5def1b6c38369e5e8b849adb956bd79b549e","hash":"27f03b9616e615b2724bac0fa4507d152697f3f1","modified":1519693033000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/objects/f6/bb280a0b2c68256a8e906b35c6976c80c1b3be","hash":"5daaee11fc384fbe0f02c7123036c954ee9a73fd","modified":1519693033000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/refs/heads/master","hash":"01fe0b1cf911f9e2e30415be1c967b1eaae2ee38","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/00/13175fe71888324d9142744034e8296501174a","hash":"0ad0e50f7fe91fe14491924aa4b1e2e8f060a5cd","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/1c/159365320ef5dde63906912f3df067376b40d0","hash":"1dd6b7373c3f9c67e34aa319c9c08fd0f667156a","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/23/4f9b3e93f06a85cb2ec01acc872ccdc2bec7cb","hash":"63f8640eceff35a80175a102fcbd8789e690cfaa","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/35/a749d823ad0aae6111a76dc501a1170478f376","hash":"e757129fb6bca3170b62b05f3e850e4b55f3ae88","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/3e/dcd352d2a1a60dbb6a43e7e9f00bab8b55791a","hash":"725bf5094855cd943dd1cd351906fb1ebec1d861","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/41/28e69301ad36a283c0fc523f3aef89644d2467","hash":"d8b985cf431fbdc5b4fa3be89e27db7a3437c920","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/49/0db22b657dd64430d003fe2831905a54858b22","hash":"43694656c4c331cfa3667afca630bd486ac0d0fe","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/4d/fbb499a4f7b2f26a535c335cd66c966ff8b261","hash":"14e4cdcc137045c7efed32f796273d40c9fcef87","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/53/3d55db0342c2b011ac05703c3b42e88a25c1ed","hash":"c48454760d2e04602a5499188b33d38839c58aee","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/60/0378418401f2b0e7c58407a7bbc5a5196cfa51","hash":"20489d796247dda758599f40cbfcf14d194ef64a","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/82/8dcba3c8a21de08d1eb38f2eee453b51543188","hash":"629aad2ee2e564790e78cd46e99ad396544960ab","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/84/a17ac7b4fe9cea559de91f00af88f810bff7f1","hash":"b41b6d3cbccd75b711f0523bba1c26bf19b0a862","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/8b/b4535a79cc15127f8906b24c4e0bb4a38a5947","hash":"9c2d65a63f18929b09f3592dda064f24309ff98b","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/97/1e8a1f2ad6d45f693980c106af0aead9d1c215","hash":"e45f0963920a53a57f6b53d178e5b05a8e315189","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/9b/3058068409f2282607ebb91717d7a6a1406230","hash":"651c5857021e11dc397df86dbe0f01e6c7dc7f16","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/a6/dbd9c99e726f621e2bdcd3c6fe2795a5d4272d","hash":"25350dd31f504af7206610ced355d162aabda8dd","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/aa/813c5a6398600e01b740696cd889eb3becad84","hash":"c62a1513ca820dc59fe1cd6d9ec16c92e0e2fbf0","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/c0/05c71f1a000d8187df58083d215c962d7f5505","hash":"dffd212ca2ec705233fabe82a6f483d6be4b151d","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/de/79ab6539ac3702aaac64b879d95e6575f4eefa","hash":"0046fefd52ed4679e0fee757cc91ced94e3ddc12","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/objects/f3/0e0a99bb016267bde55537dd47b3657ae59544","hash":"8bf0bc17a6111b6a82981073133f33cc8e815c41","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/refs/heads/master","hash":"3190f62cf3c4f9eccb1e54c8f7289ed7e6955767","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/logs/refs/heads/master","hash":"466430934b4dd854baf1370e9932a9acf987011a","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/logs/refs/heads/master","hash":"bd8642441efa10f201d831cb8bd9c89d90cc2ece","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1519693040000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/fancybox/.git/logs/refs/remotes/origin/HEAD","hash":"466430934b4dd854baf1370e9932a9acf987011a","modified":1519693034000},{"_id":"themes/hexo-theme-next/themes/next-reload/source/lib/pace/.git/logs/refs/remotes/origin/HEAD","hash":"bd8642441efa10f201d831cb8bd9c89d90cc2ece","modified":1519693040000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-29963be082383668717b8872646d33a2f1df7cee.pack","hash":"05d15841ea24487a617b2cbdd404ee31bf4645d1","modified":1518722478000},{"_id":"public/baidusitemap.xml","hash":"b0e836a88795bdb407a73b090100b5e333ec20a1","modified":1540439897929},{"_id":"public/search.xml","hash":"44ac06e74e47243f61fdc256b51c6fba32ef0376","modified":1540439897931},{"_id":"public/sitemap.xml","hash":"2184cdfc37a90c64577ec94fd94ff42e58e080af","modified":1540439898105},{"_id":"public/resume.html","hash":"c60d43324ce6eb7e70073e76ce316ba642c0f744","modified":1540439898741},{"_id":"public/关于20180313.html","hash":"4215e3f1577f5327a8653773388a714c4b45b2ae","modified":1540439898742},{"_id":"public/tags/index.html","hash":"58afd9eef5b7641d62876adacd5f12195ee8c665","modified":1540439898743},{"_id":"public/x51NOD刷题x1182-完美字符串.html","hash":"0fa53c364363b35dc83054c84724cd5db3ea0a53","modified":1540439898743},{"_id":"public/Cx调用迅雷、IDM下载方法汇总.html","hash":"68262ca187e512d68ba5bcf574684a2c48630d3d","modified":1540439898743},{"_id":"public/如何在IIS中托管Asp.Net-Core应用.html","hash":"9706eda89b01fdb4d18223514f3ff60ff6aeadd4","modified":1540439898743},{"_id":"public/1283-最小周长.html","hash":"612d74b13f61f39a98dafdaa9f4370055018f919","modified":1540439898743},{"_id":"public/讯飞语音识别Demo.html","hash":"553240b58a33cc2e6cde8fa658d95bc2a24b9258","modified":1540439898743},{"_id":"public/Prim算法.html","hash":"f85b1426172513b2e7c509dbd77f2d4244e9f9b7","modified":1540439898743},{"_id":"public/x51NOD刷题x1284-2-3-5-7的倍数.html","hash":"72f20a8bf1bdb5b12fe69a30ccd1febcbd4b14d0","modified":1540439898743},{"_id":"public/x51NOD刷题x1289-大鱼吃小鱼.html","hash":"fa7e93602ef3bccd2e85fe5d64d8263197385332","modified":1540439898743},{"_id":"public/x51NOD刷题x1305-Pairwise-Sum-and-Divide.html","hash":"d5e4e06f583cc2ed4d9e635376d73cf3cf919689","modified":1540439898743},{"_id":"public/x51NOD刷题x1344-走格子.html","hash":"9f5b2c078c3384a4595dff5e69827936db9b2196","modified":1540439898743},{"_id":"public/x51NOD刷题x1381 硬币游戏.html","hash":"4fac4244d5001056bf5a700b1060911c6df0e947","modified":1540439898743},{"_id":"public/x51NOD刷题x1347 旋转字符串.html","hash":"fe594ae35deca9126693169935dfb741466bbce6","modified":1540439898744},{"_id":"public/x51NOD刷题x2020 排序相减.html","hash":"c27b77d9b763056ca31b72129502745d714612e5","modified":1540439898744},{"_id":"public/百度语音测试.html","hash":"f1e19fb6001a515dc5292f2be85cfdf3fcb51171","modified":1540439898744},{"_id":"public/查看当前IP和归属地的方法.html","hash":"ae34faefdea68090ec537998aa87c63d08108556","modified":1540439898744},{"_id":"public/使用GeoIP2获取IP的地理位置信息.html","hash":"4454041cf4eb734398f55d01e9320cdaf71c876e","modified":1540439898744},{"_id":"public/Cx读取CPU序列号、硬盘ID、网卡MAC地址，生成机器码.html","hash":"56c68984ec0e253636c9ef83e2bc84e5ab992703","modified":1540439898744},{"_id":"public/x单例x使用同步基元变量来检测程序是否已运行.html","hash":"00fa05005ee88b0d93f3c31e845cd7f457e78e7a","modified":1540439898744},{"_id":"public/使用委托解决方法的跨线程调用问题.html","hash":"fe334407182ea4370d64e87b60bd887c6505e9b0","modified":1540439898744},{"_id":"public/Rtmp-Hls直播、点播服务器部署与配置.html","hash":"2b2149df93f159d6f8631057dab0ba6cceccbad1","modified":1540439898744},{"_id":"public/关于Cx调用广州医保HG_Interface.dll调用的一些总结（外部组件异常）.html","hash":"4f00691c7249f83bac5f535cf27bb363ca11a806","modified":1540439898744},{"_id":"public/模块化InnoSetup依赖项安装.html","hash":"cfd0b4e7dd459bb526c9dc468bf49d7e6fb8c0d4","modified":1540439898744},{"_id":"public/x新手学Javax使用beanUtils控制javabean.html","hash":"99f4a643e1964eff9756c526be30d7ad358e0b64","modified":1540439898744},{"_id":"public/x迷宫中的算法实践x迷宫生成算法——递归分割算法.html","hash":"e86530077f00fd557dc7707bd18f36341b97d67f","modified":1540439898744},{"_id":"public/x新手学Javax使用内省(Introspector)操作JavaBean属性.html","hash":"bced22d2a11c696af4b861daf34fd20703a478fb","modified":1540439898744},{"_id":"public/x新手学Javax反射学习笔记.html","hash":"52d1583c5ef24db772b15ade11b7ed28ab291697","modified":1540439898744},{"_id":"public/缺少google-api密钥,因此chromium的部分功能将无法使用”的解决办法.html","hash":"74d278455bb5450d07a97a1abec81a2ea30891bd","modified":1540439898744},{"_id":"public/redhat7.3配置163-yum源.html","hash":"8eeb65c1a50ef87b7210556e114cd1ff44070e74","modified":1540439898745},{"_id":"public/Net-Core-2-0-EFCore-MySQL-System-TypeLoadException-occurred-问题解决.html","hash":"4fe852678603e285de405418a01cae69a12d8622","modified":1540439898745},{"_id":"public/MVC学习笔记索引帖.html","hash":"4d21d7d1acf0f4969d220617db4414b76f86314b","modified":1540439898745},{"_id":"public/x爬虫学习笔记x基于Bloom-Filter的url去重模块UrlSeen.html","hash":"ba868cfc353d934452b07ad19561e6615289c30b","modified":1540439898745},{"_id":"public/安装DotNetCore.1.0.1-VS2015Tools.Preview2.0.2出现0x80072f8a未指定的错误.html","hash":"8279bfdf004ee26ac23026ef88edc58ca8481050","modified":1540439898745},{"_id":"public/x迷宫中的算法实践x迷宫生成算法——Prim算法.html","hash":"927fea00aec8f852cab0296af00a5af78db60a40","modified":1540439898745},{"_id":"public/x迷宫中的算法实践x迷宫问题算法综述.html","hash":"9ca55496fc125983492372553738add3c638539c","modified":1540439898745},{"_id":"public/x爬虫学习笔记x用于提取网页中所有链接的-Extractor-模块.html","hash":"a07cb0e21f8a045e976569161dc5c2263acf9fd6","modified":1540439898745},{"_id":"public/xMVC学习笔记x7.使用极验验证来制作更高逼格的验证码.html","hash":"33baa3ca41aa171d9f348f74f9b4b662585d5ec6","modified":1540439898745},{"_id":"public/xMVC学习笔记x4.使用Log4Net来进行错误日志的记录.html","hash":"39351c6970be2212808703a3eab22b53b7189293","modified":1540439898745},{"_id":"public/xMVC学习笔记x5.使用Controller来代替Filter完成登录验证（Session校验）.html","hash":"fd4e0efaa23a70b1ac8ff57fd7cbca4eb1f092e4","modified":1540439898745},{"_id":"public/x爬虫学习笔记xUrl过滤模块UrlFilter.html","hash":"98cb34e64b91e4699645bda159727be6d64d0d89","modified":1540439898745},{"_id":"public/xMVC学习笔记x3.使用Spring.Net应用IOC（依赖倒置）.html","hash":"45403c43d50f92cfbcac0c8526eadfa7bd0a3c6a","modified":1540439898745},{"_id":"public/xMVC学习笔记x2.使用T4模板生成其他类的具体实现.html","hash":"0a11d50614eba011ace3bafd5d8457f4bf7afc76","modified":1540439898745},{"_id":"public/xMVC学习笔记x1.项目结构搭建及单个类在各个层次中的实现.html","hash":"8d3eae71543e42da844c0f77c9f9c969379bfd9c","modified":1540439898745},{"_id":"public/x爬虫学习笔记x基于-SimHash-的去重复处理模块ContentSeen的构建.html","hash":"48ba1d6a002cdc4dad1f5e172ef9bc227ffc126b","modified":1540439898746},{"_id":"public/x爬虫学习笔记xScrapySharp简单封装为Requester.html","hash":"ef46947aab38b1bc940dd0d58e262f9f3c52e56e","modified":1540439898746},{"_id":"public/x爬虫学习笔记xMemoryCache缓存的用法学习.html","hash":"ae260d7e583e5fce3f9d3272c4c2a57adc8b3545","modified":1540439898746},{"_id":"public/x爬虫学习笔记xCx基于ARSoft.Tools.Net的DNS解析模块（半成品）.html","hash":"cad843a028f5e333bcd297995653e82bb8cf7f49","modified":1540439898746},{"_id":"public/x爬虫学习笔记xCx-使用-ScrapySharp-并行下载天涯图片.html","hash":"d8b2ffb04f7f41534c43e0d7f13f9d3131e87aee","modified":1540439898746},{"_id":"public/一木禾网盘文件下载地址批量获取实现.html","hash":"e8fd8dd9775a392e09577b4cc0c035df346aa3a0","modified":1540439898746},{"_id":"public/一木禾网盘下载分析及批量获取下载地址的实现（上）.html","hash":"4585457a796288caa6b641d91f407d055ae24663","modified":1540439898746},{"_id":"public/Cx-TextBox-Ctrl+A全选.html","hash":"c38d0c3988761e7ca0b136d74ae690a0126251ea","modified":1540439898746},{"_id":"public/Cx激爽特性——扩展方法.html","hash":"21cfd73ad2bc8d50c08950e96415ca182e746c52","modified":1540439898746},{"_id":"public/Cx线性筛法求出范围内的所有质数.html","hash":"c4b5ef033ba3e0e359df796874c979222c345adb","modified":1540439898746},{"_id":"public/新手正式入驻博客园.html","hash":"481338b7dc288894929ef9bc73f795a94bfcb3d4","modified":1540439898746},{"_id":"public/xMVC学习笔记x6.-使用Memcache+Cookie解决分布式系统共享登录状态.html","hash":"56f2847abff4dc4fa25f35336da32cde0ef3fcb7","modified":1540439898746},{"_id":"public/archives/index.html","hash":"856777395fc9043bf0110276018575b6afac8d69","modified":1540439898746},{"_id":"public/archives/page/3/index.html","hash":"08097c2d926365b13e15f6dac9ee5e047b90dada","modified":1540439898746},{"_id":"public/archives/page/4/index.html","hash":"765a34a86a02cd3af5ad8d54442ad8326322c95d","modified":1540439898746},{"_id":"public/archives/page/2/index.html","hash":"95bd5d67aaee851e593fe4e2dff5b032852f98d7","modified":1540439898746},{"_id":"public/x爬虫学习笔记xDNS解析服务增加缓存机制.html","hash":"893fa64f982ba0d00da2cabfed7cfa472133220f","modified":1540439898747},{"_id":"public/archives/page/6/index.html","hash":"aa2352403d39960d39ca0e0d69b54eb04623ed01","modified":1540439898747},{"_id":"public/archives/page/5/index.html","hash":"3e8ae3212d3f8fd71cb8a346f47b82c4d7c15029","modified":1540439898747},{"_id":"public/archives/2015/index.html","hash":"5d0ccd316c8a0058baa78c225c47151290637ea9","modified":1540439898747},{"_id":"public/archives/2016/page/3/index.html","hash":"a0b2138de868e47f544f1bc950738dd8a79a221e","modified":1540439898747},{"_id":"public/archives/2016/01/index.html","hash":"fc795eed324954dfe058974bafafdcc14d13f106","modified":1540439898747},{"_id":"public/archives/2016/02/index.html","hash":"59b060385ee1ff0004a21b8e6a33f32f764953db","modified":1540439898747},{"_id":"public/archives/2016/09/index.html","hash":"39b1424255a5a3cd32112dfc2346ae84d3b53ae4","modified":1540439898747},{"_id":"public/archives/2016/09/page/2/index.html","hash":"6657d2e4b84fa80c8041afe0af4f958b332d1cbe","modified":1540439898747},{"_id":"public/archives/2015/05/index.html","hash":"0394421bd6a78640f1c7a99ae065006cd76c5553","modified":1540439898747},{"_id":"public/archives/2016/10/index.html","hash":"c7ead260090abc1c44f6358f547d77a64acdb9b7","modified":1540439898747},{"_id":"public/archives/2016/11/index.html","hash":"f4ed4327847edc155a14d39f54c803525b8279c7","modified":1540439898747},{"_id":"public/archives/2016/index.html","hash":"2591ad6e6fd1882eff5298beba8b6fc3229dde1d","modified":1540439898747},{"_id":"public/archives/2016/page/2/index.html","hash":"9a7e7b6dea7a9398b795e77100ca163906b6b11b","modified":1540439898747},{"_id":"public/archives/2017/index.html","hash":"a57bd9dd858a56dc96c7d637e861a1f290d5af92","modified":1540439898747},{"_id":"public/archives/2017/08/index.html","hash":"5283818db4d49b38ad0690253f5e360b3d201a18","modified":1540439898747},{"_id":"public/archives/2017/01/index.html","hash":"0273129bf6bee3f59874fde3e1645b822010d5a1","modified":1540439898747},{"_id":"public/archives/2017/02/index.html","hash":"2ff2c7b6cd2c02d2a51ac3860264a8d8cbb69798","modified":1540439898748},{"_id":"public/archives/2018/index.html","hash":"5b17170678ac4936b5330b00fc403cc213e7f40f","modified":1540439898748},{"_id":"public/archives/2018/03/index.html","hash":"f1246b02e2c6b05cb304f3f6785009314e1bd35d","modified":1540439898748},{"_id":"public/archives/2018/02/page/2/index.html","hash":"f07df7f2209a59516c6c53a6502652d99ab1103b","modified":1540439898748},{"_id":"public/archives/2018/04/index.html","hash":"fb1c1c261ae401f3f660d2e1422cf1d814497723","modified":1540439898748},{"_id":"public/categories/经验之谈/index.html","hash":"e8e90b774f68b11c891f76f31f10ece83c2ce9ce","modified":1540439898748},{"_id":"public/index.html","hash":"ca4143f9a98938bad9045c056a5429a8b42117f1","modified":1540439898749},{"_id":"public/page/2/index.html","hash":"4fac4d909aeaef676ac2d5c7ee531b089aaa82d1","modified":1540439898749},{"_id":"public/page/3/index.html","hash":"3affed9c2601c08f79cdd678b7405b44574e9431","modified":1540439898749},{"_id":"public/page/4/index.html","hash":"c637b7ed35197fcfb907e2ff35e37ac6b083837f","modified":1540439898749},{"_id":"public/page/5/index.html","hash":"2bf34a118ea7fefdd1bb98e31b008e7a361b8e54","modified":1540439898749},{"_id":"public/page/6/index.html","hash":"e2c02ccd2652efe2b80be72a236ba1e0edfeeee8","modified":1540439898749},{"_id":"public/tags/51NOD/index.html","hash":"12c49b7d98c2e200f76b6abf474ebed9263c2833","modified":1540439898749},{"_id":"public/archives/2018/page/2/index.html","hash":"3ce0ac2bd96c01a6ef013debd561f2142e7f6740","modified":1540439898749},{"_id":"public/tags/刷题/index.html","hash":"28c139e7d186065e5ce4c7708ce357429a080587","modified":1540439898750},{"_id":"public/archives/2018/02/index.html","hash":"eaf50f978cb68b8609c6989372ef69365f1a5184","modified":1540439898750},{"_id":"public/tags/C/page/2/index.html","hash":"f066c778903d7e7597ae8f7e75aedfd6a878dd2e","modified":1540439898750},{"_id":"public/tags/C/index.html","hash":"592b596cd9a1fad3056d2e1d7e85080d263b8c7e","modified":1540439898750},{"_id":"public/tags/Winform/index.html","hash":"d33b43685b63d16f81b784d0de01b31968fde726","modified":1540439898750},{"_id":"public/tags/特性/index.html","hash":"988cf408ba5b80dada6c87d782869b7f9d694f3f","modified":1540439898750},{"_id":"public/tags/扩展方法/index.html","hash":"27e7d263a8582bec756ec96183e91fe1a89d6f05","modified":1540439898750},{"_id":"public/tags/算法/index.html","hash":"06888d6b8263e1c0231026d57baaf8803c1029de","modified":1540439898750},{"_id":"public/tags/质数/index.html","hash":"ca618c5e2e9b7e3e8a462dd55e4f55ab468af39c","modified":1540439898750},{"_id":"public/tags/硬件信息/index.html","hash":"e060f6136fc9afaf7f5350d71b44f3c7ce194dc9","modified":1540439898750},{"_id":"public/tags/下载/index.html","hash":"ef227365e294f0bc460bc1171584e05dec5ff48b","modified":1540439898750},{"_id":"public/tags/IDM/index.html","hash":"53f4d0a485a0e7d4cbd9a45a57b57d388dbc0f98","modified":1540439898750},{"_id":"public/tags/迅雷/index.html","hash":"45bae370dc77c0d65716316e10cfe8e98621c1df","modified":1540439898750},{"_id":"public/tags/爬虫/index.html","hash":"961293e5d6365a434dc29873ce906f1998d4f241","modified":1540439898750},{"_id":"public/tags/爬虫/page/2/index.html","hash":"2c241b3c0d2f8ab6bb09ca9ff4558c099398f94c","modified":1540439898750},{"_id":"public/tags/MVC/index.html","hash":"1a62821432545eed70383f10616e60f2919c0927","modified":1540439898750},{"_id":"public/tags/索引/index.html","hash":"bf7e3f8ead0ccded92ace80cbf1c1655796281d5","modified":1540439898750},{"_id":"public/tags/EFCore/index.html","hash":"d09526b2c9e946761057993c786b7e6da43a3be8","modified":1540439898750},{"_id":"public/tags/MySQL/index.html","hash":"07530f1bfae595aa09570e764d78805c136c35f6","modified":1540439898751},{"_id":"public/tags/Prim/index.html","hash":"4cc5bc901320881f5e444a7fa2eca0f7aeca5a29","modified":1540439898751},{"_id":"public/tags/nginx-rtmp/index.html","hash":"e26b0c1f105e6839c4aa24a5ebad49e8ad7c986a","modified":1540439898751},{"_id":"public/tags/贪心/index.html","hash":"ec3e5e61e8b0ea8a7ce1642da985a0b43be308c0","modified":1540439898751},{"_id":"public/tags/流媒体/index.html","hash":"40d83c62eae78fed92f96f0f52ec30d78b46bbcc","modified":1540439898751},{"_id":"public/tags/hls/index.html","hash":"a843a8b02cc7a2b3737be549a055e04a9212535d","modified":1540439898751},{"_id":"public/tags/点播/index.html","hash":"87847cf80ffce54d3de87c31617b66bd51e4c2d2","modified":1540439898751},{"_id":"public/tags/redhat/index.html","hash":"7f5862cf585d245579308db6284ef3dba56f8899","modified":1540439898751},{"_id":"public/tags/yum源/index.html","hash":"76bda701cb4eceb6d3410900dfaed70ad5f4ca01","modified":1540439898751},{"_id":"public/tags/贪心算法/index.html","hash":"03b8311d44aba47c0448b78c26eb4b2ae8f5cd7a","modified":1540439898751},{"_id":"public/tags/概率/index.html","hash":"d975e7466c5781902485bad9f4a57b3fabef4fc5","modified":1540439898751},{"_id":"public/tags/Spring-Net/index.html","hash":"8e745b4950f8ff336bdfccf51a98ec11cbec5950","modified":1540439898751},{"_id":"public/tags/IOC/index.html","hash":"949bdd7a6cd8c7faeac9f1885c0d8faa37e0382e","modified":1540439898751},{"_id":"public/tags/登录验证/index.html","hash":"30d716fb3a59c1191c8e79f74032f26acba5ab81","modified":1540439898751},{"_id":"public/tags/Memcache/index.html","hash":"6ab55332800a965720cd94de32b439583bb99662","modified":1540439898752},{"_id":"public/tags/分布式/index.html","hash":"6d598493e023d2370f563b31627d42694dc4bad1","modified":1540439898752},{"_id":"public/tags/单例，C/index.html","hash":"36de049b8266e9af1b61edd1d1eae37f048f3496","modified":1540439898752},{"_id":"public/tags/Java/index.html","hash":"028bab619feba5dd90b9d25f2f23c62311f7f674","modified":1540439898752},{"_id":"public/tags/javabean/index.html","hash":"c4fa1d57f75169ed1b384aad59162d663c768793","modified":1540439898752},{"_id":"public/tags/beanUtils/index.html","hash":"0ab24fc1e7f8e32dae44e91beada18fbfa3a49bf","modified":1540439898752},{"_id":"public/tags/反射/index.html","hash":"58e813d3440e1aec56fe0feb2baa76fad0365c12","modified":1540439898753},{"_id":"public/tags/ScrapySharp/index.html","hash":"32293815f616b3e08190f68cac173c9fb88f8666","modified":1540439898753},{"_id":"public/tags/ARSoft-Tools-Net/index.html","hash":"713e585108a95b30882ee4f8e5ca68146fe5150e","modified":1540439898753},{"_id":"public/tags/DNS/index.html","hash":"5d5675b4ad0f958d95f22129ca58bdb2c75234c1","modified":1540439898753},{"_id":"public/tags/缓存/index.html","hash":"0728163bf72fd5fec7aed7349438c577fce6e941","modified":1540439898753},{"_id":"public/tags/UrlFilter/index.html","hash":"87fe2638d54b3a0d404c752a860064077ac754e0","modified":1540439898753},{"_id":"public/tags/Extractor/index.html","hash":"05b354ee726c40ac7e8d4f060f28adcca7a5ae9f","modified":1540439898753},{"_id":"public/tags/Bloom-Filter/index.html","hash":"f17ca1299b31097fbfcc79bbc765d75e191c3018","modified":1540439898754},{"_id":"public/tags/迷宫/index.html","hash":"92296ba5b8d2a222c957117dfdf1bad87f1fb71e","modified":1540439898754},{"_id":"public/tags/递归分割/index.html","hash":"32221dfd40291469499790f42b3e61cc59820053","modified":1540439898754},{"_id":"public/tags/跨线程/index.html","hash":"092356d2fc5c99e5357f5cc8bbeceb2379e09eee","modified":1540439898754},{"_id":"public/tags/委托/index.html","hash":"91ba9e8f67445d1d648023fc8a2e008594ecdfcb","modified":1540439898754},{"_id":"public/tags/广州医保/index.html","hash":"39b50a5b24b8ba1cec4e4b72c98ffb781d907974","modified":1540439898754},{"_id":"public/tags/HG-Interface-dll/index.html","hash":"e89e04fcfa7b695da7e2a0d86a9ff2baf7d9f248","modified":1540439898754},{"_id":"public/tags/外部组件异常/index.html","hash":"4c6bc2c59e551d405bc23b977678d3e0b9afd9cf","modified":1540439898754},{"_id":"public/tags/Net-Core/index.html","hash":"9c861a0b1809e85f5674ebaa8b1ca5326f8697fd","modified":1540439898754},{"_id":"public/tags/IIS/index.html","hash":"849d09e57df591cdbb4088b345be54a0a0e96c6f","modified":1540439898754},{"_id":"public/tags/软件心得/index.html","hash":"a65101fdc57bc1320e67e7b261ac515c19b3a46c","modified":1540439898754},{"_id":"public/tags/IP/index.html","hash":"49988f15c9322560f31153224374cd5f2ebdefb7","modified":1540439898754},{"_id":"public/tags/InnoSetup/index.html","hash":"dffea935089335a726b8c6af99af5d7a7b301bba","modified":1540439898754},{"_id":"public/tags/安装包/index.html","hash":"b1cb82a6970d1275381c39f349c32f8d603cdf9f","modified":1540439898755},{"_id":"public/tags/ASR/index.html","hash":"8299d6ea1f36b1efce67ae27793fb283a98cd8d2","modified":1540439898756},{"_id":"public/tags/TTS/index.html","hash":"7171114efabf206ffaab2ff011d8455cbc01f776","modified":1540439898756},{"_id":"public/tags/NAudio/index.html","hash":"2bd060c72caf6f915fc59f0cd7542c18bd0c49ed","modified":1540439898756},{"_id":"public/tags/讯飞语音识别/index.html","hash":"b28b24b61032bb1a40a31a46673cdfeeb2e1c891","modified":1540439898756},{"_id":"public/tags/Log4Net/index.html","hash":"2afd022f056505ffe64f1d5f6dce3b3c66fb830c","modified":1540439898756},{"_id":"public/tags/GeoIP2/index.html","hash":"3d6c29e40aa6f928294ca92d967bb90fe3f47beb","modified":1540439898756},{"_id":"public/tags/Net/index.html","hash":"73e52f167228c7394679642d1a1e4de81e6f9df8","modified":1540439898756},{"_id":"public/tags/面试/index.html","hash":"0aac9d12075193896a960929ac9b7cf5580068a1","modified":1540439898756},{"_id":"public/tags/网站后台开发工程师/index.html","hash":"01b9fe17ba2a5b08c9d33468a627e070c0360b5b","modified":1540439898756},{"_id":"public/tags/总结/index.html","hash":"94a7ba366ecb050044069d0875ef024c9607596b","modified":1540439898756},{"_id":"public/tags/百度语音识别/index.html","hash":"bb8c5fda4c12277573b36519b8a25c98c42b9209","modified":1540439898756},{"_id":"public/tags/极验/index.html","hash":"c02b4698f895b6258235bf1ae640efc27cb07159","modified":1540439898757},{"_id":"public/Selenium-PhantomJS-巧妙过渡到-Firefox-Chrome.html","hash":"95c45214a8dafbb3e5fede33de9c502bbe64f51b","modified":1540439898766},{"_id":"public/archives/2018/07/index.html","hash":"caee6c991fcf7ecae230d1d02ca6ef3c601b73a9","modified":1540439898766},{"_id":"public/tags/selenium/index.html","hash":"242d0c934269ebfc3710441e8b3fe918943a722b","modified":1540439898766},{"_id":"public/tags/full-page-screenshot/index.html","hash":"ac38fb8cd887fc049492ea71730754456339408c","modified":1540439898766},{"_id":"public/tags/全页面截图/index.html","hash":"f2ebe99edcf972a32d1c93d20dd62406db1ff842","modified":1540439898766},{"_id":"public/CNAME","hash":"4e951c617bd02cf1b5ee8c26201a665afd0a23e3","modified":1540439898766},{"_id":"public/robots.txt","hash":"04c627ebeb42f30361b011ec9be7630b5e954575","modified":1540439898766},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1540439898766},{"_id":"public/images/avatar.png","hash":"d52889766259b24bd83bfe02633a3572915f1ffd","modified":1540439898766},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1540439898766},{"_id":"public/images/apple-touch-icon-next.png","hash":"7d45441371e5eb6edd79e6a20e2adbd7911e50d9","modified":1540439898766},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1540439898766},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1540439898766},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1540439898766},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1540439898766},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1540439898766},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1540439898766},{"_id":"public/images/daodao.ico","hash":"51b9dcbadb69b142accd2ea27ffb4e6ce1453598","modified":1540439898766},{"_id":"public/images/daodao.jpg","hash":"017e13645840944ce251535c23d45b558ed0d4ac","modified":1540439898766},{"_id":"public/images/daodao.png","hash":"99bdfe302b34ab244606df7f15603106327192bd","modified":1540439898767},{"_id":"public/images/favicon-16x16-next.png","hash":"0a3e8a7868de8a320a0a1a8f3bf6262bd84d12f0","modified":1540439898767},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1540439898767},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1540439898767},{"_id":"public/images/favicon-32x32-next.png","hash":"f8c3e8f62e7539ddda5c9e5a45041ac19f834b63","modified":1540439898767},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1540439898767},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1540439898767},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1540439898767},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1540439898767},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1540439898767},{"_id":"public/lib/Han/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1540439898767},{"_id":"public/lib/canvas-nest/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1540439898767},{"_id":"public/lib/fancybox/LICENSE","hash":"7713a1753ce88f2c7e6b054ecc8e4c786df76300","modified":1540439898767},{"_id":"public/lib/fastclick/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1540439898767},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1540439898767},{"_id":"public/lib/jquery_lazyload/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1540439898767},{"_id":"public/lib/pace/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1540439898767},{"_id":"public/lib/pangu/LICENSE","hash":"0b609305c50cdc3f1ef5ec9e7d2e174f7f99a183","modified":1540439899638},{"_id":"public/lib/three/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1540439899795},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1540439899796},{"_id":"public/lib/pangu/dist/pangu.js.map","hash":"6a7c5927e3410ed4dfe14caa9fb2eb115d85e5e7","modified":1540439899796},{"_id":"public/lib/pangu/dist/pangu.min.js.map","hash":"1aa0d935665a2f075bbc4b5f0a53bbfaece12c5b","modified":1540439899796},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1540439899796},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1540439899796},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1540439899796},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1540439899796},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1540439899796},{"_id":"public/images/author.png","hash":"b5917e126474994a2254ead9d9495ac1416789d3","modified":1540439899796},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1540439900040},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1540439900040},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1540439900041},{"_id":"public/js/src/affix.js","hash":"8d40975851cbefe79727efc1fb5f14bd304c6f09","modified":1540439900041},{"_id":"public/js/src/algolia-search.js","hash":"f58c4f9271ede549af45a6cb7103c843e706a1a9","modified":1540439900041},{"_id":"public/js/src/exturl.js","hash":"f19515c2d4636df6f99fe4330655f6154aa4cffe","modified":1540439900041},{"_id":"public/js/src/js.cookie.js","hash":"04842e8148c95921672db2e1bd686201e077f730","modified":1540439900041},{"_id":"public/js/src/bootstrap.js","hash":"cc6b8c897ffce7f35558b78cca712632575982f5","modified":1540439900041},{"_id":"public/js/src/post-details.js","hash":"0eec024758e079fa9d07e91a2759d5178df42810","modified":1540439900041},{"_id":"public/js/src/scroll-cookie.js","hash":"8e26169565814d1006e904feba1bf3610c53bae7","modified":1540439900041},{"_id":"public/lib/Han/README.html","hash":"39e9ebe4bc7286ac9299bf45d6454be436fab331","modified":1540439900041},{"_id":"public/lib/canvas-nest/README.html","hash":"2ffe4e8d9f3a3f973c1ac2137880b2e5ac70f1f6","modified":1540439900041},{"_id":"public/js/src/scrollspy.js","hash":"37cda87be22582b4f06df5e1d63588cff1acc079","modified":1540439900041},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"da0ef644babf2a08cae75209ea24635eb5f5b070","modified":1540439900041},{"_id":"public/lib/fancybox/README.html","hash":"894bc17c72fa64e3f56d2335dc575e26e9b1dbf2","modified":1540439900041},{"_id":"public/lib/fastclick/README.html","hash":"2de813ec9a9749f86647f6934c9ef84b5fca7938","modified":1540439900041},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"310b1425e0c4b542ab9778cc03ec9788b33a1b2e","modified":1540439900041},{"_id":"public/lib/jquery_lazyload/README.html","hash":"63363ee282dd386563d441c4fc704856a4baf5ba","modified":1540439900041},{"_id":"public/lib/pace/README.html","hash":"17767e87f8844b07a9929e4e3c27be29dea8cd52","modified":1540439900041},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"8d60bf049a387d6bc1d58a133dbed41eef574ac6","modified":1540439900053},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"0c619e8a7576bafc3540e8b7976b7048ad288e9c","modified":1540439900131},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"1a0acc71beb56e7c38cf4b73f9b68491fe32f978","modified":1540439900131},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"c5aec07c6738211b44142b452c50f406f8a3c54d","modified":1540439900132},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"0e933ee23692710f86e9f2f595c742f7ec834803","modified":1540439900132},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"b38ca1ca889fb856c6c33c9d011674c37cb560ac","modified":1540439900132},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"b7e9c7938f3712b79ffcc011c259a5f01b02f72d","modified":1540439900132},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"5ef36eb1f1577074b8dc1a1549abd560247a6fde","modified":1540439900132},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"60a96c908e456c970d1f2a7a11340bd10dd77a37","modified":1540439900132},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"3b6add96b3161cf0a953a4f3b791d8a885a90778","modified":1540439900132},{"_id":"public/css/main.css","hash":"fa3a2f22ca2a33e2bf277a6f8f3118b19c7930b0","modified":1540439900132},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1540439900132},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1540439900132},{"_id":"public/images/alipay.jpg","hash":"e03bfce63faca42ec858bcac4c35da5e19dd25de","modified":1540439900132},{"_id":"public/images/wechatpay.jpg","hash":"5e0896ba8ddec2bb5eab10128e9726c38f521ac2","modified":1540439900132},{"_id":"public/lib/pangu/README.html","hash":"cdf32fa692dbaafb428ed942df114d10d1884830","modified":1540439900179},{"_id":"public/js/src/schemes/pisces.js","hash":"ed620fef51e58148996550dd69ff285da7a9684f","modified":1540439900342},{"_id":"public/lib/three/README.html","hash":"706aadb2a1c7df4c7960d0d6641e956df80eb567","modified":1540439900342},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"3696d53c72f852861cff1ce2b491f117e7e2882c","modified":1540439900343},{"_id":"public/js/src/motion.js","hash":"1162bf4b1f05515c27609bb0c33fb2fe514acebf","modified":1540439900343},{"_id":"public/js/src/utils.js","hash":"244edc64f5e031ea405a0e8af121ec158e20d5b4","modified":1540439900343},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"04b5ee90287f57b1fad95bac62930465e7072999","modified":1540439900344},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1540439900344},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"443c4d7378c7de7d1b1644cad949caa37364b95f","modified":1540439900483},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"32c6894ca57c8343f573557e8440d5510c31dba3","modified":1540439900499},{"_id":"public/lib/pace/pace.min.js","hash":"300cd8f9ddee14703d976342cc1516b4b76cc56a","modified":1540439900499},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"368b139298a7504028484b28d596e73092614fd0","modified":1540439900499},{"_id":"public/lib/pangu/dist/pangu.min.js","hash":"ae0e9ef6ccd03a21198c9045f64c809690ed64b1","modified":1540439900499},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"deddfeb9639504a45f19a8db9ac2c9ae01e61de1","modified":1540439900499},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"85f50e16966af70fc52735780a4819ed048757bf","modified":1540439900499},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"37f7f7747b18782796952a4f0de2a6030dc43936","modified":1540439900576},{"_id":"public/lib/fancybox/source/jquery.fancybox.min.css","hash":"b3967a3270e170be0bd3caa9bb43902d3c9e926a","modified":1540439900595},{"_id":"public/lib/pangu/dist/pangu.js","hash":"8b2203b4b7869724e0896b05ab27bec3513b6a80","modified":1540439900595},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"a6d1a9f8e76a174ea3b5e9b0f1d3df76272252c4","modified":1540439900679},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"a2de942edd6a985b3dac34114f0c102d5eee6b63","modified":1540439901113},{"_id":"public/images/bg.png","hash":"c34366140a0250afbd73d62abdc58b1e00e10355","modified":1540439901113},{"_id":"public/images/banner.png","hash":"3fd1945053340102d1f712786077fff1483b7fd3","modified":1540439901120},{"_id":"public/lib/velocity/velocity.ui.js","hash":"0344f25a2ede7deb8d94543ba834079cef08cda6","modified":1540439901169},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"53170f87643202acccb67d2801d42ea246e58cbf","modified":1540439901169},{"_id":"public/lib/velocity/velocity.min.js","hash":"707fe77f799e031aaaf036293344a3c2592d065f","modified":1540439901170},{"_id":"public/lib/three/canvas_lines.min.js","hash":"8eebb66d23efb863bee16df7ae995ba64b54e75c","modified":1540439901170},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"7baaed49148cd6d87d2ea181b9af2ce021b99ce3","modified":1540439901170},{"_id":"public/lib/Han/dist/han.min.js","hash":"188d03c547346dc8b9351923621a172dfa0672de","modified":1540439901170},{"_id":"public/lib/three/three-waves.min.js","hash":"02e029f8b252e2384392ae456ad8092ac52e9758","modified":1540439901170},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"577d84d9188ef759820865b1141ac177adb7c52f","modified":1540439901211},{"_id":"public/lib/Han/dist/han.min.css","hash":"0446d872b6ed44c84d05be72b8ad9eeb24fa54c2","modified":1540439901371},{"_id":"public/lib/Han/dist/han.css","hash":"63101e4b6ee56543ca76bbc4d52aa7d2298dc95e","modified":1540439901527},{"_id":"public/lib/fancybox/source/jquery.fancybox.min.js","hash":"ad10da93ba5f351307f4fe9cee3a58552f16c450","modified":1540439901527},{"_id":"public/lib/Han/dist/han.js","hash":"0a3d42267c224bca3cb86fef83589696051e8141","modified":1540439901961},{"_id":"public/lib/jquery/index.js","hash":"5019b5cc1f0fa0b0f38b7ff2e2ca5bcdf77d14b7","modified":1540439901961},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"c61bb080a8b8e4350fa46de46053d0e05b5a83fd","modified":1540439902070},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"c61bb080a8b8e4350fa46de46053d0e05b5a83fd","modified":1540439902221},{"_id":"public/lib/velocity/velocity.js","hash":"93437ceacaf8e8a4a7c71bf02a8494e97397d469","modified":1540439902389},{"_id":"public/lib/three/three.min.js","hash":"e2ba1926cd0d6c9382a76cba5aadc48e4e8aa608","modified":1540439903237}],"Category":[{"name":"经验之谈","_id":"cjno24osr000dd00oz8beltjj"}],"Data":[],"Page":[{"_content":"<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>邵玮的个人简历</title>\n    <style type=\"text/css\">\n        html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {\n            margin: 0;\n            padding: 0;\n            border: 0;\n            font-size: 100%;\n            vertical-align: baseline;\n        }\n\n        html, body {\n            color: #444;\n            background-color: #e6e6e6;\n        }\n\n        a:link, a:visited {\n            color: #444;\n            text-decoration: none;\n        }\n\n        .page {\n            width: 794px;\n            background-color: #fff;\n            margin: 20px auto;\n            padding: 20px 40px;\n            box-shadow: 0 2px 6px rgba(100, 100, 100, 0.3);\n        }\n\n        .page-head {\n            line-height: 1.846153846;\n        }\n\n            .page-head > a {\n                color: #515151;\n                display: inline-block;\n                text-decoration: none;\n                font-size: 36px;\n            }\n\n        .page-sub-head {\n            font-weight: normal;\n            font-size: 13px;\n            font-size: 0.928571429rem;\n            line-height: 1.846153846;\n            color: #757575;\n        }\n\n        .panel {\n            margin: 20px 0 10px;\n        }\n\n        .panel-head {\n            font-size: 26px;\n            line-height: 1.846153846;\n            border-bottom: 1px solid #e0e0e0;\n            padding-left: 10px;\n        }\n\n        .panel-body {\n            padding: 10px;\n        }\n\n        .profile {\n            position: relative;\n            overflow: hidden;\n            padding-left: 20px;\n        }\n\n            .profile > li {\n                width: 50%;\n                float: left;\n                line-height: 36px;\n            }\n\n        .content-list {\n            padding-left: 30px;\n        }\n\n            .content-list > li {\n                line-height: 36px;\n            }\n\n        .timeline {\n            padding-left: 30px;\n        }\n\n            .timeline > li {\n                line-height: 36px;\n            }\n\n                .timeline > li > span {\n                    width: 33%;\n                    display: inline-block;\n                }\n\n        .projects {\n            padding-left: 30px;\n        }\n\n        .project-detail {\n            padding: 15px 5px 0;\n            padding-left: 15px;\n        }\n\n            .project-detail > li > p {\n                margin: 10px;\n                margin-bottom: 15px;\n            }\n\n            .project-detail > li > ul, .project-detail > li > ol {\n                padding-left: 30px;\n                margin: 10px;\n                line-height: 23px;\n            }\n\n        p {\n            text-indent: 2em;\n            line-height: 28px;\n        }\n    </style>\n</head>\n<body>\n    <section class=\"page\">\n        <hgroup>\n            <h1 class=\"page-head\"><a href=\"http://www.shaowei.pro/Resume.html\" title=\"邵玮的个人简历\">邵玮的个人简历</a></h1>\n            <h2 class=\"page-sub-head\">.Net后端开发工程师</h2>\n        </hgroup>\n        <!-- 基本资料 开始 -->\n        <section class=\"panel\">\n            <h2 class=\"panel-head\">基本资料</h2>\n            <div class=\"panel-body\">\n                <ul class=\"profile\">\n                    <li>姓&nbsp;&nbsp;名：邵玮</li>\n                    <li>工作经验：1.5年</li>\n                    <li>联系邮箱：<a href=\"mailto:owner@shaowei.pro\">owner@shaowei.pro</a></li>\n                    <li>联系电话：<a href=\"tel:13794981669\">137-9498-1669</a></li>\n\n\n                </ul>\n            </div>\n        </section>\n        <!-- 基本资料 结束 -->\n        <!-- 专业技能 开始 -->\n        <section class=\"panel\">\n            <h2 class=\"panel-head\">专业技能</h2>\n            <div class=\"panel-body\">\n                <ol class=\"content-list\">\n                    <li>熟练掌握ASP.NET开发并可以使用.Net Core进行跨平台开发、熟练使用MVC框架、熟悉License.Net、Spring.Net等框架、熟悉Web API、WCF技术，能独立开发基于Asp.Net的B/S系统。</li>\n                    <li>熟练掌握Winform桌面程序开发、熟悉WPF开发，能独立开发Windows PC端应用，并对Xamarin、Electron.Net有一定了解。</li>\n                    <li>熟悉SQL语言，熟练使用SQL Server、Oracle数据库，掌握数据库设计流程；</li>\n                    <li>熟练使用HTML、CSS、JavaScript技术以及JQuery、Bootstrap、Vue.JS、JQuery EasyUI等框架进行网页设计；</li>\n                    <li>熟练使用SVN、Git进行代码版本控制；</li>\n                    <li>掌握Java、C/C++、Python语言基础；</li>\n                    <li>熟练使用Office办公软件，掌握Photoshop、会声会影基础。</li>\n                </ol>\n            </div>\n        </section>\n        <!-- 专业技能 结束 -->\n        <!-- 项目经验 开始 -->\n        <section class=\"panel\">\n            <h2 class=\"panel-head\">项目经验</h2>\n            <div class=\"panel-body\">\n                <ol class=\"projects\">\n                    <li>\n                        <h3 class=\"project-title\">** 播放器（<time>2017/03--今</time>）</h3>\n                        <ul class=\"project-detail\">\n                            <li>\n                                <h5>项目介绍</h5>\n                                <p>\n                                    用于公司所有需要桌面端视频推拉流项目的播放器软件。\n                                </p>\n                            </li>\n                            <!--<li>\n                                <h5>开发环境</h5>\n                                <p>Windows 10、Visual Studio 2017、Github</p>\n                            </li>-->\n                            <li>\n                                <h5>技术选型</h5>\n                                <p>FFMPEG、Winform、WebSocket</p>\n                            </li>\n                            <li>\n                                <h5>职责领域</h5>\n\n                                <ol class=\"content-list\">\n                                    <li>与各个端进行信令交互，控制播放器执行业务流程。</li>\n                                    <li>以Web页面的形式对其它设备开放遥控器功能，控制摄像头等设备的状态与推拉流、预览的状态。</li>\n                                    <li>与硬件设备进行串口通信。</li>\n                                </ol>\n                            </li>\n                        </ul>\n                    </li>\n\n                    <li>\n                        <h3 class=\"project-title\">** 云助手（<time>2017/01--2017/10</time>）</h3>\n                        <ul class=\"project-detail\">\n                            <li>\n                                <h5>项目介绍</h5>\n                                <p>\n                                    主要有云文件管理、上传下载文件和语音输入功能。\n                                </p>\n                            </li>\n                            <!--<li>\n                                <h5>开发环境</h5>\n                                <p>Windows 10、Visual Studio 2017、Github</p>\n                            </li>-->\n                            <li>\n                                <h5>技术选型</h5>\n                                <p>Winform、Socket、讯飞语音</p>\n                            </li>\n                            <li>\n                                <h5>职责领域</h5>\n                                <p>系统的全部功能模块。</p>\n                            </li>\n                        </ul>\n                    </li>\n\n                    <li>\n                        <h3 class=\"project-title\">** 医保统筹支付服务（<time>2017/03--今</time>）</h3>\n                        <ul class=\"project-detail\">\n                            <li>\n                                <h5>项目介绍</h5>\n                                <p>\n                                    在医院内搭建一个医保平台对外调用，提供医保的患者信息管理、统筹试算、统筹支付等功能。\n                                </p>\n                            </li>\n                            <!--<li>\n                                <h5>开发环境</h5>\n                                <p>Windows Server 2012、Visual Studio 2015、Github</p>\n                            </li>-->\n                            <li>\n                                <h5>技术选型</h5>\n                                <p>WCF、Web Api、Asp.Net MVC</p>\n                            </li>\n                            <li>\n                                <h5>职责领域</h5>\n                                <p>系统的全部功能模块。</p>\n                            </li>\n                        </ul>\n                    </li>\n                    <li>\n                        <h3 class=\"project-title\">广东医科大学双代会提案管理系统（<time>2016/03--2017/11</time>）</h3>\n                        <ul class=\"project-detail\">\n                            <li>\n                                <h5>项目介绍</h5>\n                                <p>\n                                    学校教师代表大会和工会每年会举行一次双代会，本项目用于使双代会的整个过程自动化、无纸化。主要功能新提案的提交与审核、提案的搜索、提案的汇总分析、已通过提案的进度跟踪、以及各进度的邮件通知。本人担当该项目的主要编程人员同时负责核心代码\n                                    。\n                                </p>\n                            </li>\n                            <li>\n                                <h5>第一阶段（<time>2016/03--2016/5</time>）</h5>\n                                <ul>\n                                    <li>\n                                        <h5>开发环境</h5>\n                                        <p>Windows 10、Visual Studio 2010、Access、SVN</p>\n                                    </li>\n                                    <li>\n                                        <h5>技术选型</h5>\n                                        <p>ASP.NET、Nvelocity、NPOI、Spore.Doc、Ionoc.Zip、HTML5、jQuery、BootStrap、DataTablesJQuery、Gritter</p>\n                                    </li>\n                                    <!--<li>\n                                        <h5>职责领域</h5>\n                                        <p>\n                                            系统的全部功能模块\n                                        </p>\n                                    </li>-->\n                                    <li>\n                                        <h5>阶段简介</h5>\n                                        <p>\n                                            这个阶段主要是为了能够尽快完成学校方面提出的需求以便投入使用，选用了Nvelocity模板引擎作为项目的整体解决方案。项目从2016年3月提出，4月上线提案提交审核、搜索功能配合学校的双代会进度，5月完成剩下的提案进度管理、邮件通知、提案汇总与分析功能，目前运行良好。\n                                        </p>\n                                    </li>\n                                </ul>\n                            </li>\n                            <li>\n                                <h5>第二阶段（<time>2016/09--2017/7</time>）</h5>\n                                <ul>\n                                    <li>\n                                        <h5>开发环境</h5>\n                                        <p>Windows 10、Visual Studio 2012、SQL Server Compact、SVN、NuGet</p>\n                                    </li>\n                                    <li>\n                                        <h5>技术选型</h5>\n                                        <p>ASP.NET MVC、EntityFramework、Razor、Log4Net、Lucene、Spring.Net、NPOI、Spore.Doc、Ionoc.Zip、HTML5、jQuery、BootStrap、DataTablesJQuery、Gritter</p>\n                                    </li>\n                                    <!--<li>\n                                        <h5>职责领域</h5>\n                                        <p>\n                                            系统的全部功能模块\n                                        </p>\n                                    </li>-->\n                                    <li>\n                                        <h5>阶段简介</h5>\n                                        <p>\n                                            由于第一阶段时间过于紧张，再加上技术有限，代码质量较差，业务、数据、界面之间相互耦合，不便于维护和二次开发，再加上对ASP.NET MVC有了一定的掌握，使用多层架构加MVC框架重构此项目，于12月完成并成功上线并在之后的几个月稳定运行，2017年5月新一届双代会时响应了学校方面新需求，之后验收交于学校老师维护。\n                                        </p>\n                                    </li>\n                                </ul>\n                            </li>\n                        </ul>\n                    </li>\n                    <li>\n\n                        <h3 class=\"project-title\">基于Scrapy架构的C#爬虫框架（<time>2016/09--2016/11</time>）</h3>\n                        <ul class=\"project-detail\">······</ul>\n                    </li>\n                    <li>\n                        <h3 class=\"project-title\">督导听课排课系统（<time>2014/03--2015/08</time>）</h3>\n                        <ul class=\"project-detail\">······</ul>\n                    </li>\n                </ol>\n            </div>\n        </section>\n        <!-- 项目经验 结束 -->\n        <!-- 获奖情况 开始 -->\n        <!--<section class=\"panel\">\n            <h2 class=\"panel-head\">获奖情况</h2>\n            <div class=\"panel-body\">\n                <ol class=\"timeline\" style=\"text-align: center\">\n                    <li><span>第二届项目设计大赛优秀奖</span><span>校园换客网</span><span>2016-05</span></li>\n                    <li><span>第十届网页设计大赛优秀奖</span><span>中医药论坛</span><span>2016-05</span></li>\n                    <li><span>大学生科技创新优秀团队</span><span>破晓技术团队</span><span>2014-12</span></li>\n                    <li><span>广东青年创新创业大赛优秀奖</span><span>督导听课排课管理系统</span><span>2014-11</span></li>\n                </ol>\n            </div>\n        </section>-->\n        <!-- 获奖情况 结束 -->\n        <!-- 工作经历 开始 -->\n        <section class=\"panel\">\n            <h2 class=\"panel-head\">工作经历</h2>\n            <div class=\"panel-body\">\n                <ol class=\"timeline\">\n                    <li><span>2013/09 -- 2017/07</span><span>广东医科大学</span><span>学生</span></li>\n                    <li><span>2016/11 -- 至今</span><span>广州宸瑞软件科技有限公司</span><span>流媒体研发工程师</span></li>\n                </ol>\n            </div>\n        </section>\n        <!-- 工作经历 结束 -->\n        <!-- 关注我 开始 -->\n        <section class=\"panel\">\n            <h2 class=\"panel-head\">Fork Me</h2>\n            <div class=\"panel-body\">\n                <ol class=\"content-list\">\n                    <li>\n                        GitHub\n                        ：<a href=\"https://github.com/wayneshao\">https://github.com/wayneshao</a>\n                    </li>\n                    <li>\n                        Blog\n                        ：<a href=\"https://blog.wayneshao.cn/\">https://blog.wayneshao.cn/</a>\n                    </li>\n                </ol>\n            </div>\n        </section>\n        <!-- 关注我 结束 -->\n        <!-- 自我评价 开始 -->\n        <section class=\"panel\">\n            <h2 class=\"panel-head\">自我评价</h2>\n            <div class=\"panel-body\">\n                <ol class=\"content-list\">\n                    <li>\n                        <h5>热爱编程</h5>\n                    </li>\n                    <p>\n                        能积极主动的学习编程知识并用于解决实际问题，编程上的进步能给我带来充分的成就感，鼓舞我继续努力学习。\n                    </p>\n                    <li>\n                        <h5>出色的自学能力</h5>\n                    </li>\n                    <p>\n                        专业课成绩名列前茅；能在文档齐全的情况下迅速的学习并上手新技术，能够在工具辅助下流畅阅读英文文档。\n                    </p>\n                    <!--<li>\n                        <h5>丰富的开发经验</h5>\n                    </li>\n                    <p>\n                        从大一开始参与开发，大一暑假就和同学一起留校进行《督导排课系统》的开发，后来陆续开发了一些小软件用于处理日常问题，如“网管小助手”、“一木禾下载地址批量解析器”等，大三独立为学校部门开发网站系统，至今仍在使用，评价良好。\n                    </p>-->\n                </ol>\n            </div>\n        </section>\n        <!-- 自我评价 结束 -->\n        <!-- 自我规划 开始 -->\n        <section class=\"panel\">\n            <h2 class=\"panel-head\">想做的事儿</h2>\n            <div class=\"panel-body\">\n                <!--<p>希望自己能够迅速成长，在两年内成为BAT水平的程序员</p>-->\n                <ol class=\"content-list\">\n                    <li>深入研究C#底层原理，阅读C#源码；</li>\n                    <li>随时了解计算机前沿技术，扎根开源社区，贡献开源项目；</li>\n                    <li>在学习的同时勤写博客记录分享所得所思；</li>\n                </ol>\n            </div>\n        </section>\n        <!-- 自我规划 结束 -->\n    </section>\n</body>\n</html>\n","source":"resume.html","raw":"<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>邵玮的个人简历</title>\n    <style type=\"text/css\">\n        html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {\n            margin: 0;\n            padding: 0;\n            border: 0;\n            font-size: 100%;\n            vertical-align: baseline;\n        }\n\n        html, body {\n            color: #444;\n            background-color: #e6e6e6;\n        }\n\n        a:link, a:visited {\n            color: #444;\n            text-decoration: none;\n        }\n\n        .page {\n            width: 794px;\n            background-color: #fff;\n            margin: 20px auto;\n            padding: 20px 40px;\n            box-shadow: 0 2px 6px rgba(100, 100, 100, 0.3);\n        }\n\n        .page-head {\n            line-height: 1.846153846;\n        }\n\n            .page-head > a {\n                color: #515151;\n                display: inline-block;\n                text-decoration: none;\n                font-size: 36px;\n            }\n\n        .page-sub-head {\n            font-weight: normal;\n            font-size: 13px;\n            font-size: 0.928571429rem;\n            line-height: 1.846153846;\n            color: #757575;\n        }\n\n        .panel {\n            margin: 20px 0 10px;\n        }\n\n        .panel-head {\n            font-size: 26px;\n            line-height: 1.846153846;\n            border-bottom: 1px solid #e0e0e0;\n            padding-left: 10px;\n        }\n\n        .panel-body {\n            padding: 10px;\n        }\n\n        .profile {\n            position: relative;\n            overflow: hidden;\n            padding-left: 20px;\n        }\n\n            .profile > li {\n                width: 50%;\n                float: left;\n                line-height: 36px;\n            }\n\n        .content-list {\n            padding-left: 30px;\n        }\n\n            .content-list > li {\n                line-height: 36px;\n            }\n\n        .timeline {\n            padding-left: 30px;\n        }\n\n            .timeline > li {\n                line-height: 36px;\n            }\n\n                .timeline > li > span {\n                    width: 33%;\n                    display: inline-block;\n                }\n\n        .projects {\n            padding-left: 30px;\n        }\n\n        .project-detail {\n            padding: 15px 5px 0;\n            padding-left: 15px;\n        }\n\n            .project-detail > li > p {\n                margin: 10px;\n                margin-bottom: 15px;\n            }\n\n            .project-detail > li > ul, .project-detail > li > ol {\n                padding-left: 30px;\n                margin: 10px;\n                line-height: 23px;\n            }\n\n        p {\n            text-indent: 2em;\n            line-height: 28px;\n        }\n    </style>\n</head>\n<body>\n    <section class=\"page\">\n        <hgroup>\n            <h1 class=\"page-head\"><a href=\"http://www.shaowei.pro/Resume.html\" title=\"邵玮的个人简历\">邵玮的个人简历</a></h1>\n            <h2 class=\"page-sub-head\">.Net后端开发工程师</h2>\n        </hgroup>\n        <!-- 基本资料 开始 -->\n        <section class=\"panel\">\n            <h2 class=\"panel-head\">基本资料</h2>\n            <div class=\"panel-body\">\n                <ul class=\"profile\">\n                    <li>姓&nbsp;&nbsp;名：邵玮</li>\n                    <li>工作经验：1.5年</li>\n                    <li>联系邮箱：<a href=\"mailto:owner@shaowei.pro\">owner@shaowei.pro</a></li>\n                    <li>联系电话：<a href=\"tel:13794981669\">137-9498-1669</a></li>\n\n\n                </ul>\n            </div>\n        </section>\n        <!-- 基本资料 结束 -->\n        <!-- 专业技能 开始 -->\n        <section class=\"panel\">\n            <h2 class=\"panel-head\">专业技能</h2>\n            <div class=\"panel-body\">\n                <ol class=\"content-list\">\n                    <li>熟练掌握ASP.NET开发并可以使用.Net Core进行跨平台开发、熟练使用MVC框架、熟悉License.Net、Spring.Net等框架、熟悉Web API、WCF技术，能独立开发基于Asp.Net的B/S系统。</li>\n                    <li>熟练掌握Winform桌面程序开发、熟悉WPF开发，能独立开发Windows PC端应用，并对Xamarin、Electron.Net有一定了解。</li>\n                    <li>熟悉SQL语言，熟练使用SQL Server、Oracle数据库，掌握数据库设计流程；</li>\n                    <li>熟练使用HTML、CSS、JavaScript技术以及JQuery、Bootstrap、Vue.JS、JQuery EasyUI等框架进行网页设计；</li>\n                    <li>熟练使用SVN、Git进行代码版本控制；</li>\n                    <li>掌握Java、C/C++、Python语言基础；</li>\n                    <li>熟练使用Office办公软件，掌握Photoshop、会声会影基础。</li>\n                </ol>\n            </div>\n        </section>\n        <!-- 专业技能 结束 -->\n        <!-- 项目经验 开始 -->\n        <section class=\"panel\">\n            <h2 class=\"panel-head\">项目经验</h2>\n            <div class=\"panel-body\">\n                <ol class=\"projects\">\n                    <li>\n                        <h3 class=\"project-title\">** 播放器（<time>2017/03--今</time>）</h3>\n                        <ul class=\"project-detail\">\n                            <li>\n                                <h5>项目介绍</h5>\n                                <p>\n                                    用于公司所有需要桌面端视频推拉流项目的播放器软件。\n                                </p>\n                            </li>\n                            <!--<li>\n                                <h5>开发环境</h5>\n                                <p>Windows 10、Visual Studio 2017、Github</p>\n                            </li>-->\n                            <li>\n                                <h5>技术选型</h5>\n                                <p>FFMPEG、Winform、WebSocket</p>\n                            </li>\n                            <li>\n                                <h5>职责领域</h5>\n\n                                <ol class=\"content-list\">\n                                    <li>与各个端进行信令交互，控制播放器执行业务流程。</li>\n                                    <li>以Web页面的形式对其它设备开放遥控器功能，控制摄像头等设备的状态与推拉流、预览的状态。</li>\n                                    <li>与硬件设备进行串口通信。</li>\n                                </ol>\n                            </li>\n                        </ul>\n                    </li>\n\n                    <li>\n                        <h3 class=\"project-title\">** 云助手（<time>2017/01--2017/10</time>）</h3>\n                        <ul class=\"project-detail\">\n                            <li>\n                                <h5>项目介绍</h5>\n                                <p>\n                                    主要有云文件管理、上传下载文件和语音输入功能。\n                                </p>\n                            </li>\n                            <!--<li>\n                                <h5>开发环境</h5>\n                                <p>Windows 10、Visual Studio 2017、Github</p>\n                            </li>-->\n                            <li>\n                                <h5>技术选型</h5>\n                                <p>Winform、Socket、讯飞语音</p>\n                            </li>\n                            <li>\n                                <h5>职责领域</h5>\n                                <p>系统的全部功能模块。</p>\n                            </li>\n                        </ul>\n                    </li>\n\n                    <li>\n                        <h3 class=\"project-title\">** 医保统筹支付服务（<time>2017/03--今</time>）</h3>\n                        <ul class=\"project-detail\">\n                            <li>\n                                <h5>项目介绍</h5>\n                                <p>\n                                    在医院内搭建一个医保平台对外调用，提供医保的患者信息管理、统筹试算、统筹支付等功能。\n                                </p>\n                            </li>\n                            <!--<li>\n                                <h5>开发环境</h5>\n                                <p>Windows Server 2012、Visual Studio 2015、Github</p>\n                            </li>-->\n                            <li>\n                                <h5>技术选型</h5>\n                                <p>WCF、Web Api、Asp.Net MVC</p>\n                            </li>\n                            <li>\n                                <h5>职责领域</h5>\n                                <p>系统的全部功能模块。</p>\n                            </li>\n                        </ul>\n                    </li>\n                    <li>\n                        <h3 class=\"project-title\">广东医科大学双代会提案管理系统（<time>2016/03--2017/11</time>）</h3>\n                        <ul class=\"project-detail\">\n                            <li>\n                                <h5>项目介绍</h5>\n                                <p>\n                                    学校教师代表大会和工会每年会举行一次双代会，本项目用于使双代会的整个过程自动化、无纸化。主要功能新提案的提交与审核、提案的搜索、提案的汇总分析、已通过提案的进度跟踪、以及各进度的邮件通知。本人担当该项目的主要编程人员同时负责核心代码\n                                    。\n                                </p>\n                            </li>\n                            <li>\n                                <h5>第一阶段（<time>2016/03--2016/5</time>）</h5>\n                                <ul>\n                                    <li>\n                                        <h5>开发环境</h5>\n                                        <p>Windows 10、Visual Studio 2010、Access、SVN</p>\n                                    </li>\n                                    <li>\n                                        <h5>技术选型</h5>\n                                        <p>ASP.NET、Nvelocity、NPOI、Spore.Doc、Ionoc.Zip、HTML5、jQuery、BootStrap、DataTablesJQuery、Gritter</p>\n                                    </li>\n                                    <!--<li>\n                                        <h5>职责领域</h5>\n                                        <p>\n                                            系统的全部功能模块\n                                        </p>\n                                    </li>-->\n                                    <li>\n                                        <h5>阶段简介</h5>\n                                        <p>\n                                            这个阶段主要是为了能够尽快完成学校方面提出的需求以便投入使用，选用了Nvelocity模板引擎作为项目的整体解决方案。项目从2016年3月提出，4月上线提案提交审核、搜索功能配合学校的双代会进度，5月完成剩下的提案进度管理、邮件通知、提案汇总与分析功能，目前运行良好。\n                                        </p>\n                                    </li>\n                                </ul>\n                            </li>\n                            <li>\n                                <h5>第二阶段（<time>2016/09--2017/7</time>）</h5>\n                                <ul>\n                                    <li>\n                                        <h5>开发环境</h5>\n                                        <p>Windows 10、Visual Studio 2012、SQL Server Compact、SVN、NuGet</p>\n                                    </li>\n                                    <li>\n                                        <h5>技术选型</h5>\n                                        <p>ASP.NET MVC、EntityFramework、Razor、Log4Net、Lucene、Spring.Net、NPOI、Spore.Doc、Ionoc.Zip、HTML5、jQuery、BootStrap、DataTablesJQuery、Gritter</p>\n                                    </li>\n                                    <!--<li>\n                                        <h5>职责领域</h5>\n                                        <p>\n                                            系统的全部功能模块\n                                        </p>\n                                    </li>-->\n                                    <li>\n                                        <h5>阶段简介</h5>\n                                        <p>\n                                            由于第一阶段时间过于紧张，再加上技术有限，代码质量较差，业务、数据、界面之间相互耦合，不便于维护和二次开发，再加上对ASP.NET MVC有了一定的掌握，使用多层架构加MVC框架重构此项目，于12月完成并成功上线并在之后的几个月稳定运行，2017年5月新一届双代会时响应了学校方面新需求，之后验收交于学校老师维护。\n                                        </p>\n                                    </li>\n                                </ul>\n                            </li>\n                        </ul>\n                    </li>\n                    <li>\n\n                        <h3 class=\"project-title\">基于Scrapy架构的C#爬虫框架（<time>2016/09--2016/11</time>）</h3>\n                        <ul class=\"project-detail\">······</ul>\n                    </li>\n                    <li>\n                        <h3 class=\"project-title\">督导听课排课系统（<time>2014/03--2015/08</time>）</h3>\n                        <ul class=\"project-detail\">······</ul>\n                    </li>\n                </ol>\n            </div>\n        </section>\n        <!-- 项目经验 结束 -->\n        <!-- 获奖情况 开始 -->\n        <!--<section class=\"panel\">\n            <h2 class=\"panel-head\">获奖情况</h2>\n            <div class=\"panel-body\">\n                <ol class=\"timeline\" style=\"text-align: center\">\n                    <li><span>第二届项目设计大赛优秀奖</span><span>校园换客网</span><span>2016-05</span></li>\n                    <li><span>第十届网页设计大赛优秀奖</span><span>中医药论坛</span><span>2016-05</span></li>\n                    <li><span>大学生科技创新优秀团队</span><span>破晓技术团队</span><span>2014-12</span></li>\n                    <li><span>广东青年创新创业大赛优秀奖</span><span>督导听课排课管理系统</span><span>2014-11</span></li>\n                </ol>\n            </div>\n        </section>-->\n        <!-- 获奖情况 结束 -->\n        <!-- 工作经历 开始 -->\n        <section class=\"panel\">\n            <h2 class=\"panel-head\">工作经历</h2>\n            <div class=\"panel-body\">\n                <ol class=\"timeline\">\n                    <li><span>2013/09 -- 2017/07</span><span>广东医科大学</span><span>学生</span></li>\n                    <li><span>2016/11 -- 至今</span><span>广州宸瑞软件科技有限公司</span><span>流媒体研发工程师</span></li>\n                </ol>\n            </div>\n        </section>\n        <!-- 工作经历 结束 -->\n        <!-- 关注我 开始 -->\n        <section class=\"panel\">\n            <h2 class=\"panel-head\">Fork Me</h2>\n            <div class=\"panel-body\">\n                <ol class=\"content-list\">\n                    <li>\n                        GitHub\n                        ：<a href=\"https://github.com/wayneshao\">https://github.com/wayneshao</a>\n                    </li>\n                    <li>\n                        Blog\n                        ：<a href=\"https://blog.wayneshao.cn/\">https://blog.wayneshao.cn/</a>\n                    </li>\n                </ol>\n            </div>\n        </section>\n        <!-- 关注我 结束 -->\n        <!-- 自我评价 开始 -->\n        <section class=\"panel\">\n            <h2 class=\"panel-head\">自我评价</h2>\n            <div class=\"panel-body\">\n                <ol class=\"content-list\">\n                    <li>\n                        <h5>热爱编程</h5>\n                    </li>\n                    <p>\n                        能积极主动的学习编程知识并用于解决实际问题，编程上的进步能给我带来充分的成就感，鼓舞我继续努力学习。\n                    </p>\n                    <li>\n                        <h5>出色的自学能力</h5>\n                    </li>\n                    <p>\n                        专业课成绩名列前茅；能在文档齐全的情况下迅速的学习并上手新技术，能够在工具辅助下流畅阅读英文文档。\n                    </p>\n                    <!--<li>\n                        <h5>丰富的开发经验</h5>\n                    </li>\n                    <p>\n                        从大一开始参与开发，大一暑假就和同学一起留校进行《督导排课系统》的开发，后来陆续开发了一些小软件用于处理日常问题，如“网管小助手”、“一木禾下载地址批量解析器”等，大三独立为学校部门开发网站系统，至今仍在使用，评价良好。\n                    </p>-->\n                </ol>\n            </div>\n        </section>\n        <!-- 自我评价 结束 -->\n        <!-- 自我规划 开始 -->\n        <section class=\"panel\">\n            <h2 class=\"panel-head\">想做的事儿</h2>\n            <div class=\"panel-body\">\n                <!--<p>希望自己能够迅速成长，在两年内成为BAT水平的程序员</p>-->\n                <ol class=\"content-list\">\n                    <li>深入研究C#底层原理，阅读C#源码；</li>\n                    <li>随时了解计算机前沿技术，扎根开源社区，贡献开源项目；</li>\n                    <li>在学习的同时勤写博客记录分享所得所思；</li>\n                </ol>\n            </div>\n        </section>\n        <!-- 自我规划 结束 -->\n    </section>\n</body>\n</html>\n","date":"2018-06-22T03:03:52.048Z","updated":"2018-03-06T09:37:00.000Z","path":"resume.html","title":"","comments":1,"layout":"page","_id":"cjno24p230070d00ojkdehf1q","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><!DOCTYPE html><html lang=\"zh-cn\"><head><meta charset=\"utf-8\"><title>邵玮的个人简历</title><style type=\"text/css\">a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video{margin:0;padding:0;border:0;font-size:100%;vertical-align:baseline}body,html{color:#444;background-color:#e6e6e6}a:link,a:visited{color:#444;text-decoration:none}.page{width:794px;background-color:#fff;margin:20px auto;padding:20px 40px;box-shadow:0 2px 6px rgba(100,100,100,.3)}.page-head{line-height:1.846153846}.page-head>a{color:#515151;display:inline-block;text-decoration:none;font-size:36px}.page-sub-head{font-weight:400;font-size:13px;font-size:.928571429rem;line-height:1.846153846;color:#757575}.panel{margin:20px 0 10px}.panel-head{font-size:26px;line-height:1.846153846;border-bottom:1px solid #e0e0e0;padding-left:10px}.panel-body{padding:10px}.profile{position:relative;overflow:hidden;padding-left:20px}.profile>li{width:50%;float:left;line-height:36px}.content-list{padding-left:30px}.content-list>li{line-height:36px}.timeline{padding-left:30px}.timeline>li{line-height:36px}.timeline>li>span{width:33%;display:inline-block}.projects{padding-left:30px}.project-detail{padding:15px 5px 0;padding-left:15px}.project-detail>li>p{margin:10px;margin-bottom:15px}.project-detail>li>ol,.project-detail>li>ul{padding-left:30px;margin:10px;line-height:23px}p{text-indent:2em;line-height:28px}</style></head><body><section class=\"page\"><hgroup><h1 class=\"page-head\"><a href=\"http://www.shaowei.pro/Resume.html\" title=\"邵玮的个人简历\" target=\"_blank\" rel=\"noopener\">邵玮的个人简历</a></h1><h2 class=\"page-sub-head\">.Net后端开发工程师</h2></hgroup><section class=\"panel\"><h2 class=\"panel-head\">基本资料</h2><div class=\"panel-body\"><ul class=\"profile\"><li>姓&nbsp;&nbsp;名：邵玮</li><li>工作经验：1.5年</li><li>联系邮箱：<a href=\"mailto:owner@shaowei.pro\" target=\"_blank\" rel=\"noopener\">owner@shaowei.pro</a></li><li>联系电话：<a href=\"tel:13794981669\" target=\"_blank\" rel=\"noopener\">137-9498-1669</a></li></ul></div></section><section class=\"panel\"><h2 class=\"panel-head\">专业技能</h2><div class=\"panel-body\"><ol class=\"content-list\"><li>熟练掌握ASP.NET开发并可以使用.Net Core进行跨平台开发、熟练使用MVC框架、熟悉License.Net、Spring.Net等框架、熟悉Web API、WCF技术，能独立开发基于Asp.Net的B/S系统。</li><li>熟练掌握Winform桌面程序开发、熟悉WPF开发，能独立开发Windows PC端应用，并对Xamarin、Electron.Net有一定了解。</li><li>熟悉SQL语言，熟练使用SQL Server、Oracle数据库，掌握数据库设计流程；</li><li>熟练使用HTML、CSS、JavaScript技术以及JQuery、Bootstrap、Vue.JS、JQuery EasyUI等框架进行网页设计；</li><li>熟练使用SVN、Git进行代码版本控制；</li><li>掌握Java、C/C++、Python语言基础；</li><li>熟练使用Office办公软件，掌握Photoshop、会声会影基础。</li></ol></div></section><section class=\"panel\"><h2 class=\"panel-head\">项目经验</h2><div class=\"panel-body\"><ol class=\"projects\"><li><h3 class=\"project-title\">** 播放器（<time>2017/03--今</time>）</h3><ul class=\"project-detail\"><li><h5>项目介绍</h5><p>用于公司所有需要桌面端视频推拉流项目的播放器软件。</p></li><li><h5>技术选型</h5><p>FFMPEG、Winform、WebSocket</p></li><li><h5>职责领域</h5><ol class=\"content-list\"><li>与各个端进行信令交互，控制播放器执行业务流程。</li><li>以Web页面的形式对其它设备开放遥控器功能，控制摄像头等设备的状态与推拉流、预览的状态。</li><li>与硬件设备进行串口通信。</li></ol></li></ul></li><li><h3 class=\"project-title\">** 云助手（<time>2017/01--2017/10</time>）</h3><ul class=\"project-detail\"><li><h5>项目介绍</h5><p>主要有云文件管理、上传下载文件和语音输入功能。</p></li><li><h5>技术选型</h5><p>Winform、Socket、讯飞语音</p></li><li><h5>职责领域</h5><p>系统的全部功能模块。</p></li></ul></li><li><h3 class=\"project-title\">** 医保统筹支付服务（<time>2017/03--今</time>）</h3><ul class=\"project-detail\"><li><h5>项目介绍</h5><p>在医院内搭建一个医保平台对外调用，提供医保的患者信息管理、统筹试算、统筹支付等功能。</p></li><li><h5>技术选型</h5><p>WCF、Web Api、Asp.Net MVC</p></li><li><h5>职责领域</h5><p>系统的全部功能模块。</p></li></ul></li><li><h3 class=\"project-title\">广东医科大学双代会提案管理系统（<time>2016/03--2017/11</time>）</h3><ul class=\"project-detail\"><li><h5>项目介绍</h5><p>学校教师代表大会和工会每年会举行一次双代会，本项目用于使双代会的整个过程自动化、无纸化。主要功能新提案的提交与审核、提案的搜索、提案的汇总分析、已通过提案的进度跟踪、以及各进度的邮件通知。本人担当该项目的主要编程人员同时负责核心代码 。</p></li><li><h5>第一阶段（<time>2016/03--2016/5</time>）</h5><ul><li><h5>开发环境</h5><p>Windows 10、Visual Studio 2010、Access、SVN</p></li><li><h5>技术选型</h5><p>ASP.NET、Nvelocity、NPOI、Spore.Doc、Ionoc.Zip、HTML5、jQuery、BootStrap、DataTablesJQuery、Gritter</p></li><li><h5>阶段简介</h5><p>这个阶段主要是为了能够尽快完成学校方面提出的需求以便投入使用，选用了Nvelocity模板引擎作为项目的整体解决方案。项目从2016年3月提出，4月上线提案提交审核、搜索功能配合学校的双代会进度，5月完成剩下的提案进度管理、邮件通知、提案汇总与分析功能，目前运行良好。</p></li></ul></li><li><h5>第二阶段（<time>2016/09--2017/7</time>）</h5><ul><li><h5>开发环境</h5><p>Windows 10、Visual Studio 2012、SQL Server Compact、SVN、NuGet</p></li><li><h5>技术选型</h5><p>ASP.NET MVC、EntityFramework、Razor、Log4Net、Lucene、Spring.Net、NPOI、Spore.Doc、Ionoc.Zip、HTML5、jQuery、BootStrap、DataTablesJQuery、Gritter</p></li><li><h5>阶段简介</h5><p>由于第一阶段时间过于紧张，再加上技术有限，代码质量较差，业务、数据、界面之间相互耦合，不便于维护和二次开发，再加上对ASP.NET MVC有了一定的掌握，使用多层架构加MVC框架重构此项目，于12月完成并成功上线并在之后的几个月稳定运行，2017年5月新一届双代会时响应了学校方面新需求，之后验收交于学校老师维护。</p></li></ul></li></ul></li><li><h3 class=\"project-title\">基于Scrapy架构的C#爬虫框架（<time>2016/09--2016/11</time>）</h3><ul class=\"project-detail\">······</ul></li><li><h3 class=\"project-title\">督导听课排课系统（<time>2014/03--2015/08</time>）</h3><ul class=\"project-detail\">······</ul></li></ol></div></section><section class=\"panel\"><h2 class=\"panel-head\">工作经历</h2><div class=\"panel-body\"><ol class=\"timeline\"><li><span>2013/09 -- 2017/07</span><span>广东医科大学</span><span>学生</span></li><li><span>2016/11 -- 至今</span><span>广州宸瑞软件科技有限公司</span><span>流媒体研发工程师</span></li></ol></div></section><section class=\"panel\"><h2 class=\"panel-head\">Fork Me</h2><div class=\"panel-body\"><ol class=\"content-list\"><li>GitHub ：<a href=\"https://github.com/wayneshao\" target=\"_blank\" rel=\"noopener\">https://github.com/wayneshao</a></li><li>Blog ：<a href=\"https://blog.wayneshao.cn/\" target=\"_blank\" rel=\"noopener\">https://blog.wayneshao.cn/</a></li></ol></div></section><section class=\"panel\"><h2 class=\"panel-head\">自我评价</h2><div class=\"panel-body\"><ol class=\"content-list\"><li><h5>热爱编程</h5></li><p>能积极主动的学习编程知识并用于解决实际问题，编程上的进步能给我带来充分的成就感，鼓舞我继续努力学习。</p><li><h5>出色的自学能力</h5></li><p>专业课成绩名列前茅；能在文档齐全的情况下迅速的学习并上手新技术，能够在工具辅助下流畅阅读英文文档。</p></ol></div></section><section class=\"panel\"><h2 class=\"panel-head\">想做的事儿</h2><div class=\"panel-body\"><ol class=\"content-list\"><li>深入研究C#底层原理，阅读C#源码；</li><li>随时了解计算机前沿技术，扎根开源社区，贡献开源项目；</li><li>在学习的同时勤写博客记录分享所得所思；</li></ol></div></section></section></body></html><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><!DOCTYPE html><html lang=\"zh-cn\"><head><meta charset=\"utf-8\"><title>邵玮的个人简历</title><style type=\"text/css\">a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video{margin:0;padding:0;border:0;font-size:100%;vertical-align:baseline}body,html{color:#444;background-color:#e6e6e6}a:link,a:visited{color:#444;text-decoration:none}.page{width:794px;background-color:#fff;margin:20px auto;padding:20px 40px;box-shadow:0 2px 6px rgba(100,100,100,.3)}.page-head{line-height:1.846153846}.page-head>a{color:#515151;display:inline-block;text-decoration:none;font-size:36px}.page-sub-head{font-weight:400;font-size:13px;font-size:.928571429rem;line-height:1.846153846;color:#757575}.panel{margin:20px 0 10px}.panel-head{font-size:26px;line-height:1.846153846;border-bottom:1px solid #e0e0e0;padding-left:10px}.panel-body{padding:10px}.profile{position:relative;overflow:hidden;padding-left:20px}.profile>li{width:50%;float:left;line-height:36px}.content-list{padding-left:30px}.content-list>li{line-height:36px}.timeline{padding-left:30px}.timeline>li{line-height:36px}.timeline>li>span{width:33%;display:inline-block}.projects{padding-left:30px}.project-detail{padding:15px 5px 0;padding-left:15px}.project-detail>li>p{margin:10px;margin-bottom:15px}.project-detail>li>ol,.project-detail>li>ul{padding-left:30px;margin:10px;line-height:23px}p{text-indent:2em;line-height:28px}</style></head><body><section class=\"page\"><hgroup><h1 class=\"page-head\"><a href=\"http://www.shaowei.pro/Resume.html\" title=\"邵玮的个人简历\" target=\"_blank\" rel=\"noopener\">邵玮的个人简历</a></h1><h2 class=\"page-sub-head\">.Net后端开发工程师</h2></hgroup><section class=\"panel\"><h2 class=\"panel-head\">基本资料</h2><div class=\"panel-body\"><ul class=\"profile\"><li>姓&nbsp;&nbsp;名：邵玮</li><li>工作经验：1.5年</li><li>联系邮箱：<a href=\"mailto:owner@shaowei.pro\" target=\"_blank\" rel=\"noopener\">owner@shaowei.pro</a></li><li>联系电话：<a href=\"tel:13794981669\" target=\"_blank\" rel=\"noopener\">137-9498-1669</a></li></ul></div></section><section class=\"panel\"><h2 class=\"panel-head\">专业技能</h2><div class=\"panel-body\"><ol class=\"content-list\"><li>熟练掌握ASP.NET开发并可以使用.Net Core进行跨平台开发、熟练使用MVC框架、熟悉License.Net、Spring.Net等框架、熟悉Web API、WCF技术，能独立开发基于Asp.Net的B/S系统。</li><li>熟练掌握Winform桌面程序开发、熟悉WPF开发，能独立开发Windows PC端应用，并对Xamarin、Electron.Net有一定了解。</li><li>熟悉SQL语言，熟练使用SQL Server、Oracle数据库，掌握数据库设计流程；</li><li>熟练使用HTML、CSS、JavaScript技术以及JQuery、Bootstrap、Vue.JS、JQuery EasyUI等框架进行网页设计；</li><li>熟练使用SVN、Git进行代码版本控制；</li><li>掌握Java、C/C++、Python语言基础；</li><li>熟练使用Office办公软件，掌握Photoshop、会声会影基础。</li></ol></div></section><section class=\"panel\"><h2 class=\"panel-head\">项目经验</h2><div class=\"panel-body\"><ol class=\"projects\"><li><h3 class=\"project-title\">** 播放器（<time>2017/03--今</time>）</h3><ul class=\"project-detail\"><li><h5>项目介绍</h5><p>用于公司所有需要桌面端视频推拉流项目的播放器软件。</p></li><li><h5>技术选型</h5><p>FFMPEG、Winform、WebSocket</p></li><li><h5>职责领域</h5><ol class=\"content-list\"><li>与各个端进行信令交互，控制播放器执行业务流程。</li><li>以Web页面的形式对其它设备开放遥控器功能，控制摄像头等设备的状态与推拉流、预览的状态。</li><li>与硬件设备进行串口通信。</li></ol></li></ul></li><li><h3 class=\"project-title\">** 云助手（<time>2017/01--2017/10</time>）</h3><ul class=\"project-detail\"><li><h5>项目介绍</h5><p>主要有云文件管理、上传下载文件和语音输入功能。</p></li><li><h5>技术选型</h5><p>Winform、Socket、讯飞语音</p></li><li><h5>职责领域</h5><p>系统的全部功能模块。</p></li></ul></li><li><h3 class=\"project-title\">** 医保统筹支付服务（<time>2017/03--今</time>）</h3><ul class=\"project-detail\"><li><h5>项目介绍</h5><p>在医院内搭建一个医保平台对外调用，提供医保的患者信息管理、统筹试算、统筹支付等功能。</p></li><li><h5>技术选型</h5><p>WCF、Web Api、Asp.Net MVC</p></li><li><h5>职责领域</h5><p>系统的全部功能模块。</p></li></ul></li><li><h3 class=\"project-title\">广东医科大学双代会提案管理系统（<time>2016/03--2017/11</time>）</h3><ul class=\"project-detail\"><li><h5>项目介绍</h5><p>学校教师代表大会和工会每年会举行一次双代会，本项目用于使双代会的整个过程自动化、无纸化。主要功能新提案的提交与审核、提案的搜索、提案的汇总分析、已通过提案的进度跟踪、以及各进度的邮件通知。本人担当该项目的主要编程人员同时负责核心代码 。</p></li><li><h5>第一阶段（<time>2016/03--2016/5</time>）</h5><ul><li><h5>开发环境</h5><p>Windows 10、Visual Studio 2010、Access、SVN</p></li><li><h5>技术选型</h5><p>ASP.NET、Nvelocity、NPOI、Spore.Doc、Ionoc.Zip、HTML5、jQuery、BootStrap、DataTablesJQuery、Gritter</p></li><li><h5>阶段简介</h5><p>这个阶段主要是为了能够尽快完成学校方面提出的需求以便投入使用，选用了Nvelocity模板引擎作为项目的整体解决方案。项目从2016年3月提出，4月上线提案提交审核、搜索功能配合学校的双代会进度，5月完成剩下的提案进度管理、邮件通知、提案汇总与分析功能，目前运行良好。</p></li></ul></li><li><h5>第二阶段（<time>2016/09--2017/7</time>）</h5><ul><li><h5>开发环境</h5><p>Windows 10、Visual Studio 2012、SQL Server Compact、SVN、NuGet</p></li><li><h5>技术选型</h5><p>ASP.NET MVC、EntityFramework、Razor、Log4Net、Lucene、Spring.Net、NPOI、Spore.Doc、Ionoc.Zip、HTML5、jQuery、BootStrap、DataTablesJQuery、Gritter</p></li><li><h5>阶段简介</h5><p>由于第一阶段时间过于紧张，再加上技术有限，代码质量较差，业务、数据、界面之间相互耦合，不便于维护和二次开发，再加上对ASP.NET MVC有了一定的掌握，使用多层架构加MVC框架重构此项目，于12月完成并成功上线并在之后的几个月稳定运行，2017年5月新一届双代会时响应了学校方面新需求，之后验收交于学校老师维护。</p></li></ul></li></ul></li><li><h3 class=\"project-title\">基于Scrapy架构的C#爬虫框架（<time>2016/09--2016/11</time>）</h3><ul class=\"project-detail\">······</ul></li><li><h3 class=\"project-title\">督导听课排课系统（<time>2014/03--2015/08</time>）</h3><ul class=\"project-detail\">······</ul></li></ol></div></section><section class=\"panel\"><h2 class=\"panel-head\">工作经历</h2><div class=\"panel-body\"><ol class=\"timeline\"><li><span>2013/09 -- 2017/07</span><span>广东医科大学</span><span>学生</span></li><li><span>2016/11 -- 至今</span><span>广州宸瑞软件科技有限公司</span><span>流媒体研发工程师</span></li></ol></div></section><section class=\"panel\"><h2 class=\"panel-head\">Fork Me</h2><div class=\"panel-body\"><ol class=\"content-list\"><li>GitHub ：<a href=\"https://github.com/wayneshao\" target=\"_blank\" rel=\"noopener\">https://github.com/wayneshao</a></li><li>Blog ：<a href=\"https://blog.wayneshao.cn/\" target=\"_blank\" rel=\"noopener\">https://blog.wayneshao.cn/</a></li></ol></div></section><section class=\"panel\"><h2 class=\"panel-head\">自我评价</h2><div class=\"panel-body\"><ol class=\"content-list\"><li><h5>热爱编程</h5></li><p>能积极主动的学习编程知识并用于解决实际问题，编程上的进步能给我带来充分的成就感，鼓舞我继续努力学习。</p><li><h5>出色的自学能力</h5></li><p>专业课成绩名列前茅；能在文档齐全的情况下迅速的学习并上手新技术，能够在工具辅助下流畅阅读英文文档。</p></ol></div></section><section class=\"panel\"><h2 class=\"panel-head\">想做的事儿</h2><div class=\"panel-body\"><ol class=\"content-list\"><li>深入研究C#底层原理，阅读C#源码；</li><li>随时了解计算机前沿技术，扎根开源社区，贡献开源项目；</li><li>在学习的同时勤写博客记录分享所得所思；</li></ol></div></section></section></body></html><!-- rebuild by neat -->"},{"title":"tags","date":"2018-02-18T09:04:42.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-02-18 17:04:42\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-02-18T09:27:48.000Z","path":"tags/index.html","layout":"page","_id":"cjno24p270072d00obj9bbzwq","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->"}],"Post":[{"title":"【51NOD刷题】1283 最小周长","mathjax":true,"abbrlink":37987,"date":"2018-03-04T15:22:22.000Z","_content":"[**1283 最小周长**](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1283)\n题目来源： Codility\n基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题\n一个矩形的面积为S，已知该矩形的边长都是整数，求所有满足条件的矩形中，周长的最小值。例如：S = 24，那么有{1 24} {2 12} {3 8} {4 6}这4种矩形，其中{4 6}的周长最小，为20。\n<!--more-->\n## 输入输出\n**Input**\n输入1个数S(1 <= S <= 10^9)。\n\n**Output**\n输出最小周长。\n\n**Input示例**\n> 24\n\n\n**Output示例**\n> 20\n\n## 题目分析\n这个题可以说是相当眼熟了，相比在过去的义务教育期间一定做过类似的题目，只不过题目并没有要求矩形的边长是整数。\n我们按照边长不一定是整数做一次推倒：\n设矩形的长和宽分别是x、y，已知举行的面积为S，求周长l的最小值。\n\n$S=x*y$\n\n$l=2(x+y)>=4\\sqrt{xy}=4\\sqrt{S}$\n\n$l>=4\\sqrt{S}$\n\n所以若不要求边长为整数，则最小周长为$4\\sqrt{S}$。\n\n当要求边长为整数时，对S开二次根的到数字w，找到在比w小的整数中，用S可以整除的最大的数，此时的w和S/w组成的矩形则为最小周长。\n## Accepted\n```csharp\nusing System;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var s = Convert.ToInt32(Console.ReadLine());\n\n        var w = Math.Sqrt(s);\n        for (var i = (int)w; i > 0; i--)\n        {\n            var res = s * 1.0 / i;\n            if (!(Math.Abs(res - (int) res) < 0.000001)) continue;\n            Console.WriteLine((int)((i + res) * 2));\n            return;\n        }\n    }\n}\n```","source":"_posts/1283-最小周长.md","raw":"---\ntitle: 【51NOD刷题】1283 最小周长\ntags:\n  - 51NOD\n  - 刷题\n  - 'C#'\nmathjax: true\nabbrlink: 37987\ndate: 2018-03-04 23:22:22\n---\n[**1283 最小周长**](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1283)\n题目来源： Codility\n基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题\n一个矩形的面积为S，已知该矩形的边长都是整数，求所有满足条件的矩形中，周长的最小值。例如：S = 24，那么有{1 24} {2 12} {3 8} {4 6}这4种矩形，其中{4 6}的周长最小，为20。\n<!--more-->\n## 输入输出\n**Input**\n输入1个数S(1 <= S <= 10^9)。\n\n**Output**\n输出最小周长。\n\n**Input示例**\n> 24\n\n\n**Output示例**\n> 20\n\n## 题目分析\n这个题可以说是相当眼熟了，相比在过去的义务教育期间一定做过类似的题目，只不过题目并没有要求矩形的边长是整数。\n我们按照边长不一定是整数做一次推倒：\n设矩形的长和宽分别是x、y，已知举行的面积为S，求周长l的最小值。\n\n$S=x*y$\n\n$l=2(x+y)>=4\\sqrt{xy}=4\\sqrt{S}$\n\n$l>=4\\sqrt{S}$\n\n所以若不要求边长为整数，则最小周长为$4\\sqrt{S}$。\n\n当要求边长为整数时，对S开二次根的到数字w，找到在比w小的整数中，用S可以整除的最大的数，此时的w和S/w组成的矩形则为最小周长。\n## Accepted\n```csharp\nusing System;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var s = Convert.ToInt32(Console.ReadLine());\n\n        var w = Math.Sqrt(s);\n        for (var i = (int)w; i > 0; i--)\n        {\n            var res = s * 1.0 / i;\n            if (!(Math.Abs(res - (int) res) < 0.000001)) continue;\n            Console.WriteLine((int)((i + res) * 2));\n            return;\n        }\n    }\n}\n```","slug":"1283-最小周长","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24os20000d00obban920b","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1283\" target=\"_blank\" rel=\"noopener\"><strong>1283 最小周长</strong></a><br>题目来源： Codility<br>基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题<br>一个矩形的面积为S，已知该矩形的边长都是整数，求所有满足条件的矩形中，周长的最小值。例如：S = 24，那么有{1 24} {2 12} {3 8} {4 6}这4种矩形，其中{4 6}的周长最小，为20。<br><a id=\"more\"></a></p><h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>输入1个数S(1 &lt;= S &lt;= 10^9)。</p><p><strong>Output</strong><br>输出最小周长。</p><p><strong>Input示例</strong></p><blockquote><p>24</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>20</p></blockquote><h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>这个题可以说是相当眼熟了，相比在过去的义务教育期间一定做过类似的题目，只不过题目并没有要求矩形的边长是整数。<br>我们按照边长不一定是整数做一次推倒：<br>设矩形的长和宽分别是x、y，已知举行的面积为S，求周长l的最小值。</p><p>$S=x*y$</p><p>$l=2(x+y)&gt;=4\\sqrt{xy}=4\\sqrt{S}$</p><p>$l&gt;=4\\sqrt{S}$</p><p>所以若不要求边长为整数，则最小周长为$4\\sqrt{S}$。</p><p>当要求边长为整数时，对S开二次根的到数字w，找到在比w小的整数中，用S可以整除的最大的数，此时的w和S/w组成的矩形则为最小周长。</p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = Convert.ToInt32(Console.ReadLine());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> w = Math.Sqrt(s);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = (<span class=\"keyword\">int</span>)w; i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> res = s * <span class=\"number\">1.0</span> / i;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(Math.Abs(res - (<span class=\"keyword\">int</span>) res) &lt; <span class=\"number\">0.000001</span>)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            Console.WriteLine((<span class=\"keyword\">int</span>)((i + res) * <span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1283\" target=\"_blank\" rel=\"noopener\"><strong>1283 最小周长</strong></a><br>题目来源： Codility<br>基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题<br>一个矩形的面积为S，已知该矩形的边长都是整数，求所有满足条件的矩形中，周长的最小值。例如：S = 24，那么有{1 24} {2 12} {3 8} {4 6}这4种矩形，其中{4 6}的周长最小，为20。<br>","more":"</p><h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>输入1个数S(1 &lt;= S &lt;= 10^9)。</p><p><strong>Output</strong><br>输出最小周长。</p><p><strong>Input示例</strong></p><blockquote><p>24</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>20</p></blockquote><h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>这个题可以说是相当眼熟了，相比在过去的义务教育期间一定做过类似的题目，只不过题目并没有要求矩形的边长是整数。<br>我们按照边长不一定是整数做一次推倒：<br>设矩形的长和宽分别是x、y，已知举行的面积为S，求周长l的最小值。</p><p>$S=x*y$</p><p>$l=2(x+y)&gt;=4\\sqrt{xy}=4\\sqrt{S}$</p><p>$l&gt;=4\\sqrt{S}$</p><p>所以若不要求边长为整数，则最小周长为$4\\sqrt{S}$。</p><p>当要求边长为整数时，对S开二次根的到数字w，找到在比w小的整数中，用S可以整除的最大的数，此时的w和S/w组成的矩形则为最小周长。</p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = Convert.ToInt32(Console.ReadLine());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> w = Math.Sqrt(s);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = (<span class=\"keyword\">int</span>)w; i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> res = s * <span class=\"number\">1.0</span> / i;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(Math.Abs(res - (<span class=\"keyword\">int</span>) res) &lt; <span class=\"number\">0.000001</span>)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            Console.WriteLine((<span class=\"keyword\">int</span>)((i + res) * <span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"C# TextBox Ctrl+A全选","abbrlink":15970,"date":"2016-01-28T11:00:38.000Z","_content":"Winform程序中光标在TextBox控件中时按下 Ctrl + A 快捷键，并不能选中全部文字，而是会发出警告音。本文给出实现方法。\n<!-- more -->\n在TextBox控件中使用快捷键，一般要求按下快捷键立刻产生效果，KeyUp事件显然不符合我们的要求，而KeyPress事件中不支持使用组合件，所以我们选用KeyDown事件，具体代码实现如下：\n```csharp\nprivate void tBBefore_KeyDown(object sender, KeyEventArgs e)\n{\n    if (e.Control && e.KeyCode == Keys.A)\n    {\n        ((TextBox)sender).SelectAll();\n    }\n}\n```","source":"_posts/C#-TextBox-Ctrl+A全选.md","raw":"---\ntitle: 'C# TextBox Ctrl+A全选'\ntags:\n  - Winform\nabbrlink: 15970\ndate: 2016-01-28 19:00:38\n---\nWinform程序中光标在TextBox控件中时按下 Ctrl + A 快捷键，并不能选中全部文字，而是会发出警告音。本文给出实现方法。\n<!-- more -->\n在TextBox控件中使用快捷键，一般要求按下快捷键立刻产生效果，KeyUp事件显然不符合我们的要求，而KeyPress事件中不支持使用组合件，所以我们选用KeyDown事件，具体代码实现如下：\n```csharp\nprivate void tBBefore_KeyDown(object sender, KeyEventArgs e)\n{\n    if (e.Control && e.KeyCode == Keys.A)\n    {\n        ((TextBox)sender).SelectAll();\n    }\n}\n```","slug":"C#-TextBox-Ctrl+A全选","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24os90001d00obvz2i0wg","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>Winform程序中光标在TextBox控件中时按下 Ctrl + A 快捷键，并不能选中全部文字，而是会发出警告音。本文给出实现方法。<br><a id=\"more\"></a><br>在TextBox控件中使用快捷键，一般要求按下快捷键立刻产生效果，KeyUp事件显然不符合我们的要求，而KeyPress事件中不支持使用组合件，所以我们选用KeyDown事件，具体代码实现如下：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">tBBefore_KeyDown</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, KeyEventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.Control &amp;&amp; e.KeyCode == Keys.A)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ((TextBox)sender).SelectAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>Winform程序中光标在TextBox控件中时按下 Ctrl + A 快捷键，并不能选中全部文字，而是会发出警告音。本文给出实现方法。<br>","more":"<br>在TextBox控件中使用快捷键，一般要求按下快捷键立刻产生效果，KeyUp事件显然不符合我们的要求，而KeyPress事件中不支持使用组合件，所以我们选用KeyDown事件，具体代码实现如下：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">tBBefore_KeyDown</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, KeyEventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.Control &amp;&amp; e.KeyCode == Keys.A)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ((TextBox)sender).SelectAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"C#激爽特性——扩展方法","abbrlink":35525,"date":"2015-05-27T13:16:49.000Z","_content":"在最近的学习中，发现了一种用起来特别爽的C#特性——扩展方法，之前拜读《大话设计模式》一书的时候，书中提到这样一句话：“反射，反射，程序员的快乐”，本人菜鸟一只，到现在还未曾使用过反射，对于其是否真的快乐自然无从体会，不过扩展方法用起来称得上是相当快乐！\n<!-- more -->\n## 简介\n下面是MSDN中对于扩展方法的解释\n>  扩展方法使你能够向现有类型”添加“方法,而无需创建新的派生类型、重新编译或以其他方法修改原始类型。扩展方法是一种特殊的静态方法，但可以像扩展类型上的实力方法一样进行调用。对于C#和Visual Basic 编写的客户端代码，调用扩展方法与调用在类型中实际定义的方法之间没有明显的差异。\n\n刚开始学习C#的时候,经常碰到各种需要状态转换的场合,那个时候代码里常常是大坨大坨的Convert.ToXX();当时非常羡慕String类可以直接调用ToString方法,省时省力,代码看起来还特别美观,之后学会了把Convert.ToXX()打包到一个方法里,代码不那么冗余了,但还是不甚美观,且费时费力,直到今天,我发现了C#中这个让人激爽无比的特性,这件事情终于有了完美的解决方案!\n## 语法\n下面来看一下基本的语法:\n```csharp\npublic static 返回类型 方法名(this 需要添加扩展方法的类名 变量名,,,)\n{\n    return;\n}\n```\n## 实现\n首先我们写这样一个类: \n```csharp\nnamespace ExtensionMethods\n{\n    public static class ExtensionMethods\n    {\n        public static int ToInt(this string s)\n        {\n            return Convert.ToInt32(s);\n        }\n    }\n}\n```\n然后只需要在另一个类中引用这个类的命名空间，就可以方便地使用我们写好的扩展方法进行类型转换了:\n```csharp\nusing ExtensionMethods;\nnamespace xxx\n{\n    public static class xxxx\n    {\n        public static int Test()\n        {\n            int i = \"123\".ToInt();\n        }\n    }\n}\n```\n怎么样？是不是感觉一股凉气当头灌下——**真爽啊！**\n别急，光这样怎么能够满足我们的需求呢，接下来我们继续优化。\n## 优化\n以上已经方便了不少，但还是有以下两个问题：\n>** 每次还需要引用命名空间，太浪费时间精力。**\n\n解决方案：将扩展方法直接放到类型所在的命名空间下\n依旧以上面的代码为例，就是：\n```csharp\nnamespace System\n{\n    public static class ExtensionMethods\n    {\n        public static int ToInt(this string s)\n        {\n            return Convert.ToInt32(s);\n        }\n    }\n}\n```\n\n> **如果输入的String并不能转化为数字,会报错。**\n\n解决方案：加入另一个参数为默认值，若不能转化成功，则返回默认值。\n代码如下:\n```csharp\npublic static int ToInt32(this string s, int def = default(int))\n{\n    int result;\n    return Int32.TryParse(s, out result) ? result : def;\n}\n```\n按照上面的思路,我们可以打包一个包含各种常用类型转换的类,写程序的时候只要直接加入这个类,就可以方便地进行各种进制转换了.\n\n下面提供一个自用的Convert类[Convert.zip](http://p4au3q1y8.bkt.clouddn.com/Convert.zip)\n","source":"_posts/C#激爽特性——扩展方法.md","raw":"---\ntitle: 'C#激爽特性——扩展方法'\ntags:\n  - 特性\n  - 扩展方法\nabbrlink: 35525\ndate: 2015-05-27 21:16:49\n---\n在最近的学习中，发现了一种用起来特别爽的C#特性——扩展方法，之前拜读《大话设计模式》一书的时候，书中提到这样一句话：“反射，反射，程序员的快乐”，本人菜鸟一只，到现在还未曾使用过反射，对于其是否真的快乐自然无从体会，不过扩展方法用起来称得上是相当快乐！\n<!-- more -->\n## 简介\n下面是MSDN中对于扩展方法的解释\n>  扩展方法使你能够向现有类型”添加“方法,而无需创建新的派生类型、重新编译或以其他方法修改原始类型。扩展方法是一种特殊的静态方法，但可以像扩展类型上的实力方法一样进行调用。对于C#和Visual Basic 编写的客户端代码，调用扩展方法与调用在类型中实际定义的方法之间没有明显的差异。\n\n刚开始学习C#的时候,经常碰到各种需要状态转换的场合,那个时候代码里常常是大坨大坨的Convert.ToXX();当时非常羡慕String类可以直接调用ToString方法,省时省力,代码看起来还特别美观,之后学会了把Convert.ToXX()打包到一个方法里,代码不那么冗余了,但还是不甚美观,且费时费力,直到今天,我发现了C#中这个让人激爽无比的特性,这件事情终于有了完美的解决方案!\n## 语法\n下面来看一下基本的语法:\n```csharp\npublic static 返回类型 方法名(this 需要添加扩展方法的类名 变量名,,,)\n{\n    return;\n}\n```\n## 实现\n首先我们写这样一个类: \n```csharp\nnamespace ExtensionMethods\n{\n    public static class ExtensionMethods\n    {\n        public static int ToInt(this string s)\n        {\n            return Convert.ToInt32(s);\n        }\n    }\n}\n```\n然后只需要在另一个类中引用这个类的命名空间，就可以方便地使用我们写好的扩展方法进行类型转换了:\n```csharp\nusing ExtensionMethods;\nnamespace xxx\n{\n    public static class xxxx\n    {\n        public static int Test()\n        {\n            int i = \"123\".ToInt();\n        }\n    }\n}\n```\n怎么样？是不是感觉一股凉气当头灌下——**真爽啊！**\n别急，光这样怎么能够满足我们的需求呢，接下来我们继续优化。\n## 优化\n以上已经方便了不少，但还是有以下两个问题：\n>** 每次还需要引用命名空间，太浪费时间精力。**\n\n解决方案：将扩展方法直接放到类型所在的命名空间下\n依旧以上面的代码为例，就是：\n```csharp\nnamespace System\n{\n    public static class ExtensionMethods\n    {\n        public static int ToInt(this string s)\n        {\n            return Convert.ToInt32(s);\n        }\n    }\n}\n```\n\n> **如果输入的String并不能转化为数字,会报错。**\n\n解决方案：加入另一个参数为默认值，若不能转化成功，则返回默认值。\n代码如下:\n```csharp\npublic static int ToInt32(this string s, int def = default(int))\n{\n    int result;\n    return Int32.TryParse(s, out result) ? result : def;\n}\n```\n按照上面的思路,我们可以打包一个包含各种常用类型转换的类,写程序的时候只要直接加入这个类,就可以方便地进行各种进制转换了.\n\n下面提供一个自用的Convert类[Convert.zip](http://p4au3q1y8.bkt.clouddn.com/Convert.zip)\n","slug":"C#激爽特性——扩展方法","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24osd0003d00o7di0hhwq","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>在最近的学习中，发现了一种用起来特别爽的C#特性——扩展方法，之前拜读《大话设计模式》一书的时候，书中提到这样一句话：“反射，反射，程序员的快乐”，本人菜鸟一只，到现在还未曾使用过反射，对于其是否真的快乐自然无从体会，不过扩展方法用起来称得上是相当快乐！<br><a id=\"more\"></a></p><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>下面是MSDN中对于扩展方法的解释</p><blockquote><p>扩展方法使你能够向现有类型”添加“方法,而无需创建新的派生类型、重新编译或以其他方法修改原始类型。扩展方法是一种特殊的静态方法，但可以像扩展类型上的实力方法一样进行调用。对于C#和Visual Basic 编写的客户端代码，调用扩展方法与调用在类型中实际定义的方法之间没有明显的差异。</p></blockquote><p>刚开始学习C#的时候,经常碰到各种需要状态转换的场合,那个时候代码里常常是大坨大坨的Convert.ToXX();当时非常羡慕String类可以直接调用ToString方法,省时省力,代码看起来还特别美观,之后学会了把Convert.ToXX()打包到一个方法里,代码不那么冗余了,但还是不甚美观,且费时费力,直到今天,我发现了C#中这个让人激爽无比的特性,这件事情终于有了完美的解决方案!</p><h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>下面来看一下基本的语法:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> 返回类型 方法名(<span class=\"keyword\">this</span> 需要添加扩展方法的类名 变量名,,,)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>首先我们写这样一个类:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ExtensionMethods</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">ExtensionMethods</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ToInt</span>(<span class=\"params\"><span class=\"keyword\">this</span> <span class=\"keyword\">string</span> s</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Convert.ToInt32(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后只需要在另一个类中引用这个类的命名空间，就可以方便地使用我们写好的扩展方法进行类型转换了:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> ExtensionMethods;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">xxx</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">xxxx</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"string\">\"123\"</span>.ToInt();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>怎么样？是不是感觉一股凉气当头灌下——<strong>真爽啊！</strong><br>别急，光这样怎么能够满足我们的需求呢，接下来我们继续优化。</p><h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>以上已经方便了不少，但还是有以下两个问题：</p><blockquote><p><strong>每次还需要引用命名空间，太浪费时间精力。</strong></p></blockquote><p>解决方案：将扩展方法直接放到类型所在的命名空间下<br>依旧以上面的代码为例，就是：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">System</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">ExtensionMethods</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ToInt</span>(<span class=\"params\"><span class=\"keyword\">this</span> <span class=\"keyword\">string</span> s</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Convert.ToInt32(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><blockquote><p><strong>如果输入的String并不能转化为数字,会报错。</strong></p></blockquote><p>解决方案：加入另一个参数为默认值，若不能转化成功，则返回默认值。<br>代码如下:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ToInt32</span>(<span class=\"params\"><span class=\"keyword\">this</span> <span class=\"keyword\">string</span> s, <span class=\"keyword\">int</span> def = <span class=\"keyword\">default</span>(<span class=\"keyword\">int</span></span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Int32.TryParse(s, <span class=\"keyword\">out</span> result) ? result : def;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>按照上面的思路,我们可以打包一个包含各种常用类型转换的类,写程序的时候只要直接加入这个类,就可以方便地进行各种进制转换了.</p><p>下面提供一个自用的Convert类<a href=\"http://p4au3q1y8.bkt.clouddn.com/Convert.zip\" target=\"_blank\" rel=\"noopener\">Convert.zip</a></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>在最近的学习中，发现了一种用起来特别爽的C#特性——扩展方法，之前拜读《大话设计模式》一书的时候，书中提到这样一句话：“反射，反射，程序员的快乐”，本人菜鸟一只，到现在还未曾使用过反射，对于其是否真的快乐自然无从体会，不过扩展方法用起来称得上是相当快乐！<br>","more":"</p><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>下面是MSDN中对于扩展方法的解释</p><blockquote><p>扩展方法使你能够向现有类型”添加“方法,而无需创建新的派生类型、重新编译或以其他方法修改原始类型。扩展方法是一种特殊的静态方法，但可以像扩展类型上的实力方法一样进行调用。对于C#和Visual Basic 编写的客户端代码，调用扩展方法与调用在类型中实际定义的方法之间没有明显的差异。</p></blockquote><p>刚开始学习C#的时候,经常碰到各种需要状态转换的场合,那个时候代码里常常是大坨大坨的Convert.ToXX();当时非常羡慕String类可以直接调用ToString方法,省时省力,代码看起来还特别美观,之后学会了把Convert.ToXX()打包到一个方法里,代码不那么冗余了,但还是不甚美观,且费时费力,直到今天,我发现了C#中这个让人激爽无比的特性,这件事情终于有了完美的解决方案!</p><h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>下面来看一下基本的语法:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> 返回类型 方法名(<span class=\"keyword\">this</span> 需要添加扩展方法的类名 变量名,,,)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>首先我们写这样一个类:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ExtensionMethods</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">ExtensionMethods</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ToInt</span>(<span class=\"params\"><span class=\"keyword\">this</span> <span class=\"keyword\">string</span> s</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Convert.ToInt32(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后只需要在另一个类中引用这个类的命名空间，就可以方便地使用我们写好的扩展方法进行类型转换了:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> ExtensionMethods;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">xxx</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">xxxx</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"string\">\"123\"</span>.ToInt();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>怎么样？是不是感觉一股凉气当头灌下——<strong>真爽啊！</strong><br>别急，光这样怎么能够满足我们的需求呢，接下来我们继续优化。</p><h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>以上已经方便了不少，但还是有以下两个问题：</p><blockquote><p><strong>每次还需要引用命名空间，太浪费时间精力。</strong></p></blockquote><p>解决方案：将扩展方法直接放到类型所在的命名空间下<br>依旧以上面的代码为例，就是：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">System</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">ExtensionMethods</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ToInt</span>(<span class=\"params\"><span class=\"keyword\">this</span> <span class=\"keyword\">string</span> s</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Convert.ToInt32(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><blockquote><p><strong>如果输入的String并不能转化为数字,会报错。</strong></p></blockquote><p>解决方案：加入另一个参数为默认值，若不能转化成功，则返回默认值。<br>代码如下:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ToInt32</span>(<span class=\"params\"><span class=\"keyword\">this</span> <span class=\"keyword\">string</span> s, <span class=\"keyword\">int</span> def = <span class=\"keyword\">default</span>(<span class=\"keyword\">int</span></span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Int32.TryParse(s, <span class=\"keyword\">out</span> result) ? result : def;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>按照上面的思路,我们可以打包一个包含各种常用类型转换的类,写程序的时候只要直接加入这个类,就可以方便地进行各种进制转换了.</p><p>下面提供一个自用的Convert类<a href=\"http://p4au3q1y8.bkt.clouddn.com/Convert.zip\" target=\"_blank\" rel=\"noopener\">Convert.zip</a></p><!-- rebuild by neat -->"},{"title":"C#线性筛法快速求出范围内的所有质数","abbrlink":1416,"date":"2015-05-18T14:47:57.000Z","_content":"质数是指在大于1的自然数中，除了1和它本身以外不再有其他因数的数。本文列举了几种求区间内所有质数的算法。\n<!-- more -->\n## 一般方法\n\n### 验证质数\n我们根据[质数](http://baike.baidu.com/view/1767.htm)的定义可以对某一自然数进行检测，方法如下：\n```csharp\n/// <summary>\n/// 判断自然数是否是质数\n/// </summary>\n/// <param name=\"n\">需要判断的数</param>\n/// <returns>是/否</returns>\npublic static bool IsPrime(int n)\n{\n    if (n < 2) return false;\n    for (var i = n - 1; i > 1; i--)\n    {\n        //n除以每个比n小比1大的自然数\n        if (n % i == 0)\n            //如果有能被整除的，则不是质数\n            return false;\n    }\n    //否则则为质数\n    return true;\n}\n```\n### 获取范围内质数\n```csharp\n/// <summary>\n/// 获取自然数区间内的所有质数\n/// </summary>\n/// <param name=\"startInt\">自然数区间起始点</param>\n/// <param name=\"endInt\">自然数区间终点</param>\n/// <returns>自然数区间内的所有质数的集合</returns>\npublic static IEnumerable<int> GetPrimes(int startInt, int endInt)\n{\n    for (var i = startInt; i <= endInt; i++)\n        if (IsPrime(i))\n            yield return i;\n}\n```\n## 筛法\n### 什么是筛法\n科普篇:筛法是一种简单检定[质数](http://baike.baidu.com/view/1767.htm)的算法。据说是古希腊的[埃拉托斯特尼（Eratosthenes）](http://baike.baidu.com/subview/46015/46015.htm)发明的，又称[埃拉托斯特尼筛法（sieve of Eratosthenes）](http://baike.baidu.com/view/1425379.htm).\n### 使用筛法求某上限内所有质数\n```csharp\n/// <summary>\n/// 求某上限内的所有质数\n/// </summary>\n/// <param name=\"j\">上限自然数</param>\n/// <returns>上限内所有质数</returns>\npublic static IEnumerable<int> GenPrime(int j)\n{\n    var bts = new BitArray(j + 1);\n    for (var x = 2; x < bts.Length / 2; x++)\n        for (var y = x + 1; y < bts.Length; y++)\n            if (bts[y] == false && y % x == 0)\n                bts[y] = true;\n    for (var x = 2; x < bts.Length; x++)\n        if (bts[x] == false)\n            yield return x;\n}\n```\n### 使用筛法求某自然数区间内所有质数\n使用两次上面的方法分别求取区间起始点和终点作为上限的所有质数后取差集\n```csharp\n/// <summary>\n/// 获取自然数区间内的所有质数\n/// </summary>\n/// <param name=\"startInt\">自然数区间起始点</param>\n/// <param name=\"endInt\">自然数区间终点</param>\n/// <returns>自然数区间内的所有质数的集合</returns>\npublic static IEnumerable<int> GenPrimes(int startInt, int endInt) => \n    GenPrime(endInt).Except(GenPrime(startInt));\n```\n### 快速线性筛法实现\n在某位高手的博文中发现了复杂度更低的线性筛法\n> [一般筛法求素数+快速线性筛法求素数](http://blog.csdn.net/dinosoft/article/details/5829550#t3)\n\n下面是C#的实现\n```csharp\n/// <summary>\n/// 求某上限内的所有质数\n/// </summary>\n/// <param name=\"x\">上限自然数</param>\n/// <returns>上限内所有质数</returns>\nprivate static IEnumerable<int> LinearGenPrime(int x)\n{\n    var numPrime = 0;\n    var ints = new List<int>();\n    var isNotPrime = new BitArray(x);\n    for (var i = 2; i < x; i++)\n    {\n        if (!isNotPrime[i])\n        {\n            yield return i;\n            numPrime++;\n        }\n        for (var j = 0; j < numPrime && i * ints[j] < x; j++)\n        {\n            isNotPrime[i * ints[j]] = true;\n            if (!Convert.ToBoolean(i % ints[j]))\n                break;\n        }\n    }\n}\n```","source":"_posts/C#线性筛法求出范围内的所有质数.md","raw":"---\ntitle: 'C#线性筛法快速求出范围内的所有质数'\ntags:\n  - 算法\n  - 质数\nabbrlink: 1416\ndate: 2015-05-18 22:47:57\n---\n质数是指在大于1的自然数中，除了1和它本身以外不再有其他因数的数。本文列举了几种求区间内所有质数的算法。\n<!-- more -->\n## 一般方法\n\n### 验证质数\n我们根据[质数](http://baike.baidu.com/view/1767.htm)的定义可以对某一自然数进行检测，方法如下：\n```csharp\n/// <summary>\n/// 判断自然数是否是质数\n/// </summary>\n/// <param name=\"n\">需要判断的数</param>\n/// <returns>是/否</returns>\npublic static bool IsPrime(int n)\n{\n    if (n < 2) return false;\n    for (var i = n - 1; i > 1; i--)\n    {\n        //n除以每个比n小比1大的自然数\n        if (n % i == 0)\n            //如果有能被整除的，则不是质数\n            return false;\n    }\n    //否则则为质数\n    return true;\n}\n```\n### 获取范围内质数\n```csharp\n/// <summary>\n/// 获取自然数区间内的所有质数\n/// </summary>\n/// <param name=\"startInt\">自然数区间起始点</param>\n/// <param name=\"endInt\">自然数区间终点</param>\n/// <returns>自然数区间内的所有质数的集合</returns>\npublic static IEnumerable<int> GetPrimes(int startInt, int endInt)\n{\n    for (var i = startInt; i <= endInt; i++)\n        if (IsPrime(i))\n            yield return i;\n}\n```\n## 筛法\n### 什么是筛法\n科普篇:筛法是一种简单检定[质数](http://baike.baidu.com/view/1767.htm)的算法。据说是古希腊的[埃拉托斯特尼（Eratosthenes）](http://baike.baidu.com/subview/46015/46015.htm)发明的，又称[埃拉托斯特尼筛法（sieve of Eratosthenes）](http://baike.baidu.com/view/1425379.htm).\n### 使用筛法求某上限内所有质数\n```csharp\n/// <summary>\n/// 求某上限内的所有质数\n/// </summary>\n/// <param name=\"j\">上限自然数</param>\n/// <returns>上限内所有质数</returns>\npublic static IEnumerable<int> GenPrime(int j)\n{\n    var bts = new BitArray(j + 1);\n    for (var x = 2; x < bts.Length / 2; x++)\n        for (var y = x + 1; y < bts.Length; y++)\n            if (bts[y] == false && y % x == 0)\n                bts[y] = true;\n    for (var x = 2; x < bts.Length; x++)\n        if (bts[x] == false)\n            yield return x;\n}\n```\n### 使用筛法求某自然数区间内所有质数\n使用两次上面的方法分别求取区间起始点和终点作为上限的所有质数后取差集\n```csharp\n/// <summary>\n/// 获取自然数区间内的所有质数\n/// </summary>\n/// <param name=\"startInt\">自然数区间起始点</param>\n/// <param name=\"endInt\">自然数区间终点</param>\n/// <returns>自然数区间内的所有质数的集合</returns>\npublic static IEnumerable<int> GenPrimes(int startInt, int endInt) => \n    GenPrime(endInt).Except(GenPrime(startInt));\n```\n### 快速线性筛法实现\n在某位高手的博文中发现了复杂度更低的线性筛法\n> [一般筛法求素数+快速线性筛法求素数](http://blog.csdn.net/dinosoft/article/details/5829550#t3)\n\n下面是C#的实现\n```csharp\n/// <summary>\n/// 求某上限内的所有质数\n/// </summary>\n/// <param name=\"x\">上限自然数</param>\n/// <returns>上限内所有质数</returns>\nprivate static IEnumerable<int> LinearGenPrime(int x)\n{\n    var numPrime = 0;\n    var ints = new List<int>();\n    var isNotPrime = new BitArray(x);\n    for (var i = 2; i < x; i++)\n    {\n        if (!isNotPrime[i])\n        {\n            yield return i;\n            numPrime++;\n        }\n        for (var j = 0; j < numPrime && i * ints[j] < x; j++)\n        {\n            isNotPrime[i * ints[j]] = true;\n            if (!Convert.ToBoolean(i % ints[j]))\n                break;\n        }\n    }\n}\n```","slug":"C#线性筛法求出范围内的所有质数","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ose0004d00odsb3uhtt","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>质数是指在大于1的自然数中，除了1和它本身以外不再有其他因数的数。本文列举了几种求区间内所有质数的算法。<br><a id=\"more\"></a></p><h2 id=\"一般方法\"><a href=\"#一般方法\" class=\"headerlink\" title=\"一般方法\"></a>一般方法</h2><h3 id=\"验证质数\"><a href=\"#验证质数\" class=\"headerlink\" title=\"验证质数\"></a>验证质数</h3><p>我们根据<a href=\"http://baike.baidu.com/view/1767.htm\" target=\"_blank\" rel=\"noopener\">质数</a>的定义可以对某一自然数进行检测，方法如下：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 判断自然数是否是质数</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"n\"&gt;</span>需要判断的数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>是/否<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsPrime</span>(<span class=\"params\"><span class=\"keyword\">int</span> n</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = n - <span class=\"number\">1</span>; i &gt; <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//n除以每个比n小比1大的自然数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">//如果有能被整除的，则不是质数</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//否则则为质数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"获取范围内质数\"><a href=\"#获取范围内质数\" class=\"headerlink\" title=\"获取范围内质数\"></a>获取范围内质数</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 获取自然数区间内的所有质数</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"startInt\"&gt;</span>自然数区间起始点<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"endInt\"&gt;</span>自然数区间终点<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>自然数区间内的所有质数的集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">GetPrimes</span>(<span class=\"params\"><span class=\"keyword\">int</span> startInt, <span class=\"keyword\">int</span> endInt</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = startInt; i &lt;= endInt; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (IsPrime(i))</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"筛法\"><a href=\"#筛法\" class=\"headerlink\" title=\"筛法\"></a>筛法</h2><h3 id=\"什么是筛法\"><a href=\"#什么是筛法\" class=\"headerlink\" title=\"什么是筛法\"></a>什么是筛法</h3><p>科普篇:筛法是一种简单检定<a href=\"http://baike.baidu.com/view/1767.htm\" target=\"_blank\" rel=\"noopener\">质数</a>的算法。据说是古希腊的<a href=\"http://baike.baidu.com/subview/46015/46015.htm\" target=\"_blank\" rel=\"noopener\">埃拉托斯特尼（Eratosthenes）</a>发明的，又称<a href=\"http://baike.baidu.com/view/1425379.htm\" target=\"_blank\" rel=\"noopener\">埃拉托斯特尼筛法（sieve of Eratosthenes）</a>.</p><h3 id=\"使用筛法求某上限内所有质数\"><a href=\"#使用筛法求某上限内所有质数\" class=\"headerlink\" title=\"使用筛法求某上限内所有质数\"></a>使用筛法求某上限内所有质数</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 求某上限内的所有质数</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"j\"&gt;</span>上限自然数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>上限内所有质数<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">GenPrime</span>(<span class=\"params\"><span class=\"keyword\">int</span> j</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bts = <span class=\"keyword\">new</span> BitArray(j + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">2</span>; x &lt; bts.Length / <span class=\"number\">2</span>; x++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> y = x + <span class=\"number\">1</span>; y &lt; bts.Length; y++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bts[y] == <span class=\"literal\">false</span> &amp;&amp; y % x == <span class=\"number\">0</span>)</span><br><span class=\"line\">                bts[y] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">2</span>; x &lt; bts.Length; x++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bts[x] == <span class=\"literal\">false</span>)</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"使用筛法求某自然数区间内所有质数\"><a href=\"#使用筛法求某自然数区间内所有质数\" class=\"headerlink\" title=\"使用筛法求某自然数区间内所有质数\"></a>使用筛法求某自然数区间内所有质数</h3><p>使用两次上面的方法分别求取区间起始点和终点作为上限的所有质数后取差集<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 获取自然数区间内的所有质数</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"startInt\"&gt;</span>自然数区间起始点<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"endInt\"&gt;</span>自然数区间终点<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>自然数区间内的所有质数的集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">GenPrimes</span>(<span class=\"params\"><span class=\"keyword\">int</span> startInt, <span class=\"keyword\">int</span> endInt</span>) </span>=&gt; </span><br><span class=\"line\">    GenPrime(endInt).Except(GenPrime(startInt));</span><br></pre></td></tr></table></figure><p></p><h3 id=\"快速线性筛法实现\"><a href=\"#快速线性筛法实现\" class=\"headerlink\" title=\"快速线性筛法实现\"></a>快速线性筛法实现</h3><p>在某位高手的博文中发现了复杂度更低的线性筛法</p><blockquote><p><a href=\"http://blog.csdn.net/dinosoft/article/details/5829550#t3\" target=\"_blank\" rel=\"noopener\">一般筛法求素数+快速线性筛法求素数</a></p></blockquote><p>下面是C#的实现<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 求某上限内的所有质数</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"x\"&gt;</span>上限自然数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>上限内所有质数<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">LinearGenPrime</span>(<span class=\"params\"><span class=\"keyword\">int</span> x</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> numPrime = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ints = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isNotPrime = <span class=\"keyword\">new</span> BitArray(x);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt; x; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isNotPrime[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            numPrime++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; numPrime &amp;&amp; i * ints[j] &lt; x; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            isNotPrime[i * ints[j]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Convert.ToBoolean(i % ints[j]))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>质数是指在大于1的自然数中，除了1和它本身以外不再有其他因数的数。本文列举了几种求区间内所有质数的算法。<br>","more":"</p><h2 id=\"一般方法\"><a href=\"#一般方法\" class=\"headerlink\" title=\"一般方法\"></a>一般方法</h2><h3 id=\"验证质数\"><a href=\"#验证质数\" class=\"headerlink\" title=\"验证质数\"></a>验证质数</h3><p>我们根据<a href=\"http://baike.baidu.com/view/1767.htm\" target=\"_blank\" rel=\"noopener\">质数</a>的定义可以对某一自然数进行检测，方法如下：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 判断自然数是否是质数</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"n\"&gt;</span>需要判断的数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>是/否<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsPrime</span>(<span class=\"params\"><span class=\"keyword\">int</span> n</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = n - <span class=\"number\">1</span>; i &gt; <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//n除以每个比n小比1大的自然数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">//如果有能被整除的，则不是质数</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//否则则为质数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"获取范围内质数\"><a href=\"#获取范围内质数\" class=\"headerlink\" title=\"获取范围内质数\"></a>获取范围内质数</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 获取自然数区间内的所有质数</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"startInt\"&gt;</span>自然数区间起始点<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"endInt\"&gt;</span>自然数区间终点<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>自然数区间内的所有质数的集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">GetPrimes</span>(<span class=\"params\"><span class=\"keyword\">int</span> startInt, <span class=\"keyword\">int</span> endInt</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = startInt; i &lt;= endInt; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (IsPrime(i))</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"筛法\"><a href=\"#筛法\" class=\"headerlink\" title=\"筛法\"></a>筛法</h2><h3 id=\"什么是筛法\"><a href=\"#什么是筛法\" class=\"headerlink\" title=\"什么是筛法\"></a>什么是筛法</h3><p>科普篇:筛法是一种简单检定<a href=\"http://baike.baidu.com/view/1767.htm\" target=\"_blank\" rel=\"noopener\">质数</a>的算法。据说是古希腊的<a href=\"http://baike.baidu.com/subview/46015/46015.htm\" target=\"_blank\" rel=\"noopener\">埃拉托斯特尼（Eratosthenes）</a>发明的，又称<a href=\"http://baike.baidu.com/view/1425379.htm\" target=\"_blank\" rel=\"noopener\">埃拉托斯特尼筛法（sieve of Eratosthenes）</a>.</p><h3 id=\"使用筛法求某上限内所有质数\"><a href=\"#使用筛法求某上限内所有质数\" class=\"headerlink\" title=\"使用筛法求某上限内所有质数\"></a>使用筛法求某上限内所有质数</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 求某上限内的所有质数</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"j\"&gt;</span>上限自然数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>上限内所有质数<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">GenPrime</span>(<span class=\"params\"><span class=\"keyword\">int</span> j</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bts = <span class=\"keyword\">new</span> BitArray(j + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">2</span>; x &lt; bts.Length / <span class=\"number\">2</span>; x++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> y = x + <span class=\"number\">1</span>; y &lt; bts.Length; y++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bts[y] == <span class=\"literal\">false</span> &amp;&amp; y % x == <span class=\"number\">0</span>)</span><br><span class=\"line\">                bts[y] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">2</span>; x &lt; bts.Length; x++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bts[x] == <span class=\"literal\">false</span>)</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"使用筛法求某自然数区间内所有质数\"><a href=\"#使用筛法求某自然数区间内所有质数\" class=\"headerlink\" title=\"使用筛法求某自然数区间内所有质数\"></a>使用筛法求某自然数区间内所有质数</h3><p>使用两次上面的方法分别求取区间起始点和终点作为上限的所有质数后取差集<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 获取自然数区间内的所有质数</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"startInt\"&gt;</span>自然数区间起始点<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"endInt\"&gt;</span>自然数区间终点<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>自然数区间内的所有质数的集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">GenPrimes</span>(<span class=\"params\"><span class=\"keyword\">int</span> startInt, <span class=\"keyword\">int</span> endInt</span>) </span>=&gt; </span><br><span class=\"line\">    GenPrime(endInt).Except(GenPrime(startInt));</span><br></pre></td></tr></table></figure><p></p><h3 id=\"快速线性筛法实现\"><a href=\"#快速线性筛法实现\" class=\"headerlink\" title=\"快速线性筛法实现\"></a>快速线性筛法实现</h3><p>在某位高手的博文中发现了复杂度更低的线性筛法</p><blockquote><p><a href=\"http://blog.csdn.net/dinosoft/article/details/5829550#t3\" target=\"_blank\" rel=\"noopener\">一般筛法求素数+快速线性筛法求素数</a></p></blockquote><p>下面是C#的实现<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 求某上限内的所有质数</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"x\"&gt;</span>上限自然数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>上限内所有质数<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">LinearGenPrime</span>(<span class=\"params\"><span class=\"keyword\">int</span> x</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> numPrime = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ints = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isNotPrime = <span class=\"keyword\">new</span> BitArray(x);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt; x; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isNotPrime[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            numPrime++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; numPrime &amp;&amp; i * ints[j] &lt; x; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            isNotPrime[i * ints[j]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Convert.ToBoolean(i % ints[j]))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"C#读取CPU序列号、硬盘ID、网卡MAC地址，生成机器码","abbrlink":13625,"date":"2017-08-29T09:08:12.000Z","_content":"话不多说，直接上代码，类库中的机器码使用序列号、硬盘ID、网卡MAC地址组合取MD5生成。\n<!-- more -->\n```csharp\nusing System;\nusing System.Linq;\nusing System.Management;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace WayneShao.Common\n{\n    internal static class MachineCode\n    {\n        private static string _machineCodeString;\n        public static string Value\n        {\n            get\n            {\n                if (string.IsNullOrWhiteSpace(_machineCodeString))\n                    _machineCodeString = GetMD5($\"{CPUCode}_{HDId}_{MacAddress}\");\n                return _machineCodeString;\n            }\n        }\n\n        private static string _cpuCode;\n        public static string CPUCode => _cpuCode ?? (_cpuCode = GetCPUInfo());\n\n        private static string _hdId;\n        public static string HDId => _hdId ?? (_hdId = GetHDid());\n\n        private static string _macAddress;\n        public static string MacAddress => _macAddress ?? (_macAddress = GetMACAddress());\n\n        ///   <summary> \n        ///   获取cpu序列号     \n        ///   </summary> \n        ///   <returns> string </returns> \n        private static string GetCPUInfo()\n        {\n            using (var cimobject = new ManagementClass(\"Win32_Processor\"))\n            {\n                var hdids = cimobject.GetInstances().Cast<ManagementObject>().Select(o => o.Properties[\"ProcessorId\"].Value).Cast<string>().ToArray();\n                return hdids.Any() ? hdids.First() : string.Empty;\n            }\n        }\n\n        ///   <summary> \n        ///   获取硬盘ID     \n        ///   </summary> \n        ///   <returns> string </returns> \n        private static string GetHDid()\n        {\n            using (var cimobject1 = new ManagementClass(\"Win32_DiskDrive\"))\n            {\n                var hdids = cimobject1.GetInstances().Cast<ManagementObject>().Select(o => o.Properties[\"Model\"].Value).Cast<string>().ToArray();\n                return hdids.Any() ? hdids.First() : string.Empty;\n            }\n        }\n\n        ///   <summary> \n        ///   获取网卡硬件地址 \n        ///   </summary> \n        ///   <returns> string </returns> \n        private static string GetMACAddress()\n        {\n            using (var mc = new ManagementClass(\"Win32_NetworkAdapterConfiguration\"))\n            {\n                var macs = mc.GetInstances().Cast<ManagementObject>().Where(o => (bool)o[\"IPEnabled\"]).Select(o => o[\"MacAddress\"].ToString()).ToArray();\n                return macs.Any() ? macs.First() : string.Empty;\n            }\n        }\n\n        ///   <summary> \n        ///   获取字符串的MD5值\n        ///   </summary> \n        ///   <returns> string </returns> \n        public static string GetMD5(string source)\n        {\n            var result = Encoding.Default.GetBytes(source);\n            var md5 = new MD5CryptoServiceProvider();\n            var output = md5.ComputeHash(result);\n            return BitConverter.ToString(output).Replace(\"-\", \"\").ToLower();\n        }\n\n    }\n}\n```\n另附MSDN中关于 WMI Class 的文档供大家参考\nhttps://msdn.microsoft.com/zh-cn/library/aa394173(VS.85).aspx","source":"_posts/C#读取CPU序列号、硬盘ID、网卡MAC地址，生成机器码.md","raw":"---\ntitle: 'C#读取CPU序列号、硬盘ID、网卡MAC地址，生成机器码'\ntags:\n  - 'C#'\n  - 硬件信息\nabbrlink: 13625\ndate: 2017-08-29 17:08:12\n---\n话不多说，直接上代码，类库中的机器码使用序列号、硬盘ID、网卡MAC地址组合取MD5生成。\n<!-- more -->\n```csharp\nusing System;\nusing System.Linq;\nusing System.Management;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace WayneShao.Common\n{\n    internal static class MachineCode\n    {\n        private static string _machineCodeString;\n        public static string Value\n        {\n            get\n            {\n                if (string.IsNullOrWhiteSpace(_machineCodeString))\n                    _machineCodeString = GetMD5($\"{CPUCode}_{HDId}_{MacAddress}\");\n                return _machineCodeString;\n            }\n        }\n\n        private static string _cpuCode;\n        public static string CPUCode => _cpuCode ?? (_cpuCode = GetCPUInfo());\n\n        private static string _hdId;\n        public static string HDId => _hdId ?? (_hdId = GetHDid());\n\n        private static string _macAddress;\n        public static string MacAddress => _macAddress ?? (_macAddress = GetMACAddress());\n\n        ///   <summary> \n        ///   获取cpu序列号     \n        ///   </summary> \n        ///   <returns> string </returns> \n        private static string GetCPUInfo()\n        {\n            using (var cimobject = new ManagementClass(\"Win32_Processor\"))\n            {\n                var hdids = cimobject.GetInstances().Cast<ManagementObject>().Select(o => o.Properties[\"ProcessorId\"].Value).Cast<string>().ToArray();\n                return hdids.Any() ? hdids.First() : string.Empty;\n            }\n        }\n\n        ///   <summary> \n        ///   获取硬盘ID     \n        ///   </summary> \n        ///   <returns> string </returns> \n        private static string GetHDid()\n        {\n            using (var cimobject1 = new ManagementClass(\"Win32_DiskDrive\"))\n            {\n                var hdids = cimobject1.GetInstances().Cast<ManagementObject>().Select(o => o.Properties[\"Model\"].Value).Cast<string>().ToArray();\n                return hdids.Any() ? hdids.First() : string.Empty;\n            }\n        }\n\n        ///   <summary> \n        ///   获取网卡硬件地址 \n        ///   </summary> \n        ///   <returns> string </returns> \n        private static string GetMACAddress()\n        {\n            using (var mc = new ManagementClass(\"Win32_NetworkAdapterConfiguration\"))\n            {\n                var macs = mc.GetInstances().Cast<ManagementObject>().Where(o => (bool)o[\"IPEnabled\"]).Select(o => o[\"MacAddress\"].ToString()).ToArray();\n                return macs.Any() ? macs.First() : string.Empty;\n            }\n        }\n\n        ///   <summary> \n        ///   获取字符串的MD5值\n        ///   </summary> \n        ///   <returns> string </returns> \n        public static string GetMD5(string source)\n        {\n            var result = Encoding.Default.GetBytes(source);\n            var md5 = new MD5CryptoServiceProvider();\n            var output = md5.ComputeHash(result);\n            return BitConverter.ToString(output).Replace(\"-\", \"\").ToLower();\n        }\n\n    }\n}\n```\n另附MSDN中关于 WMI Class 的文档供大家参考\nhttps://msdn.microsoft.com/zh-cn/library/aa394173(VS.85).aspx","slug":"C#读取CPU序列号、硬盘ID、网卡MAC地址，生成机器码","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24osf0005d00owhmh9spv","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>话不多说，直接上代码，类库中的机器码使用序列号、硬盘ID、网卡MAC地址组合取MD5生成。<br><a id=\"more\"></a><br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Management;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Security.Cryptography;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">WayneShao.Common</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">MachineCode</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _machineCodeString;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> Value</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(_machineCodeString))</span><br><span class=\"line\">                    _machineCodeString = GetMD5(<span class=\"string\">$\"<span class=\"subst\">&#123;CPUCode&#125;</span>_<span class=\"subst\">&#123;HDId&#125;</span>_<span class=\"subst\">&#123;MacAddress&#125;</span>\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _machineCodeString;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _cpuCode;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> CPUCode =&gt; _cpuCode ?? (_cpuCode = GetCPUInfo());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _hdId;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> HDId =&gt; _hdId ?? (_hdId = GetHDid());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _macAddress;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> MacAddress =&gt; _macAddress ?? (_macAddress = GetMACAddress());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;summary&gt;</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   获取cpu序列号     </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;/summary&gt;</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;returns&gt;</span> string <span class=\"doctag\">&lt;/returns&gt;</span> </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetCPUInfo</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> cimobject = <span class=\"keyword\">new</span> ManagementClass(<span class=\"string\">\"Win32_Processor\"</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> hdids = cimobject.GetInstances().Cast&lt;ManagementObject&gt;().Select(o =&gt; o.Properties[<span class=\"string\">\"ProcessorId\"</span>].Value).Cast&lt;<span class=\"keyword\">string</span>&gt;().ToArray();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> hdids.Any() ? hdids.First() : <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;summary&gt;</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   获取硬盘ID     </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;/summary&gt;</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;returns&gt;</span> string <span class=\"doctag\">&lt;/returns&gt;</span> </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetHDid</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> cimobject1 = <span class=\"keyword\">new</span> ManagementClass(<span class=\"string\">\"Win32_DiskDrive\"</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> hdids = cimobject1.GetInstances().Cast&lt;ManagementObject&gt;().Select(o =&gt; o.Properties[<span class=\"string\">\"Model\"</span>].Value).Cast&lt;<span class=\"keyword\">string</span>&gt;().ToArray();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> hdids.Any() ? hdids.First() : <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;summary&gt;</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   获取网卡硬件地址 </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;/summary&gt;</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;returns&gt;</span> string <span class=\"doctag\">&lt;/returns&gt;</span> </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetMACAddress</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> ManagementClass(<span class=\"string\">\"Win32_NetworkAdapterConfiguration\"</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> macs = mc.GetInstances().Cast&lt;ManagementObject&gt;().Where(o =&gt; (<span class=\"keyword\">bool</span>)o[<span class=\"string\">\"IPEnabled\"</span>]).Select(o =&gt; o[<span class=\"string\">\"MacAddress\"</span>].ToString()).ToArray();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> macs.Any() ? macs.First() : <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;summary&gt;</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   获取字符串的MD5值</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;/summary&gt;</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;returns&gt;</span> string <span class=\"doctag\">&lt;/returns&gt;</span> </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetMD5</span>(<span class=\"params\"><span class=\"keyword\">string</span> source</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = Encoding.Default.GetBytes(source);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> md5 = <span class=\"keyword\">new</span> MD5CryptoServiceProvider();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> output = md5.ComputeHash(result);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> BitConverter.ToString(output).Replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"\"</span>).ToLower();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>另附MSDN中关于 WMI Class 的文档供大家参考<br><a href=\"https://msdn.microsoft.com/zh-cn/library/aa394173(VS.85).aspx\" target=\"_blank\" rel=\"noopener\">https://msdn.microsoft.com/zh-cn/library/aa394173(VS.85).aspx</a></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>话不多说，直接上代码，类库中的机器码使用序列号、硬盘ID、网卡MAC地址组合取MD5生成。<br>","more":"<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Management;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Security.Cryptography;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">WayneShao.Common</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">MachineCode</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _machineCodeString;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> Value</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(_machineCodeString))</span><br><span class=\"line\">                    _machineCodeString = GetMD5(<span class=\"string\">$\"<span class=\"subst\">&#123;CPUCode&#125;</span>_<span class=\"subst\">&#123;HDId&#125;</span>_<span class=\"subst\">&#123;MacAddress&#125;</span>\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _machineCodeString;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _cpuCode;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> CPUCode =&gt; _cpuCode ?? (_cpuCode = GetCPUInfo());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _hdId;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> HDId =&gt; _hdId ?? (_hdId = GetHDid());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _macAddress;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> MacAddress =&gt; _macAddress ?? (_macAddress = GetMACAddress());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;summary&gt;</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   获取cpu序列号     </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;/summary&gt;</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;returns&gt;</span> string <span class=\"doctag\">&lt;/returns&gt;</span> </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetCPUInfo</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> cimobject = <span class=\"keyword\">new</span> ManagementClass(<span class=\"string\">\"Win32_Processor\"</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> hdids = cimobject.GetInstances().Cast&lt;ManagementObject&gt;().Select(o =&gt; o.Properties[<span class=\"string\">\"ProcessorId\"</span>].Value).Cast&lt;<span class=\"keyword\">string</span>&gt;().ToArray();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> hdids.Any() ? hdids.First() : <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;summary&gt;</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   获取硬盘ID     </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;/summary&gt;</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;returns&gt;</span> string <span class=\"doctag\">&lt;/returns&gt;</span> </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetHDid</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> cimobject1 = <span class=\"keyword\">new</span> ManagementClass(<span class=\"string\">\"Win32_DiskDrive\"</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> hdids = cimobject1.GetInstances().Cast&lt;ManagementObject&gt;().Select(o =&gt; o.Properties[<span class=\"string\">\"Model\"</span>].Value).Cast&lt;<span class=\"keyword\">string</span>&gt;().ToArray();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> hdids.Any() ? hdids.First() : <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;summary&gt;</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   获取网卡硬件地址 </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;/summary&gt;</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;returns&gt;</span> string <span class=\"doctag\">&lt;/returns&gt;</span> </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetMACAddress</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> ManagementClass(<span class=\"string\">\"Win32_NetworkAdapterConfiguration\"</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> macs = mc.GetInstances().Cast&lt;ManagementObject&gt;().Where(o =&gt; (<span class=\"keyword\">bool</span>)o[<span class=\"string\">\"IPEnabled\"</span>]).Select(o =&gt; o[<span class=\"string\">\"MacAddress\"</span>].ToString()).ToArray();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> macs.Any() ? macs.First() : <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;summary&gt;</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   获取字符串的MD5值</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;/summary&gt;</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>   <span class=\"doctag\">&lt;returns&gt;</span> string <span class=\"doctag\">&lt;/returns&gt;</span> </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetMD5</span>(<span class=\"params\"><span class=\"keyword\">string</span> source</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = Encoding.Default.GetBytes(source);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> md5 = <span class=\"keyword\">new</span> MD5CryptoServiceProvider();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> output = md5.ComputeHash(result);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> BitConverter.ToString(output).Replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"\"</span>).ToLower();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>另附MSDN中关于 WMI Class 的文档供大家参考<br><a href=\"https://msdn.microsoft.com/zh-cn/library/aa394173(VS.85).aspx\" target=\"_blank\" rel=\"noopener\">https://msdn.microsoft.com/zh-cn/library/aa394173(VS.85).aspx</a></p><!-- rebuild by neat -->"},{"title":"【下载】C# 调用迅雷、IDM下载方法汇总","abbrlink":46213,"date":"2018-03-07T01:36:14.000Z","_content":"在开发桌面软件时常常有下载文件的需求，小文件、少文件可以自己做相应的网络请求，但是当文件的大小或者数量达到一定规模时，自己封装网络请求就不是很划算的事情了，这时我们可以采取调用迅雷或者IDM、aria2c之类的专业下载软件来进行下载。\n<!--more-->\n## 迅雷\n### 直接调用迅雷\n1.  安装迅雷后可以再引用的com组件中找到名为 “ThunderAgent 1.0 Type Library” 的com组件，勾选引用之后，把类库属性中的嵌入互操作类型修改为false。\n![](http://p4au3q1y8.bkt.clouddn.com/20180307172636630/20180307054659587.png)\n2. 使用代码调用AgentLib直接在迅雷中增加新任务\n```csharp\nnew ThunderAgentLib.AgentClass().AddTask(\"http://s1.static.haoke258.info/attach_2/2018-1-30-5ZD6R0BZZ.rar\");\n```\n    以上为最简单的调用方式，只是传入了下载地址，其他的属性为默认值，传入后续的几个参数或者才用AddTask2方法就可以手动修改任务属性。\n```csharp\npublic virtual extern void AddTask([MarshalAs(UnmanagedType.BStr), In] string bstrUrl, [MarshalAs(UnmanagedType.BStr), In] string bstrFileName = \"\", [MarshalAs(UnmanagedType.BStr), In] string bstrPath = \"\", [MarshalAs(UnmanagedType.BStr), In] string bstrComments = \"\", [MarshalAs(UnmanagedType.BStr), In] string bstrReferUrl = \"\", [In] int nStartMode = -1, [In] int nOnlyFromOrigin = 0, [In] int nOriginThreadCount = -1);\n\npublic virtual extern void AddTask2([MarshalAs(UnmanagedType.BStr), In] string bstrUrl, [MarshalAs(UnmanagedType.BStr), In] string bstrFileName = \"\", [MarshalAs(UnmanagedType.BStr), In] string bstrPath = \"\", [MarshalAs(UnmanagedType.BStr), In] string bstrComments = \"\", [MarshalAs(UnmanagedType.BStr), In] string bstrReferUrl = \"\", [In] int nStartMode = -1, [In] int nOnlyFromOrigin = 0, [In] int nOriginThreadCount = -1, [MarshalAs(UnmanagedType.BStr), In] string bstrCookie = \"\");\n```\n### 迅雷开放平台\n迅雷官方曾经开放过一个mini版下载SDK，相当于一个无界面版本的mini迅雷，可以供程序直接调用，现在虽然已经停止服务，但是网上仍然有它的传说，\n优点是不用下载迅雷，软件+dll总共只有1mb+，缺点就是没有迅雷完整版的那些加速功能，没有那么快。\n我按照自己的理解把SDK封装了一下：https://github.com/WayneShao/ThunderSdk\n下面是调用代码：\n```csharp\nusing System;\nusing ThunderSdk;\n\nnamespace ThunderSdkDemo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var manager = new DownloadManager(1, @\"D:\\\");\n            manager.CreateNewTask(\"https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=770549720,375505130&fm=173&s=612A66F94AA394CE4A84E71B030050D7&w=218&h=146&img.JPEG\",\n                \"2018-1-30-5ZD6R0BZZ.jpg\");\n\n            manager.TaskDownload += (s, e) =>\n            {\n                if (!(s is DownFileInfo info)) return;\n                Console.WriteLine(info.TaskInfo.Percent);\n            };\n\n            manager.TaskCompleted += (s, e) =>\n              {\n                  if (!(s is DownFileInfo info)) return;\n                  Console.WriteLine(info.FileName + \"下载完成\");\n              };\n\n            manager.StartAllTask();\n            Console.ReadKey();\n        }\n    }\n}\n```\n## Internet Download Manager\n这个是我用过之后体验最好的，推荐使用。\n使用方法如下：\n### 获取DLL文件\n1. 下载 [IDMCOMAPI.zip](http://www.internetdownloadmanager.com/support/download/IDMCOMAPI.zip)。\n2. 解压 IDManTypeInfo.tlb 文件到任意位置。\n3. 打开 Visual Studio安装时附带的命令行工具。（任选一个即可，推荐第一个）\n![](http://p4au3q1y8.bkt.clouddn.com/20180308000415303/20180308121452182.png)\n4. 使用 类型库导入程序 (Tlbimp.exe)将tlb文件转换成dll文件。\n```shell\nTlbImp IDManTypeInfo.tlb\n```\n    > Microsoft (R) .NET Framework Type Library to Assembly Converter 3.5.30729.1\n    Copyright (C) Microsoft Corporation.  All rights reserved.\n\n    >Type library imported to ![IDManLib.dll]\nThis will create an IDManLib.dll\n\n如果懒得完成上面的步骤，也可以直接下载我已经导入好的文件[IDManLib.7z](http://p4au3q1y8.bkt.clouddn.com/20180308000415303/IDManLib.7z)\n## 引用DLL文件\n手动选择 IDManLib.dll 文件进行引用，引用后同样也要把类库属性中的嵌入互操作类型修改为false，编译平台最好选择x86。 \n## 调用方法\n和迅雷的类似，将下载地址、文件路劲、文件名等参数传入方法中即可成功在IDM中建立新任务。\n```csharp\nnew IDManLib.CIDMLinkTransmitterClass().SendLinkToIDM(\"http://s1.static.haoke258.info/attach_2/2018-1-30-5ZD6R0BZZ.rar\", \"http://ailushe95.info/\", \"\", \"\", \"\", \"\", @\"D:\\Backup\\Downloads\\LULULU\", \"【感謝擼友投稿】無名小姐姐 2V.rar\", 0);\n```\n","source":"_posts/C#调用迅雷、IDM下载方法汇总.md","raw":"---\ntitle: 【下载】C# 调用迅雷、IDM下载方法汇总\ntags:\n  - 'C#'\n  - 下载\n  - IDM\n  - 迅雷\n  - 爬虫\nabbrlink: 46213\ndate: 2018-03-07 09:36:14\n---\n在开发桌面软件时常常有下载文件的需求，小文件、少文件可以自己做相应的网络请求，但是当文件的大小或者数量达到一定规模时，自己封装网络请求就不是很划算的事情了，这时我们可以采取调用迅雷或者IDM、aria2c之类的专业下载软件来进行下载。\n<!--more-->\n## 迅雷\n### 直接调用迅雷\n1.  安装迅雷后可以再引用的com组件中找到名为 “ThunderAgent 1.0 Type Library” 的com组件，勾选引用之后，把类库属性中的嵌入互操作类型修改为false。\n![](http://p4au3q1y8.bkt.clouddn.com/20180307172636630/20180307054659587.png)\n2. 使用代码调用AgentLib直接在迅雷中增加新任务\n```csharp\nnew ThunderAgentLib.AgentClass().AddTask(\"http://s1.static.haoke258.info/attach_2/2018-1-30-5ZD6R0BZZ.rar\");\n```\n    以上为最简单的调用方式，只是传入了下载地址，其他的属性为默认值，传入后续的几个参数或者才用AddTask2方法就可以手动修改任务属性。\n```csharp\npublic virtual extern void AddTask([MarshalAs(UnmanagedType.BStr), In] string bstrUrl, [MarshalAs(UnmanagedType.BStr), In] string bstrFileName = \"\", [MarshalAs(UnmanagedType.BStr), In] string bstrPath = \"\", [MarshalAs(UnmanagedType.BStr), In] string bstrComments = \"\", [MarshalAs(UnmanagedType.BStr), In] string bstrReferUrl = \"\", [In] int nStartMode = -1, [In] int nOnlyFromOrigin = 0, [In] int nOriginThreadCount = -1);\n\npublic virtual extern void AddTask2([MarshalAs(UnmanagedType.BStr), In] string bstrUrl, [MarshalAs(UnmanagedType.BStr), In] string bstrFileName = \"\", [MarshalAs(UnmanagedType.BStr), In] string bstrPath = \"\", [MarshalAs(UnmanagedType.BStr), In] string bstrComments = \"\", [MarshalAs(UnmanagedType.BStr), In] string bstrReferUrl = \"\", [In] int nStartMode = -1, [In] int nOnlyFromOrigin = 0, [In] int nOriginThreadCount = -1, [MarshalAs(UnmanagedType.BStr), In] string bstrCookie = \"\");\n```\n### 迅雷开放平台\n迅雷官方曾经开放过一个mini版下载SDK，相当于一个无界面版本的mini迅雷，可以供程序直接调用，现在虽然已经停止服务，但是网上仍然有它的传说，\n优点是不用下载迅雷，软件+dll总共只有1mb+，缺点就是没有迅雷完整版的那些加速功能，没有那么快。\n我按照自己的理解把SDK封装了一下：https://github.com/WayneShao/ThunderSdk\n下面是调用代码：\n```csharp\nusing System;\nusing ThunderSdk;\n\nnamespace ThunderSdkDemo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var manager = new DownloadManager(1, @\"D:\\\");\n            manager.CreateNewTask(\"https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=770549720,375505130&fm=173&s=612A66F94AA394CE4A84E71B030050D7&w=218&h=146&img.JPEG\",\n                \"2018-1-30-5ZD6R0BZZ.jpg\");\n\n            manager.TaskDownload += (s, e) =>\n            {\n                if (!(s is DownFileInfo info)) return;\n                Console.WriteLine(info.TaskInfo.Percent);\n            };\n\n            manager.TaskCompleted += (s, e) =>\n              {\n                  if (!(s is DownFileInfo info)) return;\n                  Console.WriteLine(info.FileName + \"下载完成\");\n              };\n\n            manager.StartAllTask();\n            Console.ReadKey();\n        }\n    }\n}\n```\n## Internet Download Manager\n这个是我用过之后体验最好的，推荐使用。\n使用方法如下：\n### 获取DLL文件\n1. 下载 [IDMCOMAPI.zip](http://www.internetdownloadmanager.com/support/download/IDMCOMAPI.zip)。\n2. 解压 IDManTypeInfo.tlb 文件到任意位置。\n3. 打开 Visual Studio安装时附带的命令行工具。（任选一个即可，推荐第一个）\n![](http://p4au3q1y8.bkt.clouddn.com/20180308000415303/20180308121452182.png)\n4. 使用 类型库导入程序 (Tlbimp.exe)将tlb文件转换成dll文件。\n```shell\nTlbImp IDManTypeInfo.tlb\n```\n    > Microsoft (R) .NET Framework Type Library to Assembly Converter 3.5.30729.1\n    Copyright (C) Microsoft Corporation.  All rights reserved.\n\n    >Type library imported to ![IDManLib.dll]\nThis will create an IDManLib.dll\n\n如果懒得完成上面的步骤，也可以直接下载我已经导入好的文件[IDManLib.7z](http://p4au3q1y8.bkt.clouddn.com/20180308000415303/IDManLib.7z)\n## 引用DLL文件\n手动选择 IDManLib.dll 文件进行引用，引用后同样也要把类库属性中的嵌入互操作类型修改为false，编译平台最好选择x86。 \n## 调用方法\n和迅雷的类似，将下载地址、文件路劲、文件名等参数传入方法中即可成功在IDM中建立新任务。\n```csharp\nnew IDManLib.CIDMLinkTransmitterClass().SendLinkToIDM(\"http://s1.static.haoke258.info/attach_2/2018-1-30-5ZD6R0BZZ.rar\", \"http://ailushe95.info/\", \"\", \"\", \"\", \"\", @\"D:\\Backup\\Downloads\\LULULU\", \"【感謝擼友投稿】無名小姐姐 2V.rar\", 0);\n```\n","slug":"C#调用迅雷、IDM下载方法汇总","published":1,"updated":"2018-03-07T16:25:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24osh0007d00otg9nz0os","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>在开发桌面软件时常常有下载文件的需求，小文件、少文件可以自己做相应的网络请求，但是当文件的大小或者数量达到一定规模时，自己封装网络请求就不是很划算的事情了，这时我们可以采取调用迅雷或者IDM、aria2c之类的专业下载软件来进行下载。<br><a id=\"more\"></a></p><h2 id=\"迅雷\"><a href=\"#迅雷\" class=\"headerlink\" title=\"迅雷\"></a>迅雷</h2><h3 id=\"直接调用迅雷\"><a href=\"#直接调用迅雷\" class=\"headerlink\" title=\"直接调用迅雷\"></a>直接调用迅雷</h3><ol><li>安装迅雷后可以再引用的com组件中找到名为 “ThunderAgent 1.0 Type Library” 的com组件，勾选引用之后，把类库属性中的嵌入互操作类型修改为false。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180307172636630/20180307054659587.png\" alt=\"\"></li><li><p>使用代码调用AgentLib直接在迅雷中增加新任务</p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ThunderAgentLib.AgentClass().AddTask(<span class=\"string\">\"http://s1.static.haoke258.info/attach_2/2018-1-30-5ZD6R0BZZ.rar\"</span>);</span><br></pre></td></tr></table></figure><p>以上为最简单的调用方式，只是传入了下载地址，其他的属性为默认值，传入后续的几个参数或者才用AddTask2方法就可以手动修改任务属性。</p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">AddTask</span>(<span class=\"params\">[MarshalAs(UnmanagedType.BStr</span>), In] <span class=\"keyword\">string</span> bstrUrl, [<span class=\"title\">MarshalAs</span>(<span class=\"params\">UnmanagedType.BStr</span>), In] <span class=\"keyword\">string</span> bstrFileName </span>= <span class=\"string\">\"\"</span>, [MarshalAs(UnmanagedType.BStr), In] <span class=\"keyword\">string</span> bstrPath = <span class=\"string\">\"\"</span>, [MarshalAs(UnmanagedType.BStr), In] <span class=\"keyword\">string</span> bstrComments = <span class=\"string\">\"\"</span>, [MarshalAs(UnmanagedType.BStr), In] <span class=\"keyword\">string</span> bstrReferUrl = <span class=\"string\">\"\"</span>, [In] <span class=\"keyword\">int</span> nStartMode = <span class=\"number\">-1</span>, [In] <span class=\"keyword\">int</span> nOnlyFromOrigin = <span class=\"number\">0</span>, [In] <span class=\"keyword\">int</span> nOriginThreadCount = <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">AddTask2</span>(<span class=\"params\">[MarshalAs(UnmanagedType.BStr</span>), In] <span class=\"keyword\">string</span> bstrUrl, [<span class=\"title\">MarshalAs</span>(<span class=\"params\">UnmanagedType.BStr</span>), In] <span class=\"keyword\">string</span> bstrFileName </span>= <span class=\"string\">\"\"</span>, [MarshalAs(UnmanagedType.BStr), In] <span class=\"keyword\">string</span> bstrPath = <span class=\"string\">\"\"</span>, [MarshalAs(UnmanagedType.BStr), In] <span class=\"keyword\">string</span> bstrComments = <span class=\"string\">\"\"</span>, [MarshalAs(UnmanagedType.BStr), In] <span class=\"keyword\">string</span> bstrReferUrl = <span class=\"string\">\"\"</span>, [In] <span class=\"keyword\">int</span> nStartMode = <span class=\"number\">-1</span>, [In] <span class=\"keyword\">int</span> nOnlyFromOrigin = <span class=\"number\">0</span>, [In] <span class=\"keyword\">int</span> nOriginThreadCount = <span class=\"number\">-1</span>, [MarshalAs(UnmanagedType.BStr), In] <span class=\"keyword\">string</span> bstrCookie = <span class=\"string\">\"\"</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id=\"迅雷开放平台\"><a href=\"#迅雷开放平台\" class=\"headerlink\" title=\"迅雷开放平台\"></a>迅雷开放平台</h3><p>迅雷官方曾经开放过一个mini版下载SDK，相当于一个无界面版本的mini迅雷，可以供程序直接调用，现在虽然已经停止服务，但是网上仍然有它的传说，<br>优点是不用下载迅雷，软件+dll总共只有1mb+，缺点就是没有迅雷完整版的那些加速功能，没有那么快。<br>我按照自己的理解把SDK封装了一下：<a href=\"https://github.com/WayneShao/ThunderSdk\" target=\"_blank\" rel=\"noopener\">https://github.com/WayneShao/ThunderSdk</a><br>下面是调用代码：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ThunderSdk;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ThunderSdkDemo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> manager = <span class=\"keyword\">new</span> DownloadManager(<span class=\"number\">1</span>, <span class=\"string\">@\"D:\\\"</span>);</span><br><span class=\"line\">            manager.CreateNewTask(<span class=\"string\">\"https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=770549720,375505130&amp;fm=173&amp;s=612A66F94AA394CE4A84E71B030050D7&amp;w=218&amp;h=146&amp;img.JPEG\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"2018-1-30-5ZD6R0BZZ.jpg\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            manager.TaskDownload += (s, e) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!(s <span class=\"keyword\">is</span> DownFileInfo info)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                Console.WriteLine(info.TaskInfo.Percent);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            manager.TaskCompleted += (s, e) =&gt;</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (!(s <span class=\"keyword\">is</span> DownFileInfo info)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                  Console.WriteLine(info.FileName + <span class=\"string\">\"下载完成\"</span>);</span><br><span class=\"line\">              &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            manager.StartAllTask();</span><br><span class=\"line\">            Console.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"Internet-Download-Manager\"><a href=\"#Internet-Download-Manager\" class=\"headerlink\" title=\"Internet Download Manager\"></a>Internet Download Manager</h2><p>这个是我用过之后体验最好的，推荐使用。<br>使用方法如下：</p><h3 id=\"获取DLL文件\"><a href=\"#获取DLL文件\" class=\"headerlink\" title=\"获取DLL文件\"></a>获取DLL文件</h3><ol><li>下载 <a href=\"http://www.internetdownloadmanager.com/support/download/IDMCOMAPI.zip\" target=\"_blank\" rel=\"noopener\">IDMCOMAPI.zip</a>。</li><li>解压 IDManTypeInfo.tlb 文件到任意位置。</li><li>打开 Visual Studio安装时附带的命令行工具。（任选一个即可，推荐第一个）<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180308000415303/20180308121452182.png\" alt=\"\"></li><li><p>使用 类型库导入程序 (Tlbimp.exe)将tlb文件转换成dll文件。</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TlbImp IDManTypeInfo.tlb</span><br></pre></td></tr></table></figure><blockquote><p>Microsoft (R) .NET Framework Type Library to Assembly Converter 3.5.30729.1<br>Copyright (C) Microsoft Corporation. All rights reserved.</p><p>Type library imported to ![IDManLib.dll]<br>This will create an IDManLib.dll</p></blockquote></li></ol><p>如果懒得完成上面的步骤，也可以直接下载我已经导入好的文件<a href=\"http://p4au3q1y8.bkt.clouddn.com/20180308000415303/IDManLib.7z\" target=\"_blank\" rel=\"noopener\">IDManLib.7z</a></p><h2 id=\"引用DLL文件\"><a href=\"#引用DLL文件\" class=\"headerlink\" title=\"引用DLL文件\"></a>引用DLL文件</h2><p>手动选择 IDManLib.dll 文件进行引用，引用后同样也要把类库属性中的嵌入互操作类型修改为false，编译平台最好选择x86。</p><h2 id=\"调用方法\"><a href=\"#调用方法\" class=\"headerlink\" title=\"调用方法\"></a>调用方法</h2><p>和迅雷的类似，将下载地址、文件路劲、文件名等参数传入方法中即可成功在IDM中建立新任务。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> IDManLib.CIDMLinkTransmitterClass().SendLinkToIDM(<span class=\"string\">\"http://s1.static.haoke258.info/attach_2/2018-1-30-5ZD6R0BZZ.rar\"</span>, <span class=\"string\">\"http://ailushe95.info/\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">@\"D:\\Backup\\Downloads\\LULULU\"</span>, <span class=\"string\">\"【感謝擼友投稿】無名小姐姐 2V.rar\"</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>在开发桌面软件时常常有下载文件的需求，小文件、少文件可以自己做相应的网络请求，但是当文件的大小或者数量达到一定规模时，自己封装网络请求就不是很划算的事情了，这时我们可以采取调用迅雷或者IDM、aria2c之类的专业下载软件来进行下载。<br>","more":"</p><h2 id=\"迅雷\"><a href=\"#迅雷\" class=\"headerlink\" title=\"迅雷\"></a>迅雷</h2><h3 id=\"直接调用迅雷\"><a href=\"#直接调用迅雷\" class=\"headerlink\" title=\"直接调用迅雷\"></a>直接调用迅雷</h3><ol><li>安装迅雷后可以再引用的com组件中找到名为 “ThunderAgent 1.0 Type Library” 的com组件，勾选引用之后，把类库属性中的嵌入互操作类型修改为false。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180307172636630/20180307054659587.png\" alt=\"\"></li><li><p>使用代码调用AgentLib直接在迅雷中增加新任务</p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ThunderAgentLib.AgentClass().AddTask(<span class=\"string\">\"http://s1.static.haoke258.info/attach_2/2018-1-30-5ZD6R0BZZ.rar\"</span>);</span><br></pre></td></tr></table></figure><p>以上为最简单的调用方式，只是传入了下载地址，其他的属性为默认值，传入后续的几个参数或者才用AddTask2方法就可以手动修改任务属性。</p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">AddTask</span>(<span class=\"params\">[MarshalAs(UnmanagedType.BStr</span>), In] <span class=\"keyword\">string</span> bstrUrl, [<span class=\"title\">MarshalAs</span>(<span class=\"params\">UnmanagedType.BStr</span>), In] <span class=\"keyword\">string</span> bstrFileName </span>= <span class=\"string\">\"\"</span>, [MarshalAs(UnmanagedType.BStr), In] <span class=\"keyword\">string</span> bstrPath = <span class=\"string\">\"\"</span>, [MarshalAs(UnmanagedType.BStr), In] <span class=\"keyword\">string</span> bstrComments = <span class=\"string\">\"\"</span>, [MarshalAs(UnmanagedType.BStr), In] <span class=\"keyword\">string</span> bstrReferUrl = <span class=\"string\">\"\"</span>, [In] <span class=\"keyword\">int</span> nStartMode = <span class=\"number\">-1</span>, [In] <span class=\"keyword\">int</span> nOnlyFromOrigin = <span class=\"number\">0</span>, [In] <span class=\"keyword\">int</span> nOriginThreadCount = <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">AddTask2</span>(<span class=\"params\">[MarshalAs(UnmanagedType.BStr</span>), In] <span class=\"keyword\">string</span> bstrUrl, [<span class=\"title\">MarshalAs</span>(<span class=\"params\">UnmanagedType.BStr</span>), In] <span class=\"keyword\">string</span> bstrFileName </span>= <span class=\"string\">\"\"</span>, [MarshalAs(UnmanagedType.BStr), In] <span class=\"keyword\">string</span> bstrPath = <span class=\"string\">\"\"</span>, [MarshalAs(UnmanagedType.BStr), In] <span class=\"keyword\">string</span> bstrComments = <span class=\"string\">\"\"</span>, [MarshalAs(UnmanagedType.BStr), In] <span class=\"keyword\">string</span> bstrReferUrl = <span class=\"string\">\"\"</span>, [In] <span class=\"keyword\">int</span> nStartMode = <span class=\"number\">-1</span>, [In] <span class=\"keyword\">int</span> nOnlyFromOrigin = <span class=\"number\">0</span>, [In] <span class=\"keyword\">int</span> nOriginThreadCount = <span class=\"number\">-1</span>, [MarshalAs(UnmanagedType.BStr), In] <span class=\"keyword\">string</span> bstrCookie = <span class=\"string\">\"\"</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id=\"迅雷开放平台\"><a href=\"#迅雷开放平台\" class=\"headerlink\" title=\"迅雷开放平台\"></a>迅雷开放平台</h3><p>迅雷官方曾经开放过一个mini版下载SDK，相当于一个无界面版本的mini迅雷，可以供程序直接调用，现在虽然已经停止服务，但是网上仍然有它的传说，<br>优点是不用下载迅雷，软件+dll总共只有1mb+，缺点就是没有迅雷完整版的那些加速功能，没有那么快。<br>我按照自己的理解把SDK封装了一下：<a href=\"https://github.com/WayneShao/ThunderSdk\" target=\"_blank\" rel=\"noopener\">https://github.com/WayneShao/ThunderSdk</a><br>下面是调用代码：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ThunderSdk;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ThunderSdkDemo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> manager = <span class=\"keyword\">new</span> DownloadManager(<span class=\"number\">1</span>, <span class=\"string\">@\"D:\\\"</span>);</span><br><span class=\"line\">            manager.CreateNewTask(<span class=\"string\">\"https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=770549720,375505130&amp;fm=173&amp;s=612A66F94AA394CE4A84E71B030050D7&amp;w=218&amp;h=146&amp;img.JPEG\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"2018-1-30-5ZD6R0BZZ.jpg\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            manager.TaskDownload += (s, e) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!(s <span class=\"keyword\">is</span> DownFileInfo info)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                Console.WriteLine(info.TaskInfo.Percent);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            manager.TaskCompleted += (s, e) =&gt;</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (!(s <span class=\"keyword\">is</span> DownFileInfo info)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                  Console.WriteLine(info.FileName + <span class=\"string\">\"下载完成\"</span>);</span><br><span class=\"line\">              &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            manager.StartAllTask();</span><br><span class=\"line\">            Console.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"Internet-Download-Manager\"><a href=\"#Internet-Download-Manager\" class=\"headerlink\" title=\"Internet Download Manager\"></a>Internet Download Manager</h2><p>这个是我用过之后体验最好的，推荐使用。<br>使用方法如下：</p><h3 id=\"获取DLL文件\"><a href=\"#获取DLL文件\" class=\"headerlink\" title=\"获取DLL文件\"></a>获取DLL文件</h3><ol><li>下载 <a href=\"http://www.internetdownloadmanager.com/support/download/IDMCOMAPI.zip\" target=\"_blank\" rel=\"noopener\">IDMCOMAPI.zip</a>。</li><li>解压 IDManTypeInfo.tlb 文件到任意位置。</li><li>打开 Visual Studio安装时附带的命令行工具。（任选一个即可，推荐第一个）<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180308000415303/20180308121452182.png\" alt=\"\"></li><li><p>使用 类型库导入程序 (Tlbimp.exe)将tlb文件转换成dll文件。</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TlbImp IDManTypeInfo.tlb</span><br></pre></td></tr></table></figure><blockquote><p>Microsoft (R) .NET Framework Type Library to Assembly Converter 3.5.30729.1<br>Copyright (C) Microsoft Corporation. All rights reserved.</p><p>Type library imported to ![IDManLib.dll]<br>This will create an IDManLib.dll</p></blockquote></li></ol><p>如果懒得完成上面的步骤，也可以直接下载我已经导入好的文件<a href=\"http://p4au3q1y8.bkt.clouddn.com/20180308000415303/IDManLib.7z\" target=\"_blank\" rel=\"noopener\">IDManLib.7z</a></p><h2 id=\"引用DLL文件\"><a href=\"#引用DLL文件\" class=\"headerlink\" title=\"引用DLL文件\"></a>引用DLL文件</h2><p>手动选择 IDManLib.dll 文件进行引用，引用后同样也要把类库属性中的嵌入互操作类型修改为false，编译平台最好选择x86。</p><h2 id=\"调用方法\"><a href=\"#调用方法\" class=\"headerlink\" title=\"调用方法\"></a>调用方法</h2><p>和迅雷的类似，将下载地址、文件路劲、文件名等参数传入方法中即可成功在IDM中建立新任务。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> IDManLib.CIDMLinkTransmitterClass().SendLinkToIDM(<span class=\"string\">\"http://s1.static.haoke258.info/attach_2/2018-1-30-5ZD6R0BZZ.rar\"</span>, <span class=\"string\">\"http://ailushe95.info/\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">@\"D:\\Backup\\Downloads\\LULULU\"</span>, <span class=\"string\">\"【感謝擼友投稿】無名小姐姐 2V.rar\"</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"MVC学习笔记索引帖","abbrlink":375,"date":"2016-09-23T13:10:36.000Z","_content":"# MVC学习笔记索引帖\n<!-- more -->\n[【MVC学习笔记】1.项目结构搭建及单个类在各个层次中的实现](cjdsu1gvb000mjgkbaiuicjql.html)\n\n[【MVC学习笔记】2.使用T4模板生成其他类的具体实现](cjdsuiiy8000qjgkbr90ccd59.html)\n\n[【MVC学习笔记】3.使用Spring.Net应用IOC（依赖倒置）](cjdsursww000tjgkbwkx2jcyr.html)\n\n[【MVC学习笔记】4.使用Log4Net来进行错误日志的记录](cjdsvb5540010jgkbpzf0p0be.html)\n\n[【MVC学习笔记】5.使用Controller来代替Filter完成登录验证（Session校验）](cjdsvhlwr0015jgkb4dxozvxi.html)\n\n[【MVC学习笔记】6. 使用Memcache+Cookie解决分布式系统共享登录状态](cjdsvqsvv001ajgkbjw972ezv.html)\n\n[【MVC学习笔记】7.使用极验验证来制作更高逼格的验证码](cjdswd091001mjgkbhuo2l56k.html)","source":"_posts/MVC学习笔记索引帖.md","raw":"---\ntitle: MVC学习笔记索引帖\ntags:\n  - MVC\n  - 索引\nabbrlink: 375\ndate: 2016-09-23 21:10:36\n---\n# MVC学习笔记索引帖\n<!-- more -->\n[【MVC学习笔记】1.项目结构搭建及单个类在各个层次中的实现](cjdsu1gvb000mjgkbaiuicjql.html)\n\n[【MVC学习笔记】2.使用T4模板生成其他类的具体实现](cjdsuiiy8000qjgkbr90ccd59.html)\n\n[【MVC学习笔记】3.使用Spring.Net应用IOC（依赖倒置）](cjdsursww000tjgkbwkx2jcyr.html)\n\n[【MVC学习笔记】4.使用Log4Net来进行错误日志的记录](cjdsvb5540010jgkbpzf0p0be.html)\n\n[【MVC学习笔记】5.使用Controller来代替Filter完成登录验证（Session校验）](cjdsvhlwr0015jgkb4dxozvxi.html)\n\n[【MVC学习笔记】6. 使用Memcache+Cookie解决分布式系统共享登录状态](cjdsvqsvv001ajgkbjw972ezv.html)\n\n[【MVC学习笔记】7.使用极验验证来制作更高逼格的验证码](cjdswd091001mjgkbhuo2l56k.html)","slug":"MVC学习笔记索引帖","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24osi0008d00ovo15nkpv","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><h1 id=\"MVC学习笔记索引帖\"><a href=\"#MVC学习笔记索引帖\" class=\"headerlink\" title=\"MVC学习笔记索引帖\"></a>MVC学习笔记索引帖</h1><a id=\"more\"></a><p><a href=\"cjdsu1gvb000mjgkbaiuicjql.html\">【MVC学习笔记】1.项目结构搭建及单个类在各个层次中的实现</a></p><p><a href=\"cjdsuiiy8000qjgkbr90ccd59.html\">【MVC学习笔记】2.使用T4模板生成其他类的具体实现</a></p><p><a href=\"cjdsursww000tjgkbwkx2jcyr.html\">【MVC学习笔记】3.使用Spring.Net应用IOC（依赖倒置）</a></p><p><a href=\"cjdsvb5540010jgkbpzf0p0be.html\">【MVC学习笔记】4.使用Log4Net来进行错误日志的记录</a></p><p><a href=\"cjdsvhlwr0015jgkb4dxozvxi.html\">【MVC学习笔记】5.使用Controller来代替Filter完成登录验证（Session校验）</a></p><p><a href=\"cjdsvqsvv001ajgkbjw972ezv.html\">【MVC学习笔记】6. 使用Memcache+Cookie解决分布式系统共享登录状态</a></p><p><a href=\"cjdswd091001mjgkbhuo2l56k.html\">【MVC学习笔记】7.使用极验验证来制作更高逼格的验证码</a></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><h1 id=\"MVC学习笔记索引帖\"><a href=\"#MVC学习笔记索引帖\" class=\"headerlink\" title=\"MVC学习笔记索引帖\"></a>MVC学习笔记索引帖</h1>","more":"<p><a href=\"cjdsu1gvb000mjgkbaiuicjql.html\">【MVC学习笔记】1.项目结构搭建及单个类在各个层次中的实现</a></p><p><a href=\"cjdsuiiy8000qjgkbr90ccd59.html\">【MVC学习笔记】2.使用T4模板生成其他类的具体实现</a></p><p><a href=\"cjdsursww000tjgkbwkx2jcyr.html\">【MVC学习笔记】3.使用Spring.Net应用IOC（依赖倒置）</a></p><p><a href=\"cjdsvb5540010jgkbpzf0p0be.html\">【MVC学习笔记】4.使用Log4Net来进行错误日志的记录</a></p><p><a href=\"cjdsvhlwr0015jgkb4dxozvxi.html\">【MVC学习笔记】5.使用Controller来代替Filter完成登录验证（Session校验）</a></p><p><a href=\"cjdsvqsvv001ajgkbjw972ezv.html\">【MVC学习笔记】6. 使用Memcache+Cookie解决分布式系统共享登录状态</a></p><p><a href=\"cjdswd091001mjgkbhuo2l56k.html\">【MVC学习笔记】7.使用极验验证来制作更高逼格的验证码</a></p><!-- rebuild by neat -->"},{"title":"EFCore MySQL System.TypeLoadException occurred 问题解决","author":"玮仔Wayne","abbrlink":11533,"date":"2018-04-09T11:02:00.000Z","_content":"　　今天在使用 EFCore + MySQL 搭一个小Demo的时候,在 Migration 环节遇到了这样一个问题。\n  > System.TypeLoadException occurred\nHResult=0x80131522\nMessage=Method 'Clone' in type 'MySQL.Data.EntityFrameworkCore.Infraestructure.Internal.MySQLOptionsExtension' from assembly 'MySql.Data.EntityFrameworkCore, Version=8.0.8.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d' does not have an implementation.\n\n  几经排查无果之后求助了Google，发现了一条状况相同的 [Issue](https://github.com/jasonsturges/mysql-dotnet-core/issues/1)\n  项目作者的回复如下\n> 　　@lixiandai Hi, yes, this is frustrating - Oracle's MySQL does not yet fully support .NET Core 2.\n\n> 　　In the interim, I suggest using Pomelo, which can be installed by executing the following command:\n\n> 　　$ dotnet add package Pomelo.EntityFrameworkCore.MySql --version 2.0.0-rtm-10062\nOr, add the following line to your .csproj ItemGroup\n\n> 　　<PackageReference Include=\"Pomelo.EntityFrameworkCore.MySql\" Version=\"2.0.0-rtm-10062\" />\n\n　　所以其实是MySQL的官方驱动包的锅喽?\n  \n　　按照作者的推荐选择了一位国内大佬的项目[Pomelo.EntityFrameworkCore.MySql]( https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql)，成功解决问题。","source":"_posts/Net-Core-2-0-EFCore-MySQL-System-TypeLoadException-occurred-问题解决.md","raw":"title: EFCore MySQL System.TypeLoadException occurred 问题解决\nauthor: 玮仔Wayne\nabbrlink: 11533\ntags:\n  - EFCore\n  - MySQL\ncategories:\n  - 经验之谈\ndate: 2018-04-09 19:02:00\n---\n　　今天在使用 EFCore + MySQL 搭一个小Demo的时候,在 Migration 环节遇到了这样一个问题。\n  > System.TypeLoadException occurred\nHResult=0x80131522\nMessage=Method 'Clone' in type 'MySQL.Data.EntityFrameworkCore.Infraestructure.Internal.MySQLOptionsExtension' from assembly 'MySql.Data.EntityFrameworkCore, Version=8.0.8.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d' does not have an implementation.\n\n  几经排查无果之后求助了Google，发现了一条状况相同的 [Issue](https://github.com/jasonsturges/mysql-dotnet-core/issues/1)\n  项目作者的回复如下\n> 　　@lixiandai Hi, yes, this is frustrating - Oracle's MySQL does not yet fully support .NET Core 2.\n\n> 　　In the interim, I suggest using Pomelo, which can be installed by executing the following command:\n\n> 　　$ dotnet add package Pomelo.EntityFrameworkCore.MySql --version 2.0.0-rtm-10062\nOr, add the following line to your .csproj ItemGroup\n\n> 　　<PackageReference Include=\"Pomelo.EntityFrameworkCore.MySql\" Version=\"2.0.0-rtm-10062\" />\n\n　　所以其实是MySQL的官方驱动包的锅喽?\n  \n　　按照作者的推荐选择了一位国内大佬的项目[Pomelo.EntityFrameworkCore.MySql]( https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql)，成功解决问题。","slug":"Net-Core-2-0-EFCore-MySQL-System-TypeLoadException-occurred-问题解决","published":1,"updated":"2018-04-09T11:19:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24osk000ad00o3d9pd91q","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>今天在使用 EFCore + MySQL 搭一个小Demo的时候,在 Migration 环节遇到了这样一个问题。</p><blockquote><p>System.TypeLoadException occurred<br>HResult=0x80131522<br>Message=Method ‘Clone’ in type ‘MySQL.Data.EntityFrameworkCore.Infraestructure.Internal.MySQLOptionsExtension’ from assembly ‘MySql.Data.EntityFrameworkCore, Version=8.0.8.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d’ does not have an implementation.</p></blockquote><p>几经排查无果之后求助了Google，发现了一条状况相同的 <a href=\"https://github.com/jasonsturges/mysql-dotnet-core/issues/1\" target=\"_blank\" rel=\"noopener\">Issue</a><br>项目作者的回复如下</p><blockquote><p>@lixiandai Hi, yes, this is frustrating - Oracle’s MySQL does not yet fully support .NET Core 2.</p><p>In the interim, I suggest using Pomelo, which can be installed by executing the following command:</p><p>$ dotnet add package Pomelo.EntityFrameworkCore.MySql –version 2.0.0-rtm-10062<br>Or, add the following line to your .csproj ItemGroup</p><p><packagereference include=\"Pomelo.EntityFrameworkCore.MySql\" version=\"2.0.0-rtm-10062\"></packagereference></p></blockquote><p>所以其实是MySQL的官方驱动包的锅喽?</p><p>按照作者的推荐选择了一位国内大佬的项目<a href=\"https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql\" target=\"_blank\" rel=\"noopener\">Pomelo.EntityFrameworkCore.MySql</a>，成功解决问题。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>今天在使用 EFCore + MySQL 搭一个小Demo的时候,在 Migration 环节遇到了这样一个问题。</p><blockquote><p>System.TypeLoadException occurred<br>HResult=0x80131522<br>Message=Method ‘Clone’ in type ‘MySQL.Data.EntityFrameworkCore.Infraestructure.Internal.MySQLOptionsExtension’ from assembly ‘MySql.Data.EntityFrameworkCore, Version=8.0.8.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d’ does not have an implementation.</p></blockquote><p>几经排查无果之后求助了Google，发现了一条状况相同的 <a href=\"https://github.com/jasonsturges/mysql-dotnet-core/issues/1\" target=\"_blank\" rel=\"noopener\">Issue</a><br>项目作者的回复如下</p><blockquote><p>@lixiandai Hi, yes, this is frustrating - Oracle’s MySQL does not yet fully support .NET Core 2.</p><p>In the interim, I suggest using Pomelo, which can be installed by executing the following command:</p><p>$ dotnet add package Pomelo.EntityFrameworkCore.MySql –version 2.0.0-rtm-10062<br>Or, add the following line to your .csproj ItemGroup</p><p><packagereference include=\"Pomelo.EntityFrameworkCore.MySql\" version=\"2.0.0-rtm-10062\"></packagereference></p></blockquote><p>所以其实是MySQL的官方驱动包的锅喽?</p><p>按照作者的推荐选择了一位国内大佬的项目<a href=\"https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql\" target=\"_blank\" rel=\"noopener\">Pomelo.EntityFrameworkCore.MySql</a>，成功解决问题。</p><!-- rebuild by neat -->"},{"title":"【算法复习】贪心算法之最小生成树Prim算法","abbrlink":44726,"date":"2018-02-28T13:16:20.000Z","_content":"最小生成树的Prim算法也是贪心算法的一大经典应用。Prim算法的特点是时刻维护一棵树，算法不断加边，加的过程始终是一棵树。\n<!--more-->\n## 简述\nPrim算法过程：\n\n一条边一条边地加， 维护一棵树。\n\n初始 E ＝ ｛｝空集合， V = ｛任意节点｝\n\n循环（n – 1）次，每次选择一条边（v1,v2）， 满足：v1属于V , v2不属于V。且（v1,v2）权值最小。\n\nE = E + （v1,v2）\nV = V + v2\n\n最终E中的边是一棵最小生成树， V包含了全部节点。\n## 执行过程\n以下图为例介绍Prim算法的执行过程。\n![](http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092129488.png)\nPrim算法的过程从A开始 V = {A}, E = {}\n![](http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092216396.png)\n选中边AF , V = {A, F}, E = {(A,F)} \n![](http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092234421.png)\n选中边FB, V = {A, F, B}, E = {(A,F), (F,B)}\n![](http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092252771.png)\n选中边BD, V = {A, B, F, D},   E = {(A,F), (F,B), (B,D)}\n![](http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092305430.png)\n选中边DE, V = {A, B, F, D, E},   E = {(A,F), (F,B), (B,D), (D,E)}\n![](http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092428701.png)\n选中边BC, V = {A, B, F, D, E, c},   E = {(A,F), (F,B), (B,D), (D,E), (B,C)}, 算法结束。\n## 算法证明\nPrim算法的证明：假设Prim算法得到一棵树P，有一棵最小生成树T。假设P和T不同，我们假设Prim算法进行到第(K – 1)步时选择的边都在T中，这时Prim算法的树是P’, 第K步时,Prim算法选择了一条边e = (u, v)不在T中。假设u在P’中，而v不在。\n\n因为T是树，所以T中必然有一条u到v的路径，我们考虑这条路径上第一个点u在P’中，最后一个点v不在P’中，则路径上一定有一条边f = (x,y)，x在P’中，而且y不在P’中。\n我们考虑f和e的边权w(f)与w(e)的关系：\n\n若w(f) > w(e)，在T中用e换掉f （T中加上e去掉f)，得到一个权值和更小的生成树，与T是最小生成树矛盾。\n若w(f) < w(e), Prim算法在第K步时应该考虑加边f，而不是e,矛盾。\n\n因此只有w(f) = w(e),我们在T中用e换掉f，这样Prim算法在前K步选择的边在T中了，有限步之后把T变成P,而树权值和不变， 从而Prim算法是正确的。\n请仔细理解Prim算法——时刻维护一棵生成树。我们的证明构造性地证明了所有地最小生成树地边权（多重）集合都相同！\n## 题目测试\n最后，我们来提供输入输出数据，由你来写一段程序，实现这个算法，只有写出了正确的程序，才能继续后面的课程。\n\n**输入**\n\n第1行：2个数N,M中间用空格分隔，N为点的数量，M为边的数量。（2 <= N <= 1000, 1 <= M <= 50000)\n第2 - M + 1行：每行3个数S E W，分别表示M条边的2个顶点及权值。(1 <= S, E <= N，1 <= W <= 10000)\n\n**输出**\n\n输出最小生成树的所有边的权值之和。\n\n**输入示例**\n\n> 9 14\n1 2 4\n2 3 8\n3 4 7\n4 5 9\n5 6 10\n6 7 2\n7 8 1\n8 9 7\n2 8 11\n3 9 2\n7 9 6\n3 6 4\n4 6 14\n1 8 8\n\n输出示例\n\n> 37\n\n请选取你熟悉的语言，并在下面的代码框中完成你的程序，注意数据范围，最终结果会造成Int32溢出，这样会输出错误的答案。\n不同语言如何处理输入输出，请查看下面的语言说明。\n\n## 题目分析\n声明一个结构类型储存“边”的信息。\n```csharp\nstruct Side\n{\n    public int[] Endpoints;\n\n    public int Weight;\n\n    public Side(int endpoint1, int endpoint2, int weight)\n    {\n        Endpoints = new int[2] { endpoint1, endpoint2 };\n        Weight = weight;\n    }\n}\n```\n首先读入总边数和总点数\n```csharp\nvar line1 = Console.ReadLine().Split(' ');\nvar n = Convert.ToInt32(line1[0]);\nvar m = Convert.ToInt32(line1[1]);\n```\n读入所有“边”，储存在数组中\n```csharp\nvar sides = new Side[m];\nvar points = new List<int>();\nvar totalWeight = 0L;\nfor (var i = 0; i < m; i++)\n{\n    var line = Console.ReadLine().Split(' ');\n    sides[i] = new Side(Convert.ToInt32(line[0]), Convert.ToInt32(line[1]), Convert.ToInt32(line[2]));\n}\n```\n将所有边按照权值排序\n```csharp\nvar orderSides = sides.OrderBy(s => s.Weight\n```\n加入起点\n```csharp\npoints.AddRange(orderSides[0].Endpoints);\ntotalWeight += orderSides[0].Weight;\norderSides.Rem\n```\nPrim：\n按权值从小到大循环遍历数组里的边，如果发现某一个边的一个端点在端点数组里有，另一个端点在端点数组里没有，就把另一端点也加入，然后累加权值。直到端点数组内端点个数等于总端点数。\n```csharp\nwhile (points.Count != n)\n{\n    for (var i = 0; i < orderSides.Count; i++)\n    {\n        if ((!points.Contains(orderSides[i].Endpoints[0]) && !points.Contains(orderSides[i].Endpoints[1]))||(points.Contains(orderSides[i].Endpoints[0]) && points.Contains(orderSides[i].Endpoints[1]))) continue;\n        points.Add(points.Contains(orderSides[i].Endpoints[0]) ? orderSides[i].Endpoints[1] : orderSides[i].Endpoints[0]);\n        totalWeight += orderSides[i].Weight;\n        orderSides.RemoveAt(i);\n        break;\n    }\n}\n```\n## Accepted\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Sum\n{\n    struct Side\n    {\n        public int[] Endpoints;\n\n        public int Weight;\n\n        public Side(int endpoint1, int endpoint2, int weight)\n        {\n            Endpoints = new int[2] { endpoint1, endpoint2 };\n            Weight = weight;\n        }\n    }\n\n    public static void Main()\n    {\n        var line1 = Console.ReadLine().Split(' ');\n\n        var n = Convert.ToInt32(line1[0]);\n        var m = Convert.ToInt32(line1[1]);\n        var sides = new Side[m];\n        var points = new List<int>();\n        var totalWeight = 0L;\n        for (var i = 0; i < m; i++)\n        {\n            var line = Console.ReadLine().Split(' ');\n            sides[i] = new Side(Convert.ToInt32(line[0]), Convert.ToInt32(line[1]), Convert.ToInt32(line[2]));\n        }\n\n        var orderSides = sides.OrderBy(s => s.Weight).ToList();\n\n        points.AddRange(orderSides[0].Endpoints);\n        totalWeight += orderSides[0].Weight;\n        orderSides.RemoveAt(0);\n        \n        while (points.Count != n)\n        {\n            for (var i = 0; i < orderSides.Count; i++)\n            {\n                if ((!points.Contains(orderSides[i].Endpoints[0]) && !points.Contains(orderSides[i].Endpoints[1]))||(points.Contains(orderSides[i].Endpoints[0]) && points.Contains(orderSides[i].Endpoints[1]))) continue;\n                points.Add(points.Contains(orderSides[i].Endpoints[0]) ? orderSides[i].Endpoints[1] : orderSides[i].Endpoints[0]);\n                totalWeight += orderSides[i].Weight;\n                orderSides.RemoveAt(i);\n                break;\n            }\n        }\n\n        Console.WriteLine(totalWeight);\n    }\n}\n```","source":"_posts/Prim算法.md","raw":"---\ntitle: 【算法复习】贪心算法之最小生成树Prim算法\ntags:\n  - 51NOD\n  - 刷题\n  - 'C#'\n  - Prim\n  - 贪心\nabbrlink: 44726\ndate: 2018-02-28 21:16:20\n---\n最小生成树的Prim算法也是贪心算法的一大经典应用。Prim算法的特点是时刻维护一棵树，算法不断加边，加的过程始终是一棵树。\n<!--more-->\n## 简述\nPrim算法过程：\n\n一条边一条边地加， 维护一棵树。\n\n初始 E ＝ ｛｝空集合， V = ｛任意节点｝\n\n循环（n – 1）次，每次选择一条边（v1,v2）， 满足：v1属于V , v2不属于V。且（v1,v2）权值最小。\n\nE = E + （v1,v2）\nV = V + v2\n\n最终E中的边是一棵最小生成树， V包含了全部节点。\n## 执行过程\n以下图为例介绍Prim算法的执行过程。\n![](http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092129488.png)\nPrim算法的过程从A开始 V = {A}, E = {}\n![](http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092216396.png)\n选中边AF , V = {A, F}, E = {(A,F)} \n![](http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092234421.png)\n选中边FB, V = {A, F, B}, E = {(A,F), (F,B)}\n![](http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092252771.png)\n选中边BD, V = {A, B, F, D},   E = {(A,F), (F,B), (B,D)}\n![](http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092305430.png)\n选中边DE, V = {A, B, F, D, E},   E = {(A,F), (F,B), (B,D), (D,E)}\n![](http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092428701.png)\n选中边BC, V = {A, B, F, D, E, c},   E = {(A,F), (F,B), (B,D), (D,E), (B,C)}, 算法结束。\n## 算法证明\nPrim算法的证明：假设Prim算法得到一棵树P，有一棵最小生成树T。假设P和T不同，我们假设Prim算法进行到第(K – 1)步时选择的边都在T中，这时Prim算法的树是P’, 第K步时,Prim算法选择了一条边e = (u, v)不在T中。假设u在P’中，而v不在。\n\n因为T是树，所以T中必然有一条u到v的路径，我们考虑这条路径上第一个点u在P’中，最后一个点v不在P’中，则路径上一定有一条边f = (x,y)，x在P’中，而且y不在P’中。\n我们考虑f和e的边权w(f)与w(e)的关系：\n\n若w(f) > w(e)，在T中用e换掉f （T中加上e去掉f)，得到一个权值和更小的生成树，与T是最小生成树矛盾。\n若w(f) < w(e), Prim算法在第K步时应该考虑加边f，而不是e,矛盾。\n\n因此只有w(f) = w(e),我们在T中用e换掉f，这样Prim算法在前K步选择的边在T中了，有限步之后把T变成P,而树权值和不变， 从而Prim算法是正确的。\n请仔细理解Prim算法——时刻维护一棵生成树。我们的证明构造性地证明了所有地最小生成树地边权（多重）集合都相同！\n## 题目测试\n最后，我们来提供输入输出数据，由你来写一段程序，实现这个算法，只有写出了正确的程序，才能继续后面的课程。\n\n**输入**\n\n第1行：2个数N,M中间用空格分隔，N为点的数量，M为边的数量。（2 <= N <= 1000, 1 <= M <= 50000)\n第2 - M + 1行：每行3个数S E W，分别表示M条边的2个顶点及权值。(1 <= S, E <= N，1 <= W <= 10000)\n\n**输出**\n\n输出最小生成树的所有边的权值之和。\n\n**输入示例**\n\n> 9 14\n1 2 4\n2 3 8\n3 4 7\n4 5 9\n5 6 10\n6 7 2\n7 8 1\n8 9 7\n2 8 11\n3 9 2\n7 9 6\n3 6 4\n4 6 14\n1 8 8\n\n输出示例\n\n> 37\n\n请选取你熟悉的语言，并在下面的代码框中完成你的程序，注意数据范围，最终结果会造成Int32溢出，这样会输出错误的答案。\n不同语言如何处理输入输出，请查看下面的语言说明。\n\n## 题目分析\n声明一个结构类型储存“边”的信息。\n```csharp\nstruct Side\n{\n    public int[] Endpoints;\n\n    public int Weight;\n\n    public Side(int endpoint1, int endpoint2, int weight)\n    {\n        Endpoints = new int[2] { endpoint1, endpoint2 };\n        Weight = weight;\n    }\n}\n```\n首先读入总边数和总点数\n```csharp\nvar line1 = Console.ReadLine().Split(' ');\nvar n = Convert.ToInt32(line1[0]);\nvar m = Convert.ToInt32(line1[1]);\n```\n读入所有“边”，储存在数组中\n```csharp\nvar sides = new Side[m];\nvar points = new List<int>();\nvar totalWeight = 0L;\nfor (var i = 0; i < m; i++)\n{\n    var line = Console.ReadLine().Split(' ');\n    sides[i] = new Side(Convert.ToInt32(line[0]), Convert.ToInt32(line[1]), Convert.ToInt32(line[2]));\n}\n```\n将所有边按照权值排序\n```csharp\nvar orderSides = sides.OrderBy(s => s.Weight\n```\n加入起点\n```csharp\npoints.AddRange(orderSides[0].Endpoints);\ntotalWeight += orderSides[0].Weight;\norderSides.Rem\n```\nPrim：\n按权值从小到大循环遍历数组里的边，如果发现某一个边的一个端点在端点数组里有，另一个端点在端点数组里没有，就把另一端点也加入，然后累加权值。直到端点数组内端点个数等于总端点数。\n```csharp\nwhile (points.Count != n)\n{\n    for (var i = 0; i < orderSides.Count; i++)\n    {\n        if ((!points.Contains(orderSides[i].Endpoints[0]) && !points.Contains(orderSides[i].Endpoints[1]))||(points.Contains(orderSides[i].Endpoints[0]) && points.Contains(orderSides[i].Endpoints[1]))) continue;\n        points.Add(points.Contains(orderSides[i].Endpoints[0]) ? orderSides[i].Endpoints[1] : orderSides[i].Endpoints[0]);\n        totalWeight += orderSides[i].Weight;\n        orderSides.RemoveAt(i);\n        break;\n    }\n}\n```\n## Accepted\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Sum\n{\n    struct Side\n    {\n        public int[] Endpoints;\n\n        public int Weight;\n\n        public Side(int endpoint1, int endpoint2, int weight)\n        {\n            Endpoints = new int[2] { endpoint1, endpoint2 };\n            Weight = weight;\n        }\n    }\n\n    public static void Main()\n    {\n        var line1 = Console.ReadLine().Split(' ');\n\n        var n = Convert.ToInt32(line1[0]);\n        var m = Convert.ToInt32(line1[1]);\n        var sides = new Side[m];\n        var points = new List<int>();\n        var totalWeight = 0L;\n        for (var i = 0; i < m; i++)\n        {\n            var line = Console.ReadLine().Split(' ');\n            sides[i] = new Side(Convert.ToInt32(line[0]), Convert.ToInt32(line[1]), Convert.ToInt32(line[2]));\n        }\n\n        var orderSides = sides.OrderBy(s => s.Weight).ToList();\n\n        points.AddRange(orderSides[0].Endpoints);\n        totalWeight += orderSides[0].Weight;\n        orderSides.RemoveAt(0);\n        \n        while (points.Count != n)\n        {\n            for (var i = 0; i < orderSides.Count; i++)\n            {\n                if ((!points.Contains(orderSides[i].Endpoints[0]) && !points.Contains(orderSides[i].Endpoints[1]))||(points.Contains(orderSides[i].Endpoints[0]) && points.Contains(orderSides[i].Endpoints[1]))) continue;\n                points.Add(points.Contains(orderSides[i].Endpoints[0]) ? orderSides[i].Endpoints[1] : orderSides[i].Endpoints[0]);\n                totalWeight += orderSides[i].Weight;\n                orderSides.RemoveAt(i);\n                break;\n            }\n        }\n\n        Console.WriteLine(totalWeight);\n    }\n}\n```","slug":"Prim算法","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24osp000bd00ok5s3flwa","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>最小生成树的Prim算法也是贪心算法的一大经典应用。Prim算法的特点是时刻维护一棵树，算法不断加边，加的过程始终是一棵树。<br><a id=\"more\"></a></p><h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>Prim算法过程：</p><p>一条边一条边地加， 维护一棵树。</p><p>初始 E ＝ ｛｝空集合， V = ｛任意节点｝</p><p>循环（n – 1）次，每次选择一条边（v1,v2）， 满足：v1属于V , v2不属于V。且（v1,v2）权值最小。</p><p>E = E + （v1,v2）<br>V = V + v2</p><p>最终E中的边是一棵最小生成树， V包含了全部节点。</p><h2 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h2><p>以下图为例介绍Prim算法的执行过程。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092129488.png\" alt=\"\"><br>Prim算法的过程从A开始 V = {A}, E = {}<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092216396.png\" alt=\"\"><br>选中边AF , V = {A, F}, E = {(A,F)}<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092234421.png\" alt=\"\"><br>选中边FB, V = {A, F, B}, E = {(A,F), (F,B)}<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092252771.png\" alt=\"\"><br>选中边BD, V = {A, B, F, D}, E = {(A,F), (F,B), (B,D)}<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092305430.png\" alt=\"\"><br>选中边DE, V = {A, B, F, D, E}, E = {(A,F), (F,B), (B,D), (D,E)}<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092428701.png\" alt=\"\"><br>选中边BC, V = {A, B, F, D, E, c}, E = {(A,F), (F,B), (B,D), (D,E), (B,C)}, 算法结束。</p><h2 id=\"算法证明\"><a href=\"#算法证明\" class=\"headerlink\" title=\"算法证明\"></a>算法证明</h2><p>Prim算法的证明：假设Prim算法得到一棵树P，有一棵最小生成树T。假设P和T不同，我们假设Prim算法进行到第(K – 1)步时选择的边都在T中，这时Prim算法的树是P’, 第K步时,Prim算法选择了一条边e = (u, v)不在T中。假设u在P’中，而v不在。</p><p>因为T是树，所以T中必然有一条u到v的路径，我们考虑这条路径上第一个点u在P’中，最后一个点v不在P’中，则路径上一定有一条边f = (x,y)，x在P’中，而且y不在P’中。<br>我们考虑f和e的边权w(f)与w(e)的关系：</p><p>若w(f) &gt; w(e)，在T中用e换掉f （T中加上e去掉f)，得到一个权值和更小的生成树，与T是最小生成树矛盾。<br>若w(f) &lt; w(e), Prim算法在第K步时应该考虑加边f，而不是e,矛盾。</p><p>因此只有w(f) = w(e),我们在T中用e换掉f，这样Prim算法在前K步选择的边在T中了，有限步之后把T变成P,而树权值和不变， 从而Prim算法是正确的。<br>请仔细理解Prim算法——时刻维护一棵生成树。我们的证明构造性地证明了所有地最小生成树地边权（多重）集合都相同！</p><h2 id=\"题目测试\"><a href=\"#题目测试\" class=\"headerlink\" title=\"题目测试\"></a>题目测试</h2><p>最后，我们来提供输入输出数据，由你来写一段程序，实现这个算法，只有写出了正确的程序，才能继续后面的课程。</p><p><strong>输入</strong></p><p>第1行：2个数N,M中间用空格分隔，N为点的数量，M为边的数量。（2 &lt;= N &lt;= 1000, 1 &lt;= M &lt;= 50000)<br>第2 - M + 1行：每行3个数S E W，分别表示M条边的2个顶点及权值。(1 &lt;= S, E &lt;= N，1 &lt;= W &lt;= 10000)</p><p><strong>输出</strong></p><p>输出最小生成树的所有边的权值之和。</p><p><strong>输入示例</strong></p><blockquote><p>9 14<br>1 2 4<br>2 3 8<br>3 4 7<br>4 5 9<br>5 6 10<br>6 7 2<br>7 8 1<br>8 9 7<br>2 8 11<br>3 9 2<br>7 9 6<br>3 6 4<br>4 6 14<br>1 8 8</p></blockquote><p>输出示例</p><blockquote><p>37</p></blockquote><p>请选取你熟悉的语言，并在下面的代码框中完成你的程序，注意数据范围，最终结果会造成Int32溢出，这样会输出错误的答案。<br>不同语言如何处理输入输出，请查看下面的语言说明。</p><h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>声明一个结构类型储存“边”的信息。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> Side</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] Endpoints;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Weight;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Side</span>(<span class=\"params\"><span class=\"keyword\">int</span> endpoint1, <span class=\"keyword\">int</span> endpoint2, <span class=\"keyword\">int</span> weight</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Endpoints = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>] &#123; endpoint1, endpoint2 &#125;;</span><br><span class=\"line\">        Weight = weight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>首先读入总边数和总点数<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> line1 = Console.ReadLine().Split(<span class=\"string\">' '</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = Convert.ToInt32(line1[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = Convert.ToInt32(line1[<span class=\"number\">1</span>]);</span><br></pre></td></tr></table></figure><p></p><p>读入所有“边”，储存在数组中<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sides = <span class=\"keyword\">new</span> Side[m];</span><br><span class=\"line\"><span class=\"keyword\">var</span> points = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\"><span class=\"keyword\">var</span> totalWeight = <span class=\"number\">0</span>L;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> line = Console.ReadLine().Split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">    sides[i] = <span class=\"keyword\">new</span> Side(Convert.ToInt32(line[<span class=\"number\">0</span>]), Convert.ToInt32(line[<span class=\"number\">1</span>]), Convert.ToInt32(line[<span class=\"number\">2</span>]));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>将所有边按照权值排序<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> orderSides = sides.OrderBy(s =&gt; s.Weight</span><br></pre></td></tr></table></figure><p></p><p>加入起点<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">points.AddRange(orderSides[<span class=\"number\">0</span>].Endpoints);</span><br><span class=\"line\">totalWeight += orderSides[<span class=\"number\">0</span>].Weight;</span><br><span class=\"line\">orderSides.Rem</span><br></pre></td></tr></table></figure><p></p><p>Prim：<br>按权值从小到大循环遍历数组里的边，如果发现某一个边的一个端点在端点数组里有，另一个端点在端点数组里没有，就把另一端点也加入，然后累加权值。直到端点数组内端点个数等于总端点数。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (points.Count != n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; orderSides.Count; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((!points.Contains(orderSides[i].Endpoints[<span class=\"number\">0</span>]) &amp;&amp; !points.Contains(orderSides[i].Endpoints[<span class=\"number\">1</span>]))||(points.Contains(orderSides[i].Endpoints[<span class=\"number\">0</span>]) &amp;&amp; points.Contains(orderSides[i].Endpoints[<span class=\"number\">1</span>]))) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        points.Add(points.Contains(orderSides[i].Endpoints[<span class=\"number\">0</span>]) ? orderSides[i].Endpoints[<span class=\"number\">1</span>] : orderSides[i].Endpoints[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        totalWeight += orderSides[i].Weight;</span><br><span class=\"line\">        orderSides.RemoveAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> Side</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] Endpoints;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Weight;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Side</span>(<span class=\"params\"><span class=\"keyword\">int</span> endpoint1, <span class=\"keyword\">int</span> endpoint2, <span class=\"keyword\">int</span> weight</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Endpoints = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>] &#123; endpoint1, endpoint2 &#125;;</span><br><span class=\"line\">            Weight = weight;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> line1 = Console.ReadLine().Split(<span class=\"string\">' '</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = Convert.ToInt32(line1[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> m = Convert.ToInt32(line1[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sides = <span class=\"keyword\">new</span> Side[m];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> points = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> totalWeight = <span class=\"number\">0</span>L;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> line = Console.ReadLine().Split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">            sides[i] = <span class=\"keyword\">new</span> Side(Convert.ToInt32(line[<span class=\"number\">0</span>]), Convert.ToInt32(line[<span class=\"number\">1</span>]), Convert.ToInt32(line[<span class=\"number\">2</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> orderSides = sides.OrderBy(s =&gt; s.Weight).ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">        points.AddRange(orderSides[<span class=\"number\">0</span>].Endpoints);</span><br><span class=\"line\">        totalWeight += orderSides[<span class=\"number\">0</span>].Weight;</span><br><span class=\"line\">        orderSides.RemoveAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (points.Count != n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; orderSides.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((!points.Contains(orderSides[i].Endpoints[<span class=\"number\">0</span>]) &amp;&amp; !points.Contains(orderSides[i].Endpoints[<span class=\"number\">1</span>]))||(points.Contains(orderSides[i].Endpoints[<span class=\"number\">0</span>]) &amp;&amp; points.Contains(orderSides[i].Endpoints[<span class=\"number\">1</span>]))) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                points.Add(points.Contains(orderSides[i].Endpoints[<span class=\"number\">0</span>]) ? orderSides[i].Endpoints[<span class=\"number\">1</span>] : orderSides[i].Endpoints[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                totalWeight += orderSides[i].Weight;</span><br><span class=\"line\">                orderSides.RemoveAt(i);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Console.WriteLine(totalWeight);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>最小生成树的Prim算法也是贪心算法的一大经典应用。Prim算法的特点是时刻维护一棵树，算法不断加边，加的过程始终是一棵树。<br>","more":"</p><h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>Prim算法过程：</p><p>一条边一条边地加， 维护一棵树。</p><p>初始 E ＝ ｛｝空集合， V = ｛任意节点｝</p><p>循环（n – 1）次，每次选择一条边（v1,v2）， 满足：v1属于V , v2不属于V。且（v1,v2）权值最小。</p><p>E = E + （v1,v2）<br>V = V + v2</p><p>最终E中的边是一棵最小生成树， V包含了全部节点。</p><h2 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h2><p>以下图为例介绍Prim算法的执行过程。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092129488.png\" alt=\"\"><br>Prim算法的过程从A开始 V = {A}, E = {}<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092216396.png\" alt=\"\"><br>选中边AF , V = {A, F}, E = {(A,F)}<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092234421.png\" alt=\"\"><br>选中边FB, V = {A, F, B}, E = {(A,F), (F,B)}<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092252771.png\" alt=\"\"><br>选中边BD, V = {A, B, F, D}, E = {(A,F), (F,B), (B,D)}<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092305430.png\" alt=\"\"><br>选中边DE, V = {A, B, F, D, E}, E = {(A,F), (F,B), (B,D), (D,E)}<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180228211614459/20180228092428701.png\" alt=\"\"><br>选中边BC, V = {A, B, F, D, E, c}, E = {(A,F), (F,B), (B,D), (D,E), (B,C)}, 算法结束。</p><h2 id=\"算法证明\"><a href=\"#算法证明\" class=\"headerlink\" title=\"算法证明\"></a>算法证明</h2><p>Prim算法的证明：假设Prim算法得到一棵树P，有一棵最小生成树T。假设P和T不同，我们假设Prim算法进行到第(K – 1)步时选择的边都在T中，这时Prim算法的树是P’, 第K步时,Prim算法选择了一条边e = (u, v)不在T中。假设u在P’中，而v不在。</p><p>因为T是树，所以T中必然有一条u到v的路径，我们考虑这条路径上第一个点u在P’中，最后一个点v不在P’中，则路径上一定有一条边f = (x,y)，x在P’中，而且y不在P’中。<br>我们考虑f和e的边权w(f)与w(e)的关系：</p><p>若w(f) &gt; w(e)，在T中用e换掉f （T中加上e去掉f)，得到一个权值和更小的生成树，与T是最小生成树矛盾。<br>若w(f) &lt; w(e), Prim算法在第K步时应该考虑加边f，而不是e,矛盾。</p><p>因此只有w(f) = w(e),我们在T中用e换掉f，这样Prim算法在前K步选择的边在T中了，有限步之后把T变成P,而树权值和不变， 从而Prim算法是正确的。<br>请仔细理解Prim算法——时刻维护一棵生成树。我们的证明构造性地证明了所有地最小生成树地边权（多重）集合都相同！</p><h2 id=\"题目测试\"><a href=\"#题目测试\" class=\"headerlink\" title=\"题目测试\"></a>题目测试</h2><p>最后，我们来提供输入输出数据，由你来写一段程序，实现这个算法，只有写出了正确的程序，才能继续后面的课程。</p><p><strong>输入</strong></p><p>第1行：2个数N,M中间用空格分隔，N为点的数量，M为边的数量。（2 &lt;= N &lt;= 1000, 1 &lt;= M &lt;= 50000)<br>第2 - M + 1行：每行3个数S E W，分别表示M条边的2个顶点及权值。(1 &lt;= S, E &lt;= N，1 &lt;= W &lt;= 10000)</p><p><strong>输出</strong></p><p>输出最小生成树的所有边的权值之和。</p><p><strong>输入示例</strong></p><blockquote><p>9 14<br>1 2 4<br>2 3 8<br>3 4 7<br>4 5 9<br>5 6 10<br>6 7 2<br>7 8 1<br>8 9 7<br>2 8 11<br>3 9 2<br>7 9 6<br>3 6 4<br>4 6 14<br>1 8 8</p></blockquote><p>输出示例</p><blockquote><p>37</p></blockquote><p>请选取你熟悉的语言，并在下面的代码框中完成你的程序，注意数据范围，最终结果会造成Int32溢出，这样会输出错误的答案。<br>不同语言如何处理输入输出，请查看下面的语言说明。</p><h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>声明一个结构类型储存“边”的信息。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> Side</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] Endpoints;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Weight;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Side</span>(<span class=\"params\"><span class=\"keyword\">int</span> endpoint1, <span class=\"keyword\">int</span> endpoint2, <span class=\"keyword\">int</span> weight</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Endpoints = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>] &#123; endpoint1, endpoint2 &#125;;</span><br><span class=\"line\">        Weight = weight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>首先读入总边数和总点数<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> line1 = Console.ReadLine().Split(<span class=\"string\">' '</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = Convert.ToInt32(line1[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = Convert.ToInt32(line1[<span class=\"number\">1</span>]);</span><br></pre></td></tr></table></figure><p></p><p>读入所有“边”，储存在数组中<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sides = <span class=\"keyword\">new</span> Side[m];</span><br><span class=\"line\"><span class=\"keyword\">var</span> points = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\"><span class=\"keyword\">var</span> totalWeight = <span class=\"number\">0</span>L;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> line = Console.ReadLine().Split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">    sides[i] = <span class=\"keyword\">new</span> Side(Convert.ToInt32(line[<span class=\"number\">0</span>]), Convert.ToInt32(line[<span class=\"number\">1</span>]), Convert.ToInt32(line[<span class=\"number\">2</span>]));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>将所有边按照权值排序<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> orderSides = sides.OrderBy(s =&gt; s.Weight</span><br></pre></td></tr></table></figure><p></p><p>加入起点<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">points.AddRange(orderSides[<span class=\"number\">0</span>].Endpoints);</span><br><span class=\"line\">totalWeight += orderSides[<span class=\"number\">0</span>].Weight;</span><br><span class=\"line\">orderSides.Rem</span><br></pre></td></tr></table></figure><p></p><p>Prim：<br>按权值从小到大循环遍历数组里的边，如果发现某一个边的一个端点在端点数组里有，另一个端点在端点数组里没有，就把另一端点也加入，然后累加权值。直到端点数组内端点个数等于总端点数。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (points.Count != n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; orderSides.Count; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((!points.Contains(orderSides[i].Endpoints[<span class=\"number\">0</span>]) &amp;&amp; !points.Contains(orderSides[i].Endpoints[<span class=\"number\">1</span>]))||(points.Contains(orderSides[i].Endpoints[<span class=\"number\">0</span>]) &amp;&amp; points.Contains(orderSides[i].Endpoints[<span class=\"number\">1</span>]))) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        points.Add(points.Contains(orderSides[i].Endpoints[<span class=\"number\">0</span>]) ? orderSides[i].Endpoints[<span class=\"number\">1</span>] : orderSides[i].Endpoints[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        totalWeight += orderSides[i].Weight;</span><br><span class=\"line\">        orderSides.RemoveAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> Side</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] Endpoints;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Weight;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Side</span>(<span class=\"params\"><span class=\"keyword\">int</span> endpoint1, <span class=\"keyword\">int</span> endpoint2, <span class=\"keyword\">int</span> weight</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Endpoints = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>] &#123; endpoint1, endpoint2 &#125;;</span><br><span class=\"line\">            Weight = weight;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> line1 = Console.ReadLine().Split(<span class=\"string\">' '</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = Convert.ToInt32(line1[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> m = Convert.ToInt32(line1[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sides = <span class=\"keyword\">new</span> Side[m];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> points = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> totalWeight = <span class=\"number\">0</span>L;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> line = Console.ReadLine().Split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">            sides[i] = <span class=\"keyword\">new</span> Side(Convert.ToInt32(line[<span class=\"number\">0</span>]), Convert.ToInt32(line[<span class=\"number\">1</span>]), Convert.ToInt32(line[<span class=\"number\">2</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> orderSides = sides.OrderBy(s =&gt; s.Weight).ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">        points.AddRange(orderSides[<span class=\"number\">0</span>].Endpoints);</span><br><span class=\"line\">        totalWeight += orderSides[<span class=\"number\">0</span>].Weight;</span><br><span class=\"line\">        orderSides.RemoveAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (points.Count != n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; orderSides.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((!points.Contains(orderSides[i].Endpoints[<span class=\"number\">0</span>]) &amp;&amp; !points.Contains(orderSides[i].Endpoints[<span class=\"number\">1</span>]))||(points.Contains(orderSides[i].Endpoints[<span class=\"number\">0</span>]) &amp;&amp; points.Contains(orderSides[i].Endpoints[<span class=\"number\">1</span>]))) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                points.Add(points.Contains(orderSides[i].Endpoints[<span class=\"number\">0</span>]) ? orderSides[i].Endpoints[<span class=\"number\">1</span>] : orderSides[i].Endpoints[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                totalWeight += orderSides[i].Weight;</span><br><span class=\"line\">                orderSides.RemoveAt(i);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Console.WriteLine(totalWeight);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"Rtmp/Hls直播、点播服务器部署与配置","abbrlink":13147,"date":"2017-02-14T09:38:39.000Z","_content":"测试使用的系统为CentOS7.3、所有文章中涉及到的包打包在以下地址:\n\n链接：http://pan.baidu.com/s/1nuF3gLV 密码：fo8q\n\n <!-- more -->\n ## Nginx-Rtmp-Module 安装\n 1). 安装依赖包\n ```bash\n        yum -y install gcc glibc glibc-devel make nasm pkgconfig openssl-devel expat-devel gettext-devel libtool perl-Digest-SHA1.x86_64\n```\n2). yum 安装相关工具包及 ffmpeg 依赖包\n   ```\n   yum -y install git zlib pcre openssl\n```\n3). 手动编译安装工具包和依赖包\n    a). **yadmi**\n     ```\n     tar xzvf yamdi-1.9.tar.gz\n     cd yamdi-1.9\n     make && make install\n     cd ..\n     ```\nb). **yasm**\n    ```\n         tar xzvf yasm-1.3.0.tar.gz\n         cd yasm-1.3.0\n         ./configure\n         make && make install\n         cd ..\n         ```\nc). **x264**\n    ```\n         tar -xjvf x264.tar.bz2\n         cd x264-snapshot-20170111-2245\n         ./configure --enable-shared \n         make && make install\n         cd ..\n         ```\nd). **lame**\n    ```\n         tar xzvf lame-3.99.5.tar.gz\n         cd lame-3.99.5\n        ./configure --enable-nasm\n         make && make install\n         cd ..\n         ```\ne). **faad2**\n    ```\n         tar zxvf faad2-2.7.tar.gz\n         cd faad2-2.7\n         ./configure\n         make && make install\n         cd ..\n         ```\nf). **faac**\n```\n         tar zxvf faac-1.28.tar.gz\n         cd faac-1.28\n         ./configure\n         make && make install\n         cd ..\n         ```\ng). **xvid**\n```\n         tar zxvf xvidcore-1.3.3.tar.gz\n         cd xvidcore/build/generic\n         ./configure\n         make && make install\n         cd ..\n         ```\nh). **ffmpeg**\n```\n         tar -xjvf ffmpeg-3.2.4.tar.bz2\n         cd ffmpeg-3.2.4\n         ./configure  --prefix=/opt/ffmpeg/ --enable-version3 --enable-libvpx --enable-libmp3lame  --enable-libvorbis --enable-libx264 --enable-libxvid --enable-shared --enable-gpl --enable-postproc--enable-nonfree  --enable-avfilter --enable-pthreads\n         make && make install\n         cd ..\n         ```\ni). 修改/etc/ld.so.conf如下:\n        ```\n        include ld.so.conf.d/*.conf\n        /lib\n        /lib64\n        /usr/lib\n        /usr/lib64\n        /usr/local/lib\n        /usr/local/lib64\n        /opt/ffmpeg/lib\n        ldconfig\n        ```\n4). 安装 Nginx\n        ```\n        tar zxvf nginx-1.9.9.tar.gz\n        unzip nginx-rtmp-module-master.zip\n        tar zxvf openssl-1.0.2k.tar.gz\n        cd nginx-1.9.9\n        ./configure --add-module=../nginx-rtmp-module-master --without-http_rewrite_module --with-openssl=../openssl-1.0.2k\n        make & make install\n        cd ..\n         ```\n## nginx.conf配置\n ```\n     # nginx.conf Start\n    worker_processes  1;                    #  nginx对外提供 web 服务时的 worker 进程数\n\n    error_log  logs/error.log debug;        # 错误日志路径\n\n    pid        logs/nginx.pid;                #  pid 文件路径\n    worker_rlimit_nofile 51200;                #  worker 进程的最大打开文件数限制\n\n    events {                                #  events 模块中包含 nginx 中所有处理连接的设置。\n        use epoll;                                # 设置用于复用客户端线程的轮询方法。\n        worker_connections  51200;                #由一个 worker 进程同时打开的最大连接数。\n    }\n\n    rtmp_auto_push on;                        # 切换自动推送(多 worker 直播流)模式\n\n    rtmp_auto_push_reconnect 1s;            # 当 worker 被干掉时设置自动推送连接超时时间。默认为 100 毫秒。\n\n    rtmp {                                    # 保存所有 RTMP 配置的块。    \n        server {                                # 声明一个 RTMP 实例。\n            listen 1935;                            # 监听的端口号\n            chunk_size 4096;                        # 流整合的最大的块大小。默认值为 4096。\n\n            application vod {                        # 创建一个 RTMP 应用。\n                play /opt/media/nginxrtmp/flv;            # 点播文件路径\n            }\n\n            application live {                        # 创建一个 RTMP 应用。\n                live on;                                # 是否直播\n                hls on;                                    # 是否开启hls\n                hls_path /usr/local/nginx/html/live;    # 设置 HLS 播放列表和分段目录。\n                hls_fragment 1s;                        # 设置 HLS 分段长度。\n                max_connections 1024;                    # 最大连接数    \n                hls_playlist_length 30s;                #  HLS 播放列表长度\n                hls_sync 100ms;                            #  HLS 时间戳同步阈值\n                meta copy;                                # 是否发送元数据到客户端    \n                recorder manual {                        # 创建一个录制应用\n                    record all manual;                        # 设置录制模式\n                    record_suffix %Y-%m-%d-%H_%M_%S.flv;    # 设置录制文件名\n                    record_max_size 6200000K;                # 设置录制文件的最大值    \n                    record_path /usr/local/nginx/html/Rec;    # 指定录制的 flv 文件存放目录\n                }\n                #record keyframes;\n                #record_path /tmp;\n                #record_max_size 128K;\n                #record_interval 30s;\n                #record_suffix .this.is.flv;\n\n                #on_publish http://localhost:8080/publish;\n                #on_play http://localhost:8080/play;\n                #on_record_done http://localhost:8080/record_done;\n            }\n            # application hls {  \n            #     live on;  \n            #     hls on;  \n            #     hls_path /tmp/app;  \n            #     hls_fragment 5s;  \n            # }\n\n            # application hls{\n            #     live on;\n            #     hls on;\n            #     hls_path /usr/local/nginx/html/hls;\n            #     hls_fragment 5s;\n            # }\n        }\n    }\n\n    http {\n        server {\n            listen      5000;\n            keepalive_timeout  65;\n            location /stat {\n                rtmp_stat all;\n                rtmp_stat_stylesheet stat.xsl;\n            }\n\n            location /stat.xsl {\n                root /opt/nginx-rtmp-server/nginx-rtmp-module/;\n            }\n\n            location /control {\n                rtmp_control all;\n            }\n\n            location /rtmp-publisher {\n                root /opt/nginx-rtmp-server/nginx-rtmp-module/test;\n            }\n\n            location / {\n                root /opt/nginx-rtmp-server/nginx-rtmp-module/test/www;\n            }\n\n            location /crplayer {\n                root /opt/nginx-rtmp-server/nginx-rtmp-module/test;\n            }\n             \n            location /live {  \n               #server hls fragments  \n                types{  \n                    application/vnd.apple.mpegurl m3u8;  \n                    video/mp2t ts;  \n                }  \n                root html;\n                expires -1;  \n            } \n        }\n    }\n    # nginx.conf End\n ```\n ##  运行Nginx服务\n ```\n /usr/local/nginx/sbin/nginx -c /root/nginx/nginx.conf\n ```","source":"_posts/Rtmp-Hls直播、点播服务器部署与配置.md","raw":"---\ntitle: Rtmp/Hls直播、点播服务器部署与配置\ntags:\n  - nginx-rtmp\n  - 流媒体\n  - hls\n  - 点播\nabbrlink: 13147\ndate: 2017-02-14 17:38:39\n---\n测试使用的系统为CentOS7.3、所有文章中涉及到的包打包在以下地址:\n\n链接：http://pan.baidu.com/s/1nuF3gLV 密码：fo8q\n\n <!-- more -->\n ## Nginx-Rtmp-Module 安装\n 1). 安装依赖包\n ```bash\n        yum -y install gcc glibc glibc-devel make nasm pkgconfig openssl-devel expat-devel gettext-devel libtool perl-Digest-SHA1.x86_64\n```\n2). yum 安装相关工具包及 ffmpeg 依赖包\n   ```\n   yum -y install git zlib pcre openssl\n```\n3). 手动编译安装工具包和依赖包\n    a). **yadmi**\n     ```\n     tar xzvf yamdi-1.9.tar.gz\n     cd yamdi-1.9\n     make && make install\n     cd ..\n     ```\nb). **yasm**\n    ```\n         tar xzvf yasm-1.3.0.tar.gz\n         cd yasm-1.3.0\n         ./configure\n         make && make install\n         cd ..\n         ```\nc). **x264**\n    ```\n         tar -xjvf x264.tar.bz2\n         cd x264-snapshot-20170111-2245\n         ./configure --enable-shared \n         make && make install\n         cd ..\n         ```\nd). **lame**\n    ```\n         tar xzvf lame-3.99.5.tar.gz\n         cd lame-3.99.5\n        ./configure --enable-nasm\n         make && make install\n         cd ..\n         ```\ne). **faad2**\n    ```\n         tar zxvf faad2-2.7.tar.gz\n         cd faad2-2.7\n         ./configure\n         make && make install\n         cd ..\n         ```\nf). **faac**\n```\n         tar zxvf faac-1.28.tar.gz\n         cd faac-1.28\n         ./configure\n         make && make install\n         cd ..\n         ```\ng). **xvid**\n```\n         tar zxvf xvidcore-1.3.3.tar.gz\n         cd xvidcore/build/generic\n         ./configure\n         make && make install\n         cd ..\n         ```\nh). **ffmpeg**\n```\n         tar -xjvf ffmpeg-3.2.4.tar.bz2\n         cd ffmpeg-3.2.4\n         ./configure  --prefix=/opt/ffmpeg/ --enable-version3 --enable-libvpx --enable-libmp3lame  --enable-libvorbis --enable-libx264 --enable-libxvid --enable-shared --enable-gpl --enable-postproc--enable-nonfree  --enable-avfilter --enable-pthreads\n         make && make install\n         cd ..\n         ```\ni). 修改/etc/ld.so.conf如下:\n        ```\n        include ld.so.conf.d/*.conf\n        /lib\n        /lib64\n        /usr/lib\n        /usr/lib64\n        /usr/local/lib\n        /usr/local/lib64\n        /opt/ffmpeg/lib\n        ldconfig\n        ```\n4). 安装 Nginx\n        ```\n        tar zxvf nginx-1.9.9.tar.gz\n        unzip nginx-rtmp-module-master.zip\n        tar zxvf openssl-1.0.2k.tar.gz\n        cd nginx-1.9.9\n        ./configure --add-module=../nginx-rtmp-module-master --without-http_rewrite_module --with-openssl=../openssl-1.0.2k\n        make & make install\n        cd ..\n         ```\n## nginx.conf配置\n ```\n     # nginx.conf Start\n    worker_processes  1;                    #  nginx对外提供 web 服务时的 worker 进程数\n\n    error_log  logs/error.log debug;        # 错误日志路径\n\n    pid        logs/nginx.pid;                #  pid 文件路径\n    worker_rlimit_nofile 51200;                #  worker 进程的最大打开文件数限制\n\n    events {                                #  events 模块中包含 nginx 中所有处理连接的设置。\n        use epoll;                                # 设置用于复用客户端线程的轮询方法。\n        worker_connections  51200;                #由一个 worker 进程同时打开的最大连接数。\n    }\n\n    rtmp_auto_push on;                        # 切换自动推送(多 worker 直播流)模式\n\n    rtmp_auto_push_reconnect 1s;            # 当 worker 被干掉时设置自动推送连接超时时间。默认为 100 毫秒。\n\n    rtmp {                                    # 保存所有 RTMP 配置的块。    \n        server {                                # 声明一个 RTMP 实例。\n            listen 1935;                            # 监听的端口号\n            chunk_size 4096;                        # 流整合的最大的块大小。默认值为 4096。\n\n            application vod {                        # 创建一个 RTMP 应用。\n                play /opt/media/nginxrtmp/flv;            # 点播文件路径\n            }\n\n            application live {                        # 创建一个 RTMP 应用。\n                live on;                                # 是否直播\n                hls on;                                    # 是否开启hls\n                hls_path /usr/local/nginx/html/live;    # 设置 HLS 播放列表和分段目录。\n                hls_fragment 1s;                        # 设置 HLS 分段长度。\n                max_connections 1024;                    # 最大连接数    \n                hls_playlist_length 30s;                #  HLS 播放列表长度\n                hls_sync 100ms;                            #  HLS 时间戳同步阈值\n                meta copy;                                # 是否发送元数据到客户端    \n                recorder manual {                        # 创建一个录制应用\n                    record all manual;                        # 设置录制模式\n                    record_suffix %Y-%m-%d-%H_%M_%S.flv;    # 设置录制文件名\n                    record_max_size 6200000K;                # 设置录制文件的最大值    \n                    record_path /usr/local/nginx/html/Rec;    # 指定录制的 flv 文件存放目录\n                }\n                #record keyframes;\n                #record_path /tmp;\n                #record_max_size 128K;\n                #record_interval 30s;\n                #record_suffix .this.is.flv;\n\n                #on_publish http://localhost:8080/publish;\n                #on_play http://localhost:8080/play;\n                #on_record_done http://localhost:8080/record_done;\n            }\n            # application hls {  \n            #     live on;  \n            #     hls on;  \n            #     hls_path /tmp/app;  \n            #     hls_fragment 5s;  \n            # }\n\n            # application hls{\n            #     live on;\n            #     hls on;\n            #     hls_path /usr/local/nginx/html/hls;\n            #     hls_fragment 5s;\n            # }\n        }\n    }\n\n    http {\n        server {\n            listen      5000;\n            keepalive_timeout  65;\n            location /stat {\n                rtmp_stat all;\n                rtmp_stat_stylesheet stat.xsl;\n            }\n\n            location /stat.xsl {\n                root /opt/nginx-rtmp-server/nginx-rtmp-module/;\n            }\n\n            location /control {\n                rtmp_control all;\n            }\n\n            location /rtmp-publisher {\n                root /opt/nginx-rtmp-server/nginx-rtmp-module/test;\n            }\n\n            location / {\n                root /opt/nginx-rtmp-server/nginx-rtmp-module/test/www;\n            }\n\n            location /crplayer {\n                root /opt/nginx-rtmp-server/nginx-rtmp-module/test;\n            }\n             \n            location /live {  \n               #server hls fragments  \n                types{  \n                    application/vnd.apple.mpegurl m3u8;  \n                    video/mp2t ts;  \n                }  \n                root html;\n                expires -1;  \n            } \n        }\n    }\n    # nginx.conf End\n ```\n ##  运行Nginx服务\n ```\n /usr/local/nginx/sbin/nginx -c /root/nginx/nginx.conf\n ```","slug":"Rtmp-Hls直播、点播服务器部署与配置","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24oss000ed00ox4hz4jju","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>测试使用的系统为CentOS7.3、所有文章中涉及到的包打包在以下地址:</p><p>链接：<a href=\"http://pan.baidu.com/s/1nuF3gLV\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1nuF3gLV</a> 密码：fo8q</p><a id=\"more\"></a><h2 id=\"Nginx-Rtmp-Module-安装\"><a href=\"#Nginx-Rtmp-Module-安装\" class=\"headerlink\" title=\"Nginx-Rtmp-Module 安装\"></a>Nginx-Rtmp-Module 安装</h2><p>1). 安装依赖包<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc glibc glibc-devel make nasm pkgconfig openssl-devel expat-devel gettext-devel libtool perl-Digest-SHA1.x86_64</span><br></pre></td></tr></table></figure><p></p><p>2). yum 安装相关工具包及 ffmpeg 依赖包<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install git zlib pcre openssl</span><br></pre></td></tr></table></figure><p></p><p>3). 手动编译安装工具包和依赖包<br>a). <strong>yadmi</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzvf yamdi-1.9.tar.gz</span><br><span class=\"line\">cd yamdi-1.9</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure><p></p><p>b). <strong>yasm</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzvf yasm-1.3.0.tar.gz</span><br><span class=\"line\">cd yasm-1.3.0</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure><p></p><p>c). <strong>x264</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xjvf x264.tar.bz2</span><br><span class=\"line\">cd x264-snapshot-20170111-2245</span><br><span class=\"line\">./configure --enable-shared </span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure><p></p><p>d). <strong>lame</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> tar xzvf lame-3.99.5.tar.gz</span><br><span class=\"line\"> cd lame-3.99.5</span><br><span class=\"line\">./configure --enable-nasm</span><br><span class=\"line\"> make &amp;&amp; make install</span><br><span class=\"line\"> cd ..</span><br></pre></td></tr></table></figure><p></p><p>e). <strong>faad2</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf faad2-2.7.tar.gz</span><br><span class=\"line\">cd faad2-2.7</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure><p></p><p>f). <strong>faac</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf faac-1.28.tar.gz</span><br><span class=\"line\">cd faac-1.28</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure><p></p><p>g). <strong>xvid</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf xvidcore-1.3.3.tar.gz</span><br><span class=\"line\">cd xvidcore/build/generic</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure><p></p><p>h). <strong>ffmpeg</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xjvf ffmpeg-3.2.4.tar.bz2</span><br><span class=\"line\">cd ffmpeg-3.2.4</span><br><span class=\"line\">./configure  --prefix=/opt/ffmpeg/ --enable-version3 --enable-libvpx --enable-libmp3lame  --enable-libvorbis --enable-libx264 --enable-libxvid --enable-shared --enable-gpl --enable-postproc--enable-nonfree  --enable-avfilter --enable-pthreads</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure><p></p><p>i). 修改/etc/ld.so.conf如下:<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include ld.so.conf.d/*.conf</span><br><span class=\"line\">/lib</span><br><span class=\"line\">/lib64</span><br><span class=\"line\">/usr/lib</span><br><span class=\"line\">/usr/lib64</span><br><span class=\"line\">/usr/local/lib</span><br><span class=\"line\">/usr/local/lib64</span><br><span class=\"line\">/opt/ffmpeg/lib</span><br><span class=\"line\">ldconfig</span><br></pre></td></tr></table></figure><p></p><p>4). 安装 Nginx<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf nginx-1.9.9.tar.gz</span><br><span class=\"line\">unzip nginx-rtmp-module-master.zip</span><br><span class=\"line\">tar zxvf openssl-1.0.2k.tar.gz</span><br><span class=\"line\">cd nginx-1.9.9</span><br><span class=\"line\">./configure --add-module=../nginx-rtmp-module-master --without-http_rewrite_module --with-openssl=../openssl-1.0.2k</span><br><span class=\"line\">make &amp; make install</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure><p></p><h2 id=\"nginx-conf配置\"><a href=\"#nginx-conf配置\" class=\"headerlink\" title=\"nginx.conf配置\"></a>nginx.conf配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> # nginx.conf Start</span><br><span class=\"line\">worker_processes  1;                    #  nginx对外提供 web 服务时的 worker 进程数</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  logs/error.log debug;        # 错误日志路径</span><br><span class=\"line\"></span><br><span class=\"line\">pid        logs/nginx.pid;                #  pid 文件路径</span><br><span class=\"line\">worker_rlimit_nofile 51200;                #  worker 进程的最大打开文件数限制</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;                                #  events 模块中包含 nginx 中所有处理连接的设置。</span><br><span class=\"line\">    use epoll;                                # 设置用于复用客户端线程的轮询方法。</span><br><span class=\"line\">    worker_connections  51200;                #由一个 worker 进程同时打开的最大连接数。</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">rtmp_auto_push on;                        # 切换自动推送(多 worker 直播流)模式</span><br><span class=\"line\"></span><br><span class=\"line\">rtmp_auto_push_reconnect 1s;            # 当 worker 被干掉时设置自动推送连接超时时间。默认为 100 毫秒。</span><br><span class=\"line\"></span><br><span class=\"line\">rtmp &#123;                                    # 保存所有 RTMP 配置的块。    </span><br><span class=\"line\">    server &#123;                                # 声明一个 RTMP 实例。</span><br><span class=\"line\">        listen 1935;                            # 监听的端口号</span><br><span class=\"line\">        chunk_size 4096;                        # 流整合的最大的块大小。默认值为 4096。</span><br><span class=\"line\"></span><br><span class=\"line\">        application vod &#123;                        # 创建一个 RTMP 应用。</span><br><span class=\"line\">            play /opt/media/nginxrtmp/flv;            # 点播文件路径</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        application live &#123;                        # 创建一个 RTMP 应用。</span><br><span class=\"line\">            live on;                                # 是否直播</span><br><span class=\"line\">            hls on;                                    # 是否开启hls</span><br><span class=\"line\">            hls_path /usr/local/nginx/html/live;    # 设置 HLS 播放列表和分段目录。</span><br><span class=\"line\">            hls_fragment 1s;                        # 设置 HLS 分段长度。</span><br><span class=\"line\">            max_connections 1024;                    # 最大连接数    </span><br><span class=\"line\">            hls_playlist_length 30s;                #  HLS 播放列表长度</span><br><span class=\"line\">            hls_sync 100ms;                            #  HLS 时间戳同步阈值</span><br><span class=\"line\">            meta copy;                                # 是否发送元数据到客户端    </span><br><span class=\"line\">            recorder manual &#123;                        # 创建一个录制应用</span><br><span class=\"line\">                record all manual;                        # 设置录制模式</span><br><span class=\"line\">                record_suffix %Y-%m-%d-%H_%M_%S.flv;    # 设置录制文件名</span><br><span class=\"line\">                record_max_size 6200000K;                # 设置录制文件的最大值    </span><br><span class=\"line\">                record_path /usr/local/nginx/html/Rec;    # 指定录制的 flv 文件存放目录</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            #record keyframes;</span><br><span class=\"line\">            #record_path /tmp;</span><br><span class=\"line\">            #record_max_size 128K;</span><br><span class=\"line\">            #record_interval 30s;</span><br><span class=\"line\">            #record_suffix .this.is.flv;</span><br><span class=\"line\"></span><br><span class=\"line\">            #on_publish http://localhost:8080/publish;</span><br><span class=\"line\">            #on_play http://localhost:8080/play;</span><br><span class=\"line\">            #on_record_done http://localhost:8080/record_done;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        # application hls &#123;  </span><br><span class=\"line\">        #     live on;  </span><br><span class=\"line\">        #     hls on;  </span><br><span class=\"line\">        #     hls_path /tmp/app;  </span><br><span class=\"line\">        #     hls_fragment 5s;  </span><br><span class=\"line\">        # &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # application hls&#123;</span><br><span class=\"line\">        #     live on;</span><br><span class=\"line\">        #     hls on;</span><br><span class=\"line\">        #     hls_path /usr/local/nginx/html/hls;</span><br><span class=\"line\">        #     hls_fragment 5s;</span><br><span class=\"line\">        # &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen      5000;</span><br><span class=\"line\">        keepalive_timeout  65;</span><br><span class=\"line\">        location /stat &#123;</span><br><span class=\"line\">            rtmp_stat all;</span><br><span class=\"line\">            rtmp_stat_stylesheet stat.xsl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /stat.xsl &#123;</span><br><span class=\"line\">            root /opt/nginx-rtmp-server/nginx-rtmp-module/;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /control &#123;</span><br><span class=\"line\">            rtmp_control all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /rtmp-publisher &#123;</span><br><span class=\"line\">            root /opt/nginx-rtmp-server/nginx-rtmp-module/test;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root /opt/nginx-rtmp-server/nginx-rtmp-module/test/www;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /crplayer &#123;</span><br><span class=\"line\">            root /opt/nginx-rtmp-server/nginx-rtmp-module/test;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        location /live &#123;  </span><br><span class=\"line\">           #server hls fragments  </span><br><span class=\"line\">            types&#123;  </span><br><span class=\"line\">                application/vnd.apple.mpegurl m3u8;  </span><br><span class=\"line\">                video/mp2t ts;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            root html;</span><br><span class=\"line\">            expires -1;  </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># nginx.conf End</span><br></pre></td></tr></table></figure><h2 id=\"运行Nginx服务\"><a href=\"#运行Nginx服务\" class=\"headerlink\" title=\"运行Nginx服务\"></a>运行Nginx服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/sbin/nginx -c /root/nginx/nginx.conf</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>测试使用的系统为CentOS7.3、所有文章中涉及到的包打包在以下地址:</p><p>链接：<a href=\"http://pan.baidu.com/s/1nuF3gLV\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1nuF3gLV</a> 密码：fo8q</p>","more":"<h2 id=\"Nginx-Rtmp-Module-安装\"><a href=\"#Nginx-Rtmp-Module-安装\" class=\"headerlink\" title=\"Nginx-Rtmp-Module 安装\"></a>Nginx-Rtmp-Module 安装</h2><p>1). 安装依赖包<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc glibc glibc-devel make nasm pkgconfig openssl-devel expat-devel gettext-devel libtool perl-Digest-SHA1.x86_64</span><br></pre></td></tr></table></figure><p></p><p>2). yum 安装相关工具包及 ffmpeg 依赖包<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install git zlib pcre openssl</span><br></pre></td></tr></table></figure><p></p><p>3). 手动编译安装工具包和依赖包<br>a). <strong>yadmi</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzvf yamdi-1.9.tar.gz</span><br><span class=\"line\">cd yamdi-1.9</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure><p></p><p>b). <strong>yasm</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzvf yasm-1.3.0.tar.gz</span><br><span class=\"line\">cd yasm-1.3.0</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure><p></p><p>c). <strong>x264</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xjvf x264.tar.bz2</span><br><span class=\"line\">cd x264-snapshot-20170111-2245</span><br><span class=\"line\">./configure --enable-shared </span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure><p></p><p>d). <strong>lame</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> tar xzvf lame-3.99.5.tar.gz</span><br><span class=\"line\"> cd lame-3.99.5</span><br><span class=\"line\">./configure --enable-nasm</span><br><span class=\"line\"> make &amp;&amp; make install</span><br><span class=\"line\"> cd ..</span><br></pre></td></tr></table></figure><p></p><p>e). <strong>faad2</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf faad2-2.7.tar.gz</span><br><span class=\"line\">cd faad2-2.7</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure><p></p><p>f). <strong>faac</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf faac-1.28.tar.gz</span><br><span class=\"line\">cd faac-1.28</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure><p></p><p>g). <strong>xvid</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf xvidcore-1.3.3.tar.gz</span><br><span class=\"line\">cd xvidcore/build/generic</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure><p></p><p>h). <strong>ffmpeg</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xjvf ffmpeg-3.2.4.tar.bz2</span><br><span class=\"line\">cd ffmpeg-3.2.4</span><br><span class=\"line\">./configure  --prefix=/opt/ffmpeg/ --enable-version3 --enable-libvpx --enable-libmp3lame  --enable-libvorbis --enable-libx264 --enable-libxvid --enable-shared --enable-gpl --enable-postproc--enable-nonfree  --enable-avfilter --enable-pthreads</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure><p></p><p>i). 修改/etc/ld.so.conf如下:<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include ld.so.conf.d/*.conf</span><br><span class=\"line\">/lib</span><br><span class=\"line\">/lib64</span><br><span class=\"line\">/usr/lib</span><br><span class=\"line\">/usr/lib64</span><br><span class=\"line\">/usr/local/lib</span><br><span class=\"line\">/usr/local/lib64</span><br><span class=\"line\">/opt/ffmpeg/lib</span><br><span class=\"line\">ldconfig</span><br></pre></td></tr></table></figure><p></p><p>4). 安装 Nginx<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf nginx-1.9.9.tar.gz</span><br><span class=\"line\">unzip nginx-rtmp-module-master.zip</span><br><span class=\"line\">tar zxvf openssl-1.0.2k.tar.gz</span><br><span class=\"line\">cd nginx-1.9.9</span><br><span class=\"line\">./configure --add-module=../nginx-rtmp-module-master --without-http_rewrite_module --with-openssl=../openssl-1.0.2k</span><br><span class=\"line\">make &amp; make install</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure><p></p><h2 id=\"nginx-conf配置\"><a href=\"#nginx-conf配置\" class=\"headerlink\" title=\"nginx.conf配置\"></a>nginx.conf配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> # nginx.conf Start</span><br><span class=\"line\">worker_processes  1;                    #  nginx对外提供 web 服务时的 worker 进程数</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  logs/error.log debug;        # 错误日志路径</span><br><span class=\"line\"></span><br><span class=\"line\">pid        logs/nginx.pid;                #  pid 文件路径</span><br><span class=\"line\">worker_rlimit_nofile 51200;                #  worker 进程的最大打开文件数限制</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;                                #  events 模块中包含 nginx 中所有处理连接的设置。</span><br><span class=\"line\">    use epoll;                                # 设置用于复用客户端线程的轮询方法。</span><br><span class=\"line\">    worker_connections  51200;                #由一个 worker 进程同时打开的最大连接数。</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">rtmp_auto_push on;                        # 切换自动推送(多 worker 直播流)模式</span><br><span class=\"line\"></span><br><span class=\"line\">rtmp_auto_push_reconnect 1s;            # 当 worker 被干掉时设置自动推送连接超时时间。默认为 100 毫秒。</span><br><span class=\"line\"></span><br><span class=\"line\">rtmp &#123;                                    # 保存所有 RTMP 配置的块。    </span><br><span class=\"line\">    server &#123;                                # 声明一个 RTMP 实例。</span><br><span class=\"line\">        listen 1935;                            # 监听的端口号</span><br><span class=\"line\">        chunk_size 4096;                        # 流整合的最大的块大小。默认值为 4096。</span><br><span class=\"line\"></span><br><span class=\"line\">        application vod &#123;                        # 创建一个 RTMP 应用。</span><br><span class=\"line\">            play /opt/media/nginxrtmp/flv;            # 点播文件路径</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        application live &#123;                        # 创建一个 RTMP 应用。</span><br><span class=\"line\">            live on;                                # 是否直播</span><br><span class=\"line\">            hls on;                                    # 是否开启hls</span><br><span class=\"line\">            hls_path /usr/local/nginx/html/live;    # 设置 HLS 播放列表和分段目录。</span><br><span class=\"line\">            hls_fragment 1s;                        # 设置 HLS 分段长度。</span><br><span class=\"line\">            max_connections 1024;                    # 最大连接数    </span><br><span class=\"line\">            hls_playlist_length 30s;                #  HLS 播放列表长度</span><br><span class=\"line\">            hls_sync 100ms;                            #  HLS 时间戳同步阈值</span><br><span class=\"line\">            meta copy;                                # 是否发送元数据到客户端    </span><br><span class=\"line\">            recorder manual &#123;                        # 创建一个录制应用</span><br><span class=\"line\">                record all manual;                        # 设置录制模式</span><br><span class=\"line\">                record_suffix %Y-%m-%d-%H_%M_%S.flv;    # 设置录制文件名</span><br><span class=\"line\">                record_max_size 6200000K;                # 设置录制文件的最大值    </span><br><span class=\"line\">                record_path /usr/local/nginx/html/Rec;    # 指定录制的 flv 文件存放目录</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            #record keyframes;</span><br><span class=\"line\">            #record_path /tmp;</span><br><span class=\"line\">            #record_max_size 128K;</span><br><span class=\"line\">            #record_interval 30s;</span><br><span class=\"line\">            #record_suffix .this.is.flv;</span><br><span class=\"line\"></span><br><span class=\"line\">            #on_publish http://localhost:8080/publish;</span><br><span class=\"line\">            #on_play http://localhost:8080/play;</span><br><span class=\"line\">            #on_record_done http://localhost:8080/record_done;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        # application hls &#123;  </span><br><span class=\"line\">        #     live on;  </span><br><span class=\"line\">        #     hls on;  </span><br><span class=\"line\">        #     hls_path /tmp/app;  </span><br><span class=\"line\">        #     hls_fragment 5s;  </span><br><span class=\"line\">        # &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # application hls&#123;</span><br><span class=\"line\">        #     live on;</span><br><span class=\"line\">        #     hls on;</span><br><span class=\"line\">        #     hls_path /usr/local/nginx/html/hls;</span><br><span class=\"line\">        #     hls_fragment 5s;</span><br><span class=\"line\">        # &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen      5000;</span><br><span class=\"line\">        keepalive_timeout  65;</span><br><span class=\"line\">        location /stat &#123;</span><br><span class=\"line\">            rtmp_stat all;</span><br><span class=\"line\">            rtmp_stat_stylesheet stat.xsl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /stat.xsl &#123;</span><br><span class=\"line\">            root /opt/nginx-rtmp-server/nginx-rtmp-module/;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /control &#123;</span><br><span class=\"line\">            rtmp_control all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /rtmp-publisher &#123;</span><br><span class=\"line\">            root /opt/nginx-rtmp-server/nginx-rtmp-module/test;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root /opt/nginx-rtmp-server/nginx-rtmp-module/test/www;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /crplayer &#123;</span><br><span class=\"line\">            root /opt/nginx-rtmp-server/nginx-rtmp-module/test;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        location /live &#123;  </span><br><span class=\"line\">           #server hls fragments  </span><br><span class=\"line\">            types&#123;  </span><br><span class=\"line\">                application/vnd.apple.mpegurl m3u8;  </span><br><span class=\"line\">                video/mp2t ts;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            root html;</span><br><span class=\"line\">            expires -1;  </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># nginx.conf End</span><br></pre></td></tr></table></figure><h2 id=\"运行Nginx服务\"><a href=\"#运行Nginx服务\" class=\"headerlink\" title=\"运行Nginx服务\"></a>运行Nginx服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/sbin/nginx -c /root/nginx/nginx.conf</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"【51NOD刷题】1182 完美字符串","abbrlink":52125,"date":"2018-03-08T12:12:46.000Z","_content":"[**1182 完美字符串  **](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1182)\n题目来源： Facebook Hacker Cup选拔\n基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题\n\n约翰认为字符串的完美度等于它里面所有字母的完美度之和。每个字母的完美度可以由你来分配，不同字母的完美度不同，分别对应一个1-26之间的整数。\n约翰不在乎字母大小写。（也就是说字母F和f）的完美度相同。给定一个字符串，输出它的最大可能的完美度。例如：dad，你可以将26分配给d，25分配给a，这样整个字符串完美度为77。\n\n<!--more-->\n## 输入输出\n**Input**\n输入一个字符串S(S的长度 <= 10000)，S中没有除字母外的其他字符。\n\n**Output**\n由你将1-26分配给不同的字母，使得字符串S的完美度最大，输出这个完美度。\n\n**Input示例**\n> dad\n\n**Output示例**\n> 77\n\n## 题目分析\n这道题很简单，可以自主赋予权值，则吧字符串中每个字母出现的次数统计出来，再按照次数降序排序，从第一个元素开始到次数不为0的最后一个元素n分别讲数量乘以26-n+1，之后将所有运算结果相加即为最终结果。\n## Accepted\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var str = Console.ReadLine();\n        var countDic = new Dictionary<char, int>();\n\n        foreach (var c in str.ToCharArray())\n            if (countDic.ContainsKey(c))\n                countDic[c]++;\n            else\n                countDic.Add(c, 1);\n\n        var countE = countDic.Where(i => i.Key > 0).Select(i => i.Value).OrderByDescending(i => i).ToArray();\n\n        var s = 0;\n        for (var i = 0; i < countE.Count(); i++)\n            s += countE[i] * (26 - i);\n\n        Console.WriteLine(s);\n    }\n}\n```![](undefined)","source":"_posts/【51NOD刷题】1182-完美字符串.md","raw":"---\ntitle: 【51NOD刷题】1182 完美字符串\nabbrlink: 52125\ndate: 2018-03-08 20:12:46\ntags:\n  - 51NOD\n  - 刷题\n  - 'C#'\n---\n[**1182 完美字符串  **](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1182)\n题目来源： Facebook Hacker Cup选拔\n基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题\n\n约翰认为字符串的完美度等于它里面所有字母的完美度之和。每个字母的完美度可以由你来分配，不同字母的完美度不同，分别对应一个1-26之间的整数。\n约翰不在乎字母大小写。（也就是说字母F和f）的完美度相同。给定一个字符串，输出它的最大可能的完美度。例如：dad，你可以将26分配给d，25分配给a，这样整个字符串完美度为77。\n\n<!--more-->\n## 输入输出\n**Input**\n输入一个字符串S(S的长度 <= 10000)，S中没有除字母外的其他字符。\n\n**Output**\n由你将1-26分配给不同的字母，使得字符串S的完美度最大，输出这个完美度。\n\n**Input示例**\n> dad\n\n**Output示例**\n> 77\n\n## 题目分析\n这道题很简单，可以自主赋予权值，则吧字符串中每个字母出现的次数统计出来，再按照次数降序排序，从第一个元素开始到次数不为0的最后一个元素n分别讲数量乘以26-n+1，之后将所有运算结果相加即为最终结果。\n## Accepted\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var str = Console.ReadLine();\n        var countDic = new Dictionary<char, int>();\n\n        foreach (var c in str.ToCharArray())\n            if (countDic.ContainsKey(c))\n                countDic[c]++;\n            else\n                countDic.Add(c, 1);\n\n        var countE = countDic.Where(i => i.Key > 0).Select(i => i.Value).OrderByDescending(i => i).ToArray();\n\n        var s = 0;\n        for (var i = 0; i < countE.Count(); i++)\n            s += countE[i] * (26 - i);\n\n        Console.WriteLine(s);\n    }\n}\n```![](undefined)","slug":"【51NOD刷题】1182-完美字符串","published":1,"updated":"2018-03-13T02:31:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24osu000gd00ouxf4603e","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1182\" target=\"_blank\" rel=\"noopener\"><strong>1182 完美字符串</strong></a><br>题目来源： Facebook Hacker Cup选拔<br>基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题</p><p>约翰认为字符串的完美度等于它里面所有字母的完美度之和。每个字母的完美度可以由你来分配，不同字母的完美度不同，分别对应一个1-26之间的整数。<br>约翰不在乎字母大小写。（也就是说字母F和f）的完美度相同。给定一个字符串，输出它的最大可能的完美度。例如：dad，你可以将26分配给d，25分配给a，这样整个字符串完美度为77。</p><a id=\"more\"></a><h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>输入一个字符串S(S的长度 &lt;= 10000)，S中没有除字母外的其他字符。</p><p><strong>Output</strong><br>由你将1-26分配给不同的字母，使得字符串S的完美度最大，输出这个完美度。</p><p><strong>Input示例</strong></p><blockquote><p>dad</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>77</p></blockquote><h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>这道题很简单，可以自主赋予权值，则吧字符串中每个字母出现的次数统计出来，再按照次数降序排序，从第一个元素开始到次数不为0的最后一个元素n分别讲数量乘以26-n+1，之后将所有运算结果相加即为最终结果。</p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><p>```csharp<br>using System;<br>using System.Collections.Generic;<br>using System.Linq;</p><p>public class Sum<br>{<br>public static void Main()<br>{<br>var str = Console.ReadLine();<br>var countDic = new Dictionary<char ,=\"\" int=\"\">();</char></p><pre><code>    foreach (var c in str.ToCharArray())\n        if (countDic.ContainsKey(c))\n            countDic[c]++;\n        else\n            countDic.Add(c, 1);\n\n    var countE = countDic.Where(i =&gt; i.Key &gt; 0).Select(i =&gt; i.Value).OrderByDescending(i =&gt; i).ToArray();\n\n    var s = 0;\n    for (var i = 0; i &lt; countE.Count(); i++)\n        s += countE[i] * (26 - i);\n\n    Console.WriteLine(s);\n}\n</code></pre><p>}<br>```<img src=\"undefined\" alt=\"\"></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1182\" target=\"_blank\" rel=\"noopener\"><strong>1182 完美字符串</strong></a><br>题目来源： Facebook Hacker Cup选拔<br>基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题</p><p>约翰认为字符串的完美度等于它里面所有字母的完美度之和。每个字母的完美度可以由你来分配，不同字母的完美度不同，分别对应一个1-26之间的整数。<br>约翰不在乎字母大小写。（也就是说字母F和f）的完美度相同。给定一个字符串，输出它的最大可能的完美度。例如：dad，你可以将26分配给d，25分配给a，这样整个字符串完美度为77。</p>","more":"<h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>输入一个字符串S(S的长度 &lt;= 10000)，S中没有除字母外的其他字符。</p><p><strong>Output</strong><br>由你将1-26分配给不同的字母，使得字符串S的完美度最大，输出这个完美度。</p><p><strong>Input示例</strong></p><blockquote><p>dad</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>77</p></blockquote><h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>这道题很简单，可以自主赋予权值，则吧字符串中每个字母出现的次数统计出来，再按照次数降序排序，从第一个元素开始到次数不为0的最后一个元素n分别讲数量乘以26-n+1，之后将所有运算结果相加即为最终结果。</p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><p>```csharp<br>using System;<br>using System.Collections.Generic;<br>using System.Linq;</p><p>public class Sum<br>{<br>public static void Main()<br>{<br>var str = Console.ReadLine();<br>var countDic = new Dictionary<char ,=\"\" int=\"\">();</char></p><pre><code>    foreach (var c in str.ToCharArray())\n        if (countDic.ContainsKey(c))\n            countDic[c]++;\n        else\n            countDic.Add(c, 1);\n\n    var countE = countDic.Where(i =&gt; i.Key &gt; 0).Select(i =&gt; i.Value).OrderByDescending(i =&gt; i).ToArray();\n\n    var s = 0;\n    for (var i = 0; i &lt; countE.Count(); i++)\n        s += countE[i] * (26 - i);\n\n    Console.WriteLine(s);\n}\n</code></pre><p>}<br>```<img src=\"undefined\" alt=\"\"></p><!-- rebuild by neat -->"},{"title":"redhat7.3配置163 yum源","abbrlink":12206,"date":"2017-01-15T03:53:25.000Z","_content":"redhat 的更新包只对注册的用户生效，所以我们需要自己手动更改成CentOS 的更新包，CentOS几乎和redhat是一样的，所以无需担心软件包是否可安装，安装之后是否有问题。\n<!-- more -->\n## 删除redhat原有的yum\n首先删除redhat原有的yum ，因为redhat 原本的yum 没有注册为redhat用户是用不了的。\n```bash\nrpm -aq|grep yum|xargs rpm -e --nodeps \nrpm -aq|grep python-iniparse|xargs rpm -e --nodeps\n```\n## 下载163的yum 安装包\n```bash\nwget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/yum-3.4.3-150.el7.centos.noarch.rpm\nwget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/python-iniparse-0.4-9.el7.noarch.rpm\nwget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm\nwget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-40.el7.noarch.rpm\n```\n### 安装下载的rpm包\n```bash\nrpm -ivh *.rpm\n```\n### 创建文件/etc/yum.repos.d/rhel-debuginfo.repo并写入\n```\n[base]\nname=CentOS-$releasever - Base\nbaseurl=http://mirrors.163.com/centos/7.3.1611/os/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/7.3.1611/os/x86_64/RPM-GPG-KEY-CentOS-7\n \n \n#released updates\n[updates]\nname=CentOS-$releasever - Updates\nbaseurl=http://mirrors.163.com/centos/7.3.1611/updates/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/7.3.1611/os/x86_64/RPM-GPG-KEY-CentOS-7\n \n \n[extras]\nname=CentOS-$releasever - Extras\nbaseurl=http://mirrors.163.com/centos/7.3.1611/extras//$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/7.3.1611/os/x86_64/RPM-GPG-KEY-CentOS-7\n \n[centosplus]\nname=CentOS-$releasever - Plus\nbaseurl=http://mirrors.163.com/centos/7.3.1611/centosplus//$basearch/\ngpgcheck=1\nenabled=0\n```\n### yum clean all\n```\nyum clean all\n```\n### yum update 测试。\n```\nyum update\n```\n### 安装 epel 源\n```\nyum install epel-release\n```","source":"_posts/redhat7.3配置163-yum源.md","raw":"---\ntitle: redhat7.3配置163 yum源\ntags:\n  - redhat\n  - yum源\nabbrlink: 12206\ndate: 2017-01-15 11:53:25\n---\nredhat 的更新包只对注册的用户生效，所以我们需要自己手动更改成CentOS 的更新包，CentOS几乎和redhat是一样的，所以无需担心软件包是否可安装，安装之后是否有问题。\n<!-- more -->\n## 删除redhat原有的yum\n首先删除redhat原有的yum ，因为redhat 原本的yum 没有注册为redhat用户是用不了的。\n```bash\nrpm -aq|grep yum|xargs rpm -e --nodeps \nrpm -aq|grep python-iniparse|xargs rpm -e --nodeps\n```\n## 下载163的yum 安装包\n```bash\nwget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/yum-3.4.3-150.el7.centos.noarch.rpm\nwget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/python-iniparse-0.4-9.el7.noarch.rpm\nwget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm\nwget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-40.el7.noarch.rpm\n```\n### 安装下载的rpm包\n```bash\nrpm -ivh *.rpm\n```\n### 创建文件/etc/yum.repos.d/rhel-debuginfo.repo并写入\n```\n[base]\nname=CentOS-$releasever - Base\nbaseurl=http://mirrors.163.com/centos/7.3.1611/os/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/7.3.1611/os/x86_64/RPM-GPG-KEY-CentOS-7\n \n \n#released updates\n[updates]\nname=CentOS-$releasever - Updates\nbaseurl=http://mirrors.163.com/centos/7.3.1611/updates/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/7.3.1611/os/x86_64/RPM-GPG-KEY-CentOS-7\n \n \n[extras]\nname=CentOS-$releasever - Extras\nbaseurl=http://mirrors.163.com/centos/7.3.1611/extras//$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/7.3.1611/os/x86_64/RPM-GPG-KEY-CentOS-7\n \n[centosplus]\nname=CentOS-$releasever - Plus\nbaseurl=http://mirrors.163.com/centos/7.3.1611/centosplus//$basearch/\ngpgcheck=1\nenabled=0\n```\n### yum clean all\n```\nyum clean all\n```\n### yum update 测试。\n```\nyum update\n```\n### 安装 epel 源\n```\nyum install epel-release\n```","slug":"redhat7.3配置163-yum源","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24osv000jd00o0bsxtcbu","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>redhat 的更新包只对注册的用户生效，所以我们需要自己手动更改成CentOS 的更新包，CentOS几乎和redhat是一样的，所以无需担心软件包是否可安装，安装之后是否有问题。<br><a id=\"more\"></a></p><h2 id=\"删除redhat原有的yum\"><a href=\"#删除redhat原有的yum\" class=\"headerlink\" title=\"删除redhat原有的yum\"></a>删除redhat原有的yum</h2><p>首先删除redhat原有的yum ，因为redhat 原本的yum 没有注册为redhat用户是用不了的。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -aq|grep yum|xargs rpm -e --nodeps </span><br><span class=\"line\">rpm -aq|grep python-iniparse|xargs rpm -e --nodeps</span><br></pre></td></tr></table></figure><p></p><h2 id=\"下载163的yum-安装包\"><a href=\"#下载163的yum-安装包\" class=\"headerlink\" title=\"下载163的yum 安装包\"></a>下载163的yum 安装包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/yum-3.4.3-150.el7.centos.noarch.rpm</span><br><span class=\"line\">wget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/python-iniparse-0.4-9.el7.noarch.rpm</span><br><span class=\"line\">wget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm</span><br><span class=\"line\">wget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-40.el7.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id=\"安装下载的rpm包\"><a href=\"#安装下载的rpm包\" class=\"headerlink\" title=\"安装下载的rpm包\"></a>安装下载的rpm包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh *.rpm</span><br></pre></td></tr></table></figure><h3 id=\"创建文件-etc-yum-repos-d-rhel-debuginfo-repo并写入\"><a href=\"#创建文件-etc-yum-repos-d-rhel-debuginfo-repo并写入\" class=\"headerlink\" title=\"创建文件/etc/yum.repos.d/rhel-debuginfo.repo并写入\"></a>创建文件/etc/yum.repos.d/rhel-debuginfo.repo并写入</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[base]</span><br><span class=\"line\">name=CentOS-$releasever - Base</span><br><span class=\"line\">baseurl=http://mirrors.163.com/centos/7.3.1611/os/$basearch/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://mirrors.163.com/centos/7.3.1611/os/x86_64/RPM-GPG-KEY-CentOS-7</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">#released updates</span><br><span class=\"line\">[updates]</span><br><span class=\"line\">name=CentOS-$releasever - Updates</span><br><span class=\"line\">baseurl=http://mirrors.163.com/centos/7.3.1611/updates/$basearch/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://mirrors.163.com/centos/7.3.1611/os/x86_64/RPM-GPG-KEY-CentOS-7</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">[extras]</span><br><span class=\"line\">name=CentOS-$releasever - Extras</span><br><span class=\"line\">baseurl=http://mirrors.163.com/centos/7.3.1611/extras//$basearch/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://mirrors.163.com/centos/7.3.1611/os/x86_64/RPM-GPG-KEY-CentOS-7</span><br><span class=\"line\"> </span><br><span class=\"line\">[centosplus]</span><br><span class=\"line\">name=CentOS-$releasever - Plus</span><br><span class=\"line\">baseurl=http://mirrors.163.com/centos/7.3.1611/centosplus//$basearch/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br></pre></td></tr></table></figure><h3 id=\"yum-clean-all\"><a href=\"#yum-clean-all\" class=\"headerlink\" title=\"yum clean all\"></a>yum clean all</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum clean all</span><br></pre></td></tr></table></figure><h3 id=\"yum-update-测试。\"><a href=\"#yum-update-测试。\" class=\"headerlink\" title=\"yum update 测试。\"></a>yum update 测试。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br></pre></td></tr></table></figure><h3 id=\"安装-epel-源\"><a href=\"#安装-epel-源\" class=\"headerlink\" title=\"安装 epel 源\"></a>安装 epel 源</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>redhat 的更新包只对注册的用户生效，所以我们需要自己手动更改成CentOS 的更新包，CentOS几乎和redhat是一样的，所以无需担心软件包是否可安装，安装之后是否有问题。<br>","more":"</p><h2 id=\"删除redhat原有的yum\"><a href=\"#删除redhat原有的yum\" class=\"headerlink\" title=\"删除redhat原有的yum\"></a>删除redhat原有的yum</h2><p>首先删除redhat原有的yum ，因为redhat 原本的yum 没有注册为redhat用户是用不了的。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -aq|grep yum|xargs rpm -e --nodeps </span><br><span class=\"line\">rpm -aq|grep python-iniparse|xargs rpm -e --nodeps</span><br></pre></td></tr></table></figure><p></p><h2 id=\"下载163的yum-安装包\"><a href=\"#下载163的yum-安装包\" class=\"headerlink\" title=\"下载163的yum 安装包\"></a>下载163的yum 安装包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/yum-3.4.3-150.el7.centos.noarch.rpm</span><br><span class=\"line\">wget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/python-iniparse-0.4-9.el7.noarch.rpm</span><br><span class=\"line\">wget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm</span><br><span class=\"line\">wget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-40.el7.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id=\"安装下载的rpm包\"><a href=\"#安装下载的rpm包\" class=\"headerlink\" title=\"安装下载的rpm包\"></a>安装下载的rpm包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh *.rpm</span><br></pre></td></tr></table></figure><h3 id=\"创建文件-etc-yum-repos-d-rhel-debuginfo-repo并写入\"><a href=\"#创建文件-etc-yum-repos-d-rhel-debuginfo-repo并写入\" class=\"headerlink\" title=\"创建文件/etc/yum.repos.d/rhel-debuginfo.repo并写入\"></a>创建文件/etc/yum.repos.d/rhel-debuginfo.repo并写入</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[base]</span><br><span class=\"line\">name=CentOS-$releasever - Base</span><br><span class=\"line\">baseurl=http://mirrors.163.com/centos/7.3.1611/os/$basearch/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://mirrors.163.com/centos/7.3.1611/os/x86_64/RPM-GPG-KEY-CentOS-7</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">#released updates</span><br><span class=\"line\">[updates]</span><br><span class=\"line\">name=CentOS-$releasever - Updates</span><br><span class=\"line\">baseurl=http://mirrors.163.com/centos/7.3.1611/updates/$basearch/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://mirrors.163.com/centos/7.3.1611/os/x86_64/RPM-GPG-KEY-CentOS-7</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">[extras]</span><br><span class=\"line\">name=CentOS-$releasever - Extras</span><br><span class=\"line\">baseurl=http://mirrors.163.com/centos/7.3.1611/extras//$basearch/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://mirrors.163.com/centos/7.3.1611/os/x86_64/RPM-GPG-KEY-CentOS-7</span><br><span class=\"line\"> </span><br><span class=\"line\">[centosplus]</span><br><span class=\"line\">name=CentOS-$releasever - Plus</span><br><span class=\"line\">baseurl=http://mirrors.163.com/centos/7.3.1611/centosplus//$basearch/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br></pre></td></tr></table></figure><h3 id=\"yum-clean-all\"><a href=\"#yum-clean-all\" class=\"headerlink\" title=\"yum clean all\"></a>yum clean all</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum clean all</span><br></pre></td></tr></table></figure><h3 id=\"yum-update-测试。\"><a href=\"#yum-update-测试。\" class=\"headerlink\" title=\"yum update 测试。\"></a>yum update 测试。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br></pre></td></tr></table></figure><h3 id=\"安装-epel-源\"><a href=\"#安装-epel-源\" class=\"headerlink\" title=\"安装 epel 源\"></a>安装 epel 源</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"【51NOD刷题】1284 2 3 5 7的倍数","abbrlink":41184,"date":"2018-02-27T01:30:32.000Z","_content":"[**1284 2 3 5 7的倍数  **](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1284)\n基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题\n\n给出一个数N，求1至N中，有多少个数不是2 3 5 7的倍数。 例如N = 10，只有1不是2 3 5 7的倍数。\n<!--more-->\n## 输入输出\n**Input**\n输入1个数N(1 <= N <= 10^18)。\n**Output**\n输出不是2 3 5 7的倍数的数共有多少。\n**Input示例**\n>10\n\n**Output示例**\n>1\n\n## 题目分析\n求取1到数字N之间共有多少个数不是2 3 5 7的倍数，只需要求取1到2 3 5 7的最小公倍数210之间不是的个数48，然后再求出1到N / 210之间不是的个数mCount，即可得出最终结果N / 210 * 48 + mCount。\n## Accepted\n```csharp\nusing System;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var input = Convert.ToInt64(Console.ReadLine());\n        var m = input % 210;\n        var mCount = 0;\n        if (m > 0)\n            for (var i = 1; i <= m; i++)\n            {\n                if (i % 2 == 0 || i % 3 == 0 || i % 5 == 0 || i % 7 == 0)\n                    continue;\n                mCount++;\n            }\n        Console.WriteLine(input / 210 * 48 + mCount);\n    }\n}\n```","source":"_posts/【51NOD刷题】1284-2-3-5-7的倍数.md","raw":"---\ntitle: 【51NOD刷题】1284 2 3 5 7的倍数\ntags:\n  - 51NOD\n  - 刷题\n  - 'C#'\nabbrlink: 41184\ndate: 2018-02-27 09:30:32\n---\n[**1284 2 3 5 7的倍数  **](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1284)\n基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题\n\n给出一个数N，求1至N中，有多少个数不是2 3 5 7的倍数。 例如N = 10，只有1不是2 3 5 7的倍数。\n<!--more-->\n## 输入输出\n**Input**\n输入1个数N(1 <= N <= 10^18)。\n**Output**\n输出不是2 3 5 7的倍数的数共有多少。\n**Input示例**\n>10\n\n**Output示例**\n>1\n\n## 题目分析\n求取1到数字N之间共有多少个数不是2 3 5 7的倍数，只需要求取1到2 3 5 7的最小公倍数210之间不是的个数48，然后再求出1到N / 210之间不是的个数mCount，即可得出最终结果N / 210 * 48 + mCount。\n## Accepted\n```csharp\nusing System;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var input = Convert.ToInt64(Console.ReadLine());\n        var m = input % 210;\n        var mCount = 0;\n        if (m > 0)\n            for (var i = 1; i <= m; i++)\n            {\n                if (i % 2 == 0 || i % 3 == 0 || i % 5 == 0 || i % 7 == 0)\n                    continue;\n                mCount++;\n            }\n        Console.WriteLine(input / 210 * 48 + mCount);\n    }\n}\n```","slug":"【51NOD刷题】1284-2-3-5-7的倍数","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24osw000ld00o7ldan8cf","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1284\" target=\"_blank\" rel=\"noopener\"><strong>1284 2 3 5 7的倍数</strong></a><br>基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题</p><p>给出一个数N，求1至N中，有多少个数不是2 3 5 7的倍数。 例如N = 10，只有1不是2 3 5 7的倍数。<br><a id=\"more\"></a></p><h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>输入1个数N(1 &lt;= N &lt;= 10^18)。<br><strong>Output</strong><br>输出不是2 3 5 7的倍数的数共有多少。<br><strong>Input示例</strong></p><blockquote><p>10</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>1</p></blockquote><h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>求取1到数字N之间共有多少个数不是2 3 5 7的倍数，只需要求取1到2 3 5 7的最小公倍数210之间不是的个数48，然后再求出1到N / 210之间不是的个数mCount，即可得出最终结果N / 210 * 48 + mCount。</p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> input = Convert.ToInt64(Console.ReadLine());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> m = input % <span class=\"number\">210</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span> || i % <span class=\"number\">3</span> == <span class=\"number\">0</span> || i % <span class=\"number\">5</span> == <span class=\"number\">0</span> || i % <span class=\"number\">7</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                mCount++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        Console.WriteLine(input / <span class=\"number\">210</span> * <span class=\"number\">48</span> + mCount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1284\" target=\"_blank\" rel=\"noopener\"><strong>1284 2 3 5 7的倍数</strong></a><br>基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题</p><p>给出一个数N，求1至N中，有多少个数不是2 3 5 7的倍数。 例如N = 10，只有1不是2 3 5 7的倍数。<br>","more":"</p><h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>输入1个数N(1 &lt;= N &lt;= 10^18)。<br><strong>Output</strong><br>输出不是2 3 5 7的倍数的数共有多少。<br><strong>Input示例</strong></p><blockquote><p>10</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>1</p></blockquote><h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>求取1到数字N之间共有多少个数不是2 3 5 7的倍数，只需要求取1到2 3 5 7的最小公倍数210之间不是的个数48，然后再求出1到N / 210之间不是的个数mCount，即可得出最终结果N / 210 * 48 + mCount。</p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> input = Convert.ToInt64(Console.ReadLine());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> m = input % <span class=\"number\">210</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span> || i % <span class=\"number\">3</span> == <span class=\"number\">0</span> || i % <span class=\"number\">5</span> == <span class=\"number\">0</span> || i % <span class=\"number\">7</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                mCount++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        Console.WriteLine(input / <span class=\"number\">210</span> * <span class=\"number\">48</span> + mCount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"【51NOD刷题】1289 大鱼吃小鱼","abbrlink":28398,"date":"2018-02-26T17:24:40.000Z","_content":"[**1289 大鱼吃小鱼  **](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1289)\n题目来源： [Codility](https://codility.com/)\n基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题\n有N条鱼每条鱼的位置及大小均不同，他们沿着X轴游动，有的向左，有的向右。游动的速度是一样的，两条鱼相遇大鱼会吃掉小鱼。从左到右给出每条鱼的大小和游动的方向（0表示向左，1表示向右）。问足够长的时间之后，能剩下多少条鱼？\n<!--more-->\n## 输入输出\n**Input**\n第1行：1个数N，表示鱼的数量(1 <= N <= 100000)。\n第2 - N + 1行：每行两个数A[i], B[i]，中间用空格分隔，分别表示鱼的大小及游动的方向(1 <= A[i] <= 10^9，B[i] = 0 或 1，0表示向左，1表示向右）。\n**Output**\n输出1个数，表示最终剩下的鱼的数量。\n**Input示例**\n>5\n4 0\n3 1\n2 0\n1 0\n5 0\n\n**Output示例**\n> 2\n\n## 题目分析\n本题目确切来讲有点不太严谨，比如每条鱼的起始位置、相同大小的鱼相遇后的情况就并未提供，这两个条件也会影响最终的结果。\n\n我们按照从左到右依次摆放所有鱼、两条相同的鱼相遇后只会有一条胜出来计算，则可以使用Stack完美的解决这个问题。如果鱼向右走则入栈，如果鱼向左走则循环判断它和栈顶元素的大小关系，若比栈顶元素大，则移除元素继续循环，如果栈内无元素则记录左鱼幸存条数++并跳出循环，如果比栈顶元素小则直接跳出循环。最终统计栈内元素个数和左鱼幸存条数的和即为最终幸存的鱼的数量。\n\n## Accepted\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var sr = new StreamReader(Console.OpenStandardInput());\n        var sw = new StreamWriter(Console.OpenStandardOutput());\n        var count = Convert.ToInt32(sr.ReadLine());\n        var leftFishs = new Stack<long>();\n        var left = 0;\n        for (var i = 0; i < count; i++)\n        {\n            var input = sr.ReadLine().Split(' ');\n            var dx = Convert.ToInt64(input[0]);\n            var fx = Convert.ToInt32(input[1]);\n            if (fx == 1)\n                leftFishs.Push(dx);\n            else\n                while (true)\n                    if (leftFishs.Count > 0 && leftFishs.Peek() <= dx)\n                        leftFishs.Pop();\n                    else\n                    {\n                        if (leftFishs.Count == 0)\n                            left++;\n                        break;\n                    }\n        }\n\n\n        sw.WriteLine(leftFishs.Count + left);\n        sw.Flush();\n        sr.Close();\n        sw.Close();\n    }\n}\n```","source":"_posts/【51NOD刷题】1289-大鱼吃小鱼.md","raw":"---\ntitle: 【51NOD刷题】1289 大鱼吃小鱼\ntags:\n  - 51NOD\n  - 刷题\n  - 'C#'\nabbrlink: 28398\ndate: 2018-02-27 01:24:40\n---\n[**1289 大鱼吃小鱼  **](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1289)\n题目来源： [Codility](https://codility.com/)\n基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题\n有N条鱼每条鱼的位置及大小均不同，他们沿着X轴游动，有的向左，有的向右。游动的速度是一样的，两条鱼相遇大鱼会吃掉小鱼。从左到右给出每条鱼的大小和游动的方向（0表示向左，1表示向右）。问足够长的时间之后，能剩下多少条鱼？\n<!--more-->\n## 输入输出\n**Input**\n第1行：1个数N，表示鱼的数量(1 <= N <= 100000)。\n第2 - N + 1行：每行两个数A[i], B[i]，中间用空格分隔，分别表示鱼的大小及游动的方向(1 <= A[i] <= 10^9，B[i] = 0 或 1，0表示向左，1表示向右）。\n**Output**\n输出1个数，表示最终剩下的鱼的数量。\n**Input示例**\n>5\n4 0\n3 1\n2 0\n1 0\n5 0\n\n**Output示例**\n> 2\n\n## 题目分析\n本题目确切来讲有点不太严谨，比如每条鱼的起始位置、相同大小的鱼相遇后的情况就并未提供，这两个条件也会影响最终的结果。\n\n我们按照从左到右依次摆放所有鱼、两条相同的鱼相遇后只会有一条胜出来计算，则可以使用Stack完美的解决这个问题。如果鱼向右走则入栈，如果鱼向左走则循环判断它和栈顶元素的大小关系，若比栈顶元素大，则移除元素继续循环，如果栈内无元素则记录左鱼幸存条数++并跳出循环，如果比栈顶元素小则直接跳出循环。最终统计栈内元素个数和左鱼幸存条数的和即为最终幸存的鱼的数量。\n\n## Accepted\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var sr = new StreamReader(Console.OpenStandardInput());\n        var sw = new StreamWriter(Console.OpenStandardOutput());\n        var count = Convert.ToInt32(sr.ReadLine());\n        var leftFishs = new Stack<long>();\n        var left = 0;\n        for (var i = 0; i < count; i++)\n        {\n            var input = sr.ReadLine().Split(' ');\n            var dx = Convert.ToInt64(input[0]);\n            var fx = Convert.ToInt32(input[1]);\n            if (fx == 1)\n                leftFishs.Push(dx);\n            else\n                while (true)\n                    if (leftFishs.Count > 0 && leftFishs.Peek() <= dx)\n                        leftFishs.Pop();\n                    else\n                    {\n                        if (leftFishs.Count == 0)\n                            left++;\n                        break;\n                    }\n        }\n\n\n        sw.WriteLine(leftFishs.Count + left);\n        sw.Flush();\n        sr.Close();\n        sw.Close();\n    }\n}\n```","slug":"【51NOD刷题】1289-大鱼吃小鱼","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24osy000nd00ob3ztojtc","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1289\" target=\"_blank\" rel=\"noopener\"><strong>1289 大鱼吃小鱼</strong></a><br>题目来源： <a href=\"https://codility.com/\" target=\"_blank\" rel=\"noopener\">Codility</a><br>基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题<br>有N条鱼每条鱼的位置及大小均不同，他们沿着X轴游动，有的向左，有的向右。游动的速度是一样的，两条鱼相遇大鱼会吃掉小鱼。从左到右给出每条鱼的大小和游动的方向（0表示向左，1表示向右）。问足够长的时间之后，能剩下多少条鱼？<br><a id=\"more\"></a></p><h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>第1行：1个数N，表示鱼的数量(1 &lt;= N &lt;= 100000)。<br>第2 - N + 1行：每行两个数A[i], B[i]，中间用空格分隔，分别表示鱼的大小及游动的方向(1 &lt;= A[i] &lt;= 10^9，B[i] = 0 或 1，0表示向左，1表示向右）。<br><strong>Output</strong><br>输出1个数，表示最终剩下的鱼的数量。<br><strong>Input示例</strong></p><blockquote><p>5<br>4 0<br>3 1<br>2 0<br>1 0<br>5 0</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>2</p></blockquote><h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>本题目确切来讲有点不太严谨，比如每条鱼的起始位置、相同大小的鱼相遇后的情况就并未提供，这两个条件也会影响最终的结果。</p><p>我们按照从左到右依次摆放所有鱼、两条相同的鱼相遇后只会有一条胜出来计算，则可以使用Stack完美的解决这个问题。如果鱼向右走则入栈，如果鱼向左走则循环判断它和栈顶元素的大小关系，若比栈顶元素大，则移除元素继续循环，如果栈内无元素则记录左鱼幸存条数++并跳出循环，如果比栈顶元素小则直接跳出循环。最终统计栈内元素个数和左鱼幸存条数的和即为最终幸存的鱼的数量。</p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sr = <span class=\"keyword\">new</span> StreamReader(Console.OpenStandardInput());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sw = <span class=\"keyword\">new</span> StreamWriter(Console.OpenStandardOutput());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = Convert.ToInt32(sr.ReadLine());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> leftFishs = <span class=\"keyword\">new</span> Stack&lt;<span class=\"keyword\">long</span>&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> input = sr.ReadLine().Split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> dx = Convert.ToInt64(input[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> fx = Convert.ToInt32(input[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fx == <span class=\"number\">1</span>)</span><br><span class=\"line\">                leftFishs.Push(dx);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (leftFishs.Count &gt; <span class=\"number\">0</span> &amp;&amp; leftFishs.Peek() &lt;= dx)</span><br><span class=\"line\">                        leftFishs.Pop();</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (leftFishs.Count == <span class=\"number\">0</span>)</span><br><span class=\"line\">                            left++;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        sw.WriteLine(leftFishs.Count + left);</span><br><span class=\"line\">        sw.Flush();</span><br><span class=\"line\">        sr.Close();</span><br><span class=\"line\">        sw.Close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1289\" target=\"_blank\" rel=\"noopener\"><strong>1289 大鱼吃小鱼</strong></a><br>题目来源： <a href=\"https://codility.com/\" target=\"_blank\" rel=\"noopener\">Codility</a><br>基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题<br>有N条鱼每条鱼的位置及大小均不同，他们沿着X轴游动，有的向左，有的向右。游动的速度是一样的，两条鱼相遇大鱼会吃掉小鱼。从左到右给出每条鱼的大小和游动的方向（0表示向左，1表示向右）。问足够长的时间之后，能剩下多少条鱼？<br>","more":"</p><h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>第1行：1个数N，表示鱼的数量(1 &lt;= N &lt;= 100000)。<br>第2 - N + 1行：每行两个数A[i], B[i]，中间用空格分隔，分别表示鱼的大小及游动的方向(1 &lt;= A[i] &lt;= 10^9，B[i] = 0 或 1，0表示向左，1表示向右）。<br><strong>Output</strong><br>输出1个数，表示最终剩下的鱼的数量。<br><strong>Input示例</strong></p><blockquote><p>5<br>4 0<br>3 1<br>2 0<br>1 0<br>5 0</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>2</p></blockquote><h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>本题目确切来讲有点不太严谨，比如每条鱼的起始位置、相同大小的鱼相遇后的情况就并未提供，这两个条件也会影响最终的结果。</p><p>我们按照从左到右依次摆放所有鱼、两条相同的鱼相遇后只会有一条胜出来计算，则可以使用Stack完美的解决这个问题。如果鱼向右走则入栈，如果鱼向左走则循环判断它和栈顶元素的大小关系，若比栈顶元素大，则移除元素继续循环，如果栈内无元素则记录左鱼幸存条数++并跳出循环，如果比栈顶元素小则直接跳出循环。最终统计栈内元素个数和左鱼幸存条数的和即为最终幸存的鱼的数量。</p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sr = <span class=\"keyword\">new</span> StreamReader(Console.OpenStandardInput());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sw = <span class=\"keyword\">new</span> StreamWriter(Console.OpenStandardOutput());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = Convert.ToInt32(sr.ReadLine());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> leftFishs = <span class=\"keyword\">new</span> Stack&lt;<span class=\"keyword\">long</span>&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> input = sr.ReadLine().Split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> dx = Convert.ToInt64(input[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> fx = Convert.ToInt32(input[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fx == <span class=\"number\">1</span>)</span><br><span class=\"line\">                leftFishs.Push(dx);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (leftFishs.Count &gt; <span class=\"number\">0</span> &amp;&amp; leftFishs.Peek() &lt;= dx)</span><br><span class=\"line\">                        leftFishs.Pop();</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (leftFishs.Count == <span class=\"number\">0</span>)</span><br><span class=\"line\">                            left++;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        sw.WriteLine(leftFishs.Count + left);</span><br><span class=\"line\">        sw.Flush();</span><br><span class=\"line\">        sr.Close();</span><br><span class=\"line\">        sw.Close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"【51NOD刷题】1305 Pairwise Sum and Divide","mathjax":true,"abbrlink":34469,"date":"2018-02-24T09:25:50.000Z","_content":"[**1305 Pairwise Sum and Divide  **](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1305)\n\n题目来源： HackerRank\n基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题\n\n有这样一段程序，fun会对整数数组A进行求值，其中Floor表示向下取整：\n```python\nfun(A)\n    sum = 0\n    for i = 1 to A.length\n        for j = i+1 to A.length\n            sum = sum + Floor((A[i]+A[j])/(A[i]*A[j])) \n    return sum\n```\n给出数组A，由你来计算fun(A)的结果。例如：A = {1, 4, 1}，fun(A) = [5/4] + [2/1] + [5/4] = 1 + 2 + 1 = 4。\n<!--more-->\n## 输入输出\n**Input**\n第1行：1个数N，表示数组A的长度(1 <= N <= 100000)。\n第2 - N + 1行：每行1个数A[i]（1 <= A[i] <= 10^9)。\n**Output**\n输出fun(A)的计算结果。\n**Input示例**\n> 3\n1 \n4 \n1\n\n**Output示例**\n> 4\n\n## 题目分析\n因为题目给出的已经是近乎伪代码了，所以初始很容易直接按照程序中给出的逻辑来提交，然而可能是C#的效率问题，差不多一般的测试都超时了，下面是第一版的代码：\n```csharp\nusing System;\nusing System.IO;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var sr = new StreamReader(Console.OpenStandardInput());\n        var sw = new StreamWriter(Console.OpenStandardOutput());\n        var count = Convert.ToInt32(sr.ReadLine());\n        var sum = 0L;\n        var list = new long[count];\n\n        for (var i = 0; i < count; i++)\n            list[i] = Convert.ToInt64(sr.ReadLine());\n\n        for (var i = 0; i < count; i++)\n            for (var j = i + 1; j < count; j++)\n                sum += (list[i] + list[j]) / (list[i] * list[j]);\n        sw.WriteLine(sum);\n        sw.Flush();\n        sr.Close();\n        sw.Close();\n    }\n}\n```\n这个时候返回来分析题目，100,000次输入操作，之后双层循环差不多10,000,000,000次循环内操作，C#在1.5s内确实不大可能完的成，只能从题目入手重新分析了。\n\n题目总的来分析就是每个数和集合中的所有其他数做一次和除以积取整的操作后的和。\n\n仔细考虑后不难发现，其实所有的数里只有1和2是可以做有效贡献的，其他数做上述运算一定是0，所以其实只需要统计1和2的数量即可。\n其中，1和1的运算结果为2，1和其他数的计算结果是1，2和2的计算结果是1。设一个长度为n的集合里，1的个数为a，2的个数为b，则这个集合的运算结果公式为：\n\n$C_a^2+a(n-a)+C_b^2$\n\n化简可得：\n\n$a(a-1)+a(n-a)+\\frac{1}{2}(b*(b-1))$\n\nPS.因为每个数的范围最大可达$10^9$，所以我们使用64位的long类型来接收和运算。\n## Accepted\n```csharp\nusing System;\nusing System.IO;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var sr = new StreamReader(Console.OpenStandardInput());\n        var sw = new StreamWriter(Console.OpenStandardOutput());\n        var count = Convert.ToInt32(sr.ReadLine());\n        var sum = 0L;\n        var a = 0L;\n        var b = 0L;\n        for (var i = 0; i < count; i++)\n        {\n            var s = Convert.ToInt64(sr.ReadLine());\n            switch (s)\n            {\n                case 1:\n                    a++;\n                    break;\n                case 2:\n                    b++;\n                    break;\n            }\n        }\n\n        sum = a * (a - 1) + a * (count - a) + (b * (b - 1) / 2);\n        sw.WriteLine(sum);\n        Console.ReadLine();\n        sw.Flush();\n        sr.Close();\n        sw.Close();\n    }\n}\n```","source":"_posts/【51NOD刷题】1305-Pairwise-Sum-and-Divide.md","raw":"---\ntitle: 【51NOD刷题】1305 Pairwise Sum and Divide\ntags:\n  - 51NOD\n  - 刷题\n  - 'C#'\nmathjax: true\nabbrlink: 34469\ndate: 2018-02-24 17:25:50\n---\n[**1305 Pairwise Sum and Divide  **](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1305)\n\n题目来源： HackerRank\n基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题\n\n有这样一段程序，fun会对整数数组A进行求值，其中Floor表示向下取整：\n```python\nfun(A)\n    sum = 0\n    for i = 1 to A.length\n        for j = i+1 to A.length\n            sum = sum + Floor((A[i]+A[j])/(A[i]*A[j])) \n    return sum\n```\n给出数组A，由你来计算fun(A)的结果。例如：A = {1, 4, 1}，fun(A) = [5/4] + [2/1] + [5/4] = 1 + 2 + 1 = 4。\n<!--more-->\n## 输入输出\n**Input**\n第1行：1个数N，表示数组A的长度(1 <= N <= 100000)。\n第2 - N + 1行：每行1个数A[i]（1 <= A[i] <= 10^9)。\n**Output**\n输出fun(A)的计算结果。\n**Input示例**\n> 3\n1 \n4 \n1\n\n**Output示例**\n> 4\n\n## 题目分析\n因为题目给出的已经是近乎伪代码了，所以初始很容易直接按照程序中给出的逻辑来提交，然而可能是C#的效率问题，差不多一般的测试都超时了，下面是第一版的代码：\n```csharp\nusing System;\nusing System.IO;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var sr = new StreamReader(Console.OpenStandardInput());\n        var sw = new StreamWriter(Console.OpenStandardOutput());\n        var count = Convert.ToInt32(sr.ReadLine());\n        var sum = 0L;\n        var list = new long[count];\n\n        for (var i = 0; i < count; i++)\n            list[i] = Convert.ToInt64(sr.ReadLine());\n\n        for (var i = 0; i < count; i++)\n            for (var j = i + 1; j < count; j++)\n                sum += (list[i] + list[j]) / (list[i] * list[j]);\n        sw.WriteLine(sum);\n        sw.Flush();\n        sr.Close();\n        sw.Close();\n    }\n}\n```\n这个时候返回来分析题目，100,000次输入操作，之后双层循环差不多10,000,000,000次循环内操作，C#在1.5s内确实不大可能完的成，只能从题目入手重新分析了。\n\n题目总的来分析就是每个数和集合中的所有其他数做一次和除以积取整的操作后的和。\n\n仔细考虑后不难发现，其实所有的数里只有1和2是可以做有效贡献的，其他数做上述运算一定是0，所以其实只需要统计1和2的数量即可。\n其中，1和1的运算结果为2，1和其他数的计算结果是1，2和2的计算结果是1。设一个长度为n的集合里，1的个数为a，2的个数为b，则这个集合的运算结果公式为：\n\n$C_a^2+a(n-a)+C_b^2$\n\n化简可得：\n\n$a(a-1)+a(n-a)+\\frac{1}{2}(b*(b-1))$\n\nPS.因为每个数的范围最大可达$10^9$，所以我们使用64位的long类型来接收和运算。\n## Accepted\n```csharp\nusing System;\nusing System.IO;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var sr = new StreamReader(Console.OpenStandardInput());\n        var sw = new StreamWriter(Console.OpenStandardOutput());\n        var count = Convert.ToInt32(sr.ReadLine());\n        var sum = 0L;\n        var a = 0L;\n        var b = 0L;\n        for (var i = 0; i < count; i++)\n        {\n            var s = Convert.ToInt64(sr.ReadLine());\n            switch (s)\n            {\n                case 1:\n                    a++;\n                    break;\n                case 2:\n                    b++;\n                    break;\n            }\n        }\n\n        sum = a * (a - 1) + a * (count - a) + (b * (b - 1) / 2);\n        sw.WriteLine(sum);\n        Console.ReadLine();\n        sw.Flush();\n        sr.Close();\n        sw.Close();\n    }\n}\n```","slug":"【51NOD刷题】1305-Pairwise-Sum-and-Divide","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ot0000rd00o8jq4yraz","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1305\" target=\"_blank\" rel=\"noopener\"><strong>1305 Pairwise Sum and Divide</strong></a></p><p>题目来源： HackerRank<br>基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题</p><p>有这样一段程序，fun会对整数数组A进行求值，其中Floor表示向下取整：<br></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun(A)</span><br><span class=\"line\">    sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">1</span> to A.length</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j = i+<span class=\"number\">1</span> to A.length</span><br><span class=\"line\">            sum = sum + Floor((A[i]+A[j])/(A[i]*A[j])) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br></pre></td></tr></table></figure><p></p><p>给出数组A，由你来计算fun(A)的结果。例如：A = {1, 4, 1}，fun(A) = [5/4] + [2/1] + [5/4] = 1 + 2 + 1 = 4。<br><a id=\"more\"></a></p><h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>第1行：1个数N，表示数组A的长度(1 &lt;= N &lt;= 100000)。<br>第2 - N + 1行：每行1个数A[i]（1 &lt;= A[i] &lt;= 10^9)。<br><strong>Output</strong><br>输出fun(A)的计算结果。<br><strong>Input示例</strong></p><blockquote><p>3<br>1<br>4<br>1</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>4</p></blockquote><h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>因为题目给出的已经是近乎伪代码了，所以初始很容易直接按照程序中给出的逻辑来提交，然而可能是C#的效率问题，差不多一般的测试都超时了，下面是第一版的代码：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sr = <span class=\"keyword\">new</span> StreamReader(Console.OpenStandardInput());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sw = <span class=\"keyword\">new</span> StreamWriter(Console.OpenStandardOutput());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = Convert.ToInt32(sr.ReadLine());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>L;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> list = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[count];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">            list[i] = Convert.ToInt64(sr.ReadLine());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; count; j++)</span><br><span class=\"line\">                sum += (list[i] + list[j]) / (list[i] * list[j]);</span><br><span class=\"line\">        sw.WriteLine(sum);</span><br><span class=\"line\">        sw.Flush();</span><br><span class=\"line\">        sr.Close();</span><br><span class=\"line\">        sw.Close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这个时候返回来分析题目，100,000次输入操作，之后双层循环差不多10,000,000,000次循环内操作，C#在1.5s内确实不大可能完的成，只能从题目入手重新分析了。</p><p>题目总的来分析就是每个数和集合中的所有其他数做一次和除以积取整的操作后的和。</p><p>仔细考虑后不难发现，其实所有的数里只有1和2是可以做有效贡献的，其他数做上述运算一定是0，所以其实只需要统计1和2的数量即可。<br>其中，1和1的运算结果为2，1和其他数的计算结果是1，2和2的计算结果是1。设一个长度为n的集合里，1的个数为a，2的个数为b，则这个集合的运算结果公式为：</p><p>$C_a^2+a(n-a)+C_b^2$</p><p>化简可得：</p><p>$a(a-1)+a(n-a)+\\frac{1}{2}(b*(b-1))$</p><p>PS.因为每个数的范围最大可达$10^9$，所以我们使用64位的long类型来接收和运算。</p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sr = <span class=\"keyword\">new</span> StreamReader(Console.OpenStandardInput());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sw = <span class=\"keyword\">new</span> StreamWriter(Console.OpenStandardOutput());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = Convert.ToInt32(sr.ReadLine());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>L;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>L;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"number\">0</span>L;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> s = Convert.ToInt64(sr.ReadLine());</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (s)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    a++;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    b++;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        sum = a * (a - <span class=\"number\">1</span>) + a * (count - a) + (b * (b - <span class=\"number\">1</span>) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        sw.WriteLine(sum);</span><br><span class=\"line\">        Console.ReadLine();</span><br><span class=\"line\">        sw.Flush();</span><br><span class=\"line\">        sr.Close();</span><br><span class=\"line\">        sw.Close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1305\" target=\"_blank\" rel=\"noopener\"><strong>1305 Pairwise Sum and Divide</strong></a></p><p>题目来源： HackerRank<br>基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题</p><p>有这样一段程序，fun会对整数数组A进行求值，其中Floor表示向下取整：<br></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun(A)</span><br><span class=\"line\">    sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">1</span> to A.length</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j = i+<span class=\"number\">1</span> to A.length</span><br><span class=\"line\">            sum = sum + Floor((A[i]+A[j])/(A[i]*A[j])) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br></pre></td></tr></table></figure><p></p><p>给出数组A，由你来计算fun(A)的结果。例如：A = {1, 4, 1}，fun(A) = [5/4] + [2/1] + [5/4] = 1 + 2 + 1 = 4。<br>","more":"</p><h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>第1行：1个数N，表示数组A的长度(1 &lt;= N &lt;= 100000)。<br>第2 - N + 1行：每行1个数A[i]（1 &lt;= A[i] &lt;= 10^9)。<br><strong>Output</strong><br>输出fun(A)的计算结果。<br><strong>Input示例</strong></p><blockquote><p>3<br>1<br>4<br>1</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>4</p></blockquote><h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>因为题目给出的已经是近乎伪代码了，所以初始很容易直接按照程序中给出的逻辑来提交，然而可能是C#的效率问题，差不多一般的测试都超时了，下面是第一版的代码：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sr = <span class=\"keyword\">new</span> StreamReader(Console.OpenStandardInput());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sw = <span class=\"keyword\">new</span> StreamWriter(Console.OpenStandardOutput());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = Convert.ToInt32(sr.ReadLine());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>L;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> list = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[count];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">            list[i] = Convert.ToInt64(sr.ReadLine());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; count; j++)</span><br><span class=\"line\">                sum += (list[i] + list[j]) / (list[i] * list[j]);</span><br><span class=\"line\">        sw.WriteLine(sum);</span><br><span class=\"line\">        sw.Flush();</span><br><span class=\"line\">        sr.Close();</span><br><span class=\"line\">        sw.Close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这个时候返回来分析题目，100,000次输入操作，之后双层循环差不多10,000,000,000次循环内操作，C#在1.5s内确实不大可能完的成，只能从题目入手重新分析了。</p><p>题目总的来分析就是每个数和集合中的所有其他数做一次和除以积取整的操作后的和。</p><p>仔细考虑后不难发现，其实所有的数里只有1和2是可以做有效贡献的，其他数做上述运算一定是0，所以其实只需要统计1和2的数量即可。<br>其中，1和1的运算结果为2，1和其他数的计算结果是1，2和2的计算结果是1。设一个长度为n的集合里，1的个数为a，2的个数为b，则这个集合的运算结果公式为：</p><p>$C_a^2+a(n-a)+C_b^2$</p><p>化简可得：</p><p>$a(a-1)+a(n-a)+\\frac{1}{2}(b*(b-1))$</p><p>PS.因为每个数的范围最大可达$10^9$，所以我们使用64位的long类型来接收和运算。</p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sr = <span class=\"keyword\">new</span> StreamReader(Console.OpenStandardInput());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sw = <span class=\"keyword\">new</span> StreamWriter(Console.OpenStandardOutput());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = Convert.ToInt32(sr.ReadLine());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>L;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>L;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"number\">0</span>L;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> s = Convert.ToInt64(sr.ReadLine());</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (s)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    a++;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    b++;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        sum = a * (a - <span class=\"number\">1</span>) + a * (count - a) + (b * (b - <span class=\"number\">1</span>) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        sw.WriteLine(sum);</span><br><span class=\"line\">        Console.ReadLine();</span><br><span class=\"line\">        sw.Flush();</span><br><span class=\"line\">        sr.Close();</span><br><span class=\"line\">        sw.Close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"【51NOD刷题】1344 走格子","abbrlink":16190,"date":"2018-02-24T07:25:36.000Z","_content":"[**1344 走格子**](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1344)\n\n基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题\n\n有编号1-n的n个格子，机器人从1号格子顺序向后走，一直走到n号格子，并需要从n号格子走出去。机器人有一个初始能量，每个格子对应一个整数A[i]，表示这个格子的能量值。如果A[i] > 0，机器人走到这个格子能够获取A[i]个能量，如果A[i] < 0，走到这个格子需要消耗相应的能量，如果机器人的能量 < 0，就无法继续前进了。问机器人最少需要有多少初始能量，才能完成整个旅程。\n\n例如：n = 5。{1，-2，-1，3，4} 最少需要2个初始能量，才能从1号走到5号格子。途中的能量变化如下3 1 0 3 7。\n<!--more-->\n## 输入输出\n**Input**\n第1行：1个数n，表示格子的数量。(1 <= n <= 50000)\n第2 - n + 1行：每行1个数A[i]，表示格子里的能量值(-1000000000 <= A[i] <= 1000000000)\n**Output**\n输出1个数，对应从1走到n最少需要多少初始能量。\n**Input示例**\n> 5\n1\n-2\n-1\n3\n4\n\n**Output示例**\n> 2\n\n## 题目分析\n这道题的主要问题主要是需要考虑到精度问题，格子数最多为50,000，每个格子能量范围为 -1,000,000,000 <= NL <= 1,000,000,000，总能量范围则为 -50,000,000,000,000 <= MaxNL <= 50,000,000,000,000，超出了Int32类型的范围-2147483648 <= Int32 <= 2147483647。需要使用Int64类型。\n## Accepted\n```csharp\nusing System;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var count = Convert.ToInt64(Console.ReadLine());\n        var nl = 0L;\n        var zxnl = 0L;\n        for (var i = 0; i < count; i++)\n        {\n            nl += Convert.ToInt64(Console.ReadLine());\n            zxnl = nl < zxnl ? nl : zxnl;\n        }\n        Console.WriteLine(zxnl > 0 ? 0 : 0 - zxnl);\n    }\n}\n```","source":"_posts/【51NOD刷题】1344-走格子.md","raw":"---\ntitle: 【51NOD刷题】1344 走格子\ntags:\n  - 51NOD\n  - 刷题\n  - 'C#'\n  - 贪心算法\nabbrlink: 16190\ndate: 2018-02-24 15:25:36\n---\n[**1344 走格子**](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1344)\n\n基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题\n\n有编号1-n的n个格子，机器人从1号格子顺序向后走，一直走到n号格子，并需要从n号格子走出去。机器人有一个初始能量，每个格子对应一个整数A[i]，表示这个格子的能量值。如果A[i] > 0，机器人走到这个格子能够获取A[i]个能量，如果A[i] < 0，走到这个格子需要消耗相应的能量，如果机器人的能量 < 0，就无法继续前进了。问机器人最少需要有多少初始能量，才能完成整个旅程。\n\n例如：n = 5。{1，-2，-1，3，4} 最少需要2个初始能量，才能从1号走到5号格子。途中的能量变化如下3 1 0 3 7。\n<!--more-->\n## 输入输出\n**Input**\n第1行：1个数n，表示格子的数量。(1 <= n <= 50000)\n第2 - n + 1行：每行1个数A[i]，表示格子里的能量值(-1000000000 <= A[i] <= 1000000000)\n**Output**\n输出1个数，对应从1走到n最少需要多少初始能量。\n**Input示例**\n> 5\n1\n-2\n-1\n3\n4\n\n**Output示例**\n> 2\n\n## 题目分析\n这道题的主要问题主要是需要考虑到精度问题，格子数最多为50,000，每个格子能量范围为 -1,000,000,000 <= NL <= 1,000,000,000，总能量范围则为 -50,000,000,000,000 <= MaxNL <= 50,000,000,000,000，超出了Int32类型的范围-2147483648 <= Int32 <= 2147483647。需要使用Int64类型。\n## Accepted\n```csharp\nusing System;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var count = Convert.ToInt64(Console.ReadLine());\n        var nl = 0L;\n        var zxnl = 0L;\n        for (var i = 0; i < count; i++)\n        {\n            nl += Convert.ToInt64(Console.ReadLine());\n            zxnl = nl < zxnl ? nl : zxnl;\n        }\n        Console.WriteLine(zxnl > 0 ? 0 : 0 - zxnl);\n    }\n}\n```","slug":"【51NOD刷题】1344-走格子","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ot1000td00ow6c5si2c","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1344\" target=\"_blank\" rel=\"noopener\"><strong>1344 走格子</strong></a></p><p>基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题</p><p>有编号1-n的n个格子，机器人从1号格子顺序向后走，一直走到n号格子，并需要从n号格子走出去。机器人有一个初始能量，每个格子对应一个整数A[i]，表示这个格子的能量值。如果A[i] &gt; 0，机器人走到这个格子能够获取A[i]个能量，如果A[i] &lt; 0，走到这个格子需要消耗相应的能量，如果机器人的能量 &lt; 0，就无法继续前进了。问机器人最少需要有多少初始能量，才能完成整个旅程。</p><p>例如：n = 5。{1，-2，-1，3，4} 最少需要2个初始能量，才能从1号走到5号格子。途中的能量变化如下3 1 0 3 7。<br><a id=\"more\"></a></p><h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>第1行：1个数n，表示格子的数量。(1 &lt;= n &lt;= 50000)<br>第2 - n + 1行：每行1个数A[i]，表示格子里的能量值(-1000000000 &lt;= A[i] &lt;= 1000000000)<br><strong>Output</strong><br>输出1个数，对应从1走到n最少需要多少初始能量。<br><strong>Input示例</strong></p><blockquote><p>5<br>1<br>-2<br>-1<br>3<br>4</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>2</p></blockquote><h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>这道题的主要问题主要是需要考虑到精度问题，格子数最多为50,000，每个格子能量范围为 -1,000,000,000 &lt;= NL &lt;= 1,000,000,000，总能量范围则为 -50,000,000,000,000 &lt;= MaxNL &lt;= 50,000,000,000,000，超出了Int32类型的范围-2147483648 &lt;= Int32 &lt;= 2147483647。需要使用Int64类型。</p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = Convert.ToInt64(Console.ReadLine());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> nl = <span class=\"number\">0</span>L;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> zxnl = <span class=\"number\">0</span>L;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            nl += Convert.ToInt64(Console.ReadLine());</span><br><span class=\"line\">            zxnl = nl &lt; zxnl ? nl : zxnl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Console.WriteLine(zxnl &gt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"number\">0</span> - zxnl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1344\" target=\"_blank\" rel=\"noopener\"><strong>1344 走格子</strong></a></p><p>基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题</p><p>有编号1-n的n个格子，机器人从1号格子顺序向后走，一直走到n号格子，并需要从n号格子走出去。机器人有一个初始能量，每个格子对应一个整数A[i]，表示这个格子的能量值。如果A[i] &gt; 0，机器人走到这个格子能够获取A[i]个能量，如果A[i] &lt; 0，走到这个格子需要消耗相应的能量，如果机器人的能量 &lt; 0，就无法继续前进了。问机器人最少需要有多少初始能量，才能完成整个旅程。</p><p>例如：n = 5。{1，-2，-1，3，4} 最少需要2个初始能量，才能从1号走到5号格子。途中的能量变化如下3 1 0 3 7。<br>","more":"</p><h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>第1行：1个数n，表示格子的数量。(1 &lt;= n &lt;= 50000)<br>第2 - n + 1行：每行1个数A[i]，表示格子里的能量值(-1000000000 &lt;= A[i] &lt;= 1000000000)<br><strong>Output</strong><br>输出1个数，对应从1走到n最少需要多少初始能量。<br><strong>Input示例</strong></p><blockquote><p>5<br>1<br>-2<br>-1<br>3<br>4</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>2</p></blockquote><h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>这道题的主要问题主要是需要考虑到精度问题，格子数最多为50,000，每个格子能量范围为 -1,000,000,000 &lt;= NL &lt;= 1,000,000,000，总能量范围则为 -50,000,000,000,000 &lt;= MaxNL &lt;= 50,000,000,000,000，超出了Int32类型的范围-2147483648 &lt;= Int32 &lt;= 2147483647。需要使用Int64类型。</p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = Convert.ToInt64(Console.ReadLine());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> nl = <span class=\"number\">0</span>L;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> zxnl = <span class=\"number\">0</span>L;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            nl += Convert.ToInt64(Console.ReadLine());</span><br><span class=\"line\">            zxnl = nl &lt; zxnl ? nl : zxnl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Console.WriteLine(zxnl &gt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"number\">0</span> - zxnl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"【51NOD刷题】1347 旋转字符串","abbrlink":40433,"date":"2018-02-23T16:07:52.000Z","_content":"[**1347 旋转字符串**](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1347)\n\n基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题\n\nS[0...n-1]是一个长度为n的字符串，定义旋转函数Left(S)=S[1…n-1]+S[0].比如S=”abcd”,Left(S)=”bcda”.一个串是对串当且仅当这个串长度为偶数，前半段和后半段一样。比如”abcabc”是对串,”aabbcc”则不是。\n现在问题是给定一个字符串，判断他是否可以由一个对串旋转任意次得到。\n<!--more-->\n## 输入输出\n**Input**\n第1行：给出一个字符串（字符串非空串，只包含小写字母，长度不超过1000000）\n**Output**\n对于每个测试用例，输出结果占一行，如果能，输出YES，否则输出NO。\n**Input示例**\n> aa\nab\n\n**Output示例**\n>YES\nNO\n\nC#的运行时限为：1500 ms ，空间限制为：196608 KB\n## 题目解析\n从旋转函数定义来看，将字符串第一个字符移动到字符串的末尾，很容易想当然的以为需要进行Length-1次循环判断完所有旋转后的结果。\n题目中输入字符串长度最多为1,000,000，最多需要500,000次判断才能得出该字符串是否为对串，如果进行Length-1次循环，那计算次数最多会达到500,000,000,000，结果必然是超时。\n\n而实际上，当一个字符串是对串（即前半段和后半段完全相同的字符串）时，它无论经过多少次旋转都依然还是对串，所以只需要对输入字符串进行一次判断即可。\n## Accepted\n```csharp\nusing System;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var str = Console.ReadLine();\n        if (str.Length % 2 != 0)\n        {\n            Console.WriteLine(\"NO\");\n            return;\n        }\n        var strQueue = str.ToCharArray();\n        for (var j = 0; j < strQueue.Length / 2; j++)\n        {\n            if (strQueue[j] == strQueue[strQueue.Length / 2 + j]) continue;\n            Console.WriteLine(\"NO\"); ;\n            return;\n        }\n        Console.WriteLine(\"YES\");\n    }\n}\n```","source":"_posts/【51NOD刷题】1347 旋转字符串.md","raw":"---\ntitle: 【51NOD刷题】1347 旋转字符串\ntags:\n  - 51NOD\n  - 刷题\n  - 'C#'\nabbrlink: 40433\ndate: 2018-02-24 00:07:52\n---\n[**1347 旋转字符串**](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1347)\n\n基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题\n\nS[0...n-1]是一个长度为n的字符串，定义旋转函数Left(S)=S[1…n-1]+S[0].比如S=”abcd”,Left(S)=”bcda”.一个串是对串当且仅当这个串长度为偶数，前半段和后半段一样。比如”abcabc”是对串,”aabbcc”则不是。\n现在问题是给定一个字符串，判断他是否可以由一个对串旋转任意次得到。\n<!--more-->\n## 输入输出\n**Input**\n第1行：给出一个字符串（字符串非空串，只包含小写字母，长度不超过1000000）\n**Output**\n对于每个测试用例，输出结果占一行，如果能，输出YES，否则输出NO。\n**Input示例**\n> aa\nab\n\n**Output示例**\n>YES\nNO\n\nC#的运行时限为：1500 ms ，空间限制为：196608 KB\n## 题目解析\n从旋转函数定义来看，将字符串第一个字符移动到字符串的末尾，很容易想当然的以为需要进行Length-1次循环判断完所有旋转后的结果。\n题目中输入字符串长度最多为1,000,000，最多需要500,000次判断才能得出该字符串是否为对串，如果进行Length-1次循环，那计算次数最多会达到500,000,000,000，结果必然是超时。\n\n而实际上，当一个字符串是对串（即前半段和后半段完全相同的字符串）时，它无论经过多少次旋转都依然还是对串，所以只需要对输入字符串进行一次判断即可。\n## Accepted\n```csharp\nusing System;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var str = Console.ReadLine();\n        if (str.Length % 2 != 0)\n        {\n            Console.WriteLine(\"NO\");\n            return;\n        }\n        var strQueue = str.ToCharArray();\n        for (var j = 0; j < strQueue.Length / 2; j++)\n        {\n            if (strQueue[j] == strQueue[strQueue.Length / 2 + j]) continue;\n            Console.WriteLine(\"NO\"); ;\n            return;\n        }\n        Console.WriteLine(\"YES\");\n    }\n}\n```","slug":"【51NOD刷题】1347 旋转字符串","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ot2000wd00oaw0egcks","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1347\" target=\"_blank\" rel=\"noopener\"><strong>1347 旋转字符串</strong></a></p><p>基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题</p><p>S[0…n-1]是一个长度为n的字符串，定义旋转函数Left(S)=S[1…n-1]+S[0].比如S=”abcd”,Left(S)=”bcda”.一个串是对串当且仅当这个串长度为偶数，前半段和后半段一样。比如”abcabc”是对串,”aabbcc”则不是。<br>现在问题是给定一个字符串，判断他是否可以由一个对串旋转任意次得到。<br><a id=\"more\"></a></p><h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>第1行：给出一个字符串（字符串非空串，只包含小写字母，长度不超过1000000）<br><strong>Output</strong><br>对于每个测试用例，输出结果占一行，如果能，输出YES，否则输出NO。<br><strong>Input示例</strong></p><blockquote><p>aa<br>ab</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>YES<br>NO</p></blockquote><p>C#的运行时限为：1500 ms ，空间限制为：196608 KB</p><h2 id=\"题目解析\"><a href=\"#题目解析\" class=\"headerlink\" title=\"题目解析\"></a>题目解析</h2><p>从旋转函数定义来看，将字符串第一个字符移动到字符串的末尾，很容易想当然的以为需要进行Length-1次循环判断完所有旋转后的结果。<br>题目中输入字符串长度最多为1,000,000，最多需要500,000次判断才能得出该字符串是否为对串，如果进行Length-1次循环，那计算次数最多会达到500,000,000,000，结果必然是超时。</p><p>而实际上，当一个字符串是对串（即前半段和后半段完全相同的字符串）时，它无论经过多少次旋转都依然还是对串，所以只需要对输入字符串进行一次判断即可。</p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = Console.ReadLine();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str.Length % <span class=\"number\">2</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"NO\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> strQueue = str.ToCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; strQueue.Length / <span class=\"number\">2</span>; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (strQueue[j] == strQueue[strQueue.Length / <span class=\"number\">2</span> + j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"NO\"</span>); ;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"YES\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1347\" target=\"_blank\" rel=\"noopener\"><strong>1347 旋转字符串</strong></a></p><p>基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题</p><p>S[0…n-1]是一个长度为n的字符串，定义旋转函数Left(S)=S[1…n-1]+S[0].比如S=”abcd”,Left(S)=”bcda”.一个串是对串当且仅当这个串长度为偶数，前半段和后半段一样。比如”abcabc”是对串,”aabbcc”则不是。<br>现在问题是给定一个字符串，判断他是否可以由一个对串旋转任意次得到。<br>","more":"</p><h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>第1行：给出一个字符串（字符串非空串，只包含小写字母，长度不超过1000000）<br><strong>Output</strong><br>对于每个测试用例，输出结果占一行，如果能，输出YES，否则输出NO。<br><strong>Input示例</strong></p><blockquote><p>aa<br>ab</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>YES<br>NO</p></blockquote><p>C#的运行时限为：1500 ms ，空间限制为：196608 KB</p><h2 id=\"题目解析\"><a href=\"#题目解析\" class=\"headerlink\" title=\"题目解析\"></a>题目解析</h2><p>从旋转函数定义来看，将字符串第一个字符移动到字符串的末尾，很容易想当然的以为需要进行Length-1次循环判断完所有旋转后的结果。<br>题目中输入字符串长度最多为1,000,000，最多需要500,000次判断才能得出该字符串是否为对串，如果进行Length-1次循环，那计算次数最多会达到500,000,000,000，结果必然是超时。</p><p>而实际上，当一个字符串是对串（即前半段和后半段完全相同的字符串）时，它无论经过多少次旋转都依然还是对串，所以只需要对输入字符串进行一次判断即可。</p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = Console.ReadLine();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str.Length % <span class=\"number\">2</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"NO\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> strQueue = str.ToCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; strQueue.Length / <span class=\"number\">2</span>; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (strQueue[j] == strQueue[strQueue.Length / <span class=\"number\">2</span> + j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"NO\"</span>); ;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"YES\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"【51NOD刷题】1381 硬币游戏","abbrlink":59607,"date":"2018-02-24T04:05:50.000Z","_content":"[**1381 硬币游戏**](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1381)\n基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题\n\n有一个简单但是很有趣的游戏。在这个游戏中有一个硬币还有一张桌子，这张桌子上有很多平行线（如下图所示）。两条相邻平行线之间的距离是1，硬币的半径是R，然后我们来抛硬币到桌子上，抛下之后硬币有时候会和一些直线相交（相切的情况也算是相交），有时候不会。\n请你来计算一下抛一次硬币之后，该硬币和直线相交数目的期望。\n![](http://p4au3q1y8.bkt.clouddn.com/20180305013606666/20180224023425513.png)\n<!--more-->\n## 输入输出\n**Input**\n第一行给出一个整数T，表示有T组数据(1<=T<=10000)。\n第2行到T+1，每行给出一个整数R。(0< R <= 10,000,000,000)\n**Output**\n对于每一个数据，在一行中输出答案的整数部分即可。\n**Input示例**\n> 1\n1\n\n**Output示例**\n> 2\n\n## 题目解析\n由题目可知，输入的R是整数，所以分析硬币落桌之后只有两种情况：\n1. 硬币边缘和某两条线相切，这个时候会有一条线经过圆心，总共有2R+1条线与圆相交，这种情况的概率非常低。\n2. 硬币和所有线都没有相切，总共有2R条线与圆相交。\n\n所以总体的期望为2R\n## Accepted\n```csharp\nusing System;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var count = Convert.ToInt32(Console.ReadLine());\n\n        for (var i = 0; i < count; i++)\n            Console.WriteLine(Convert.ToInt32(Console.ReadLine()) * 2);\n    }\n}\n```\n","source":"_posts/【51NOD刷题】1381 硬币游戏.md","raw":"---\ntitle: 【51NOD刷题】1381 硬币游戏\ntags:\n  - 51NOD\n  - 刷题\n  - 'C#'\n  - 概率\nabbrlink: 59607\ndate: 2018-02-24 12:05:50\n---\n[**1381 硬币游戏**](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1381)\n基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题\n\n有一个简单但是很有趣的游戏。在这个游戏中有一个硬币还有一张桌子，这张桌子上有很多平行线（如下图所示）。两条相邻平行线之间的距离是1，硬币的半径是R，然后我们来抛硬币到桌子上，抛下之后硬币有时候会和一些直线相交（相切的情况也算是相交），有时候不会。\n请你来计算一下抛一次硬币之后，该硬币和直线相交数目的期望。\n![](http://p4au3q1y8.bkt.clouddn.com/20180305013606666/20180224023425513.png)\n<!--more-->\n## 输入输出\n**Input**\n第一行给出一个整数T，表示有T组数据(1<=T<=10000)。\n第2行到T+1，每行给出一个整数R。(0< R <= 10,000,000,000)\n**Output**\n对于每一个数据，在一行中输出答案的整数部分即可。\n**Input示例**\n> 1\n1\n\n**Output示例**\n> 2\n\n## 题目解析\n由题目可知，输入的R是整数，所以分析硬币落桌之后只有两种情况：\n1. 硬币边缘和某两条线相切，这个时候会有一条线经过圆心，总共有2R+1条线与圆相交，这种情况的概率非常低。\n2. 硬币和所有线都没有相切，总共有2R条线与圆相交。\n\n所以总体的期望为2R\n## Accepted\n```csharp\nusing System;\n\npublic class Sum\n{\n    public static void Main()\n    {\n        var count = Convert.ToInt32(Console.ReadLine());\n\n        for (var i = 0; i < count; i++)\n            Console.WriteLine(Convert.ToInt32(Console.ReadLine()) * 2);\n    }\n}\n```\n","slug":"【51NOD刷题】1381 硬币游戏","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ot4000yd00oh5hue7a6","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1381\" target=\"_blank\" rel=\"noopener\"><strong>1381 硬币游戏</strong></a><br>基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题</p><p>有一个简单但是很有趣的游戏。在这个游戏中有一个硬币还有一张桌子，这张桌子上有很多平行线（如下图所示）。两条相邻平行线之间的距离是1，硬币的半径是R，然后我们来抛硬币到桌子上，抛下之后硬币有时候会和一些直线相交（相切的情况也算是相交），有时候不会。<br>请你来计算一下抛一次硬币之后，该硬币和直线相交数目的期望。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180305013606666/20180224023425513.png\" alt=\"\"><br><a id=\"more\"></a></p><h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>第一行给出一个整数T，表示有T组数据(1&lt;=T&lt;=10000)。<br>第2行到T+1，每行给出一个整数R。(0&lt; R &lt;= 10,000,000,000)<br><strong>Output</strong><br>对于每一个数据，在一行中输出答案的整数部分即可。<br><strong>Input示例</strong></p><blockquote><p>1<br>1</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>2</p></blockquote><h2 id=\"题目解析\"><a href=\"#题目解析\" class=\"headerlink\" title=\"题目解析\"></a>题目解析</h2><p>由题目可知，输入的R是整数，所以分析硬币落桌之后只有两种情况：</p><ol><li>硬币边缘和某两条线相切，这个时候会有一条线经过圆心，总共有2R+1条线与圆相交，这种情况的概率非常低。</li><li>硬币和所有线都没有相切，总共有2R条线与圆相交。</li></ol><p>所以总体的期望为2R</p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = Convert.ToInt32(Console.ReadLine());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">            Console.WriteLine(Convert.ToInt32(Console.ReadLine()) * <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1381\" target=\"_blank\" rel=\"noopener\"><strong>1381 硬币游戏</strong></a><br>基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题</p><p>有一个简单但是很有趣的游戏。在这个游戏中有一个硬币还有一张桌子，这张桌子上有很多平行线（如下图所示）。两条相邻平行线之间的距离是1，硬币的半径是R，然后我们来抛硬币到桌子上，抛下之后硬币有时候会和一些直线相交（相切的情况也算是相交），有时候不会。<br>请你来计算一下抛一次硬币之后，该硬币和直线相交数目的期望。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180305013606666/20180224023425513.png\" alt=\"\"><br>","more":"</p><h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>第一行给出一个整数T，表示有T组数据(1&lt;=T&lt;=10000)。<br>第2行到T+1，每行给出一个整数R。(0&lt; R &lt;= 10,000,000,000)<br><strong>Output</strong><br>对于每一个数据，在一行中输出答案的整数部分即可。<br><strong>Input示例</strong></p><blockquote><p>1<br>1</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>2</p></blockquote><h2 id=\"题目解析\"><a href=\"#题目解析\" class=\"headerlink\" title=\"题目解析\"></a>题目解析</h2><p>由题目可知，输入的R是整数，所以分析硬币落桌之后只有两种情况：</p><ol><li>硬币边缘和某两条线相切，这个时候会有一条线经过圆心，总共有2R+1条线与圆相交，这种情况的概率非常低。</li><li>硬币和所有线都没有相切，总共有2R条线与圆相交。</li></ol><p>所以总体的期望为2R</p><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = Convert.ToInt32(Console.ReadLine());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">            Console.WriteLine(Convert.ToInt32(Console.ReadLine()) * <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"【51NOD刷题】2020 排序相减","abbrlink":52661,"date":"2018-02-23T15:17:40.000Z","_content":"[**2020 排序相减**](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=2020)\n\n题目来源： syu练习题\n基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题\n“排序相减”操作是指对于任意一个四位数n，将四个数字分别进行顺序排序和逆序排序，得到两个数取相减后结果的绝对值n1，然后继续将n1中的四个数字进行顺序排序和逆序排序，得到两个数取相减后结果的绝对值n2,以此类推，最后总会得到一个数字黑洞，无法跳出。\n \n例如:样例2中4176 = 6532 - 2356\n<!--more-->\n## 输入输出\n**Input**\n第一行输入一个整数T，表示数据组数（1<T<10000）；\n第二行输入一个正整数n(1000<=n<=9999)和一个正整数k（1<=k<=100）,表示操作次数；\n**Output**\n对于每组数据，输出对于开始的数据n在第k次“排序相减”后结果绝对值。\n**Input示例**\n> 2\n1234 2\n3562 1\n\n\n**Output示例**\n>8352\n4176\n\n## Accepted\n```csharp\nusing System;\nusing System.IO;\n\npublic class Sum\n{\n    public static void Main()\n    {\n       var sr = new StreamReader(Console.OpenStandardInput());\n        var sw = new StreamWriter(Console.OpenStandardOutput());\n        var count = Convert.ToInt32(sr.ReadLine());\n\n        for (var i = 0; i < count; i++)\n        {\n            var tokens = sr.ReadLine().Split(' ');\n            var n = Convert.ToInt32(tokens[0]);\n            var t = Convert.ToInt32(tokens[1]);\n            for (var j = 0; j < t; j++)\n            {\n                var intArray = n.ToString().ToCharArray();\n                Array.Sort(intArray);\n                var z = Convert.ToInt32(new string(intArray));\n                Array.Reverse(intArray);\n                var f = Convert.ToInt32(new string(intArray));\n                n = Math.Abs(z - f);\n            }\n            sw.WriteLine(n);\n        }\n\n\n        sw.Flush();\n        sr.Close();\n        sw.Close();\n    }\n}\n```","source":"_posts/【51NOD刷题】2020 排序相减.md","raw":"---\ntitle: 【51NOD刷题】2020 排序相减\ntags:\n  - 51NOD\n  - 刷题\n  - 'C#'\nabbrlink: 52661\ndate: 2018-02-23 23:17:40\n---\n[**2020 排序相减**](http://www.51nod.com/onlineJudge/questionCode.html#!problemId=2020)\n\n题目来源： syu练习题\n基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题\n“排序相减”操作是指对于任意一个四位数n，将四个数字分别进行顺序排序和逆序排序，得到两个数取相减后结果的绝对值n1，然后继续将n1中的四个数字进行顺序排序和逆序排序，得到两个数取相减后结果的绝对值n2,以此类推，最后总会得到一个数字黑洞，无法跳出。\n \n例如:样例2中4176 = 6532 - 2356\n<!--more-->\n## 输入输出\n**Input**\n第一行输入一个整数T，表示数据组数（1<T<10000）；\n第二行输入一个正整数n(1000<=n<=9999)和一个正整数k（1<=k<=100）,表示操作次数；\n**Output**\n对于每组数据，输出对于开始的数据n在第k次“排序相减”后结果绝对值。\n**Input示例**\n> 2\n1234 2\n3562 1\n\n\n**Output示例**\n>8352\n4176\n\n## Accepted\n```csharp\nusing System;\nusing System.IO;\n\npublic class Sum\n{\n    public static void Main()\n    {\n       var sr = new StreamReader(Console.OpenStandardInput());\n        var sw = new StreamWriter(Console.OpenStandardOutput());\n        var count = Convert.ToInt32(sr.ReadLine());\n\n        for (var i = 0; i < count; i++)\n        {\n            var tokens = sr.ReadLine().Split(' ');\n            var n = Convert.ToInt32(tokens[0]);\n            var t = Convert.ToInt32(tokens[1]);\n            for (var j = 0; j < t; j++)\n            {\n                var intArray = n.ToString().ToCharArray();\n                Array.Sort(intArray);\n                var z = Convert.ToInt32(new string(intArray));\n                Array.Reverse(intArray);\n                var f = Convert.ToInt32(new string(intArray));\n                n = Math.Abs(z - f);\n            }\n            sw.WriteLine(n);\n        }\n\n\n        sw.Flush();\n        sr.Close();\n        sw.Close();\n    }\n}\n```","slug":"【51NOD刷题】2020 排序相减","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ot80011d00oumv71utn","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=2020\" target=\"_blank\" rel=\"noopener\"><strong>2020 排序相减</strong></a></p><p>题目来源： syu练习题<br>基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题<br>“排序相减”操作是指对于任意一个四位数n，将四个数字分别进行顺序排序和逆序排序，得到两个数取相减后结果的绝对值n1，然后继续将n1中的四个数字进行顺序排序和逆序排序，得到两个数取相减后结果的绝对值n2,以此类推，最后总会得到一个数字黑洞，无法跳出。</p><p>例如:样例2中4176 = 6532 - 2356<br><a id=\"more\"></a></p><h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>第一行输入一个整数T，表示数据组数（1&lt;T&lt;10000）；<br>第二行输入一个正整数n(1000&lt;=n&lt;=9999)和一个正整数k（1&lt;=k&lt;=100）,表示操作次数；<br><strong>Output</strong><br>对于每组数据，输出对于开始的数据n在第k次“排序相减”后结果绝对值。<br><strong>Input示例</strong></p><blockquote><p>2<br>1234 2<br>3562 1</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>8352<br>4176</p></blockquote><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> sr = <span class=\"keyword\">new</span> StreamReader(Console.OpenStandardInput());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sw = <span class=\"keyword\">new</span> StreamWriter(Console.OpenStandardOutput());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = Convert.ToInt32(sr.ReadLine());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> tokens = sr.ReadLine().Split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> n = Convert.ToInt32(tokens[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> t = Convert.ToInt32(tokens[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; t; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> intArray = n.ToString().ToCharArray();</span><br><span class=\"line\">                Array.Sort(intArray);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> z = Convert.ToInt32(<span class=\"keyword\">new</span> <span class=\"keyword\">string</span>(intArray));</span><br><span class=\"line\">                Array.Reverse(intArray);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> f = Convert.ToInt32(<span class=\"keyword\">new</span> <span class=\"keyword\">string</span>(intArray));</span><br><span class=\"line\">                n = Math.Abs(z - f);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sw.WriteLine(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        sw.Flush();</span><br><span class=\"line\">        sr.Close();</span><br><span class=\"line\">        sw.Close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.51nod.com/onlineJudge/questionCode.html#!problemId=2020\" target=\"_blank\" rel=\"noopener\"><strong>2020 排序相减</strong></a></p><p>题目来源： syu练习题<br>基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题<br>“排序相减”操作是指对于任意一个四位数n，将四个数字分别进行顺序排序和逆序排序，得到两个数取相减后结果的绝对值n1，然后继续将n1中的四个数字进行顺序排序和逆序排序，得到两个数取相减后结果的绝对值n2,以此类推，最后总会得到一个数字黑洞，无法跳出。</p><p>例如:样例2中4176 = 6532 - 2356<br>","more":"</p><h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>Input</strong><br>第一行输入一个整数T，表示数据组数（1&lt;T&lt;10000）；<br>第二行输入一个正整数n(1000&lt;=n&lt;=9999)和一个正整数k（1&lt;=k&lt;=100）,表示操作次数；<br><strong>Output</strong><br>对于每组数据，输出对于开始的数据n在第k次“排序相减”后结果绝对值。<br><strong>Input示例</strong></p><blockquote><p>2<br>1234 2<br>3562 1</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>8352<br>4176</p></blockquote><h2 id=\"Accepted\"><a href=\"#Accepted\" class=\"headerlink\" title=\"Accepted\"></a>Accepted</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> sr = <span class=\"keyword\">new</span> StreamReader(Console.OpenStandardInput());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sw = <span class=\"keyword\">new</span> StreamWriter(Console.OpenStandardOutput());</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = Convert.ToInt32(sr.ReadLine());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> tokens = sr.ReadLine().Split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> n = Convert.ToInt32(tokens[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> t = Convert.ToInt32(tokens[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; t; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> intArray = n.ToString().ToCharArray();</span><br><span class=\"line\">                Array.Sort(intArray);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> z = Convert.ToInt32(<span class=\"keyword\">new</span> <span class=\"keyword\">string</span>(intArray));</span><br><span class=\"line\">                Array.Reverse(intArray);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> f = Convert.ToInt32(<span class=\"keyword\">new</span> <span class=\"keyword\">string</span>(intArray));</span><br><span class=\"line\">                n = Math.Abs(z - f);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sw.WriteLine(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        sw.Flush();</span><br><span class=\"line\">        sr.Close();</span><br><span class=\"line\">        sw.Close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"【MVC学习笔记】3.使用Spring.Net应用IOC（依赖倒置）","abbrlink":63049,"date":"2016-09-16T12:39:35.000Z","_content":"本篇我们将使用Spring.Net进行依赖导致。\n<!-- more -->\n到现在，我们已经基本搭建起了项目的框架，但是项目中还存在一个问题，就是尽管层与层之间使用了接口进行隔离，但实例化接口的时候，还是引入了接口实现类的依赖，如下面的代码：\n```csharp\nprivate IUserService _userService;\nprivate IUserService UserService\n{\n    get { return _userService ?? (_userService = new UserService()); }\n    set { _userService = value; }\n}\n```\n[面向接口编程](http://baike.baidu.cn/view/2493204.htm)，Controller应该只依赖于站点业务层的接口，而不能依赖于具体的实现，否则，就违背了在层之间设置接口的初衷了。\n\n另外，如果上层只依赖于下层的接口，在做单元测试的时候，就可以用Moq，Fakes等Mock工具来按实际需求来模拟接口的实现，就可以灵活的控制接口的返回值来对各种情况进行测试，如果依赖于具体的实现，项目的可测试性将大大减小，不利于进行自动化的单元测试。\n\n要不依赖于具体的实现，就不能使用通常的 T t = new T() 的方式来获得一个类的实例了，需要通过IOC容器来对对象生命周期，依赖关系等进行统一的管理，这里，我们将使用Spring.Net应用IOC。\n### Spring.Net在控制台程序中的使用\n我们将通过一个简单的控制台示例来展示Spring.Net的使用方法\n\n创建测试用的类：\n```csharp\nnamespace SpringNetDemo\n{\n    public interface IClass\n    {\n        string Name { get; set; }\n        Student Monitor { get; set; }\n        string GetMsg();\n    }\n    public class Class : IClass\n    {\n        public string Name { get; set; }\n        public Student Monitor { get; set; }\n\n        public string GetMsg()\n        {\n            return \"班级名称：\" + Name + \"，班长：\" + Monitor.Name;\n        }\n    }\n\n    public class Student\n    {\n        public string Name { get; set; }\n    }\n}\n```\n两个类，一个接口，Student类中有一个string类型的属性，为Name，Class类中除了string类型的Name属性外还有一个Student类型的Monitor属性，方法GetMsg可以返回当前Class对象的简介，包括班级名和班长名两个内容。Class类实现IClass接口。\n\n先做简单的测试：\n```csharp\nIClass c6=new Class()\n{\n    Monitor = new Student()\n    {\n        Name = \"李芙蓉\"\n    },\n    Name = \"六班\"\n};\nConsole.WriteLine(c6.GetMsg());\nConsole.ReadKey();\n```\n输出为：\n![](http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218095803520.png)\n接下来，我们**换用Spring.Net容器来声明对象**\n1. 首先引用dll文件\n![](http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218095839887.png)\n需要核心库Spring.Core.dll和Spring.Net使用的日志记录组件Common.Logging.dll\n2. 然后我们需要了解当前的程序集名称和命名空间\n![](http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218095922038.png)\n3. 在项目中新建一个xml文件，命名为services.xml：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<objects xmlns=\"http://www.springframework.net\">\n  <description>An  example that demonstrates simple IoC features.</description>\n  <object name=\"Class\" type=\"SpringNetDemo.Class,SpringNetDemo\">\n    <property name=\"Name\" value=\"尖子班\"/>\n    <property name=\"Monitor\" ref=\"Student\"/>\n  </object>\n  <object name=\"Student\" type=\"SpringNetDemo.Student, SpringNetDemo\">\n    <property name=\"Name\" value=\"陈二蛋\"/>\n  </object>\n</objects>\n```\n    在xml中新建objects根节点，其中加入需要容器生成的object子节点，object子节点的type属性中需要指明类的完整名称（带有程序集）和当前命名空间，如果需要为当前类的属性赋默认值，则可以在object节点中增加property节点，配置其value属性来为类的属性赋初值，若类的属性仍然为其他类对象时，可以新建该类型的object节点，并给予其name属性，再在当前属性的property节点中将ref属性，指向新增object节点的name属性。\n\n      注意：要把xml文件设置为“如果较新则复制”或者“始终复制”，否则生成时将不会自动复制到程序目录\n\n4. 然后在应用程序配置文件中配置Spring.Net的信息：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <sectionGroup name=\"spring\">\n      <section name=\"context\" type=\"Spring.Context.Support.ContextHandler, Spring.Core\"/>\n      <section name=\"objects\" type=\"Spring.Context.Support.DefaultSectionHandler, Spring.Core\" />\n    </sectionGroup>\n  </configSections>\n  <spring>\n    <context>\n      <resource uri=\"file://services.xml\"/>\n    </context>\n  </spring>\n</configuration>\n```\n运行程序，得到输出结果：\n![](http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218100404037.png)\n**成功实现IOC**\n### Spring.Net在ASP.NET MVC中的使用\n方法和在控制台程序中大同小异\n1. 同样，首先要导入dll文件\n![](http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218100505181.png)\n    MVC项目中需要引用的dll文件稍多些，需要五个，除了值钱的两个外，还需要三个Web相关的dll。\n2. 为了便于管理，我们在MVC项目更目录新建Config文件夹来保存配置文件，并在其中新建两个xml文件\ncontrollers.xml：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<objects xmlns=\"http://www.springframework.net\">、\n  <object type=\"PMS.WebApp.Controllers.UserController , PMS.WebApp\" singleton=\"false\" >\n    <property name=\"UserService\" ref=\"UserService\" />\n  </object>\n</objects>\n```\n    services.xml：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<objects xmlns=\"http://www.springframework.net\">\n  <object name=\"UserService\" type=\"PMS.BLL.UserService, PMS.BLL\" singleton=\"false\" >\n  </object>\n</objects>\n```\n      同样是出于方便管理考虑，我们将控制器和业务类分两个文件来保存，文件中节点的规则与控制台示例中完全相同。\n3. 修改Web.config配置文件\n![](http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218100703550.png)\n    在配置文件的configSections节点中增加如图的sectionGrup节点，configuration节点中增加Spring节点，并在spring节点中的context节点中使用resource节点设置配置文件的路径。\n4. 修改Global文件\n修改根目录的Global.asax文件，将MvcApplication类的父类由HttpApplication更改为SpringMvcApplication。\n```csharp\npublic class MvcApplication : SpringMvcApplication//HttpApplication\n```\n5. 最后，将原来的控制器中代码修改，就成功地在MVC项目中使用Spring.Net实现了IOC\n```csharp\n//private IUserService _userService;\n//private IUserService UserService\n//{\n//    get { return _userService ?? (_userService = new UserService()); }\n//    set { _userService = value; }\n//}\nprivate IUserService UserService { get; set; }\n```","source":"_posts/【MVC学习笔记】3.使用Spring.Net应用IOC（依赖倒置）.md","raw":"---\ntitle: 【MVC学习笔记】3.使用Spring.Net应用IOC（依赖倒置）\ntags:\n  - MVC\n  - Spring.Net\n  - IOC\nabbrlink: 63049\ndate: 2016-09-16 20:39:35\n---\n本篇我们将使用Spring.Net进行依赖导致。\n<!-- more -->\n到现在，我们已经基本搭建起了项目的框架，但是项目中还存在一个问题，就是尽管层与层之间使用了接口进行隔离，但实例化接口的时候，还是引入了接口实现类的依赖，如下面的代码：\n```csharp\nprivate IUserService _userService;\nprivate IUserService UserService\n{\n    get { return _userService ?? (_userService = new UserService()); }\n    set { _userService = value; }\n}\n```\n[面向接口编程](http://baike.baidu.cn/view/2493204.htm)，Controller应该只依赖于站点业务层的接口，而不能依赖于具体的实现，否则，就违背了在层之间设置接口的初衷了。\n\n另外，如果上层只依赖于下层的接口，在做单元测试的时候，就可以用Moq，Fakes等Mock工具来按实际需求来模拟接口的实现，就可以灵活的控制接口的返回值来对各种情况进行测试，如果依赖于具体的实现，项目的可测试性将大大减小，不利于进行自动化的单元测试。\n\n要不依赖于具体的实现，就不能使用通常的 T t = new T() 的方式来获得一个类的实例了，需要通过IOC容器来对对象生命周期，依赖关系等进行统一的管理，这里，我们将使用Spring.Net应用IOC。\n### Spring.Net在控制台程序中的使用\n我们将通过一个简单的控制台示例来展示Spring.Net的使用方法\n\n创建测试用的类：\n```csharp\nnamespace SpringNetDemo\n{\n    public interface IClass\n    {\n        string Name { get; set; }\n        Student Monitor { get; set; }\n        string GetMsg();\n    }\n    public class Class : IClass\n    {\n        public string Name { get; set; }\n        public Student Monitor { get; set; }\n\n        public string GetMsg()\n        {\n            return \"班级名称：\" + Name + \"，班长：\" + Monitor.Name;\n        }\n    }\n\n    public class Student\n    {\n        public string Name { get; set; }\n    }\n}\n```\n两个类，一个接口，Student类中有一个string类型的属性，为Name，Class类中除了string类型的Name属性外还有一个Student类型的Monitor属性，方法GetMsg可以返回当前Class对象的简介，包括班级名和班长名两个内容。Class类实现IClass接口。\n\n先做简单的测试：\n```csharp\nIClass c6=new Class()\n{\n    Monitor = new Student()\n    {\n        Name = \"李芙蓉\"\n    },\n    Name = \"六班\"\n};\nConsole.WriteLine(c6.GetMsg());\nConsole.ReadKey();\n```\n输出为：\n![](http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218095803520.png)\n接下来，我们**换用Spring.Net容器来声明对象**\n1. 首先引用dll文件\n![](http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218095839887.png)\n需要核心库Spring.Core.dll和Spring.Net使用的日志记录组件Common.Logging.dll\n2. 然后我们需要了解当前的程序集名称和命名空间\n![](http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218095922038.png)\n3. 在项目中新建一个xml文件，命名为services.xml：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<objects xmlns=\"http://www.springframework.net\">\n  <description>An  example that demonstrates simple IoC features.</description>\n  <object name=\"Class\" type=\"SpringNetDemo.Class,SpringNetDemo\">\n    <property name=\"Name\" value=\"尖子班\"/>\n    <property name=\"Monitor\" ref=\"Student\"/>\n  </object>\n  <object name=\"Student\" type=\"SpringNetDemo.Student, SpringNetDemo\">\n    <property name=\"Name\" value=\"陈二蛋\"/>\n  </object>\n</objects>\n```\n    在xml中新建objects根节点，其中加入需要容器生成的object子节点，object子节点的type属性中需要指明类的完整名称（带有程序集）和当前命名空间，如果需要为当前类的属性赋默认值，则可以在object节点中增加property节点，配置其value属性来为类的属性赋初值，若类的属性仍然为其他类对象时，可以新建该类型的object节点，并给予其name属性，再在当前属性的property节点中将ref属性，指向新增object节点的name属性。\n\n      注意：要把xml文件设置为“如果较新则复制”或者“始终复制”，否则生成时将不会自动复制到程序目录\n\n4. 然后在应用程序配置文件中配置Spring.Net的信息：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <sectionGroup name=\"spring\">\n      <section name=\"context\" type=\"Spring.Context.Support.ContextHandler, Spring.Core\"/>\n      <section name=\"objects\" type=\"Spring.Context.Support.DefaultSectionHandler, Spring.Core\" />\n    </sectionGroup>\n  </configSections>\n  <spring>\n    <context>\n      <resource uri=\"file://services.xml\"/>\n    </context>\n  </spring>\n</configuration>\n```\n运行程序，得到输出结果：\n![](http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218100404037.png)\n**成功实现IOC**\n### Spring.Net在ASP.NET MVC中的使用\n方法和在控制台程序中大同小异\n1. 同样，首先要导入dll文件\n![](http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218100505181.png)\n    MVC项目中需要引用的dll文件稍多些，需要五个，除了值钱的两个外，还需要三个Web相关的dll。\n2. 为了便于管理，我们在MVC项目更目录新建Config文件夹来保存配置文件，并在其中新建两个xml文件\ncontrollers.xml：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<objects xmlns=\"http://www.springframework.net\">、\n  <object type=\"PMS.WebApp.Controllers.UserController , PMS.WebApp\" singleton=\"false\" >\n    <property name=\"UserService\" ref=\"UserService\" />\n  </object>\n</objects>\n```\n    services.xml：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<objects xmlns=\"http://www.springframework.net\">\n  <object name=\"UserService\" type=\"PMS.BLL.UserService, PMS.BLL\" singleton=\"false\" >\n  </object>\n</objects>\n```\n      同样是出于方便管理考虑，我们将控制器和业务类分两个文件来保存，文件中节点的规则与控制台示例中完全相同。\n3. 修改Web.config配置文件\n![](http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218100703550.png)\n    在配置文件的configSections节点中增加如图的sectionGrup节点，configuration节点中增加Spring节点，并在spring节点中的context节点中使用resource节点设置配置文件的路径。\n4. 修改Global文件\n修改根目录的Global.asax文件，将MvcApplication类的父类由HttpApplication更改为SpringMvcApplication。\n```csharp\npublic class MvcApplication : SpringMvcApplication//HttpApplication\n```\n5. 最后，将原来的控制器中代码修改，就成功地在MVC项目中使用Spring.Net实现了IOC\n```csharp\n//private IUserService _userService;\n//private IUserService UserService\n//{\n//    get { return _userService ?? (_userService = new UserService()); }\n//    set { _userService = value; }\n//}\nprivate IUserService UserService { get; set; }\n```","slug":"【MVC学习笔记】3.使用Spring.Net应用IOC（依赖倒置）","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ot90013d00of900sm84","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>本篇我们将使用Spring.Net进行依赖导致。<br><a id=\"more\"></a><br>到现在，我们已经基本搭建起了项目的框架，但是项目中还存在一个问题，就是尽管层与层之间使用了接口进行隔离，但实例化接口的时候，还是引入了接口实现类的依赖，如下面的代码：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> IUserService _userService;</span><br><span class=\"line\"><span class=\"keyword\">private</span> IUserService UserService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _userService ?? (_userService = <span class=\"keyword\">new</span> UserService()); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> &#123; _userService = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p><a href=\"http://baike.baidu.cn/view/2493204.htm\" target=\"_blank\" rel=\"noopener\">面向接口编程</a>，Controller应该只依赖于站点业务层的接口，而不能依赖于具体的实现，否则，就违背了在层之间设置接口的初衷了。</p><p>另外，如果上层只依赖于下层的接口，在做单元测试的时候，就可以用Moq，Fakes等Mock工具来按实际需求来模拟接口的实现，就可以灵活的控制接口的返回值来对各种情况进行测试，如果依赖于具体的实现，项目的可测试性将大大减小，不利于进行自动化的单元测试。</p><p>要不依赖于具体的实现，就不能使用通常的 T t = new T() 的方式来获得一个类的实例了，需要通过IOC容器来对对象生命周期，依赖关系等进行统一的管理，这里，我们将使用Spring.Net应用IOC。</p><h3 id=\"Spring-Net在控制台程序中的使用\"><a href=\"#Spring-Net在控制台程序中的使用\" class=\"headerlink\" title=\"Spring.Net在控制台程序中的使用\"></a>Spring.Net在控制台程序中的使用</h3><p>我们将通过一个简单的控制台示例来展示Spring.Net的使用方法</p><p>创建测试用的类：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SpringNetDemo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IClass</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        Student Monitor &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">string</span> <span class=\"title\">GetMsg</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Class</span> : <span class=\"title\">IClass</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Student Monitor &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetMsg</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"班级名称：\"</span> + Name + <span class=\"string\">\"，班长：\"</span> + Monitor.Name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Student</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>两个类，一个接口，Student类中有一个string类型的属性，为Name，Class类中除了string类型的Name属性外还有一个Student类型的Monitor属性，方法GetMsg可以返回当前Class对象的简介，包括班级名和班长名两个内容。Class类实现IClass接口。</p><p>先做简单的测试：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IClass c6=<span class=\"keyword\">new</span> Class()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Monitor = <span class=\"keyword\">new</span> Student()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Name = <span class=\"string\">\"李芙蓉\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Name = <span class=\"string\">\"六班\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Console.WriteLine(c6.GetMsg());</span><br><span class=\"line\">Console.ReadKey();</span><br></pre></td></tr></table></figure><p></p><p>输出为：<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218095803520.png\" alt=\"\"><br>接下来，我们<strong>换用Spring.Net容器来声明对象</strong></p><ol><li>首先引用dll文件<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218095839887.png\" alt=\"\"><br>需要核心库Spring.Core.dll和Spring.Net使用的日志记录组件Common.Logging.dll</li><li>然后我们需要了解当前的程序集名称和命名空间<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218095922038.png\" alt=\"\"></li><li><p>在项目中新建一个xml文件，命名为services.xml：</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">objects</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.net\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>An  example that demonstrates simple IoC features.<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Class\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"SpringNetDemo.Class,SpringNetDemo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"尖子班\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Monitor\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"Student\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Student\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"SpringNetDemo.Student, SpringNetDemo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"陈二蛋\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">objects</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在xml中新建objects根节点，其中加入需要容器生成的object子节点，object子节点的type属性中需要指明类的完整名称（带有程序集）和当前命名空间，如果需要为当前类的属性赋默认值，则可以在object节点中增加property节点，配置其value属性来为类的属性赋初值，若类的属性仍然为其他类对象时，可以新建该类型的object节点，并给予其name属性，再在当前属性的property节点中将ref属性，指向新增object节点的name属性。</p><p>注意：要把xml文件设置为“如果较新则复制”或者“始终复制”，否则生成时将不会自动复制到程序目录</p></li><li><p>然后在应用程序配置文件中配置Spring.Net的信息：</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">configSections</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sectionGroup</span> <span class=\"attr\">name</span>=<span class=\"string\">\"spring\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">name</span>=<span class=\"string\">\"context\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Spring.Context.Support.ContextHandler, Spring.Core\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">name</span>=<span class=\"string\">\"objects\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Spring.Context.Support.DefaultSectionHandler, Spring.Core\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sectionGroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">configSections</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">spring</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">resource</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"file://services.xml\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">spring</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>运行程序，得到输出结果：<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218100404037.png\" alt=\"\"><br><strong>成功实现IOC</strong></p><h3 id=\"Spring-Net在ASP-NET-MVC中的使用\"><a href=\"#Spring-Net在ASP-NET-MVC中的使用\" class=\"headerlink\" title=\"Spring.Net在ASP.NET MVC中的使用\"></a>Spring.Net在ASP.NET MVC中的使用</h3><p>方法和在控制台程序中大同小异</p><ol><li>同样，首先要导入dll文件<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218100505181.png\" alt=\"\"><br>MVC项目中需要引用的dll文件稍多些，需要五个，除了值钱的两个外，还需要三个Web相关的dll。</li><li><p>为了便于管理，我们在MVC项目更目录新建Config文件夹来保存配置文件，并在其中新建两个xml文件<br>controllers.xml：</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">objects</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.net\"</span>&gt;</span>、</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">type</span>=<span class=\"string\">\"PMS.WebApp.Controllers.UserController , PMS.WebApp\"</span> <span class=\"attr\">singleton</span>=<span class=\"string\">\"false\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"UserService\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"UserService\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">objects</span>&gt;</span></span><br></pre></td></tr></table></figure><p>services.xml：</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">objects</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.net\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">name</span>=<span class=\"string\">\"UserService\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"PMS.BLL.UserService, PMS.BLL\"</span> <span class=\"attr\">singleton</span>=<span class=\"string\">\"false\"</span> &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">objects</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样是出于方便管理考虑，我们将控制器和业务类分两个文件来保存，文件中节点的规则与控制台示例中完全相同。</p></li><li>修改Web.config配置文件<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218100703550.png\" alt=\"\"><br>在配置文件的configSections节点中增加如图的sectionGrup节点，configuration节点中增加Spring节点，并在spring节点中的context节点中使用resource节点设置配置文件的路径。</li><li><p>修改Global文件<br>修改根目录的Global.asax文件，将MvcApplication类的父类由HttpApplication更改为SpringMvcApplication。</p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MvcApplication</span> : <span class=\"title\">SpringMvcApplication</span><span class=\"comment\">//HttpApplication</span></span><br></pre></td></tr></table></figure></li><li><p>最后，将原来的控制器中代码修改，就成功地在MVC项目中使用Spring.Net实现了IOC</p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//private IUserService _userService;</span></span><br><span class=\"line\"><span class=\"comment\">//private IUserService UserService</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    get &#123; return _userService ?? (_userService = new UserService()); &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    set &#123; _userService = value; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> IUserService UserService &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>本篇我们将使用Spring.Net进行依赖导致。<br>","more":"<br>到现在，我们已经基本搭建起了项目的框架，但是项目中还存在一个问题，就是尽管层与层之间使用了接口进行隔离，但实例化接口的时候，还是引入了接口实现类的依赖，如下面的代码：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> IUserService _userService;</span><br><span class=\"line\"><span class=\"keyword\">private</span> IUserService UserService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _userService ?? (_userService = <span class=\"keyword\">new</span> UserService()); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> &#123; _userService = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p><a href=\"http://baike.baidu.cn/view/2493204.htm\" target=\"_blank\" rel=\"noopener\">面向接口编程</a>，Controller应该只依赖于站点业务层的接口，而不能依赖于具体的实现，否则，就违背了在层之间设置接口的初衷了。</p><p>另外，如果上层只依赖于下层的接口，在做单元测试的时候，就可以用Moq，Fakes等Mock工具来按实际需求来模拟接口的实现，就可以灵活的控制接口的返回值来对各种情况进行测试，如果依赖于具体的实现，项目的可测试性将大大减小，不利于进行自动化的单元测试。</p><p>要不依赖于具体的实现，就不能使用通常的 T t = new T() 的方式来获得一个类的实例了，需要通过IOC容器来对对象生命周期，依赖关系等进行统一的管理，这里，我们将使用Spring.Net应用IOC。</p><h3 id=\"Spring-Net在控制台程序中的使用\"><a href=\"#Spring-Net在控制台程序中的使用\" class=\"headerlink\" title=\"Spring.Net在控制台程序中的使用\"></a>Spring.Net在控制台程序中的使用</h3><p>我们将通过一个简单的控制台示例来展示Spring.Net的使用方法</p><p>创建测试用的类：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SpringNetDemo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IClass</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        Student Monitor &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">string</span> <span class=\"title\">GetMsg</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Class</span> : <span class=\"title\">IClass</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Student Monitor &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetMsg</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"班级名称：\"</span> + Name + <span class=\"string\">\"，班长：\"</span> + Monitor.Name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Student</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>两个类，一个接口，Student类中有一个string类型的属性，为Name，Class类中除了string类型的Name属性外还有一个Student类型的Monitor属性，方法GetMsg可以返回当前Class对象的简介，包括班级名和班长名两个内容。Class类实现IClass接口。</p><p>先做简单的测试：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IClass c6=<span class=\"keyword\">new</span> Class()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Monitor = <span class=\"keyword\">new</span> Student()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Name = <span class=\"string\">\"李芙蓉\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Name = <span class=\"string\">\"六班\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Console.WriteLine(c6.GetMsg());</span><br><span class=\"line\">Console.ReadKey();</span><br></pre></td></tr></table></figure><p></p><p>输出为：<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218095803520.png\" alt=\"\"><br>接下来，我们<strong>换用Spring.Net容器来声明对象</strong></p><ol><li>首先引用dll文件<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218095839887.png\" alt=\"\"><br>需要核心库Spring.Core.dll和Spring.Net使用的日志记录组件Common.Logging.dll</li><li>然后我们需要了解当前的程序集名称和命名空间<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218095922038.png\" alt=\"\"></li><li><p>在项目中新建一个xml文件，命名为services.xml：</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">objects</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.net\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>An  example that demonstrates simple IoC features.<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Class\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"SpringNetDemo.Class,SpringNetDemo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"尖子班\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Monitor\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"Student\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Student\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"SpringNetDemo.Student, SpringNetDemo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"陈二蛋\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">objects</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在xml中新建objects根节点，其中加入需要容器生成的object子节点，object子节点的type属性中需要指明类的完整名称（带有程序集）和当前命名空间，如果需要为当前类的属性赋默认值，则可以在object节点中增加property节点，配置其value属性来为类的属性赋初值，若类的属性仍然为其他类对象时，可以新建该类型的object节点，并给予其name属性，再在当前属性的property节点中将ref属性，指向新增object节点的name属性。</p><p>注意：要把xml文件设置为“如果较新则复制”或者“始终复制”，否则生成时将不会自动复制到程序目录</p></li><li><p>然后在应用程序配置文件中配置Spring.Net的信息：</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">configSections</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sectionGroup</span> <span class=\"attr\">name</span>=<span class=\"string\">\"spring\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">name</span>=<span class=\"string\">\"context\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Spring.Context.Support.ContextHandler, Spring.Core\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">name</span>=<span class=\"string\">\"objects\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Spring.Context.Support.DefaultSectionHandler, Spring.Core\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sectionGroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">configSections</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">spring</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">resource</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"file://services.xml\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">spring</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>运行程序，得到输出结果：<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218100404037.png\" alt=\"\"><br><strong>成功实现IOC</strong></p><h3 id=\"Spring-Net在ASP-NET-MVC中的使用\"><a href=\"#Spring-Net在ASP-NET-MVC中的使用\" class=\"headerlink\" title=\"Spring.Net在ASP.NET MVC中的使用\"></a>Spring.Net在ASP.NET MVC中的使用</h3><p>方法和在控制台程序中大同小异</p><ol><li>同样，首先要导入dll文件<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218100505181.png\" alt=\"\"><br>MVC项目中需要引用的dll文件稍多些，需要五个，除了值钱的两个外，还需要三个Web相关的dll。</li><li><p>为了便于管理，我们在MVC项目更目录新建Config文件夹来保存配置文件，并在其中新建两个xml文件<br>controllers.xml：</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">objects</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.net\"</span>&gt;</span>、</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">type</span>=<span class=\"string\">\"PMS.WebApp.Controllers.UserController , PMS.WebApp\"</span> <span class=\"attr\">singleton</span>=<span class=\"string\">\"false\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"UserService\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"UserService\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">objects</span>&gt;</span></span><br></pre></td></tr></table></figure><p>services.xml：</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">objects</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.net\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">name</span>=<span class=\"string\">\"UserService\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"PMS.BLL.UserService, PMS.BLL\"</span> <span class=\"attr\">singleton</span>=<span class=\"string\">\"false\"</span> &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">objects</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样是出于方便管理考虑，我们将控制器和业务类分两个文件来保存，文件中节点的规则与控制台示例中完全相同。</p></li><li>修改Web.config配置文件<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218215235/20180218100703550.png\" alt=\"\"><br>在配置文件的configSections节点中增加如图的sectionGrup节点，configuration节点中增加Spring节点，并在spring节点中的context节点中使用resource节点设置配置文件的路径。</li><li><p>修改Global文件<br>修改根目录的Global.asax文件，将MvcApplication类的父类由HttpApplication更改为SpringMvcApplication。</p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MvcApplication</span> : <span class=\"title\">SpringMvcApplication</span><span class=\"comment\">//HttpApplication</span></span><br></pre></td></tr></table></figure></li><li><p>最后，将原来的控制器中代码修改，就成功地在MVC项目中使用Spring.Net实现了IOC</p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//private IUserService _userService;</span></span><br><span class=\"line\"><span class=\"comment\">//private IUserService UserService</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    get &#123; return _userService ?? (_userService = new UserService()); &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    set &#123; _userService = value; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> IUserService UserService &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->"},{"title":"【MVC学习笔记】5.使用Controller来代替Filter完成登录验证（Session校验）","abbrlink":21523,"date":"2016-09-17T02:16:24.000Z","_content":"之前的学习中，在对Session校验完成登录验证时，通常使用Filter来处理，方法类似与前文的错误日志过滤，即新建Filter类继承ActionFilterAttribute类，重写OnActionExecuting方法，之后直接在需要验证的Action前加上Filter标记即可。\n<!-- more -->\n## Filter式实现\n### 新建登陆校验类\n新建登陆校验类CheckLoginAttribute\n```csharp\nusing System.Web.Mvc;\n\nnamespace PMS.WebApp.Models\n{\n    public class CheckLoginAttribute:ActionFilterAttribute\n    {\n        public override void OnActionExecuting(ActionExecutingContext filterContext)\n        {\n            base.OnActionExecuting(filterContext);\n            if (filterContext.HttpContext.Session == null || filterContext.HttpContext.Session[\"user\"] == null)\n            {\n                filterContext.HttpContext.Response.Redirect(\"/User/Login\");\n            }\n        }\n    }\n}\n```\n### 增加特性\n在需要校验的Action增加标记以完成校验\n```csharp\nusing System.Web.Mvc;\nusing PMS.IBLL;\nusing PMS.WebApp.Models;\n\nnamespace PMS.WebApp.Controllers\n{\n    public class UserController : Controller\n    {\n        //\n        // GET: /User/\n        //private IUserService _userService;\n        //private IUserService UserService\n        //{\n        //    get { return _userService ?? (_userService = new UserService()); }\n        //    set { _userService = value; }\n        //}\n        private IUserService UserService { get; set; }\n        [CheckLogin]\n        public ActionResult Index()\n        {\n            return Content(\"OK\");\n        }\n\n    }\n}\n```\n注意：不要在RegisterGlobalFilters方法中注册校验类，否则则会相当于给所有Action都添加了校验\n\n这种方法使用起来需要在每个Action方法前添加过滤标签，且效率并不十分高，我们的项目中使用的是一种更为简单高效的方法：使用Controller进行登录验证\n## Controller式实现\n### 新建验证父类\n新建一个用于验证的Controller父类，并在其内重写OnActionExecuting方法完成登陆校验：\n```csharp\nusing System.Web.Mvc;\n\nnamespace PMS.WebApp.Controllers\n{\n    public class FilterController : Controller\n    {\n        protected override void OnActionExecuting(ActionExecutingContext filterContext)\n        {\n            base.OnActionExecuting(filterContext);\n            if (Session[\"user\"] == null)\n            {\n                //filterContext.HttpContext.Response.Redirect(\"/User/Login\");\n                filterContext.Result = Redirect(\"/User/Login\");\n            }\n        }\n    }\n}\n```\n在Controller校验类的OnActionExecuting方法中，有如下代码\n```csharp\n//filterContext.HttpContext.Response.Redirect(\"/User/Login\");\nfilterContext.Result = Redirect(\"/User/Login\");\n```\n我们使用后者而放弃前者的原因是，ASP.NET MVC中规定，Action必须返回ActionResult，如果使用前者，在完成跳转前会先进入到请求的页面，这样不符合我们使用过滤器的初衷。\n### 继承校验父类\n然后使需要校验的Controller继承于我们定义的校验Controller即可完成全局登录校验操作：\n```csharp\nusing System.Web.Mvc;\nusing PMS.IBLL;\n\nnamespace PMS.WebApp.Controllers\n{\n    public class UserController : FilterController//Controller\n    {\n        //\n        // GET: /User/\n        //private IUserService _userService;\n        //private IUserService UserService\n        //{\n        //    get { return _userService ?? (_userService = new UserService()); }\n        //    set { _userService = value; }\n        //}\n        private IUserService UserService { get; set; }\n        //[CheckLogin]\n        public ActionResult Index()\n        {\n            return Content(\"OK\");\n        }\n\n    }\n}\n```\n下面我们对比两种方法的优缺点:\n\n  Filter定义过程比较复杂，效率也稍低些，但是却可以对每一个Action进行单独的过滤，同一Action也可以有多条过滤信息，使用比较灵活。\n\n  Controller定义更为简便，效率高，但是却只能对整个Controller中所有方法进行过滤，同一Controller也不太容易有多个Controller过滤父类。\n\n\n **综上所述，实际项目中大多需求都是同一Controller下所有方法都需要完成登陆验证，所以其实使用Controller过滤更为高效，应对复杂需求时，灵活混用两种方法也不失为一种好的策略。**","source":"_posts/【MVC学习笔记】5.使用Controller来代替Filter完成登录验证（Session校验）.md","raw":"---\ntitle: 【MVC学习笔记】5.使用Controller来代替Filter完成登录验证（Session校验）\ntags:\n  - MVC\n  - 登录验证\nabbrlink: 21523\ndate: 2016-09-17 10:16:24\n---\n之前的学习中，在对Session校验完成登录验证时，通常使用Filter来处理，方法类似与前文的错误日志过滤，即新建Filter类继承ActionFilterAttribute类，重写OnActionExecuting方法，之后直接在需要验证的Action前加上Filter标记即可。\n<!-- more -->\n## Filter式实现\n### 新建登陆校验类\n新建登陆校验类CheckLoginAttribute\n```csharp\nusing System.Web.Mvc;\n\nnamespace PMS.WebApp.Models\n{\n    public class CheckLoginAttribute:ActionFilterAttribute\n    {\n        public override void OnActionExecuting(ActionExecutingContext filterContext)\n        {\n            base.OnActionExecuting(filterContext);\n            if (filterContext.HttpContext.Session == null || filterContext.HttpContext.Session[\"user\"] == null)\n            {\n                filterContext.HttpContext.Response.Redirect(\"/User/Login\");\n            }\n        }\n    }\n}\n```\n### 增加特性\n在需要校验的Action增加标记以完成校验\n```csharp\nusing System.Web.Mvc;\nusing PMS.IBLL;\nusing PMS.WebApp.Models;\n\nnamespace PMS.WebApp.Controllers\n{\n    public class UserController : Controller\n    {\n        //\n        // GET: /User/\n        //private IUserService _userService;\n        //private IUserService UserService\n        //{\n        //    get { return _userService ?? (_userService = new UserService()); }\n        //    set { _userService = value; }\n        //}\n        private IUserService UserService { get; set; }\n        [CheckLogin]\n        public ActionResult Index()\n        {\n            return Content(\"OK\");\n        }\n\n    }\n}\n```\n注意：不要在RegisterGlobalFilters方法中注册校验类，否则则会相当于给所有Action都添加了校验\n\n这种方法使用起来需要在每个Action方法前添加过滤标签，且效率并不十分高，我们的项目中使用的是一种更为简单高效的方法：使用Controller进行登录验证\n## Controller式实现\n### 新建验证父类\n新建一个用于验证的Controller父类，并在其内重写OnActionExecuting方法完成登陆校验：\n```csharp\nusing System.Web.Mvc;\n\nnamespace PMS.WebApp.Controllers\n{\n    public class FilterController : Controller\n    {\n        protected override void OnActionExecuting(ActionExecutingContext filterContext)\n        {\n            base.OnActionExecuting(filterContext);\n            if (Session[\"user\"] == null)\n            {\n                //filterContext.HttpContext.Response.Redirect(\"/User/Login\");\n                filterContext.Result = Redirect(\"/User/Login\");\n            }\n        }\n    }\n}\n```\n在Controller校验类的OnActionExecuting方法中，有如下代码\n```csharp\n//filterContext.HttpContext.Response.Redirect(\"/User/Login\");\nfilterContext.Result = Redirect(\"/User/Login\");\n```\n我们使用后者而放弃前者的原因是，ASP.NET MVC中规定，Action必须返回ActionResult，如果使用前者，在完成跳转前会先进入到请求的页面，这样不符合我们使用过滤器的初衷。\n### 继承校验父类\n然后使需要校验的Controller继承于我们定义的校验Controller即可完成全局登录校验操作：\n```csharp\nusing System.Web.Mvc;\nusing PMS.IBLL;\n\nnamespace PMS.WebApp.Controllers\n{\n    public class UserController : FilterController//Controller\n    {\n        //\n        // GET: /User/\n        //private IUserService _userService;\n        //private IUserService UserService\n        //{\n        //    get { return _userService ?? (_userService = new UserService()); }\n        //    set { _userService = value; }\n        //}\n        private IUserService UserService { get; set; }\n        //[CheckLogin]\n        public ActionResult Index()\n        {\n            return Content(\"OK\");\n        }\n\n    }\n}\n```\n下面我们对比两种方法的优缺点:\n\n  Filter定义过程比较复杂，效率也稍低些，但是却可以对每一个Action进行单独的过滤，同一Action也可以有多条过滤信息，使用比较灵活。\n\n  Controller定义更为简便，效率高，但是却只能对整个Controller中所有方法进行过滤，同一Controller也不太容易有多个Controller过滤父类。\n\n\n **综上所述，实际项目中大多需求都是同一Controller下所有方法都需要完成登陆验证，所以其实使用Controller过滤更为高效，应对复杂需求时，灵活混用两种方法也不失为一种好的策略。**","slug":"【MVC学习笔记】5.使用Controller来代替Filter完成登录验证（Session校验）","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24otb0016d00o3jza6nfc","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>之前的学习中，在对Session校验完成登录验证时，通常使用Filter来处理，方法类似与前文的错误日志过滤，即新建Filter类继承ActionFilterAttribute类，重写OnActionExecuting方法，之后直接在需要验证的Action前加上Filter标记即可。<br><a id=\"more\"></a></p><h2 id=\"Filter式实现\"><a href=\"#Filter式实现\" class=\"headerlink\" title=\"Filter式实现\"></a>Filter式实现</h2><h3 id=\"新建登陆校验类\"><a href=\"#新建登陆校验类\" class=\"headerlink\" title=\"新建登陆校验类\"></a>新建登陆校验类</h3><p>新建登陆校验类CheckLoginAttribute<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp.Models</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CheckLoginAttribute</span>:<span class=\"title\">ActionFilterAttribute</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext filterContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.OnActionExecuting(filterContext);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filterContext.HttpContext.Session == <span class=\"literal\">null</span> || filterContext.HttpContext.Session[<span class=\"string\">\"user\"</span>] == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                filterContext.HttpContext.Response.Redirect(<span class=\"string\">\"/User/Login\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"增加特性\"><a href=\"#增加特性\" class=\"headerlink\" title=\"增加特性\"></a>增加特性</h3><p>在需要校验的Action增加标记以完成校验<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IBLL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.WebApp.Models;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// GET: /User/</span></span><br><span class=\"line\">        <span class=\"comment\">//private IUserService _userService;</span></span><br><span class=\"line\">        <span class=\"comment\">//private IUserService UserService</span></span><br><span class=\"line\">        <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    get &#123; return _userService ?? (_userService = new UserService()); &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//    set &#123; _userService = value; &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> IUserService UserService &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">CheckLogin</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Content(<span class=\"string\">\"OK\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>注意：不要在RegisterGlobalFilters方法中注册校验类，否则则会相当于给所有Action都添加了校验</p><p>这种方法使用起来需要在每个Action方法前添加过滤标签，且效率并不十分高，我们的项目中使用的是一种更为简单高效的方法：使用Controller进行登录验证</p><h2 id=\"Controller式实现\"><a href=\"#Controller式实现\" class=\"headerlink\" title=\"Controller式实现\"></a>Controller式实现</h2><h3 id=\"新建验证父类\"><a href=\"#新建验证父类\" class=\"headerlink\" title=\"新建验证父类\"></a>新建验证父类</h3><p>新建一个用于验证的Controller父类，并在其内重写OnActionExecuting方法完成登陆校验：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FilterController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext filterContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.OnActionExecuting(filterContext);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Session[<span class=\"string\">\"user\"</span>] == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//filterContext.HttpContext.Response.Redirect(\"/User/Login\");</span></span><br><span class=\"line\">                filterContext.Result = Redirect(<span class=\"string\">\"/User/Login\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在Controller校验类的OnActionExecuting方法中，有如下代码<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//filterContext.HttpContext.Response.Redirect(\"/User/Login\");</span></span><br><span class=\"line\">filterContext.Result = Redirect(<span class=\"string\">\"/User/Login\"</span>);</span><br></pre></td></tr></table></figure><p></p><p>我们使用后者而放弃前者的原因是，ASP.NET MVC中规定，Action必须返回ActionResult，如果使用前者，在完成跳转前会先进入到请求的页面，这样不符合我们使用过滤器的初衷。</p><h3 id=\"继承校验父类\"><a href=\"#继承校验父类\" class=\"headerlink\" title=\"继承校验父类\"></a>继承校验父类</h3><p>然后使需要校验的Controller继承于我们定义的校验Controller即可完成全局登录校验操作：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IBLL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserController</span> : <span class=\"title\">FilterController</span><span class=\"comment\">//Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// GET: /User/</span></span><br><span class=\"line\">        <span class=\"comment\">//private IUserService _userService;</span></span><br><span class=\"line\">        <span class=\"comment\">//private IUserService UserService</span></span><br><span class=\"line\">        <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    get &#123; return _userService ?? (_userService = new UserService()); &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//    set &#123; _userService = value; &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> IUserService UserService &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"comment\">//[CheckLogin]</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Content(<span class=\"string\">\"OK\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>下面我们对比两种方法的优缺点:</p><p>Filter定义过程比较复杂，效率也稍低些，但是却可以对每一个Action进行单独的过滤，同一Action也可以有多条过滤信息，使用比较灵活。</p><p>Controller定义更为简便，效率高，但是却只能对整个Controller中所有方法进行过滤，同一Controller也不太容易有多个Controller过滤父类。</p><p><strong>综上所述，实际项目中大多需求都是同一Controller下所有方法都需要完成登陆验证，所以其实使用Controller过滤更为高效，应对复杂需求时，灵活混用两种方法也不失为一种好的策略。</strong></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>之前的学习中，在对Session校验完成登录验证时，通常使用Filter来处理，方法类似与前文的错误日志过滤，即新建Filter类继承ActionFilterAttribute类，重写OnActionExecuting方法，之后直接在需要验证的Action前加上Filter标记即可。<br>","more":"</p><h2 id=\"Filter式实现\"><a href=\"#Filter式实现\" class=\"headerlink\" title=\"Filter式实现\"></a>Filter式实现</h2><h3 id=\"新建登陆校验类\"><a href=\"#新建登陆校验类\" class=\"headerlink\" title=\"新建登陆校验类\"></a>新建登陆校验类</h3><p>新建登陆校验类CheckLoginAttribute<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp.Models</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CheckLoginAttribute</span>:<span class=\"title\">ActionFilterAttribute</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext filterContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.OnActionExecuting(filterContext);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filterContext.HttpContext.Session == <span class=\"literal\">null</span> || filterContext.HttpContext.Session[<span class=\"string\">\"user\"</span>] == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                filterContext.HttpContext.Response.Redirect(<span class=\"string\">\"/User/Login\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"增加特性\"><a href=\"#增加特性\" class=\"headerlink\" title=\"增加特性\"></a>增加特性</h3><p>在需要校验的Action增加标记以完成校验<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IBLL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.WebApp.Models;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// GET: /User/</span></span><br><span class=\"line\">        <span class=\"comment\">//private IUserService _userService;</span></span><br><span class=\"line\">        <span class=\"comment\">//private IUserService UserService</span></span><br><span class=\"line\">        <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    get &#123; return _userService ?? (_userService = new UserService()); &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//    set &#123; _userService = value; &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> IUserService UserService &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">CheckLogin</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Content(<span class=\"string\">\"OK\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>注意：不要在RegisterGlobalFilters方法中注册校验类，否则则会相当于给所有Action都添加了校验</p><p>这种方法使用起来需要在每个Action方法前添加过滤标签，且效率并不十分高，我们的项目中使用的是一种更为简单高效的方法：使用Controller进行登录验证</p><h2 id=\"Controller式实现\"><a href=\"#Controller式实现\" class=\"headerlink\" title=\"Controller式实现\"></a>Controller式实现</h2><h3 id=\"新建验证父类\"><a href=\"#新建验证父类\" class=\"headerlink\" title=\"新建验证父类\"></a>新建验证父类</h3><p>新建一个用于验证的Controller父类，并在其内重写OnActionExecuting方法完成登陆校验：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FilterController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext filterContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.OnActionExecuting(filterContext);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Session[<span class=\"string\">\"user\"</span>] == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//filterContext.HttpContext.Response.Redirect(\"/User/Login\");</span></span><br><span class=\"line\">                filterContext.Result = Redirect(<span class=\"string\">\"/User/Login\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在Controller校验类的OnActionExecuting方法中，有如下代码<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//filterContext.HttpContext.Response.Redirect(\"/User/Login\");</span></span><br><span class=\"line\">filterContext.Result = Redirect(<span class=\"string\">\"/User/Login\"</span>);</span><br></pre></td></tr></table></figure><p></p><p>我们使用后者而放弃前者的原因是，ASP.NET MVC中规定，Action必须返回ActionResult，如果使用前者，在完成跳转前会先进入到请求的页面，这样不符合我们使用过滤器的初衷。</p><h3 id=\"继承校验父类\"><a href=\"#继承校验父类\" class=\"headerlink\" title=\"继承校验父类\"></a>继承校验父类</h3><p>然后使需要校验的Controller继承于我们定义的校验Controller即可完成全局登录校验操作：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IBLL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserController</span> : <span class=\"title\">FilterController</span><span class=\"comment\">//Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// GET: /User/</span></span><br><span class=\"line\">        <span class=\"comment\">//private IUserService _userService;</span></span><br><span class=\"line\">        <span class=\"comment\">//private IUserService UserService</span></span><br><span class=\"line\">        <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    get &#123; return _userService ?? (_userService = new UserService()); &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//    set &#123; _userService = value; &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> IUserService UserService &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"comment\">//[CheckLogin]</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Content(<span class=\"string\">\"OK\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>下面我们对比两种方法的优缺点:</p><p>Filter定义过程比较复杂，效率也稍低些，但是却可以对每一个Action进行单独的过滤，同一Action也可以有多条过滤信息，使用比较灵活。</p><p>Controller定义更为简便，效率高，但是却只能对整个Controller中所有方法进行过滤，同一Controller也不太容易有多个Controller过滤父类。</p><p><strong>综上所述，实际项目中大多需求都是同一Controller下所有方法都需要完成登陆验证，所以其实使用Controller过滤更为高效，应对复杂需求时，灵活混用两种方法也不失为一种好的策略。</strong></p><!-- rebuild by neat -->"},{"title":"【MVC学习笔记】6. 使用Memcache+Cookie解决分布式系统共享登录状态","abbrlink":7556,"date":"2016-09-17T09:29:28.000Z","_content":"为了解决单机处理的瓶颈，增强软件的可用性，我们需要将软件部署在多台服务器上启用多个二级子域名以频道化的方式，根据业务功能将网站分布部署在独立的服务器上，或通过负载均衡技术（如：DNS轮询、Radware、F5、LVS等）让多个频道共享一组服务器。当我们将网站程序分部到多台服务器上后，由于Session受实现原理的局限，无法跨服务器同步更新Session，使得登录状态难以通过Session共享。\n<!-- more -->\n我们使用MemCache+Cookie方案来解决分布式系统共享登录状态的问题。\n\nMemcache服务器本身就是一个Socket服务端，内部数据采用键值对的形式存储在服务器的内存中，本质就是一个大型的哈希表。数据的删除采用惰性删除机制。虽然Memcache并没有提供集群功能，但是通过客户端的驱动程序很容易就可以实现Memcache的集群配置。\n## Memcache使用\n1. 下载安装[Memcache](http://code.jellycan.com/Memcache/)（Windows平台）\n    （1）将程序解压到磁盘任意位置\n    （2）进入cmd窗口，运行Memcached.exe -d install安装服务，安装后打开服务窗口查看服务是否安装成功。\n![](http://p4au3q1y8.bkt.clouddn.com/20180218222028/20180218102319007.png)\n    （3）直接在服务管理中启动服务，或者使用cmd命令 net start \"Memcache Server\"\n    （4）使用Telnet连接到Memcache控制台，验证服务是否正常 telnet 127.0.0.1 11211\n    （5）使用stats指令查看当前Memcache服务器状态。\n     ![](http://p4au3q1y8.bkt.clouddn.com/20180218222028/20180218102458126.png)\n2. 程序中的用法\n    （1）在程序中添加 Memcached.ClientLibrary.dll 的引用\n    （2）C#中操作Memcache的代码示例\n```csharp\nString[] serverlist = { \"192.168.1.100:11211\",\n\"192.168.1.101:11211\"  };\n// initialize the pool for memcache servers\nSockIOPool pool = SockIOPool.GetInstance(\"test\");\npool.SetServers(serverlist);\npool.Initialize();\nmc = new MemcacheClient();\nmc.PoolName = \"test\";\nmc.EnableCompression = false;\npool.Shutdown();//关闭连接池\n```\n## 具体实现\n首先在Common层中引入[Memcached.ClientLibrary.dll](http://sourceforge.net/projects/memcacheddotnet/)，并封装Memcache的帮助类，MemcacheHelper\n```csharp\nusing Memcached.ClientLibrary;\nusing System;\n\nnamespace PMS.Common\n{\n   public class MemcacheHelper\n    {\n       private static readonly MemcachedClient Mc = null;\n\n       static MemcacheHelper()\n       {\n           //最好放在配置文件中\n           string[] serverlist = { \"127.0.0.1:11211\", \"10.0.0.132:11211\" };\n\n           //初始化池\n           var pool = SockIOPool.GetInstance();\n           pool.SetServers(serverlist);\n\n           pool.InitConnections = 3;\n           pool.MinConnections = 3;\n           pool.MaxConnections = 5;\n\n           pool.SocketConnectTimeout = 1000;\n           pool.SocketTimeout = 3000;\n\n           pool.MaintenanceSleep = 30;\n           pool.Failover = true;\n\n           pool.Nagle = false;\n           pool.Initialize();\n\n           // 获得客户端实例\n           Mc = new MemcachedClient {EnableCompression = false};\n       }\n       /// <summary>\n       /// 存储数据\n       /// </summary>\n       /// <param name=\"key\"></param>\n       /// <param name=\"value\"></param>\n       /// <returns></returns>\n       public static bool Set(string key,object value)\n       {\n          return Mc.Set(key, value);\n       }\n       public static bool Set(string key, object value,DateTime time)\n       {\n           return Mc.Set(key, value,time);\n       }\n       /// <summary>\n       /// 获取数据\n       /// </summary>\n       /// <param name=\"key\"></param>\n       /// <returns></returns>\n       public static object Get(string key)\n       {\n           return Mc.Get(key);\n       }\n       /// <summary>\n       /// 删除\n       /// </summary>\n       /// <param name=\"key\"></param>\n       /// <returns></returns>\n       public static bool Delete(string key)\n       {\n           return Mc.KeyExists(key) && Mc.Delete(key);\n       }\n    }\n}\n```\n 改变用户登录方法UserLogin，用户登录成功后生成GUID，将此GUID存入Cookie并以GUID为键将登录用户信息序列化存入Memcache服务器。\n```csharp\npublic ActionResult UserLogin()\n{\n    #region 验证码校验\n    var validateCode = Session[\"validateCode\"] != null ? Session[\"validateCode\"].ToString() : string.Empty;\n    if (string.IsNullOrEmpty(validateCode))\n        return Content(\"no:验证码错误!!\");\n    Session[\"validateCode\"] = null;\n    var txtCode = Request[\"ValidateCode\"];\n    if (!validateCode.Equals(txtCode, StringComparison.InvariantCultureIgnoreCase))\n        return Content(\"no:验证码错误!!\");\n    #endregion\n\n    var userName = Request[\"UserName\"];\n    var userPwd = Request[\"PassWord\"];\n    //查询用户是否存在\n    var user = UserService.LoadEntities(u => u.UserName == userName && u.PassWord == userPwd).FirstOrDefault();\n    if (user == null) return Content(\"no:登录失败\");\n\n    //产生一个GUID值作为Memache的键.\n    var sessionId = Guid.NewGuid().ToString();\n    //将登录用户信息存储到Memcache中。\n    MemcacheHelper.Set(sessionId, SerializeHelper.SerializeToString(user), DateTime.Now.AddMinutes(20));\n    //将Memcache的key以Cookie的形式返回给浏览器。\n    Response.Cookies[\"sessionId\"].Value = sessionId;\n    return Content(\"ok:登录成功\");\n}\n```\n改变登录校验控制器FilterController的OnActionExecuting方法，使其校验方式改为从Memcache服务器中读取Cookie中值为键的对象：\n```csharp\nprotected override void OnActionExecuting(ActionExecutingContext filterContext)\n{\n    base.OnActionExecuting(filterContext);\n    //if (Session[\"user\"] == null)\n    if (Request.Cookies[\"sessionId\"] != null)\n    {\n        var sessionId = Request.Cookies[\"sessionId\"].Value;\n        //根据该值查Memcache.\n        var obj = MemcacheHelper.Get(sessionId);\n        if (obj == null)\n        {\n            filterContext.Result = Redirect(\"/Login/Index\");\n            return;\n        }\n        var user = SerializeHelper.DeserializeToObject<User>(obj.ToString());\n        LoginUser = user;\n        //模拟出滑动过期时间.\n        MemcacheHelper.Set(sessionId, obj, DateTime.Now.AddMinutes(20)); \n    }\n    else\n        filterContext.Result = Redirect(\"/Login/Index\");\n}\n```","source":"_posts/【MVC学习笔记】6.-使用Memcache+Cookie解决分布式系统共享登录状态.md","raw":"---\ntitle: 【MVC学习笔记】6. 使用Memcache+Cookie解决分布式系统共享登录状态\ntags:\n  - MVC\n  - Memcache\n  - 分布式\nabbrlink: 7556\ndate: 2016-09-17 17:29:28\n---\n为了解决单机处理的瓶颈，增强软件的可用性，我们需要将软件部署在多台服务器上启用多个二级子域名以频道化的方式，根据业务功能将网站分布部署在独立的服务器上，或通过负载均衡技术（如：DNS轮询、Radware、F5、LVS等）让多个频道共享一组服务器。当我们将网站程序分部到多台服务器上后，由于Session受实现原理的局限，无法跨服务器同步更新Session，使得登录状态难以通过Session共享。\n<!-- more -->\n我们使用MemCache+Cookie方案来解决分布式系统共享登录状态的问题。\n\nMemcache服务器本身就是一个Socket服务端，内部数据采用键值对的形式存储在服务器的内存中，本质就是一个大型的哈希表。数据的删除采用惰性删除机制。虽然Memcache并没有提供集群功能，但是通过客户端的驱动程序很容易就可以实现Memcache的集群配置。\n## Memcache使用\n1. 下载安装[Memcache](http://code.jellycan.com/Memcache/)（Windows平台）\n    （1）将程序解压到磁盘任意位置\n    （2）进入cmd窗口，运行Memcached.exe -d install安装服务，安装后打开服务窗口查看服务是否安装成功。\n![](http://p4au3q1y8.bkt.clouddn.com/20180218222028/20180218102319007.png)\n    （3）直接在服务管理中启动服务，或者使用cmd命令 net start \"Memcache Server\"\n    （4）使用Telnet连接到Memcache控制台，验证服务是否正常 telnet 127.0.0.1 11211\n    （5）使用stats指令查看当前Memcache服务器状态。\n     ![](http://p4au3q1y8.bkt.clouddn.com/20180218222028/20180218102458126.png)\n2. 程序中的用法\n    （1）在程序中添加 Memcached.ClientLibrary.dll 的引用\n    （2）C#中操作Memcache的代码示例\n```csharp\nString[] serverlist = { \"192.168.1.100:11211\",\n\"192.168.1.101:11211\"  };\n// initialize the pool for memcache servers\nSockIOPool pool = SockIOPool.GetInstance(\"test\");\npool.SetServers(serverlist);\npool.Initialize();\nmc = new MemcacheClient();\nmc.PoolName = \"test\";\nmc.EnableCompression = false;\npool.Shutdown();//关闭连接池\n```\n## 具体实现\n首先在Common层中引入[Memcached.ClientLibrary.dll](http://sourceforge.net/projects/memcacheddotnet/)，并封装Memcache的帮助类，MemcacheHelper\n```csharp\nusing Memcached.ClientLibrary;\nusing System;\n\nnamespace PMS.Common\n{\n   public class MemcacheHelper\n    {\n       private static readonly MemcachedClient Mc = null;\n\n       static MemcacheHelper()\n       {\n           //最好放在配置文件中\n           string[] serverlist = { \"127.0.0.1:11211\", \"10.0.0.132:11211\" };\n\n           //初始化池\n           var pool = SockIOPool.GetInstance();\n           pool.SetServers(serverlist);\n\n           pool.InitConnections = 3;\n           pool.MinConnections = 3;\n           pool.MaxConnections = 5;\n\n           pool.SocketConnectTimeout = 1000;\n           pool.SocketTimeout = 3000;\n\n           pool.MaintenanceSleep = 30;\n           pool.Failover = true;\n\n           pool.Nagle = false;\n           pool.Initialize();\n\n           // 获得客户端实例\n           Mc = new MemcachedClient {EnableCompression = false};\n       }\n       /// <summary>\n       /// 存储数据\n       /// </summary>\n       /// <param name=\"key\"></param>\n       /// <param name=\"value\"></param>\n       /// <returns></returns>\n       public static bool Set(string key,object value)\n       {\n          return Mc.Set(key, value);\n       }\n       public static bool Set(string key, object value,DateTime time)\n       {\n           return Mc.Set(key, value,time);\n       }\n       /// <summary>\n       /// 获取数据\n       /// </summary>\n       /// <param name=\"key\"></param>\n       /// <returns></returns>\n       public static object Get(string key)\n       {\n           return Mc.Get(key);\n       }\n       /// <summary>\n       /// 删除\n       /// </summary>\n       /// <param name=\"key\"></param>\n       /// <returns></returns>\n       public static bool Delete(string key)\n       {\n           return Mc.KeyExists(key) && Mc.Delete(key);\n       }\n    }\n}\n```\n 改变用户登录方法UserLogin，用户登录成功后生成GUID，将此GUID存入Cookie并以GUID为键将登录用户信息序列化存入Memcache服务器。\n```csharp\npublic ActionResult UserLogin()\n{\n    #region 验证码校验\n    var validateCode = Session[\"validateCode\"] != null ? Session[\"validateCode\"].ToString() : string.Empty;\n    if (string.IsNullOrEmpty(validateCode))\n        return Content(\"no:验证码错误!!\");\n    Session[\"validateCode\"] = null;\n    var txtCode = Request[\"ValidateCode\"];\n    if (!validateCode.Equals(txtCode, StringComparison.InvariantCultureIgnoreCase))\n        return Content(\"no:验证码错误!!\");\n    #endregion\n\n    var userName = Request[\"UserName\"];\n    var userPwd = Request[\"PassWord\"];\n    //查询用户是否存在\n    var user = UserService.LoadEntities(u => u.UserName == userName && u.PassWord == userPwd).FirstOrDefault();\n    if (user == null) return Content(\"no:登录失败\");\n\n    //产生一个GUID值作为Memache的键.\n    var sessionId = Guid.NewGuid().ToString();\n    //将登录用户信息存储到Memcache中。\n    MemcacheHelper.Set(sessionId, SerializeHelper.SerializeToString(user), DateTime.Now.AddMinutes(20));\n    //将Memcache的key以Cookie的形式返回给浏览器。\n    Response.Cookies[\"sessionId\"].Value = sessionId;\n    return Content(\"ok:登录成功\");\n}\n```\n改变登录校验控制器FilterController的OnActionExecuting方法，使其校验方式改为从Memcache服务器中读取Cookie中值为键的对象：\n```csharp\nprotected override void OnActionExecuting(ActionExecutingContext filterContext)\n{\n    base.OnActionExecuting(filterContext);\n    //if (Session[\"user\"] == null)\n    if (Request.Cookies[\"sessionId\"] != null)\n    {\n        var sessionId = Request.Cookies[\"sessionId\"].Value;\n        //根据该值查Memcache.\n        var obj = MemcacheHelper.Get(sessionId);\n        if (obj == null)\n        {\n            filterContext.Result = Redirect(\"/Login/Index\");\n            return;\n        }\n        var user = SerializeHelper.DeserializeToObject<User>(obj.ToString());\n        LoginUser = user;\n        //模拟出滑动过期时间.\n        MemcacheHelper.Set(sessionId, obj, DateTime.Now.AddMinutes(20)); \n    }\n    else\n        filterContext.Result = Redirect(\"/Login/Index\");\n}\n```","slug":"【MVC学习笔记】6.-使用Memcache+Cookie解决分布式系统共享登录状态","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ote0018d00obon6u5ys","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>为了解决单机处理的瓶颈，增强软件的可用性，我们需要将软件部署在多台服务器上启用多个二级子域名以频道化的方式，根据业务功能将网站分布部署在独立的服务器上，或通过负载均衡技术（如：DNS轮询、Radware、F5、LVS等）让多个频道共享一组服务器。当我们将网站程序分部到多台服务器上后，由于Session受实现原理的局限，无法跨服务器同步更新Session，使得登录状态难以通过Session共享。<br><a id=\"more\"></a><br>我们使用MemCache+Cookie方案来解决分布式系统共享登录状态的问题。</p><p>Memcache服务器本身就是一个Socket服务端，内部数据采用键值对的形式存储在服务器的内存中，本质就是一个大型的哈希表。数据的删除采用惰性删除机制。虽然Memcache并没有提供集群功能，但是通过客户端的驱动程序很容易就可以实现Memcache的集群配置。</p><h2 id=\"Memcache使用\"><a href=\"#Memcache使用\" class=\"headerlink\" title=\"Memcache使用\"></a>Memcache使用</h2><ol><li>下载安装<a href=\"http://code.jellycan.com/Memcache/\" target=\"_blank\" rel=\"noopener\">Memcache</a>（Windows平台）<br>（1）将程序解压到磁盘任意位置<br>（2）进入cmd窗口，运行Memcached.exe -d install安装服务，安装后打开服务窗口查看服务是否安装成功。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222028/20180218102319007.png\" alt=\"\"><br>（3）直接在服务管理中启动服务，或者使用cmd命令 net start “Memcache Server”<br>（4）使用Telnet连接到Memcache控制台，验证服务是否正常 telnet 127.0.0.1 11211<br>（5）使用stats指令查看当前Memcache服务器状态。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222028/20180218102458126.png\" alt=\"\"></li><li>程序中的用法<br>（1）在程序中添加 Memcached.ClientLibrary.dll 的引用<br>（2）C#中操作Memcache的代码示例<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] serverlist = &#123; <span class=\"string\">\"192.168.1.100:11211\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"192.168.1.101:11211\"</span>  &#125;;</span><br><span class=\"line\"><span class=\"comment\">// initialize the pool for memcache servers</span></span><br><span class=\"line\">SockIOPool pool = SockIOPool.GetInstance(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">pool.SetServers(serverlist);</span><br><span class=\"line\">pool.Initialize();</span><br><span class=\"line\">mc = <span class=\"keyword\">new</span> MemcacheClient();</span><br><span class=\"line\">mc.PoolName = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">mc.EnableCompression = <span class=\"literal\">false</span>;</span><br><span class=\"line\">pool.Shutdown();<span class=\"comment\">//关闭连接池</span></span><br></pre></td></tr></table></figure></li></ol><h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><p>首先在Common层中引入<a href=\"http://sourceforge.net/projects/memcacheddotnet/\" target=\"_blank\" rel=\"noopener\">Memcached.ClientLibrary.dll</a>，并封装Memcache的帮助类，MemcacheHelper<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Memcached.ClientLibrary;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.Common</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MemcacheHelper</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> MemcachedClient Mc = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">MemcacheHelper</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"comment\">//最好放在配置文件中</span></span><br><span class=\"line\">           <span class=\"keyword\">string</span>[] serverlist = &#123; <span class=\"string\">\"127.0.0.1:11211\"</span>, <span class=\"string\">\"10.0.0.132:11211\"</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">//初始化池</span></span><br><span class=\"line\">           <span class=\"keyword\">var</span> pool = SockIOPool.GetInstance();</span><br><span class=\"line\">           pool.SetServers(serverlist);</span><br><span class=\"line\"></span><br><span class=\"line\">           pool.InitConnections = <span class=\"number\">3</span>;</span><br><span class=\"line\">           pool.MinConnections = <span class=\"number\">3</span>;</span><br><span class=\"line\">           pool.MaxConnections = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">           pool.SocketConnectTimeout = <span class=\"number\">1000</span>;</span><br><span class=\"line\">           pool.SocketTimeout = <span class=\"number\">3000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">           pool.MaintenanceSleep = <span class=\"number\">30</span>;</span><br><span class=\"line\">           pool.Failover = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">           pool.Nagle = <span class=\"literal\">false</span>;</span><br><span class=\"line\">           pool.Initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// 获得客户端实例</span></span><br><span class=\"line\">           Mc = <span class=\"keyword\">new</span> MemcachedClient &#123;EnableCompression = <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 存储数据</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">Set</span>(<span class=\"params\"><span class=\"keyword\">string</span> key,<span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> Mc.Set(key, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">Set</span>(<span class=\"params\"><span class=\"keyword\">string</span> key, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span>,DateTime time</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> Mc.Set(key, <span class=\"keyword\">value</span>,time);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 获取数据</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">object</span> <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">string</span> key</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> Mc.Get(key);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">Delete</span>(<span class=\"params\"><span class=\"keyword\">string</span> key</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> Mc.KeyExists(key) &amp;&amp; Mc.Delete(key);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>改变用户登录方法UserLogin，用户登录成功后生成GUID，将此GUID存入Cookie并以GUID为键将登录用户信息序列化存入Memcache服务器。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">UserLogin</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 验证码校验</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> validateCode = Session[<span class=\"string\">\"validateCode\"</span>] != <span class=\"literal\">null</span> ? Session[<span class=\"string\">\"validateCode\"</span>].ToString() : <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(validateCode))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">\"no:验证码错误!!\"</span>);</span><br><span class=\"line\">    Session[<span class=\"string\">\"validateCode\"</span>] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> txtCode = Request[<span class=\"string\">\"ValidateCode\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!validateCode.Equals(txtCode, StringComparison.InvariantCultureIgnoreCase))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">\"no:验证码错误!!\"</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> userName = Request[<span class=\"string\">\"UserName\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> userPwd = Request[<span class=\"string\">\"PassWord\"</span>];</span><br><span class=\"line\">    <span class=\"comment\">//查询用户是否存在</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> user = UserService.LoadEntities(u =&gt; u.UserName == userName &amp;&amp; u.PassWord == userPwd).FirstOrDefault();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> Content(<span class=\"string\">\"no:登录失败\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//产生一个GUID值作为Memache的键.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sessionId = Guid.NewGuid().ToString();</span><br><span class=\"line\">    <span class=\"comment\">//将登录用户信息存储到Memcache中。</span></span><br><span class=\"line\">    MemcacheHelper.Set(sessionId, SerializeHelper.SerializeToString(user), DateTime.Now.AddMinutes(<span class=\"number\">20</span>));</span><br><span class=\"line\">    <span class=\"comment\">//将Memcache的key以Cookie的形式返回给浏览器。</span></span><br><span class=\"line\">    Response.Cookies[<span class=\"string\">\"sessionId\"</span>].Value = sessionId;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Content(<span class=\"string\">\"ok:登录成功\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>改变登录校验控制器FilterController的OnActionExecuting方法，使其校验方式改为从Memcache服务器中读取Cookie中值为键的对象：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext filterContext</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">base</span>.OnActionExecuting(filterContext);</span><br><span class=\"line\">    <span class=\"comment\">//if (Session[\"user\"] == null)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Request.Cookies[<span class=\"string\">\"sessionId\"</span>] != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sessionId = Request.Cookies[<span class=\"string\">\"sessionId\"</span>].Value;</span><br><span class=\"line\">        <span class=\"comment\">//根据该值查Memcache.</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj = MemcacheHelper.Get(sessionId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            filterContext.Result = Redirect(<span class=\"string\">\"/Login/Index\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> user = SerializeHelper.DeserializeToObject&lt;User&gt;(obj.ToString());</span><br><span class=\"line\">        LoginUser = user;</span><br><span class=\"line\">        <span class=\"comment\">//模拟出滑动过期时间.</span></span><br><span class=\"line\">        MemcacheHelper.Set(sessionId, obj, DateTime.Now.AddMinutes(<span class=\"number\">20</span>)); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        filterContext.Result = Redirect(<span class=\"string\">\"/Login/Index\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>为了解决单机处理的瓶颈，增强软件的可用性，我们需要将软件部署在多台服务器上启用多个二级子域名以频道化的方式，根据业务功能将网站分布部署在独立的服务器上，或通过负载均衡技术（如：DNS轮询、Radware、F5、LVS等）让多个频道共享一组服务器。当我们将网站程序分部到多台服务器上后，由于Session受实现原理的局限，无法跨服务器同步更新Session，使得登录状态难以通过Session共享。<br>","more":"<br>我们使用MemCache+Cookie方案来解决分布式系统共享登录状态的问题。</p><p>Memcache服务器本身就是一个Socket服务端，内部数据采用键值对的形式存储在服务器的内存中，本质就是一个大型的哈希表。数据的删除采用惰性删除机制。虽然Memcache并没有提供集群功能，但是通过客户端的驱动程序很容易就可以实现Memcache的集群配置。</p><h2 id=\"Memcache使用\"><a href=\"#Memcache使用\" class=\"headerlink\" title=\"Memcache使用\"></a>Memcache使用</h2><ol><li>下载安装<a href=\"http://code.jellycan.com/Memcache/\" target=\"_blank\" rel=\"noopener\">Memcache</a>（Windows平台）<br>（1）将程序解压到磁盘任意位置<br>（2）进入cmd窗口，运行Memcached.exe -d install安装服务，安装后打开服务窗口查看服务是否安装成功。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222028/20180218102319007.png\" alt=\"\"><br>（3）直接在服务管理中启动服务，或者使用cmd命令 net start “Memcache Server”<br>（4）使用Telnet连接到Memcache控制台，验证服务是否正常 telnet 127.0.0.1 11211<br>（5）使用stats指令查看当前Memcache服务器状态。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222028/20180218102458126.png\" alt=\"\"></li><li>程序中的用法<br>（1）在程序中添加 Memcached.ClientLibrary.dll 的引用<br>（2）C#中操作Memcache的代码示例<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] serverlist = &#123; <span class=\"string\">\"192.168.1.100:11211\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"192.168.1.101:11211\"</span>  &#125;;</span><br><span class=\"line\"><span class=\"comment\">// initialize the pool for memcache servers</span></span><br><span class=\"line\">SockIOPool pool = SockIOPool.GetInstance(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">pool.SetServers(serverlist);</span><br><span class=\"line\">pool.Initialize();</span><br><span class=\"line\">mc = <span class=\"keyword\">new</span> MemcacheClient();</span><br><span class=\"line\">mc.PoolName = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">mc.EnableCompression = <span class=\"literal\">false</span>;</span><br><span class=\"line\">pool.Shutdown();<span class=\"comment\">//关闭连接池</span></span><br></pre></td></tr></table></figure></li></ol><h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><p>首先在Common层中引入<a href=\"http://sourceforge.net/projects/memcacheddotnet/\" target=\"_blank\" rel=\"noopener\">Memcached.ClientLibrary.dll</a>，并封装Memcache的帮助类，MemcacheHelper<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Memcached.ClientLibrary;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.Common</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MemcacheHelper</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> MemcachedClient Mc = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">MemcacheHelper</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"comment\">//最好放在配置文件中</span></span><br><span class=\"line\">           <span class=\"keyword\">string</span>[] serverlist = &#123; <span class=\"string\">\"127.0.0.1:11211\"</span>, <span class=\"string\">\"10.0.0.132:11211\"</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">//初始化池</span></span><br><span class=\"line\">           <span class=\"keyword\">var</span> pool = SockIOPool.GetInstance();</span><br><span class=\"line\">           pool.SetServers(serverlist);</span><br><span class=\"line\"></span><br><span class=\"line\">           pool.InitConnections = <span class=\"number\">3</span>;</span><br><span class=\"line\">           pool.MinConnections = <span class=\"number\">3</span>;</span><br><span class=\"line\">           pool.MaxConnections = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">           pool.SocketConnectTimeout = <span class=\"number\">1000</span>;</span><br><span class=\"line\">           pool.SocketTimeout = <span class=\"number\">3000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">           pool.MaintenanceSleep = <span class=\"number\">30</span>;</span><br><span class=\"line\">           pool.Failover = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">           pool.Nagle = <span class=\"literal\">false</span>;</span><br><span class=\"line\">           pool.Initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// 获得客户端实例</span></span><br><span class=\"line\">           Mc = <span class=\"keyword\">new</span> MemcachedClient &#123;EnableCompression = <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 存储数据</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">Set</span>(<span class=\"params\"><span class=\"keyword\">string</span> key,<span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> Mc.Set(key, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">Set</span>(<span class=\"params\"><span class=\"keyword\">string</span> key, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span>,DateTime time</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> Mc.Set(key, <span class=\"keyword\">value</span>,time);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 获取数据</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">object</span> <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">string</span> key</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> Mc.Get(key);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">Delete</span>(<span class=\"params\"><span class=\"keyword\">string</span> key</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> Mc.KeyExists(key) &amp;&amp; Mc.Delete(key);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>改变用户登录方法UserLogin，用户登录成功后生成GUID，将此GUID存入Cookie并以GUID为键将登录用户信息序列化存入Memcache服务器。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">UserLogin</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 验证码校验</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> validateCode = Session[<span class=\"string\">\"validateCode\"</span>] != <span class=\"literal\">null</span> ? Session[<span class=\"string\">\"validateCode\"</span>].ToString() : <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(validateCode))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">\"no:验证码错误!!\"</span>);</span><br><span class=\"line\">    Session[<span class=\"string\">\"validateCode\"</span>] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> txtCode = Request[<span class=\"string\">\"ValidateCode\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!validateCode.Equals(txtCode, StringComparison.InvariantCultureIgnoreCase))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">\"no:验证码错误!!\"</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> userName = Request[<span class=\"string\">\"UserName\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> userPwd = Request[<span class=\"string\">\"PassWord\"</span>];</span><br><span class=\"line\">    <span class=\"comment\">//查询用户是否存在</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> user = UserService.LoadEntities(u =&gt; u.UserName == userName &amp;&amp; u.PassWord == userPwd).FirstOrDefault();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> Content(<span class=\"string\">\"no:登录失败\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//产生一个GUID值作为Memache的键.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sessionId = Guid.NewGuid().ToString();</span><br><span class=\"line\">    <span class=\"comment\">//将登录用户信息存储到Memcache中。</span></span><br><span class=\"line\">    MemcacheHelper.Set(sessionId, SerializeHelper.SerializeToString(user), DateTime.Now.AddMinutes(<span class=\"number\">20</span>));</span><br><span class=\"line\">    <span class=\"comment\">//将Memcache的key以Cookie的形式返回给浏览器。</span></span><br><span class=\"line\">    Response.Cookies[<span class=\"string\">\"sessionId\"</span>].Value = sessionId;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Content(<span class=\"string\">\"ok:登录成功\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>改变登录校验控制器FilterController的OnActionExecuting方法，使其校验方式改为从Memcache服务器中读取Cookie中值为键的对象：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext filterContext</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">base</span>.OnActionExecuting(filterContext);</span><br><span class=\"line\">    <span class=\"comment\">//if (Session[\"user\"] == null)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Request.Cookies[<span class=\"string\">\"sessionId\"</span>] != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sessionId = Request.Cookies[<span class=\"string\">\"sessionId\"</span>].Value;</span><br><span class=\"line\">        <span class=\"comment\">//根据该值查Memcache.</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj = MemcacheHelper.Get(sessionId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            filterContext.Result = Redirect(<span class=\"string\">\"/Login/Index\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> user = SerializeHelper.DeserializeToObject&lt;User&gt;(obj.ToString());</span><br><span class=\"line\">        LoginUser = user;</span><br><span class=\"line\">        <span class=\"comment\">//模拟出滑动过期时间.</span></span><br><span class=\"line\">        MemcacheHelper.Set(sessionId, obj, DateTime.Now.AddMinutes(<span class=\"number\">20</span>)); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        filterContext.Result = Redirect(<span class=\"string\">\"/Login/Index\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"【单例】使用同步基元变量来检测程序是否已运行","abbrlink":16660,"date":"2017-08-07T07:03:01.000Z","_content":"```csharp\nstatic class Program\n{\n    /// <summary>\n    /// 应用程序的主入口点。\n    /// </summary>\n    [STAThread]\n    static void Main()\n    {\n        var instance = new Mutex(true, \"SingleStart\", out bool createdNew); //同步基元变量   \n        if (createdNew)\n        {\n            Application.Run(new Form());\n            instance.ReleaseMutex();\n        }\n        else\n        {\n            Application.Exit();\n        }\n     }\n}\n```\n<!-- more -->","source":"_posts/【单例】使用同步基元变量来检测程序是否已运行.md","raw":"---\ntitle: 【单例】使用同步基元变量来检测程序是否已运行\ntags:\n  - Winform\n  - '单例，C#'\nabbrlink: 16660\ndate: 2017-08-07 15:03:01\n---\n```csharp\nstatic class Program\n{\n    /// <summary>\n    /// 应用程序的主入口点。\n    /// </summary>\n    [STAThread]\n    static void Main()\n    {\n        var instance = new Mutex(true, \"SingleStart\", out bool createdNew); //同步基元变量   \n        if (createdNew)\n        {\n            Application.Run(new Form());\n            instance.ReleaseMutex();\n        }\n        else\n        {\n            Application.Exit();\n        }\n     }\n}\n```\n<!-- more -->","slug":"【单例】使用同步基元变量来检测程序是否已运行","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24otf001bd00o1y9rfp2z","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 应用程序的主入口点。</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">STAThread</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> Mutex(<span class=\"literal\">true</span>, <span class=\"string\">\"SingleStart\"</span>, <span class=\"keyword\">out</span> <span class=\"keyword\">bool</span> createdNew); <span class=\"comment\">//同步基元变量   </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (createdNew)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Application.Run(<span class=\"keyword\">new</span> Form());</span><br><span class=\"line\">            instance.ReleaseMutex();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Application.Exit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><a id=\"more\"></a><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 应用程序的主入口点。</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">STAThread</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> Mutex(<span class=\"literal\">true</span>, <span class=\"string\">\"SingleStart\"</span>, <span class=\"keyword\">out</span> <span class=\"keyword\">bool</span> createdNew); <span class=\"comment\">//同步基元变量   </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (createdNew)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Application.Run(<span class=\"keyword\">new</span> Form());</span><br><span class=\"line\">            instance.ReleaseMutex();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Application.Exit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<!-- rebuild by neat -->"},{"title":"【新手学Java】使用beanUtils控制javabean","abbrlink":33316,"date":"2016-10-03T15:28:21.000Z","_content":"使用beanUtils控制javabean\n<!-- more -->\n\n使用BeanUtils设置/读取属性的值以及默认支持的自动转化:\n```java\n@Test\n//使用BeanUtils设置/读取属性的值以及自动转化\npublic void test1() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException{\n    Person p=new Person();\n    //使用BeanUtils设置属性的值\n    BeanUtils.setProperty(p, \"username\", \"李四\");\n    //使用BeanUtils读取属性的值        \n    System.out.println(BeanUtils.getProperty(p, \"username\"););\n    //类型不同依然可以自动转化,BeanUtils默认支持八种基本类型的转换\n    BeanUtils.setProperty(p,\"age\", \"123\");\n    System.out.println(p.getAge());\n    \n}\n```\n注册已有的转化器来完成复杂类型的自动转化:\n```java\n@Test\n//注册已有的转化器来完成复杂类型的自动转化\npublic void test3() throws IllegalAccessException, InvocationTargetException{\n    Person p=new Person();\n    String birthday=\"1995-05-05\";\n    \n    //注册Apache提供的时间转换器\n    ConvertUtils.register(new DateLocaleConverter(), Date.class);\n    \n    BeanUtils.setProperty(p, \"birthday\", birthday);\n    \n    System.out.println(p.getBirthday());\n}\n```\n Apache已有的时间转化器中不能很好地过滤空字符串，若待转换字符串为空则会抛出异常；而现实业务非常复杂，Apache无法提供给我们所有的类型转化方法，需要时我们可以注册自己需要的转换器完成业务需求。\n \n 注册自己的转换器完成时间转化：\n ```java\n@Test\n//注册自己的转换器完成时间转化\npublic void test2() throws IllegalAccessException, InvocationTargetException{\n    Person p=new Person();\n    String birthday=\"1995-05-05\";\n    \n    //为了日期可以赋值到bean的属性,我们给benUtils注册日期转换器\n    ConvertUtils.register(new Converter(){\n        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n        public Object convert(Class type,Object value){\n            if(value==null){\n                return null;\n            }\n            if(!(value instanceof String)){\n                throw new ConversionException(\"只支持String类型的转换\");\n            }\n            String str=(String) value;\n            if(str.trim().equals(\"\")){\n                return null;\n            }\n            SimpleDateFormat dateformate=new SimpleDateFormat(\"yyyy-MM-dd\");\n            try {\n                return dateformate.parse(str);\n            } catch (ParseException e) {\n                throw new RuntimeException(e);\n            }                \n        }\n    }, Date.class);\n    \n    BeanUtils.setProperty(p, \"birthday\", birthday);\n    \n    System.out.println(p.getBirthday());\n}\n```\n直接使用map对象填充类:\n```java\n@Test\n//直接使用map对象填充类\npublic void test4() throws Exception{\n    HashMap<String, String> map=new HashMap<String,String>();\n    map.put(\"username\",\"李四\");\n    map.put(\"password\",\"lisi\");\n    map.put(\"age\",\"26\");\n    map.put(\"birthday\",\"1990-05-05\");\n    \n    ConvertUtils.register(new DateLocaleConverter() , Date.class);\n    \n    Person p=new Person();\n    BeanUtils.populate(p, map);\n    \n    System.out.println(p.getUsername());\n    System.out.println(p.getPassword());\n    System.out.println(p.getAge());\n    System.out.println(p.getBirthday());\n    \n}","source":"_posts/【新手学Java】使用beanUtils控制javabean.md","raw":"---\ntitle: 【新手学Java】使用beanUtils控制javabean\ntags:\n  - Java\n  - beanUtils\n  - javabean\nabbrlink: 33316\ndate: 2016-10-03 23:28:21\n---\n使用beanUtils控制javabean\n<!-- more -->\n\n使用BeanUtils设置/读取属性的值以及默认支持的自动转化:\n```java\n@Test\n//使用BeanUtils设置/读取属性的值以及自动转化\npublic void test1() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException{\n    Person p=new Person();\n    //使用BeanUtils设置属性的值\n    BeanUtils.setProperty(p, \"username\", \"李四\");\n    //使用BeanUtils读取属性的值        \n    System.out.println(BeanUtils.getProperty(p, \"username\"););\n    //类型不同依然可以自动转化,BeanUtils默认支持八种基本类型的转换\n    BeanUtils.setProperty(p,\"age\", \"123\");\n    System.out.println(p.getAge());\n    \n}\n```\n注册已有的转化器来完成复杂类型的自动转化:\n```java\n@Test\n//注册已有的转化器来完成复杂类型的自动转化\npublic void test3() throws IllegalAccessException, InvocationTargetException{\n    Person p=new Person();\n    String birthday=\"1995-05-05\";\n    \n    //注册Apache提供的时间转换器\n    ConvertUtils.register(new DateLocaleConverter(), Date.class);\n    \n    BeanUtils.setProperty(p, \"birthday\", birthday);\n    \n    System.out.println(p.getBirthday());\n}\n```\n Apache已有的时间转化器中不能很好地过滤空字符串，若待转换字符串为空则会抛出异常；而现实业务非常复杂，Apache无法提供给我们所有的类型转化方法，需要时我们可以注册自己需要的转换器完成业务需求。\n \n 注册自己的转换器完成时间转化：\n ```java\n@Test\n//注册自己的转换器完成时间转化\npublic void test2() throws IllegalAccessException, InvocationTargetException{\n    Person p=new Person();\n    String birthday=\"1995-05-05\";\n    \n    //为了日期可以赋值到bean的属性,我们给benUtils注册日期转换器\n    ConvertUtils.register(new Converter(){\n        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n        public Object convert(Class type,Object value){\n            if(value==null){\n                return null;\n            }\n            if(!(value instanceof String)){\n                throw new ConversionException(\"只支持String类型的转换\");\n            }\n            String str=(String) value;\n            if(str.trim().equals(\"\")){\n                return null;\n            }\n            SimpleDateFormat dateformate=new SimpleDateFormat(\"yyyy-MM-dd\");\n            try {\n                return dateformate.parse(str);\n            } catch (ParseException e) {\n                throw new RuntimeException(e);\n            }                \n        }\n    }, Date.class);\n    \n    BeanUtils.setProperty(p, \"birthday\", birthday);\n    \n    System.out.println(p.getBirthday());\n}\n```\n直接使用map对象填充类:\n```java\n@Test\n//直接使用map对象填充类\npublic void test4() throws Exception{\n    HashMap<String, String> map=new HashMap<String,String>();\n    map.put(\"username\",\"李四\");\n    map.put(\"password\",\"lisi\");\n    map.put(\"age\",\"26\");\n    map.put(\"birthday\",\"1990-05-05\");\n    \n    ConvertUtils.register(new DateLocaleConverter() , Date.class);\n    \n    Person p=new Person();\n    BeanUtils.populate(p, map);\n    \n    System.out.println(p.getUsername());\n    System.out.println(p.getPassword());\n    System.out.println(p.getAge());\n    System.out.println(p.getBirthday());\n    \n}","slug":"【新手学Java】使用beanUtils控制javabean","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24oti001dd00oie8cbvdh","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>使用beanUtils控制javabean<br><a id=\"more\"></a></p><p>使用BeanUtils设置/读取属性的值以及默认支持的自动转化:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//使用BeanUtils设置/读取属性的值以及自动转化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException</span>&#123;</span><br><span class=\"line\">    Person p=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    <span class=\"comment\">//使用BeanUtils设置属性的值</span></span><br><span class=\"line\">    BeanUtils.setProperty(p, <span class=\"string\">\"username\"</span>, <span class=\"string\">\"李四\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//使用BeanUtils读取属性的值        </span></span><br><span class=\"line\">    System.out.println(BeanUtils.getProperty(p, <span class=\"string\">\"username\"</span>););</span><br><span class=\"line\">    <span class=\"comment\">//类型不同依然可以自动转化,BeanUtils默认支持八种基本类型的转换</span></span><br><span class=\"line\">    BeanUtils.setProperty(p,<span class=\"string\">\"age\"</span>, <span class=\"string\">\"123\"</span>);</span><br><span class=\"line\">    System.out.println(p.getAge());</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>注册已有的转化器来完成复杂类型的自动转化:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//注册已有的转化器来完成复杂类型的自动转化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IllegalAccessException, InvocationTargetException</span>&#123;</span><br><span class=\"line\">    Person p=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    String birthday=<span class=\"string\">\"1995-05-05\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//注册Apache提供的时间转换器</span></span><br><span class=\"line\">    ConvertUtils.register(<span class=\"keyword\">new</span> DateLocaleConverter(), Date.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    BeanUtils.setProperty(p, <span class=\"string\">\"birthday\"</span>, birthday);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(p.getBirthday());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Apache已有的时间转化器中不能很好地过滤空字符串，若待转换字符串为空则会抛出异常；而现实业务非常复杂，Apache无法提供给我们所有的类型转化方法，需要时我们可以注册自己需要的转换器完成业务需求。</p><p>注册自己的转换器完成时间转化：<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//注册自己的转换器完成时间转化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IllegalAccessException, InvocationTargetException</span>&#123;</span><br><span class=\"line\">    Person p=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    String birthday=<span class=\"string\">\"1995-05-05\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//为了日期可以赋值到bean的属性,我们给benUtils注册日期转换器</span></span><br><span class=\"line\">    ConvertUtils.register(<span class=\"keyword\">new</span> Converter()&#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"unchecked\"</span>, <span class=\"string\">\"rawtypes\"</span> &#125;)</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">convert</span><span class=\"params\">(Class type,Object value)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(value==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!(value <span class=\"keyword\">instanceof</span> String))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConversionException(<span class=\"string\">\"只支持String类型的转换\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String str=(String) value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(str.trim().equals(<span class=\"string\">\"\"</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            SimpleDateFormat dateformate=<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> dateformate.parse(str);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</span><br><span class=\"line\">            &#125;                </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, Date.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    BeanUtils.setProperty(p, <span class=\"string\">\"birthday\"</span>, birthday);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(p.getBirthday());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>直接使用map对象填充类:<br>```java<br>@Test<br>//直接使用map对象填充类<br>public void test4() throws Exception{<br>HashMap<string ,=\"\" string=\"\">map=new HashMap<string ,string=\"\">();<br>map.put(“username”,”李四”);<br>map.put(“password”,”lisi”);<br>map.put(“age”,”26”);<br>map.put(“birthday”,”1990-05-05”);</string></string></p><pre><code>ConvertUtils.register(new DateLocaleConverter() , Date.class);\n\nPerson p=new Person();\nBeanUtils.populate(p, map);\n\nSystem.out.println(p.getUsername());\nSystem.out.println(p.getPassword());\nSystem.out.println(p.getAge());\nSystem.out.println(p.getBirthday());\n</code></pre><p>}</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>使用beanUtils控制javabean<br>","more":"</p><p>使用BeanUtils设置/读取属性的值以及默认支持的自动转化:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//使用BeanUtils设置/读取属性的值以及自动转化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException</span>&#123;</span><br><span class=\"line\">    Person p=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    <span class=\"comment\">//使用BeanUtils设置属性的值</span></span><br><span class=\"line\">    BeanUtils.setProperty(p, <span class=\"string\">\"username\"</span>, <span class=\"string\">\"李四\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//使用BeanUtils读取属性的值        </span></span><br><span class=\"line\">    System.out.println(BeanUtils.getProperty(p, <span class=\"string\">\"username\"</span>););</span><br><span class=\"line\">    <span class=\"comment\">//类型不同依然可以自动转化,BeanUtils默认支持八种基本类型的转换</span></span><br><span class=\"line\">    BeanUtils.setProperty(p,<span class=\"string\">\"age\"</span>, <span class=\"string\">\"123\"</span>);</span><br><span class=\"line\">    System.out.println(p.getAge());</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>注册已有的转化器来完成复杂类型的自动转化:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//注册已有的转化器来完成复杂类型的自动转化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IllegalAccessException, InvocationTargetException</span>&#123;</span><br><span class=\"line\">    Person p=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    String birthday=<span class=\"string\">\"1995-05-05\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//注册Apache提供的时间转换器</span></span><br><span class=\"line\">    ConvertUtils.register(<span class=\"keyword\">new</span> DateLocaleConverter(), Date.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    BeanUtils.setProperty(p, <span class=\"string\">\"birthday\"</span>, birthday);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(p.getBirthday());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Apache已有的时间转化器中不能很好地过滤空字符串，若待转换字符串为空则会抛出异常；而现实业务非常复杂，Apache无法提供给我们所有的类型转化方法，需要时我们可以注册自己需要的转换器完成业务需求。</p><p>注册自己的转换器完成时间转化：<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//注册自己的转换器完成时间转化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IllegalAccessException, InvocationTargetException</span>&#123;</span><br><span class=\"line\">    Person p=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    String birthday=<span class=\"string\">\"1995-05-05\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//为了日期可以赋值到bean的属性,我们给benUtils注册日期转换器</span></span><br><span class=\"line\">    ConvertUtils.register(<span class=\"keyword\">new</span> Converter()&#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"unchecked\"</span>, <span class=\"string\">\"rawtypes\"</span> &#125;)</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">convert</span><span class=\"params\">(Class type,Object value)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(value==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!(value <span class=\"keyword\">instanceof</span> String))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConversionException(<span class=\"string\">\"只支持String类型的转换\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String str=(String) value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(str.trim().equals(<span class=\"string\">\"\"</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            SimpleDateFormat dateformate=<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> dateformate.parse(str);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</span><br><span class=\"line\">            &#125;                </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, Date.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    BeanUtils.setProperty(p, <span class=\"string\">\"birthday\"</span>, birthday);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(p.getBirthday());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>直接使用map对象填充类:<br>```java<br>@Test<br>//直接使用map对象填充类<br>public void test4() throws Exception{<br>HashMap<string ,=\"\" string=\"\">map=new HashMap<string ,string=\"\">();<br>map.put(“username”,”李四”);<br>map.put(“password”,”lisi”);<br>map.put(“age”,”26”);<br>map.put(“birthday”,”1990-05-05”);</string></string></p><pre><code>ConvertUtils.register(new DateLocaleConverter() , Date.class);\n\nPerson p=new Person();\nBeanUtils.populate(p, map);\n\nSystem.out.println(p.getUsername());\nSystem.out.println(p.getPassword());\nSystem.out.println(p.getAge());\nSystem.out.println(p.getBirthday());\n</code></pre><p>}</p><!-- rebuild by neat -->"},{"title":"【新手学Java】使用内省(Introspector)操作JavaBean属性","abbrlink":50715,"date":"2016-10-03T15:15:30.000Z","_content":"使用内省(Introspector)操作\n<!-- more -->\n获取类bean中的所有属性:\n```java\n@Test\n//获取类bean中的所有属性\npublic void test1() throws Exception{\n    BeanInfo info = Introspector.getBeanInfo(Person.class);\n    PropertyDescriptor[] decriptors = info.getPropertyDescriptors();\n    for(PropertyDescriptor decriptor : decriptors){\n        //输出属性的名称\n        System.out.println(decriptor.getName());\n        //输出属性的类型\n        System.out.println(decriptor.getPropertyType());\n    }\n        \n}\n```\n读/写bean中某个属性:\n```java\n@Test\n//操纵bean中某个属性\npublic void test2() throws Exception{\n    Person p=new Person();\n    \n    PropertyDescriptor decriptor = new PropertyDescriptor(\"username\",Person.class);\n    \n    //得到属性的写方法\n    Method method=decriptor.getWriteMethod();\n    method.invoke(p, \"张三\");\n\n    //得到属性的读方法\n    method=decriptor.getReadMethod();\n    String username= (String) method.invoke(p);\n    System.out.println(username);\n}\n```","source":"_posts/【新手学Java】使用内省(Introspector)操作JavaBean属性.md","raw":"---\ntitle: 【新手学Java】使用内省(Introspector)操作JavaBean属性\nabbrlink: 50715\ndate: 2016-10-03 23:15:30\ntags:\n---\n使用内省(Introspector)操作\n<!-- more -->\n获取类bean中的所有属性:\n```java\n@Test\n//获取类bean中的所有属性\npublic void test1() throws Exception{\n    BeanInfo info = Introspector.getBeanInfo(Person.class);\n    PropertyDescriptor[] decriptors = info.getPropertyDescriptors();\n    for(PropertyDescriptor decriptor : decriptors){\n        //输出属性的名称\n        System.out.println(decriptor.getName());\n        //输出属性的类型\n        System.out.println(decriptor.getPropertyType());\n    }\n        \n}\n```\n读/写bean中某个属性:\n```java\n@Test\n//操纵bean中某个属性\npublic void test2() throws Exception{\n    Person p=new Person();\n    \n    PropertyDescriptor decriptor = new PropertyDescriptor(\"username\",Person.class);\n    \n    //得到属性的写方法\n    Method method=decriptor.getWriteMethod();\n    method.invoke(p, \"张三\");\n\n    //得到属性的读方法\n    method=decriptor.getReadMethod();\n    String username= (String) method.invoke(p);\n    System.out.println(username);\n}\n```","slug":"【新手学Java】使用内省(Introspector)操作JavaBean属性","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24otj001fd00ozvdwdl0r","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>使用内省(Introspector)操作<br><a id=\"more\"></a><br>获取类bean中的所有属性:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//获取类bean中的所有属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    BeanInfo info = Introspector.getBeanInfo(Person.class);</span><br><span class=\"line\">    PropertyDescriptor[] decriptors = info.getPropertyDescriptors();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(PropertyDescriptor decriptor : decriptors)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//输出属性的名称</span></span><br><span class=\"line\">        System.out.println(decriptor.getName());</span><br><span class=\"line\">        <span class=\"comment\">//输出属性的类型</span></span><br><span class=\"line\">        System.out.println(decriptor.getPropertyType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>读/写bean中某个属性:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//操纵bean中某个属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Person p=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    </span><br><span class=\"line\">    PropertyDescriptor decriptor = <span class=\"keyword\">new</span> PropertyDescriptor(<span class=\"string\">\"username\"</span>,Person.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//得到属性的写方法</span></span><br><span class=\"line\">    Method method=decriptor.getWriteMethod();</span><br><span class=\"line\">    method.invoke(p, <span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到属性的读方法</span></span><br><span class=\"line\">    method=decriptor.getReadMethod();</span><br><span class=\"line\">    String username= (String) method.invoke(p);</span><br><span class=\"line\">    System.out.println(username);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>使用内省(Introspector)操作<br>","more":"<br>获取类bean中的所有属性:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//获取类bean中的所有属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    BeanInfo info = Introspector.getBeanInfo(Person.class);</span><br><span class=\"line\">    PropertyDescriptor[] decriptors = info.getPropertyDescriptors();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(PropertyDescriptor decriptor : decriptors)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//输出属性的名称</span></span><br><span class=\"line\">        System.out.println(decriptor.getName());</span><br><span class=\"line\">        <span class=\"comment\">//输出属性的类型</span></span><br><span class=\"line\">        System.out.println(decriptor.getPropertyType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>读/写bean中某个属性:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//操纵bean中某个属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Person p=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    </span><br><span class=\"line\">    PropertyDescriptor decriptor = <span class=\"keyword\">new</span> PropertyDescriptor(<span class=\"string\">\"username\"</span>,Person.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//得到属性的写方法</span></span><br><span class=\"line\">    Method method=decriptor.getWriteMethod();</span><br><span class=\"line\">    method.invoke(p, <span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到属性的读方法</span></span><br><span class=\"line\">    method=decriptor.getReadMethod();</span><br><span class=\"line\">    String username= (String) method.invoke(p);</span><br><span class=\"line\">    System.out.println(username);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"【新手学Java】反射学习笔记","abbrlink":16721,"date":"2016-10-03T11:11:11.000Z","_content":"示例类代码\n<!-- more -->\n\n```java\n@SuppressWarnings(\"unused\")\npublic class Person {\n    public String Name;\n    private int Age;\n    public Gender Gender;\n    private static String Species = \"人类\";\n    public Person(){\n        Name=\"佚名\";\n        Age=-1;\n    }\n    public Person(String name){\n        Name=name;\n    }\n    private Person(String name,int age){\n        Name=name;\n        Age=age;\n    }    \n    private Person(Gender g){\n        Gender=g;\n    }\n    public void Run(){\n        System.out.println(Name+\" 跑!\");\n    }\n    public void Attack(){\n        System.out.println(Name+\" 打!\");\n    }\n    public void Attack(String name){\n        System.out.println(Name+\" 打 \"+name+\"!\");\n    }\n    private void Eat(String food){\n        System.out.println(Name+\" 吃 \"+food);\n    }\n    public void Introduce()\n    {\n        System.out.println(\"我叫\"+Name+\",我今年\"+Age+\"岁了。\");\n    }\n    public static void PlayGame(String gameName){\n        System.out.println(\"玩 \"+gameName+\" 游戏\");\n    }\n    public static void main(String[] args){\n        System.out.println(\"main\");\n        for(String s:args)\n            System.out.println(s);\n    }\n}\n\nenum Gender{\n    Male,Female\n}\n```\n反射类的无参构造函数:\n```java\n@Test\n//反射类的无参构造函数\npublic void constructor1() throws Exception{\n    Class clazz = Class.forName(\"pro.shaowei.reflect.Person\");\n    Constructor c=clazz.getConstructor();\n    Person p = (Person) c.newInstance();\n    Person p1 = (Person) clazz.newInstance();\n    p.Introduce();\n    p.Run();\n    p1.Introduce();\n    p1.Run();\n}\n```\n反射类的有参构造函数:\n```java\n@Test\n//反射类的有参构造函数\npublic void constructor2() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Constructor c=clazz.getConstructor(String.class);\n    Person p=((Person) c.newInstance(\"张三\"));\n    p.Introduce();\n    p.Run();\n}\n```\n反射类的私有构造函数:\n```java\n@Test\n//反射类的私有构造函数\npublic void constructor3() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    //反射私有构造函数时必须从使用 getDeclaredConstructor 方法\n    Constructor c=clazz.getDeclaredConstructor(String.class,int.class);\n    c.setAccessible(true);//暴力反射\n    Person p=((Person) c.newInstance(\"张三\",25));\n    p.Introduce();\n    p.Run();\n}\n```\n反射类的公有无参方法:\n```java\n@Test\n//反射类的公有无参方法\npublic void method1() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Person p=(Person) clazz.newInstance();\n    Method method=clazz.getMethod(\"Run\");\n    method.invoke(p);\n}\n```\n反射类的公有有参方法:\n```java\n@Test\n//反射类的公有有参方法\npublic void method2() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Person p=(Person) clazz.newInstance();\n    Method method=clazz.getMethod(\"Attack\",String.class);\n    method.invoke(p,\"李四\");\n}\n```\n反射类的私有有参方法:\n```java\n@Test\n//反射类的私有有参方法\npublic void method3() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Person p=(Person) clazz.newInstance();\n    Method method=clazz.getDeclaredMethod(\"Eat\",String.class);\n    method.setAccessible(true);\n    method.invoke(p,\"香蕉\");\n}\n```\n反射类的静态有参方法:\n```java\n@Test\n//反射类的静态有参方法\npublic void method4() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Person p=(Person) clazz.newInstance();\n    Method method=clazz.getDeclaredMethod(\"PlayGame\",String.class);\n    method.setAccessible(true);\n    method.invoke(p,\"扫雷\");\n}\n```\n反射类的main方法:\n```java\n@Test\n//反射类的main方法\npublic void method5() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Person p=(Person) clazz.newInstance();\n    Method method=clazz.getDeclaredMethod(\"main\",String[].class);\n    method.setAccessible(true);\n    method.invoke(p,(Object)new String[]{\"1\",\"2\"});\n}\n```\n反射类公有的字段:\n```java\n@Test\n//反射类公有的字段\npublic void field1() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Person p=(Person) clazz.newInstance();\n    Field field=clazz.getField(\"Name\");\n    System.out.println(field.get(p));\n    field.set(p, \"王五\");\n    p.Introduce();\n}\n\n```\n反射类私有的字段:\n```java\n@Test\n//反射类私有的字段\npublic void field2() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Person p=(Person) clazz.newInstance();\n    Field field=clazz.getDeclaredField(\"Age\");\n    field.setAccessible(true);\n    System.out.println(field.get(p));\n    field.set(p, 7);\n    p.Introduce();\n}\n```\n反射类私有静态的字段:\n```java\n@Test\n//反射类私有静态的字段\npublic void field3() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Person p=(Person) clazz.newInstance();\n    Field field=clazz.getDeclaredField(\"Species\");\n    field.setAccessible(true);\n    System.out.println(field.get(p));\n    field.set(p, \"不死族\");\n    System.out.println(field.get(p));\n}\n```","source":"_posts/【新手学Java】反射学习笔记.md","raw":"---\ntitle: 【新手学Java】反射学习笔记\ntags:\n  - Java\n  - 反射\nabbrlink: 16721\ndate: 2016-10-03 19:11:11\n---\n示例类代码\n<!-- more -->\n\n```java\n@SuppressWarnings(\"unused\")\npublic class Person {\n    public String Name;\n    private int Age;\n    public Gender Gender;\n    private static String Species = \"人类\";\n    public Person(){\n        Name=\"佚名\";\n        Age=-1;\n    }\n    public Person(String name){\n        Name=name;\n    }\n    private Person(String name,int age){\n        Name=name;\n        Age=age;\n    }    \n    private Person(Gender g){\n        Gender=g;\n    }\n    public void Run(){\n        System.out.println(Name+\" 跑!\");\n    }\n    public void Attack(){\n        System.out.println(Name+\" 打!\");\n    }\n    public void Attack(String name){\n        System.out.println(Name+\" 打 \"+name+\"!\");\n    }\n    private void Eat(String food){\n        System.out.println(Name+\" 吃 \"+food);\n    }\n    public void Introduce()\n    {\n        System.out.println(\"我叫\"+Name+\",我今年\"+Age+\"岁了。\");\n    }\n    public static void PlayGame(String gameName){\n        System.out.println(\"玩 \"+gameName+\" 游戏\");\n    }\n    public static void main(String[] args){\n        System.out.println(\"main\");\n        for(String s:args)\n            System.out.println(s);\n    }\n}\n\nenum Gender{\n    Male,Female\n}\n```\n反射类的无参构造函数:\n```java\n@Test\n//反射类的无参构造函数\npublic void constructor1() throws Exception{\n    Class clazz = Class.forName(\"pro.shaowei.reflect.Person\");\n    Constructor c=clazz.getConstructor();\n    Person p = (Person) c.newInstance();\n    Person p1 = (Person) clazz.newInstance();\n    p.Introduce();\n    p.Run();\n    p1.Introduce();\n    p1.Run();\n}\n```\n反射类的有参构造函数:\n```java\n@Test\n//反射类的有参构造函数\npublic void constructor2() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Constructor c=clazz.getConstructor(String.class);\n    Person p=((Person) c.newInstance(\"张三\"));\n    p.Introduce();\n    p.Run();\n}\n```\n反射类的私有构造函数:\n```java\n@Test\n//反射类的私有构造函数\npublic void constructor3() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    //反射私有构造函数时必须从使用 getDeclaredConstructor 方法\n    Constructor c=clazz.getDeclaredConstructor(String.class,int.class);\n    c.setAccessible(true);//暴力反射\n    Person p=((Person) c.newInstance(\"张三\",25));\n    p.Introduce();\n    p.Run();\n}\n```\n反射类的公有无参方法:\n```java\n@Test\n//反射类的公有无参方法\npublic void method1() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Person p=(Person) clazz.newInstance();\n    Method method=clazz.getMethod(\"Run\");\n    method.invoke(p);\n}\n```\n反射类的公有有参方法:\n```java\n@Test\n//反射类的公有有参方法\npublic void method2() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Person p=(Person) clazz.newInstance();\n    Method method=clazz.getMethod(\"Attack\",String.class);\n    method.invoke(p,\"李四\");\n}\n```\n反射类的私有有参方法:\n```java\n@Test\n//反射类的私有有参方法\npublic void method3() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Person p=(Person) clazz.newInstance();\n    Method method=clazz.getDeclaredMethod(\"Eat\",String.class);\n    method.setAccessible(true);\n    method.invoke(p,\"香蕉\");\n}\n```\n反射类的静态有参方法:\n```java\n@Test\n//反射类的静态有参方法\npublic void method4() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Person p=(Person) clazz.newInstance();\n    Method method=clazz.getDeclaredMethod(\"PlayGame\",String.class);\n    method.setAccessible(true);\n    method.invoke(p,\"扫雷\");\n}\n```\n反射类的main方法:\n```java\n@Test\n//反射类的main方法\npublic void method5() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Person p=(Person) clazz.newInstance();\n    Method method=clazz.getDeclaredMethod(\"main\",String[].class);\n    method.setAccessible(true);\n    method.invoke(p,(Object)new String[]{\"1\",\"2\"});\n}\n```\n反射类公有的字段:\n```java\n@Test\n//反射类公有的字段\npublic void field1() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Person p=(Person) clazz.newInstance();\n    Field field=clazz.getField(\"Name\");\n    System.out.println(field.get(p));\n    field.set(p, \"王五\");\n    p.Introduce();\n}\n\n```\n反射类私有的字段:\n```java\n@Test\n//反射类私有的字段\npublic void field2() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Person p=(Person) clazz.newInstance();\n    Field field=clazz.getDeclaredField(\"Age\");\n    field.setAccessible(true);\n    System.out.println(field.get(p));\n    field.set(p, 7);\n    p.Introduce();\n}\n```\n反射类私有静态的字段:\n```java\n@Test\n//反射类私有静态的字段\npublic void field3() throws Exception{\n    Class clazz=Class.forName(\"pro.shaowei.reflect.Person\");\n    Person p=(Person) clazz.newInstance();\n    Field field=clazz.getDeclaredField(\"Species\");\n    field.setAccessible(true);\n    System.out.println(field.get(p));\n    field.set(p, \"不死族\");\n    System.out.println(field.get(p));\n}\n```","slug":"【新手学Java】反射学习笔记","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24otl001id00okuifft2s","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>示例类代码<br><a id=\"more\"></a></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String Name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> Age;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Gender Gender;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String Species = <span class=\"string\">\"人类\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Name=<span class=\"string\">\"佚名\"</span>;</span><br><span class=\"line\">        Age=-<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        Name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Person</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">        Name=name;</span><br><span class=\"line\">        Age=age;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Person</span><span class=\"params\">(Gender g)</span></span>&#123;</span><br><span class=\"line\">        Gender=g;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Name+<span class=\"string\">\" 跑!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Attack</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Name+<span class=\"string\">\" 打!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Attack</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Name+<span class=\"string\">\" 打 \"</span>+name+<span class=\"string\">\"!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Eat</span><span class=\"params\">(String food)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Name+<span class=\"string\">\" 吃 \"</span>+food);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Introduce</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我叫\"</span>+Name+<span class=\"string\">\",我今年\"</span>+Age+<span class=\"string\">\"岁了。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">PlayGame</span><span class=\"params\">(String gameName)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"玩 \"</span>+gameName+<span class=\"string\">\" 游戏\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String s:args)</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> Gender&#123;</span><br><span class=\"line\">    Male,Female</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>反射类的无参构造函数:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类的无参构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">constructor1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz = Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Constructor c=clazz.getConstructor();</span><br><span class=\"line\">    Person p = (Person) c.newInstance();</span><br><span class=\"line\">    Person p1 = (Person) clazz.newInstance();</span><br><span class=\"line\">    p.Introduce();</span><br><span class=\"line\">    p.Run();</span><br><span class=\"line\">    p1.Introduce();</span><br><span class=\"line\">    p1.Run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类的有参构造函数:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类的有参构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">constructor2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Constructor c=clazz.getConstructor(String.class);</span><br><span class=\"line\">    Person p=((Person) c.newInstance(<span class=\"string\">\"张三\"</span>));</span><br><span class=\"line\">    p.Introduce();</span><br><span class=\"line\">    p.Run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类的私有构造函数:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类的私有构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">constructor3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//反射私有构造函数时必须从使用 getDeclaredConstructor 方法</span></span><br><span class=\"line\">    Constructor c=clazz.getDeclaredConstructor(String.class,<span class=\"keyword\">int</span>.class);</span><br><span class=\"line\">    c.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">//暴力反射</span></span><br><span class=\"line\">    Person p=((Person) c.newInstance(<span class=\"string\">\"张三\"</span>,<span class=\"number\">25</span>));</span><br><span class=\"line\">    p.Introduce();</span><br><span class=\"line\">    p.Run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类的公有无参方法:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类的公有无参方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Person p=(Person) clazz.newInstance();</span><br><span class=\"line\">    Method method=clazz.getMethod(<span class=\"string\">\"Run\"</span>);</span><br><span class=\"line\">    method.invoke(p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类的公有有参方法:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类的公有有参方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Person p=(Person) clazz.newInstance();</span><br><span class=\"line\">    Method method=clazz.getMethod(<span class=\"string\">\"Attack\"</span>,String.class);</span><br><span class=\"line\">    method.invoke(p,<span class=\"string\">\"李四\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类的私有有参方法:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类的私有有参方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Person p=(Person) clazz.newInstance();</span><br><span class=\"line\">    Method method=clazz.getDeclaredMethod(<span class=\"string\">\"Eat\"</span>,String.class);</span><br><span class=\"line\">    method.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    method.invoke(p,<span class=\"string\">\"香蕉\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类的静态有参方法:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类的静态有参方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method4</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Person p=(Person) clazz.newInstance();</span><br><span class=\"line\">    Method method=clazz.getDeclaredMethod(<span class=\"string\">\"PlayGame\"</span>,String.class);</span><br><span class=\"line\">    method.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    method.invoke(p,<span class=\"string\">\"扫雷\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类的main方法:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类的main方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method5</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Person p=(Person) clazz.newInstance();</span><br><span class=\"line\">    Method method=clazz.getDeclaredMethod(<span class=\"string\">\"main\"</span>,String[].class);</span><br><span class=\"line\">    method.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    method.invoke(p,(Object)<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类公有的字段:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类公有的字段</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">field1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Person p=(Person) clazz.newInstance();</span><br><span class=\"line\">    Field field=clazz.getField(<span class=\"string\">\"Name\"</span>);</span><br><span class=\"line\">    System.out.println(field.get(p));</span><br><span class=\"line\">    field.set(p, <span class=\"string\">\"王五\"</span>);</span><br><span class=\"line\">    p.Introduce();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类私有的字段:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类私有的字段</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">field2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Person p=(Person) clazz.newInstance();</span><br><span class=\"line\">    Field field=clazz.getDeclaredField(<span class=\"string\">\"Age\"</span>);</span><br><span class=\"line\">    field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    System.out.println(field.get(p));</span><br><span class=\"line\">    field.set(p, <span class=\"number\">7</span>);</span><br><span class=\"line\">    p.Introduce();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类私有静态的字段:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类私有静态的字段</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">field3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Person p=(Person) clazz.newInstance();</span><br><span class=\"line\">    Field field=clazz.getDeclaredField(<span class=\"string\">\"Species\"</span>);</span><br><span class=\"line\">    field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    System.out.println(field.get(p));</span><br><span class=\"line\">    field.set(p, <span class=\"string\">\"不死族\"</span>);</span><br><span class=\"line\">    System.out.println(field.get(p));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>示例类代码<br>","more":"</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String Name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> Age;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Gender Gender;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String Species = <span class=\"string\">\"人类\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Name=<span class=\"string\">\"佚名\"</span>;</span><br><span class=\"line\">        Age=-<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        Name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Person</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">        Name=name;</span><br><span class=\"line\">        Age=age;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Person</span><span class=\"params\">(Gender g)</span></span>&#123;</span><br><span class=\"line\">        Gender=g;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Name+<span class=\"string\">\" 跑!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Attack</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Name+<span class=\"string\">\" 打!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Attack</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Name+<span class=\"string\">\" 打 \"</span>+name+<span class=\"string\">\"!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Eat</span><span class=\"params\">(String food)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Name+<span class=\"string\">\" 吃 \"</span>+food);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Introduce</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我叫\"</span>+Name+<span class=\"string\">\",我今年\"</span>+Age+<span class=\"string\">\"岁了。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">PlayGame</span><span class=\"params\">(String gameName)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"玩 \"</span>+gameName+<span class=\"string\">\" 游戏\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"main\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String s:args)</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> Gender&#123;</span><br><span class=\"line\">    Male,Female</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>反射类的无参构造函数:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类的无参构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">constructor1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz = Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Constructor c=clazz.getConstructor();</span><br><span class=\"line\">    Person p = (Person) c.newInstance();</span><br><span class=\"line\">    Person p1 = (Person) clazz.newInstance();</span><br><span class=\"line\">    p.Introduce();</span><br><span class=\"line\">    p.Run();</span><br><span class=\"line\">    p1.Introduce();</span><br><span class=\"line\">    p1.Run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类的有参构造函数:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类的有参构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">constructor2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Constructor c=clazz.getConstructor(String.class);</span><br><span class=\"line\">    Person p=((Person) c.newInstance(<span class=\"string\">\"张三\"</span>));</span><br><span class=\"line\">    p.Introduce();</span><br><span class=\"line\">    p.Run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类的私有构造函数:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类的私有构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">constructor3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//反射私有构造函数时必须从使用 getDeclaredConstructor 方法</span></span><br><span class=\"line\">    Constructor c=clazz.getDeclaredConstructor(String.class,<span class=\"keyword\">int</span>.class);</span><br><span class=\"line\">    c.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">//暴力反射</span></span><br><span class=\"line\">    Person p=((Person) c.newInstance(<span class=\"string\">\"张三\"</span>,<span class=\"number\">25</span>));</span><br><span class=\"line\">    p.Introduce();</span><br><span class=\"line\">    p.Run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类的公有无参方法:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类的公有无参方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Person p=(Person) clazz.newInstance();</span><br><span class=\"line\">    Method method=clazz.getMethod(<span class=\"string\">\"Run\"</span>);</span><br><span class=\"line\">    method.invoke(p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类的公有有参方法:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类的公有有参方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Person p=(Person) clazz.newInstance();</span><br><span class=\"line\">    Method method=clazz.getMethod(<span class=\"string\">\"Attack\"</span>,String.class);</span><br><span class=\"line\">    method.invoke(p,<span class=\"string\">\"李四\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类的私有有参方法:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类的私有有参方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Person p=(Person) clazz.newInstance();</span><br><span class=\"line\">    Method method=clazz.getDeclaredMethod(<span class=\"string\">\"Eat\"</span>,String.class);</span><br><span class=\"line\">    method.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    method.invoke(p,<span class=\"string\">\"香蕉\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类的静态有参方法:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类的静态有参方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method4</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Person p=(Person) clazz.newInstance();</span><br><span class=\"line\">    Method method=clazz.getDeclaredMethod(<span class=\"string\">\"PlayGame\"</span>,String.class);</span><br><span class=\"line\">    method.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    method.invoke(p,<span class=\"string\">\"扫雷\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类的main方法:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类的main方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method5</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Person p=(Person) clazz.newInstance();</span><br><span class=\"line\">    Method method=clazz.getDeclaredMethod(<span class=\"string\">\"main\"</span>,String[].class);</span><br><span class=\"line\">    method.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    method.invoke(p,(Object)<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类公有的字段:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类公有的字段</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">field1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Person p=(Person) clazz.newInstance();</span><br><span class=\"line\">    Field field=clazz.getField(<span class=\"string\">\"Name\"</span>);</span><br><span class=\"line\">    System.out.println(field.get(p));</span><br><span class=\"line\">    field.set(p, <span class=\"string\">\"王五\"</span>);</span><br><span class=\"line\">    p.Introduce();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类私有的字段:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类私有的字段</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">field2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Person p=(Person) clazz.newInstance();</span><br><span class=\"line\">    Field field=clazz.getDeclaredField(<span class=\"string\">\"Age\"</span>);</span><br><span class=\"line\">    field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    System.out.println(field.get(p));</span><br><span class=\"line\">    field.set(p, <span class=\"number\">7</span>);</span><br><span class=\"line\">    p.Introduce();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>反射类私有静态的字段:<br></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//反射类私有静态的字段</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">field3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Class clazz=Class.forName(<span class=\"string\">\"pro.shaowei.reflect.Person\"</span>);</span><br><span class=\"line\">    Person p=(Person) clazz.newInstance();</span><br><span class=\"line\">    Field field=clazz.getDeclaredField(<span class=\"string\">\"Species\"</span>);</span><br><span class=\"line\">    field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    System.out.println(field.get(p));</span><br><span class=\"line\">    field.set(p, <span class=\"string\">\"不死族\"</span>);</span><br><span class=\"line\">    System.out.println(field.get(p));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"【爬虫学习笔记】.Net 使用 ScrapySharp 并行下载天涯图片","abbrlink":31517,"date":"2016-09-09T17:16:42.000Z","_content":"最近因为一个作业需要完成CNKI爬虫，研究爬虫架构的时候发现了这个疑似移植于Python的著名开源爬虫框架Scrapy的ScrapySharp，然而在网上寻找之后只发现了这个[F#的Demo](http://blog.csdn.net/hadstj/article/details/18891227)，就使用原文中示例的网站写了这个C#版本的代码。\n<!-- more -->\n## 实现\n下面是代码:\n```csharp\nusing System;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing HtmlAgilityPack;\nusing ScrapySharp.Extensions;\nusing ScrapySharp.Network;\n\nnamespace ScrapySharpDemo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //示例网站地址\n            var url = \"http://bbs.tianya.cn/post-12-563201-1.shtml\";\n            var web = new ScrapingBrowser();\n            var html = web.DownloadString(new Uri(url));\n            var doc = new HtmlDocument();\n            doc.LoadHtml(html);\n            //获取网站中的图片地址\n            var urls= doc.DocumentNode.CssSelect(\"div.bbs-content > img\").Select(node => node.GetAttributeValue(\"original\")).ToList();\n            //并行下载图片\n            Parallel.ForEach(urls, SavePic);\n        }\n\n        public static void SavePic(string url)\n        {\n            var web = new ScrapingBrowser();\n            //因天涯网站限制,所有站外来源都无法访问图片,故先设置请求头Refer属性为当前页地址\n            web.Headers.Add(\"Referer\", \"http://bbs.tianya.cn/post-12-563201-1.shtml\");\n            var pic = web.NavigateToPage(new Uri(url)).RawResponse.Body;\n            var file = url.Substring(url.LastIndexOf(\"/\", StringComparison.Ordinal));\n            if (!Directory.Exists(\"imgs\"))\n                Directory.CreateDirectory(\"imgs\");\n            File.WriteAllBytes(\"imgs\" + file, pic);\n        }\n    }\n}\n```\n## 结论:\n研究之后发现，ScrapySharp和Scrapy差距还是挺大的，没有Scrapy那样完善的八大组件，只含有Http请求的Downloader和基于HtmlAgilityPack扩展的网页解析功能，莫名有些小失望。","source":"_posts/【爬虫学习笔记】C#-使用-ScrapySharp-并行下载天涯图片.md","raw":"---\ntitle: 【爬虫学习笔记】.Net 使用 ScrapySharp 并行下载天涯图片\ntags:\n  - 爬虫\n  - 'C#'\n  - ScrapySharp\nabbrlink: 31517\ndate: 2016-09-10 01:16:42\n---\n最近因为一个作业需要完成CNKI爬虫，研究爬虫架构的时候发现了这个疑似移植于Python的著名开源爬虫框架Scrapy的ScrapySharp，然而在网上寻找之后只发现了这个[F#的Demo](http://blog.csdn.net/hadstj/article/details/18891227)，就使用原文中示例的网站写了这个C#版本的代码。\n<!-- more -->\n## 实现\n下面是代码:\n```csharp\nusing System;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing HtmlAgilityPack;\nusing ScrapySharp.Extensions;\nusing ScrapySharp.Network;\n\nnamespace ScrapySharpDemo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //示例网站地址\n            var url = \"http://bbs.tianya.cn/post-12-563201-1.shtml\";\n            var web = new ScrapingBrowser();\n            var html = web.DownloadString(new Uri(url));\n            var doc = new HtmlDocument();\n            doc.LoadHtml(html);\n            //获取网站中的图片地址\n            var urls= doc.DocumentNode.CssSelect(\"div.bbs-content > img\").Select(node => node.GetAttributeValue(\"original\")).ToList();\n            //并行下载图片\n            Parallel.ForEach(urls, SavePic);\n        }\n\n        public static void SavePic(string url)\n        {\n            var web = new ScrapingBrowser();\n            //因天涯网站限制,所有站外来源都无法访问图片,故先设置请求头Refer属性为当前页地址\n            web.Headers.Add(\"Referer\", \"http://bbs.tianya.cn/post-12-563201-1.shtml\");\n            var pic = web.NavigateToPage(new Uri(url)).RawResponse.Body;\n            var file = url.Substring(url.LastIndexOf(\"/\", StringComparison.Ordinal));\n            if (!Directory.Exists(\"imgs\"))\n                Directory.CreateDirectory(\"imgs\");\n            File.WriteAllBytes(\"imgs\" + file, pic);\n        }\n    }\n}\n```\n## 结论:\n研究之后发现，ScrapySharp和Scrapy差距还是挺大的，没有Scrapy那样完善的八大组件，只含有Http请求的Downloader和基于HtmlAgilityPack扩展的网页解析功能，莫名有些小失望。","slug":"【爬虫学习笔记】C#-使用-ScrapySharp-并行下载天涯图片","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24otn001kd00oiq3mvekn","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>最近因为一个作业需要完成CNKI爬虫，研究爬虫架构的时候发现了这个疑似移植于Python的著名开源爬虫框架Scrapy的ScrapySharp，然而在网上寻找之后只发现了这个<a href=\"http://blog.csdn.net/hadstj/article/details/18891227\" target=\"_blank\" rel=\"noopener\">F#的Demo</a>，就使用原文中示例的网站写了这个C#版本的代码。<br><a id=\"more\"></a></p><h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>下面是代码:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> HtmlAgilityPack;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ScrapySharp.Extensions;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ScrapySharp.Network;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ScrapySharpDemo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//示例网站地址</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> url = <span class=\"string\">\"http://bbs.tianya.cn/post-12-563201-1.shtml\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> web = <span class=\"keyword\">new</span> ScrapingBrowser();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> html = web.DownloadString(<span class=\"keyword\">new</span> Uri(url));</span><br><span class=\"line\">            <span class=\"keyword\">var</span> doc = <span class=\"keyword\">new</span> HtmlDocument();</span><br><span class=\"line\">            doc.LoadHtml(html);</span><br><span class=\"line\">            <span class=\"comment\">//获取网站中的图片地址</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> urls= doc.DocumentNode.CssSelect(<span class=\"string\">\"div.bbs-content &gt; img\"</span>).Select(node =&gt; node.GetAttributeValue(<span class=\"string\">\"original\"</span>)).ToList();</span><br><span class=\"line\">            <span class=\"comment\">//并行下载图片</span></span><br><span class=\"line\">            Parallel.ForEach(urls, SavePic);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SavePic</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> web = <span class=\"keyword\">new</span> ScrapingBrowser();</span><br><span class=\"line\">            <span class=\"comment\">//因天涯网站限制,所有站外来源都无法访问图片,故先设置请求头Refer属性为当前页地址</span></span><br><span class=\"line\">            web.Headers.Add(<span class=\"string\">\"Referer\"</span>, <span class=\"string\">\"http://bbs.tianya.cn/post-12-563201-1.shtml\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pic = web.NavigateToPage(<span class=\"keyword\">new</span> Uri(url)).RawResponse.Body;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> file = url.Substring(url.LastIndexOf(<span class=\"string\">\"/\"</span>, StringComparison.Ordinal));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Directory.Exists(<span class=\"string\">\"imgs\"</span>))</span><br><span class=\"line\">                Directory.CreateDirectory(<span class=\"string\">\"imgs\"</span>);</span><br><span class=\"line\">            File.WriteAllBytes(<span class=\"string\">\"imgs\"</span> + file, pic);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论:\"></a>结论:</h2><p>研究之后发现，ScrapySharp和Scrapy差距还是挺大的，没有Scrapy那样完善的八大组件，只含有Http请求的Downloader和基于HtmlAgilityPack扩展的网页解析功能，莫名有些小失望。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>最近因为一个作业需要完成CNKI爬虫，研究爬虫架构的时候发现了这个疑似移植于Python的著名开源爬虫框架Scrapy的ScrapySharp，然而在网上寻找之后只发现了这个<a href=\"http://blog.csdn.net/hadstj/article/details/18891227\" target=\"_blank\" rel=\"noopener\">F#的Demo</a>，就使用原文中示例的网站写了这个C#版本的代码。<br>","more":"</p><h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>下面是代码:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> HtmlAgilityPack;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ScrapySharp.Extensions;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ScrapySharp.Network;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ScrapySharpDemo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//示例网站地址</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> url = <span class=\"string\">\"http://bbs.tianya.cn/post-12-563201-1.shtml\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> web = <span class=\"keyword\">new</span> ScrapingBrowser();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> html = web.DownloadString(<span class=\"keyword\">new</span> Uri(url));</span><br><span class=\"line\">            <span class=\"keyword\">var</span> doc = <span class=\"keyword\">new</span> HtmlDocument();</span><br><span class=\"line\">            doc.LoadHtml(html);</span><br><span class=\"line\">            <span class=\"comment\">//获取网站中的图片地址</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> urls= doc.DocumentNode.CssSelect(<span class=\"string\">\"div.bbs-content &gt; img\"</span>).Select(node =&gt; node.GetAttributeValue(<span class=\"string\">\"original\"</span>)).ToList();</span><br><span class=\"line\">            <span class=\"comment\">//并行下载图片</span></span><br><span class=\"line\">            Parallel.ForEach(urls, SavePic);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SavePic</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> web = <span class=\"keyword\">new</span> ScrapingBrowser();</span><br><span class=\"line\">            <span class=\"comment\">//因天涯网站限制,所有站外来源都无法访问图片,故先设置请求头Refer属性为当前页地址</span></span><br><span class=\"line\">            web.Headers.Add(<span class=\"string\">\"Referer\"</span>, <span class=\"string\">\"http://bbs.tianya.cn/post-12-563201-1.shtml\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pic = web.NavigateToPage(<span class=\"keyword\">new</span> Uri(url)).RawResponse.Body;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> file = url.Substring(url.LastIndexOf(<span class=\"string\">\"/\"</span>, StringComparison.Ordinal));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Directory.Exists(<span class=\"string\">\"imgs\"</span>))</span><br><span class=\"line\">                Directory.CreateDirectory(<span class=\"string\">\"imgs\"</span>);</span><br><span class=\"line\">            File.WriteAllBytes(<span class=\"string\">\"imgs\"</span> + file, pic);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论:\"></a>结论:</h2><p>研究之后发现，ScrapySharp和Scrapy差距还是挺大的，没有Scrapy那样完善的八大组件，只含有Http请求的Downloader和基于HtmlAgilityPack扩展的网页解析功能，莫名有些小失望。</p><!-- rebuild by neat -->"},{"title":"【爬虫学习笔记】.Net 基于ARSoft.Tools.Net的DNS解析模块（半成品）","abbrlink":61444,"date":"2016-09-10T17:01:24.000Z","_content":"最近在做爬虫的作业，今天学习的内容是关于DNS解析模块的制作的。使用的库为ARSoft.Tools.Net，它是一个非常强大的开源DNS控件库，包含.Net SPF validation, SenderID validation以及DNS Client、DNS Server接口。使用该接口可轻松实现DNS客户请求端及服务器解析端。\n<!-- more -->\n项目地址：http://arsofttoolsnet.codeplex.com/，\n\nNuget包地址：https://www.nuget.org/packages/ARSoft.Tools.Net/。\n## 引入\n首先引入nuget包:\n> **Install-Package ARSoft.Tools.NetInstall-Package ARSoft.Tools.Net**\n\n## 具体实现\n### 实现代码:\n```csharp\n/// <summary>\n/// DNS解析\n/// </summary>\n/// <param name=\"dnsServer\">DNS服务器IP</param>\n/// <param name=\"timeOut\">解析超时时间</param>\n/// <param name=\"url\">解析网址</param>\n/// <param name=\"isSuccess\">是否解析成功</param>\n/// <returns>解析到的IP信息</returns>\npublic static IPAddress DnsResolver(string dnsServer, int timeOut, string url, out bool isSuccess)\n{\n    //初始化DnsClient，第一个参数为DNS服务器的IP，第二个参数为超时时间\n    var dnsClient = new DnsClient(IPAddress.Parse(dnsServer), timeOut);\n    //解析域名。将域名请求发送至DNS服务器解析，第一个参数为需要解析的域名，第二个参数为\n    //解析类型， RecordType.A为IPV4类型\n    //DnsMessage dnsMessage = dnsClient.Resolve(\"www.sina.com\", RecordType.A);\n    var s = new Stopwatch();\n    s.Start();\n    var dnsMessage = dnsClient.Resolve(DomainName.Parse(url));\n    s.Stop();\n    Console.WriteLine(s.Elapsed.Milliseconds);\n    //若返回结果为空，或者存在错误，则该请求失败。\n    if (dnsMessage == null || (dnsMessage.ReturnCode != ReturnCode.NoError && dnsMessage.ReturnCode != ReturnCode.NxDomain))\n    {\n        isSuccess= false;\n    }\n    //循环遍历返回结果，将返回的IPV4记录添加到结果集List中。\n    if (dnsMessage != null)\n        foreach (var dnsRecord in dnsMessage.AnswerRecords)\n        {\n            var aRecord = dnsRecord as ARecord;\n            if (aRecord == null) continue;\n            isSuccess = true;\n            return aRecord.Address;\n        }\n    isSuccess= false;\n    return null;\n}\n```\n### 调用代码\n```csharp\nbool isSuccess;\nIPAddress ip = DnsResolver(\"223.5.5.5\", 200, \"shaoweicloud.cn\", out isSuccess);\nif (isSuccess)\n    Console.WriteLine(ip);\n```\n## 进一步封装\n懂的使用方法后我们可以对它做进一步封装,得到**DnsResolver**类:\n### 实现代码\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Net;\nusing ARSoft.Tools.Net;\nusing ARSoft.Tools.Net.Dns;\n\nnamespace Crawler.Protocol\n{\n    public class DnsResolver\n    {\n        public TimeSpan TimeSpan { get; set; }\n        public string Url { get; set; }\n        public List Record { get; set; }\n        public string DnsServer { get; set; }\n        public int TimeOut { get; set; }\n        public ReturnCode ReturnCode { get; set; }\n        public bool IsSuccess { get; private set; }\n        public DnsResolver(string url, string dnsServer = \"223.5.5.5\", int timeOut = 200)\n        {\n            Url = url;\n            DnsServer = dnsServer;\n            TimeOut = timeOut;\n            Record=new List();\n            Dig();\n        }\n\n        public void Dig()\n        {\n            //初始化DnsClient，第一个参数为DNS服务器的IP，第二个参数为超时时间\n            var dnsClient = new DnsClient(IPAddress.Parse(DnsServer), TimeOut);\n            var s = new Stopwatch();\n            s.Start();\n            //解析域名。将域名请求发送至DNS服务器解析，参数为需要解析的域名\n            var dnsMessage = dnsClient.Resolve(DomainName.Parse(Url));\n            s.Stop();\n            TimeSpan = s.Elapsed;\n            //若返回结果为空，或者存在错误，则该请求失败。\n            if (dnsMessage == null || (dnsMessage.ReturnCode != ReturnCode.NoError && dnsMessage.ReturnCode != ReturnCode.NxDomain))\n                IsSuccess = false;\n            //循环遍历返回结果，将返回的IPV4记录添加到结果集List中。\n            if (dnsMessage != null)\n                foreach (var dnsRecord in dnsMessage.AnswerRecords)\n                {\n                    var aRecord = dnsRecord as ARecord;\n                    if (aRecord == null) continue;\n                    IsSuccess = true;\n                    Record.Add(aRecord);\n                }\n            if (dnsMessage != null) ReturnCode = dnsMessage.ReturnCode;\n        }\n    }\n}\n```\n### 调用方法\n```csharp\nDnsResolver dns = new DnsResolver(\"shaoweicloud.cn\");\nif (dns.IsSuccess)\n    Console.WriteLine(dns.Record[0]);\n```\n\n## 结束\n 至此，DNS解析模块就基本结束了，至于为什么标题中标注了半成品，是因为我想在基本的DNS解析功能的基础上根据解析到DNS信息中的TTL做一套信息缓存机制，减少不必要的重复查询，目前还在考虑使用何种方法，后续实现会更新。","source":"_posts/【爬虫学习笔记】C#基于ARSoft.Tools.Net的DNS解析模块（半成品）.md","raw":"---\ntitle: 【爬虫学习笔记】.Net 基于ARSoft.Tools.Net的DNS解析模块（半成品）\ntags:\n  - 爬虫\n  - ARSoft.Tools.Net\n  - 'C#'\n  - DNS\nabbrlink: 61444\ndate: 2016-09-11 01:01:24\n---\n最近在做爬虫的作业，今天学习的内容是关于DNS解析模块的制作的。使用的库为ARSoft.Tools.Net，它是一个非常强大的开源DNS控件库，包含.Net SPF validation, SenderID validation以及DNS Client、DNS Server接口。使用该接口可轻松实现DNS客户请求端及服务器解析端。\n<!-- more -->\n项目地址：http://arsofttoolsnet.codeplex.com/，\n\nNuget包地址：https://www.nuget.org/packages/ARSoft.Tools.Net/。\n## 引入\n首先引入nuget包:\n> **Install-Package ARSoft.Tools.NetInstall-Package ARSoft.Tools.Net**\n\n## 具体实现\n### 实现代码:\n```csharp\n/// <summary>\n/// DNS解析\n/// </summary>\n/// <param name=\"dnsServer\">DNS服务器IP</param>\n/// <param name=\"timeOut\">解析超时时间</param>\n/// <param name=\"url\">解析网址</param>\n/// <param name=\"isSuccess\">是否解析成功</param>\n/// <returns>解析到的IP信息</returns>\npublic static IPAddress DnsResolver(string dnsServer, int timeOut, string url, out bool isSuccess)\n{\n    //初始化DnsClient，第一个参数为DNS服务器的IP，第二个参数为超时时间\n    var dnsClient = new DnsClient(IPAddress.Parse(dnsServer), timeOut);\n    //解析域名。将域名请求发送至DNS服务器解析，第一个参数为需要解析的域名，第二个参数为\n    //解析类型， RecordType.A为IPV4类型\n    //DnsMessage dnsMessage = dnsClient.Resolve(\"www.sina.com\", RecordType.A);\n    var s = new Stopwatch();\n    s.Start();\n    var dnsMessage = dnsClient.Resolve(DomainName.Parse(url));\n    s.Stop();\n    Console.WriteLine(s.Elapsed.Milliseconds);\n    //若返回结果为空，或者存在错误，则该请求失败。\n    if (dnsMessage == null || (dnsMessage.ReturnCode != ReturnCode.NoError && dnsMessage.ReturnCode != ReturnCode.NxDomain))\n    {\n        isSuccess= false;\n    }\n    //循环遍历返回结果，将返回的IPV4记录添加到结果集List中。\n    if (dnsMessage != null)\n        foreach (var dnsRecord in dnsMessage.AnswerRecords)\n        {\n            var aRecord = dnsRecord as ARecord;\n            if (aRecord == null) continue;\n            isSuccess = true;\n            return aRecord.Address;\n        }\n    isSuccess= false;\n    return null;\n}\n```\n### 调用代码\n```csharp\nbool isSuccess;\nIPAddress ip = DnsResolver(\"223.5.5.5\", 200, \"shaoweicloud.cn\", out isSuccess);\nif (isSuccess)\n    Console.WriteLine(ip);\n```\n## 进一步封装\n懂的使用方法后我们可以对它做进一步封装,得到**DnsResolver**类:\n### 实现代码\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Net;\nusing ARSoft.Tools.Net;\nusing ARSoft.Tools.Net.Dns;\n\nnamespace Crawler.Protocol\n{\n    public class DnsResolver\n    {\n        public TimeSpan TimeSpan { get; set; }\n        public string Url { get; set; }\n        public List Record { get; set; }\n        public string DnsServer { get; set; }\n        public int TimeOut { get; set; }\n        public ReturnCode ReturnCode { get; set; }\n        public bool IsSuccess { get; private set; }\n        public DnsResolver(string url, string dnsServer = \"223.5.5.5\", int timeOut = 200)\n        {\n            Url = url;\n            DnsServer = dnsServer;\n            TimeOut = timeOut;\n            Record=new List();\n            Dig();\n        }\n\n        public void Dig()\n        {\n            //初始化DnsClient，第一个参数为DNS服务器的IP，第二个参数为超时时间\n            var dnsClient = new DnsClient(IPAddress.Parse(DnsServer), TimeOut);\n            var s = new Stopwatch();\n            s.Start();\n            //解析域名。将域名请求发送至DNS服务器解析，参数为需要解析的域名\n            var dnsMessage = dnsClient.Resolve(DomainName.Parse(Url));\n            s.Stop();\n            TimeSpan = s.Elapsed;\n            //若返回结果为空，或者存在错误，则该请求失败。\n            if (dnsMessage == null || (dnsMessage.ReturnCode != ReturnCode.NoError && dnsMessage.ReturnCode != ReturnCode.NxDomain))\n                IsSuccess = false;\n            //循环遍历返回结果，将返回的IPV4记录添加到结果集List中。\n            if (dnsMessage != null)\n                foreach (var dnsRecord in dnsMessage.AnswerRecords)\n                {\n                    var aRecord = dnsRecord as ARecord;\n                    if (aRecord == null) continue;\n                    IsSuccess = true;\n                    Record.Add(aRecord);\n                }\n            if (dnsMessage != null) ReturnCode = dnsMessage.ReturnCode;\n        }\n    }\n}\n```\n### 调用方法\n```csharp\nDnsResolver dns = new DnsResolver(\"shaoweicloud.cn\");\nif (dns.IsSuccess)\n    Console.WriteLine(dns.Record[0]);\n```\n\n## 结束\n 至此，DNS解析模块就基本结束了，至于为什么标题中标注了半成品，是因为我想在基本的DNS解析功能的基础上根据解析到DNS信息中的TTL做一套信息缓存机制，减少不必要的重复查询，目前还在考虑使用何种方法，后续实现会更新。","slug":"【爬虫学习笔记】C#基于ARSoft.Tools.Net的DNS解析模块（半成品）","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24otp001nd00olgbzug6n","content":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>最近在做爬虫的作业，今天学习的内容是关于DNS解析模块的制作的。使用的库为ARSoft.Tools.Net，它是一个非常强大的开源DNS控件库，包含.Net SPF validation, SenderID validation以及DNS Client、DNS Server接口。使用该接口可轻松实现DNS客户请求端及服务器解析端。<br><a id=\"more\"></a><br>项目地址：<a href=\"http://arsofttoolsnet.codeplex.com/，\" target=\"_blank\" rel=\"noopener\">http://arsofttoolsnet.codeplex.com/，</a></p><p>Nuget包地址：<a href=\"https://www.nuget.org/packages/ARSoft.Tools.Net/。\" target=\"_blank\" rel=\"noopener\">https://www.nuget.org/packages/ARSoft.Tools.Net/。</a></p><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>首先引入nuget包:</p><blockquote><p><strong>Install-Package ARSoft.Tools.NetInstall-Package ARSoft.Tools.Net</strong></p></blockquote><h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><h3 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码:\"></a>实现代码:</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> DNS解析</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"dnsServer\"&gt;</span>DNS服务器IP<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"timeOut\"&gt;</span>解析超时时间<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"url\"&gt;</span>解析网址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isSuccess\"&gt;</span>是否解析成功<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>解析到的IP信息<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IPAddress <span class=\"title\">DnsResolver</span>(<span class=\"params\"><span class=\"keyword\">string</span> dnsServer, <span class=\"keyword\">int</span> timeOut, <span class=\"keyword\">string</span> url, <span class=\"keyword\">out</span> <span class=\"keyword\">bool</span> isSuccess</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化DnsClient，第一个参数为DNS服务器的IP，第二个参数为超时时间</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dnsClient = <span class=\"keyword\">new</span> DnsClient(IPAddress.Parse(dnsServer), timeOut);</span><br><span class=\"line\">    <span class=\"comment\">//解析域名。将域名请求发送至DNS服务器解析，第一个参数为需要解析的域名，第二个参数为</span></span><br><span class=\"line\">    <span class=\"comment\">//解析类型， RecordType.A为IPV4类型</span></span><br><span class=\"line\">    <span class=\"comment\">//DnsMessage dnsMessage = dnsClient.Resolve(\"www.sina.com\", RecordType.A);</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stopwatch();</span><br><span class=\"line\">    s.Start();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dnsMessage = dnsClient.Resolve(DomainName.Parse(url));</span><br><span class=\"line\">    s.Stop();</span><br><span class=\"line\">    Console.WriteLine(s.Elapsed.Milliseconds);</span><br><span class=\"line\">    <span class=\"comment\">//若返回结果为空，或者存在错误，则该请求失败。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dnsMessage == <span class=\"literal\">null</span> || (dnsMessage.ReturnCode != ReturnCode.NoError &amp;&amp; dnsMessage.ReturnCode != ReturnCode.NxDomain))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        isSuccess= <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//循环遍历返回结果，将返回的IPV4记录添加到结果集List中。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dnsMessage != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> dnsRecord <span class=\"keyword\">in</span> dnsMessage.AnswerRecords)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> aRecord = dnsRecord <span class=\"keyword\">as</span> ARecord;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (aRecord == <span class=\"literal\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            isSuccess = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> aRecord.Address;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    isSuccess= <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"调用代码\"><a href=\"#调用代码\" class=\"headerlink\" title=\"调用代码\"></a>调用代码</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> isSuccess;</span><br><span class=\"line\">IPAddress ip = DnsResolver(<span class=\"string\">\"223.5.5.5\"</span>, <span class=\"number\">200</span>, <span class=\"string\">\"shaoweicloud.cn\"</span>, <span class=\"keyword\">out</span> isSuccess);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isSuccess)</span><br><span class=\"line\">    Console.WriteLine(ip);</span><br></pre></td></tr></table></figure><h2 id=\"进一步封装\"><a href=\"#进一步封装\" class=\"headerlink\" title=\"进一步封装\"></a>进一步封装</h2><p>懂的使用方法后我们可以对它做进一步封装,得到<strong>DnsResolver</strong>类:</p><h3 id=\"实现代码-1\"><a href=\"#实现代码-1\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ARSoft.Tools.Net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ARSoft.Tools.Net.Dns;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Protocol</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DnsResolver</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> TimeSpan TimeSpan &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Url &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> List Record &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> DnsServer &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> TimeOut &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ReturnCode ReturnCode &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> IsSuccess &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DnsResolver</span>(<span class=\"params\"><span class=\"keyword\">string</span> url, <span class=\"keyword\">string</span> dnsServer = <span class=\"string\">\"223.5.5.5\"</span>, <span class=\"keyword\">int</span> timeOut = <span class=\"number\">200</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Url = url;</span><br><span class=\"line\">            DnsServer = dnsServer;</span><br><span class=\"line\">            TimeOut = timeOut;</span><br><span class=\"line\">            Record=<span class=\"keyword\">new</span> List();</span><br><span class=\"line\">            Dig();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dig</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//初始化DnsClient，第一个参数为DNS服务器的IP，第二个参数为超时时间</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> dnsClient = <span class=\"keyword\">new</span> DnsClient(IPAddress.Parse(DnsServer), TimeOut);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stopwatch();</span><br><span class=\"line\">            s.Start();</span><br><span class=\"line\">            <span class=\"comment\">//解析域名。将域名请求发送至DNS服务器解析，参数为需要解析的域名</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> dnsMessage = dnsClient.Resolve(DomainName.Parse(Url));</span><br><span class=\"line\">            s.Stop();</span><br><span class=\"line\">            TimeSpan = s.Elapsed;</span><br><span class=\"line\">            <span class=\"comment\">//若返回结果为空，或者存在错误，则该请求失败。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dnsMessage == <span class=\"literal\">null</span> || (dnsMessage.ReturnCode != ReturnCode.NoError &amp;&amp; dnsMessage.ReturnCode != ReturnCode.NxDomain))</span><br><span class=\"line\">                IsSuccess = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">//循环遍历返回结果，将返回的IPV4记录添加到结果集List中。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dnsMessage != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> dnsRecord <span class=\"keyword\">in</span> dnsMessage.AnswerRecords)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> aRecord = dnsRecord <span class=\"keyword\">as</span> ARecord;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (aRecord == <span class=\"literal\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    IsSuccess = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    Record.Add(aRecord);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dnsMessage != <span class=\"literal\">null</span>) ReturnCode = dnsMessage.ReturnCode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"调用方法\"><a href=\"#调用方法\" class=\"headerlink\" title=\"调用方法\"></a>调用方法</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DnsResolver dns = <span class=\"keyword\">new</span> DnsResolver(<span class=\"string\">\"shaoweicloud.cn\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (dns.IsSuccess)</span><br><span class=\"line\">    Console.WriteLine(dns.Record[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure><h2 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h2><p>至此，DNS解析模块就基本结束了，至于为什么标题中标注了半成品，是因为我想在基本的DNS解析功能的基础上根据解析到DNS信息中的TTL做一套信息缓存机制，减少不必要的重复查询，目前还在考虑使用何种方法，后续实现会更新。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:58 GMT+0800 (GMT+08:00) --><p>最近在做爬虫的作业，今天学习的内容是关于DNS解析模块的制作的。使用的库为ARSoft.Tools.Net，它是一个非常强大的开源DNS控件库，包含.Net SPF validation, SenderID validation以及DNS Client、DNS Server接口。使用该接口可轻松实现DNS客户请求端及服务器解析端。<br>","more":"<br>项目地址：<a href=\"http://arsofttoolsnet.codeplex.com/，\" target=\"_blank\" rel=\"noopener\">http://arsofttoolsnet.codeplex.com/，</a></p><p>Nuget包地址：<a href=\"https://www.nuget.org/packages/ARSoft.Tools.Net/。\" target=\"_blank\" rel=\"noopener\">https://www.nuget.org/packages/ARSoft.Tools.Net/。</a></p><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>首先引入nuget包:</p><blockquote><p><strong>Install-Package ARSoft.Tools.NetInstall-Package ARSoft.Tools.Net</strong></p></blockquote><h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><h3 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码:\"></a>实现代码:</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> DNS解析</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"dnsServer\"&gt;</span>DNS服务器IP<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"timeOut\"&gt;</span>解析超时时间<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"url\"&gt;</span>解析网址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isSuccess\"&gt;</span>是否解析成功<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>解析到的IP信息<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IPAddress <span class=\"title\">DnsResolver</span>(<span class=\"params\"><span class=\"keyword\">string</span> dnsServer, <span class=\"keyword\">int</span> timeOut, <span class=\"keyword\">string</span> url, <span class=\"keyword\">out</span> <span class=\"keyword\">bool</span> isSuccess</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化DnsClient，第一个参数为DNS服务器的IP，第二个参数为超时时间</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dnsClient = <span class=\"keyword\">new</span> DnsClient(IPAddress.Parse(dnsServer), timeOut);</span><br><span class=\"line\">    <span class=\"comment\">//解析域名。将域名请求发送至DNS服务器解析，第一个参数为需要解析的域名，第二个参数为</span></span><br><span class=\"line\">    <span class=\"comment\">//解析类型， RecordType.A为IPV4类型</span></span><br><span class=\"line\">    <span class=\"comment\">//DnsMessage dnsMessage = dnsClient.Resolve(\"www.sina.com\", RecordType.A);</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stopwatch();</span><br><span class=\"line\">    s.Start();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dnsMessage = dnsClient.Resolve(DomainName.Parse(url));</span><br><span class=\"line\">    s.Stop();</span><br><span class=\"line\">    Console.WriteLine(s.Elapsed.Milliseconds);</span><br><span class=\"line\">    <span class=\"comment\">//若返回结果为空，或者存在错误，则该请求失败。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dnsMessage == <span class=\"literal\">null</span> || (dnsMessage.ReturnCode != ReturnCode.NoError &amp;&amp; dnsMessage.ReturnCode != ReturnCode.NxDomain))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        isSuccess= <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//循环遍历返回结果，将返回的IPV4记录添加到结果集List中。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dnsMessage != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> dnsRecord <span class=\"keyword\">in</span> dnsMessage.AnswerRecords)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> aRecord = dnsRecord <span class=\"keyword\">as</span> ARecord;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (aRecord == <span class=\"literal\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            isSuccess = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> aRecord.Address;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    isSuccess= <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"调用代码\"><a href=\"#调用代码\" class=\"headerlink\" title=\"调用代码\"></a>调用代码</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> isSuccess;</span><br><span class=\"line\">IPAddress ip = DnsResolver(<span class=\"string\">\"223.5.5.5\"</span>, <span class=\"number\">200</span>, <span class=\"string\">\"shaoweicloud.cn\"</span>, <span class=\"keyword\">out</span> isSuccess);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isSuccess)</span><br><span class=\"line\">    Console.WriteLine(ip);</span><br></pre></td></tr></table></figure><h2 id=\"进一步封装\"><a href=\"#进一步封装\" class=\"headerlink\" title=\"进一步封装\"></a>进一步封装</h2><p>懂的使用方法后我们可以对它做进一步封装,得到<strong>DnsResolver</strong>类:</p><h3 id=\"实现代码-1\"><a href=\"#实现代码-1\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ARSoft.Tools.Net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ARSoft.Tools.Net.Dns;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Protocol</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DnsResolver</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> TimeSpan TimeSpan &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Url &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> List Record &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> DnsServer &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> TimeOut &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ReturnCode ReturnCode &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> IsSuccess &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DnsResolver</span>(<span class=\"params\"><span class=\"keyword\">string</span> url, <span class=\"keyword\">string</span> dnsServer = <span class=\"string\">\"223.5.5.5\"</span>, <span class=\"keyword\">int</span> timeOut = <span class=\"number\">200</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Url = url;</span><br><span class=\"line\">            DnsServer = dnsServer;</span><br><span class=\"line\">            TimeOut = timeOut;</span><br><span class=\"line\">            Record=<span class=\"keyword\">new</span> List();</span><br><span class=\"line\">            Dig();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dig</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//初始化DnsClient，第一个参数为DNS服务器的IP，第二个参数为超时时间</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> dnsClient = <span class=\"keyword\">new</span> DnsClient(IPAddress.Parse(DnsServer), TimeOut);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stopwatch();</span><br><span class=\"line\">            s.Start();</span><br><span class=\"line\">            <span class=\"comment\">//解析域名。将域名请求发送至DNS服务器解析，参数为需要解析的域名</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> dnsMessage = dnsClient.Resolve(DomainName.Parse(Url));</span><br><span class=\"line\">            s.Stop();</span><br><span class=\"line\">            TimeSpan = s.Elapsed;</span><br><span class=\"line\">            <span class=\"comment\">//若返回结果为空，或者存在错误，则该请求失败。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dnsMessage == <span class=\"literal\">null</span> || (dnsMessage.ReturnCode != ReturnCode.NoError &amp;&amp; dnsMessage.ReturnCode != ReturnCode.NxDomain))</span><br><span class=\"line\">                IsSuccess = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">//循环遍历返回结果，将返回的IPV4记录添加到结果集List中。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dnsMessage != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> dnsRecord <span class=\"keyword\">in</span> dnsMessage.AnswerRecords)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> aRecord = dnsRecord <span class=\"keyword\">as</span> ARecord;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (aRecord == <span class=\"literal\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    IsSuccess = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    Record.Add(aRecord);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dnsMessage != <span class=\"literal\">null</span>) ReturnCode = dnsMessage.ReturnCode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"调用方法\"><a href=\"#调用方法\" class=\"headerlink\" title=\"调用方法\"></a>调用方法</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DnsResolver dns = <span class=\"keyword\">new</span> DnsResolver(<span class=\"string\">\"shaoweicloud.cn\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (dns.IsSuccess)</span><br><span class=\"line\">    Console.WriteLine(dns.Record[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure><h2 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h2><p>至此，DNS解析模块就基本结束了，至于为什么标题中标注了半成品，是因为我想在基本的DNS解析功能的基础上根据解析到DNS信息中的TTL做一套信息缓存机制，减少不必要的重复查询，目前还在考虑使用何种方法，后续实现会更新。</p><!-- rebuild by neat -->"},{"title":"【爬虫学习笔记】DNS解析服务增加缓存机制","abbrlink":2858,"date":"2016-09-11T06:08:43.000Z","_content":" 之前我们已经基于ARSoft.Tools.Net简单实现了DNS解析模块的功能，但是当性能要求升高时，每一次爬取都要进行DNS请求，甚至很有可能一段时间内每次请求的都是相同的地址，频繁的DNS请求就会成为性能瓶颈，所以我们要通过缓存机制将DNS解析结果缓存下来，降低DNS解析操作，提升系统性能。\n <!-- more -->\n 如此，我们基于之前封装的MemoryCacheHelper类对DnsResolver类进行改造：\n ```csharp\n using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Net;\nusing ARSoft.Tools.Net;\nusing ARSoft.Tools.Net.Dns;\nusing Mem = Crawler.Common.MemoryCacheHelper;\n\nnamespace Crawler.Protocol\n{\n    public class DnsResolver\n    {\n        public TimeSpan TimeSpan { get; set; }\n        public string Url { get; set; }\n        public ARecord Record { get; set; }\n        public string DnsServer { get; set; }\n        public int TimeOut { get; set; }\n        public ReturnCode ReturnCode { get; set; }\n        public bool IsSuccess { get; private set; }\n        public TimeSpan TimeToLive { get; set; }\n        public DnsResolver(string url, string dnsServer = \"223.5.5.5\", int timeOut = 10000)\n        {\n            Url = url;\n            DnsServer = dnsServer;\n            TimeOut = timeOut;\n            IsSuccess = false;\n            if (Mem.Contains(url))\n                Fill(Mem.Get<DnsResolver>(url));\n            else\n                Dig();\n        }\n\n        private void Fill(DnsResolver resolver)\n        {\n            TimeSpan = resolver.TimeSpan;\n            Url = resolver.Url;\n            Record = resolver.Record;\n            DnsServer = resolver.DnsServer;\n            TimeOut = resolver.TimeOut;\n            ReturnCode = resolver.ReturnCode;\n            IsSuccess = resolver.IsSuccess;\n        }\n\n        public void Dig()\n        {\n            //初始化DnsClient，第一个参数为DNS服务器的IP，第二个参数为超时时间\n            var dnsClient = new DnsClient(IPAddress.Parse(DnsServer), TimeOut);\n            var s = new Stopwatch();\n            s.Start();\n            //解析域名。将域名请求发送至DNS服务器解析，参数为需要解析的域名\n            var dnsMessage = dnsClient.Resolve(DomainName.Parse(Url));\n            s.Stop();\n            TimeSpan = s.Elapsed;\n            //若返回结果为空，或者存在错误，则该请求失败。\n            if (dnsMessage == null || (dnsMessage.ReturnCode != ReturnCode.NoError && dnsMessage.ReturnCode != ReturnCode.NxDomain))\n                IsSuccess = false;\n            //循环遍历返回结果，将返回的IPV4记录添加到结果集List中。\n            if (dnsMessage != null)\n            {\n                if (dnsMessage.AnswerRecords.Count > 0)\n                {\n                    Record = dnsMessage.AnswerRecords[0] as ARecord;\n                    if (Record != null)\n                    {\n                        IsSuccess = true;\n                        TimeToLive=new TimeSpan(0,0,Record.TimeToLive);\n                        Mem.Add(Url, this, TimeToLive);\n                    }\n                }\n            }\n            if (dnsMessage != null) ReturnCode = dnsMessage.ReturnCode;\n        }\n    }\n}\n ```\n 这样,每次做完DNS解析后，会根据域名的TTL将解析结果缓存下来，下次查询时可以直接调用缓存，提高系统性能。","source":"_posts/【爬虫学习笔记】DNS解析服务增加缓存机制.md","raw":"---\ntitle: 【爬虫学习笔记】DNS解析服务增加缓存机制\ntags:\n  - 爬虫\n  - 缓存\nabbrlink: 2858\ndate: 2016-09-11 14:08:43\n---\n 之前我们已经基于ARSoft.Tools.Net简单实现了DNS解析模块的功能，但是当性能要求升高时，每一次爬取都要进行DNS请求，甚至很有可能一段时间内每次请求的都是相同的地址，频繁的DNS请求就会成为性能瓶颈，所以我们要通过缓存机制将DNS解析结果缓存下来，降低DNS解析操作，提升系统性能。\n <!-- more -->\n 如此，我们基于之前封装的MemoryCacheHelper类对DnsResolver类进行改造：\n ```csharp\n using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Net;\nusing ARSoft.Tools.Net;\nusing ARSoft.Tools.Net.Dns;\nusing Mem = Crawler.Common.MemoryCacheHelper;\n\nnamespace Crawler.Protocol\n{\n    public class DnsResolver\n    {\n        public TimeSpan TimeSpan { get; set; }\n        public string Url { get; set; }\n        public ARecord Record { get; set; }\n        public string DnsServer { get; set; }\n        public int TimeOut { get; set; }\n        public ReturnCode ReturnCode { get; set; }\n        public bool IsSuccess { get; private set; }\n        public TimeSpan TimeToLive { get; set; }\n        public DnsResolver(string url, string dnsServer = \"223.5.5.5\", int timeOut = 10000)\n        {\n            Url = url;\n            DnsServer = dnsServer;\n            TimeOut = timeOut;\n            IsSuccess = false;\n            if (Mem.Contains(url))\n                Fill(Mem.Get<DnsResolver>(url));\n            else\n                Dig();\n        }\n\n        private void Fill(DnsResolver resolver)\n        {\n            TimeSpan = resolver.TimeSpan;\n            Url = resolver.Url;\n            Record = resolver.Record;\n            DnsServer = resolver.DnsServer;\n            TimeOut = resolver.TimeOut;\n            ReturnCode = resolver.ReturnCode;\n            IsSuccess = resolver.IsSuccess;\n        }\n\n        public void Dig()\n        {\n            //初始化DnsClient，第一个参数为DNS服务器的IP，第二个参数为超时时间\n            var dnsClient = new DnsClient(IPAddress.Parse(DnsServer), TimeOut);\n            var s = new Stopwatch();\n            s.Start();\n            //解析域名。将域名请求发送至DNS服务器解析，参数为需要解析的域名\n            var dnsMessage = dnsClient.Resolve(DomainName.Parse(Url));\n            s.Stop();\n            TimeSpan = s.Elapsed;\n            //若返回结果为空，或者存在错误，则该请求失败。\n            if (dnsMessage == null || (dnsMessage.ReturnCode != ReturnCode.NoError && dnsMessage.ReturnCode != ReturnCode.NxDomain))\n                IsSuccess = false;\n            //循环遍历返回结果，将返回的IPV4记录添加到结果集List中。\n            if (dnsMessage != null)\n            {\n                if (dnsMessage.AnswerRecords.Count > 0)\n                {\n                    Record = dnsMessage.AnswerRecords[0] as ARecord;\n                    if (Record != null)\n                    {\n                        IsSuccess = true;\n                        TimeToLive=new TimeSpan(0,0,Record.TimeToLive);\n                        Mem.Add(Url, this, TimeToLive);\n                    }\n                }\n            }\n            if (dnsMessage != null) ReturnCode = dnsMessage.ReturnCode;\n        }\n    }\n}\n ```\n 这样,每次做完DNS解析后，会根据域名的TTL将解析结果缓存下来，下次查询时可以直接调用缓存，提高系统性能。","slug":"【爬虫学习笔记】DNS解析服务增加缓存机制","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24otr001pd00oym12js8d","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>之前我们已经基于ARSoft.Tools.Net简单实现了DNS解析模块的功能，但是当性能要求升高时，每一次爬取都要进行DNS请求，甚至很有可能一段时间内每次请求的都是相同的地址，频繁的DNS请求就会成为性能瓶颈，所以我们要通过缓存机制将DNS解析结果缓存下来，降低DNS解析操作，提升系统性能。<br><a id=\"more\"></a><br>如此，我们基于之前封装的MemoryCacheHelper类对DnsResolver类进行改造：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ARSoft.Tools.Net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ARSoft.Tools.Net.Dns;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Mem = Crawler.Common.MemoryCacheHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Protocol</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DnsResolver</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> TimeSpan TimeSpan &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Url &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ARecord Record &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> DnsServer &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> TimeOut &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ReturnCode ReturnCode &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> IsSuccess &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> TimeSpan TimeToLive &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DnsResolver</span>(<span class=\"params\"><span class=\"keyword\">string</span> url, <span class=\"keyword\">string</span> dnsServer = <span class=\"string\">\"223.5.5.5\"</span>, <span class=\"keyword\">int</span> timeOut = <span class=\"number\">10000</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Url = url;</span><br><span class=\"line\">            DnsServer = dnsServer;</span><br><span class=\"line\">            TimeOut = timeOut;</span><br><span class=\"line\">            IsSuccess = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Mem.Contains(url))</span><br><span class=\"line\">                Fill(Mem.Get&lt;DnsResolver&gt;(url));</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                Dig();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Fill</span>(<span class=\"params\">DnsResolver resolver</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            TimeSpan = resolver.TimeSpan;</span><br><span class=\"line\">            Url = resolver.Url;</span><br><span class=\"line\">            Record = resolver.Record;</span><br><span class=\"line\">            DnsServer = resolver.DnsServer;</span><br><span class=\"line\">            TimeOut = resolver.TimeOut;</span><br><span class=\"line\">            ReturnCode = resolver.ReturnCode;</span><br><span class=\"line\">            IsSuccess = resolver.IsSuccess;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dig</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//初始化DnsClient，第一个参数为DNS服务器的IP，第二个参数为超时时间</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> dnsClient = <span class=\"keyword\">new</span> DnsClient(IPAddress.Parse(DnsServer), TimeOut);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stopwatch();</span><br><span class=\"line\">            s.Start();</span><br><span class=\"line\">            <span class=\"comment\">//解析域名。将域名请求发送至DNS服务器解析，参数为需要解析的域名</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> dnsMessage = dnsClient.Resolve(DomainName.Parse(Url));</span><br><span class=\"line\">            s.Stop();</span><br><span class=\"line\">            TimeSpan = s.Elapsed;</span><br><span class=\"line\">            <span class=\"comment\">//若返回结果为空，或者存在错误，则该请求失败。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dnsMessage == <span class=\"literal\">null</span> || (dnsMessage.ReturnCode != ReturnCode.NoError &amp;&amp; dnsMessage.ReturnCode != ReturnCode.NxDomain))</span><br><span class=\"line\">                IsSuccess = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">//循环遍历返回结果，将返回的IPV4记录添加到结果集List中。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dnsMessage != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dnsMessage.AnswerRecords.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Record = dnsMessage.AnswerRecords[<span class=\"number\">0</span>] <span class=\"keyword\">as</span> ARecord;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (Record != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        IsSuccess = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        TimeToLive=<span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">0</span>,<span class=\"number\">0</span>,Record.TimeToLive);</span><br><span class=\"line\">                        Mem.Add(Url, <span class=\"keyword\">this</span>, TimeToLive);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dnsMessage != <span class=\"literal\">null</span>) ReturnCode = dnsMessage.ReturnCode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样,每次做完DNS解析后，会根据域名的TTL将解析结果缓存下来，下次查询时可以直接调用缓存，提高系统性能。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>之前我们已经基于ARSoft.Tools.Net简单实现了DNS解析模块的功能，但是当性能要求升高时，每一次爬取都要进行DNS请求，甚至很有可能一段时间内每次请求的都是相同的地址，频繁的DNS请求就会成为性能瓶颈，所以我们要通过缓存机制将DNS解析结果缓存下来，降低DNS解析操作，提升系统性能。<br>","more":"<br>如此，我们基于之前封装的MemoryCacheHelper类对DnsResolver类进行改造：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ARSoft.Tools.Net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ARSoft.Tools.Net.Dns;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Mem = Crawler.Common.MemoryCacheHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Protocol</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DnsResolver</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> TimeSpan TimeSpan &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Url &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ARecord Record &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> DnsServer &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> TimeOut &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ReturnCode ReturnCode &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> IsSuccess &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> TimeSpan TimeToLive &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DnsResolver</span>(<span class=\"params\"><span class=\"keyword\">string</span> url, <span class=\"keyword\">string</span> dnsServer = <span class=\"string\">\"223.5.5.5\"</span>, <span class=\"keyword\">int</span> timeOut = <span class=\"number\">10000</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Url = url;</span><br><span class=\"line\">            DnsServer = dnsServer;</span><br><span class=\"line\">            TimeOut = timeOut;</span><br><span class=\"line\">            IsSuccess = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Mem.Contains(url))</span><br><span class=\"line\">                Fill(Mem.Get&lt;DnsResolver&gt;(url));</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                Dig();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Fill</span>(<span class=\"params\">DnsResolver resolver</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            TimeSpan = resolver.TimeSpan;</span><br><span class=\"line\">            Url = resolver.Url;</span><br><span class=\"line\">            Record = resolver.Record;</span><br><span class=\"line\">            DnsServer = resolver.DnsServer;</span><br><span class=\"line\">            TimeOut = resolver.TimeOut;</span><br><span class=\"line\">            ReturnCode = resolver.ReturnCode;</span><br><span class=\"line\">            IsSuccess = resolver.IsSuccess;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dig</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//初始化DnsClient，第一个参数为DNS服务器的IP，第二个参数为超时时间</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> dnsClient = <span class=\"keyword\">new</span> DnsClient(IPAddress.Parse(DnsServer), TimeOut);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Stopwatch();</span><br><span class=\"line\">            s.Start();</span><br><span class=\"line\">            <span class=\"comment\">//解析域名。将域名请求发送至DNS服务器解析，参数为需要解析的域名</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> dnsMessage = dnsClient.Resolve(DomainName.Parse(Url));</span><br><span class=\"line\">            s.Stop();</span><br><span class=\"line\">            TimeSpan = s.Elapsed;</span><br><span class=\"line\">            <span class=\"comment\">//若返回结果为空，或者存在错误，则该请求失败。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dnsMessage == <span class=\"literal\">null</span> || (dnsMessage.ReturnCode != ReturnCode.NoError &amp;&amp; dnsMessage.ReturnCode != ReturnCode.NxDomain))</span><br><span class=\"line\">                IsSuccess = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">//循环遍历返回结果，将返回的IPV4记录添加到结果集List中。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dnsMessage != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dnsMessage.AnswerRecords.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Record = dnsMessage.AnswerRecords[<span class=\"number\">0</span>] <span class=\"keyword\">as</span> ARecord;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (Record != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        IsSuccess = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        TimeToLive=<span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">0</span>,<span class=\"number\">0</span>,Record.TimeToLive);</span><br><span class=\"line\">                        Mem.Add(Url, <span class=\"keyword\">this</span>, TimeToLive);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dnsMessage != <span class=\"literal\">null</span>) ReturnCode = dnsMessage.ReturnCode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样,每次做完DNS解析后，会根据域名的TTL将解析结果缓存下来，下次查询时可以直接调用缓存，提高系统性能。</p><!-- rebuild by neat -->"},{"title":"【爬虫学习笔记】MemoryCache缓存的用法学习","abbrlink":30836,"date":"2016-09-11T05:43:17.000Z","_content":"在完成了DNS解析模块之后，我意识到了DNS缓存机制也很有必要。在Redis，Memcache，和.Net自带的Cache之间,考虑到部署问题，最终选择了后者，之前在学习Web及开发的过程中用过System.Web.Caching.Cache这个类库，但是这次的爬虫程序我打算部署为桌面软件，所以选用了System.Runtime.Caching.MemoryCache（后期如有必要也会加入System.Web.Caching.Cache来适配Web端程序）。\n\nMemoryCache的使用网上介绍的不多，不过这个是.NET4.0新引入的缓存对象，估计主要是替换原来企业库的缓存模块，使得.NET的缓存可以无处不在，而不用基于特定的Windows版本上使用。\n\n出于方便考虑，我们将不再实例化新的MemoryCache对象，只对MemoryCache的默认示例Memory.Default进行增删查操作。\n## 基础操作\n### 增加\n![](http://p4au3q1y8.bkt.clouddn.com/20180218211417/20180218091804918.png)\n增加缓存需要提供两个参数，CacheItem类表示缓存中的单个缓存项,\n\n构造函数: \nCacheItem(String, Object, String)            用缓存项的指定键、值和区域初始化新的 CacheItem 实例。\n\n三个参数分别为：键、值和区域。\n\nCacheItemPolicy类则表示缓存项的过期信息，只含有默认的构造函数。\n\n增加一条缓存：\n```csharp\nvar item = new CacheItem(\"习大大\", \"两学一做\");\nvar policy = new CacheItemPolicy();\npolicy.SlidingExpiration = new TimeSpan(500);\n//插入一条key为\"习大大\",value为\"两学一做\",500毫秒后自动销毁的缓存\nMemoryCache.Default.Add(item, policy);\n//重新设置policy的过期时间为当前时间+十分钟\npolicy.AbsoluteExpiration = DateTimeOffset.Now + TimeSpan.FromMinutes(10);\n//注意,如果要使用Sliding时间,则Absolute必须为DateTimeOffset.MaxValue,反之,则Sliding必须为TimeSpan.Zero\npolicy.SlidingExpiration = TimeSpan.Zero;\n//重新插入,覆盖前一条数据\nMemoryCache.Default.Add(item, policy);\n```\n<font style=\"background-color: #ffff00\">注意,如果要使用Sliding时间,则Absolute<strong>必须为DateTimeOffset.MaxValue</strong>,反之,则Sliding<strong>必须为TimeSpan.Zero</strong></font><strong> </strong>\n### 查询\n缓存对象类似于字典集,查询可以直接采用memoryCache[key]来进行,例如我们查询一下前面插入的那条数据:\n```csharp\nvar idea = MemoryCache.Default[\"习大大\"];\n```\n### 移除\n![](http://p4au3q1y8.bkt.clouddn.com/20180218211417/20180218092011241.png)\n**参数**\n***key***:要移除的缓存项的唯一标识符。\n***regionName***:缓存中的一个添加了缓存项的命名区域。不要为该参数传递值。默认情况下，此参数为null，因为 MemoryCache 类未实现区域。\n**返回值**\n***Type***: *System.Object*  如果在缓存中找到该项，则为已移除的缓存项；否则为 null。\n\n删除前面加入的那一项:\n```csharp\nMemoryCache.Default.Remove(\"习大大\");\n```\n## 进一步封装\n明白了基本的用法之后，我们就可以对它做进一步的封装，使之使用起来更为便捷：\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Runtime.Caching;\n\nnamespace Crawler.Common\n{\n    /// <summary>\n    /// 基于MemoryCache的缓存辅助类\n    /// </summary>\n    public static class MemoryCacheHelper\n    {\n        private static readonly object _locker = new object();\n\n        public static bool Contains(string key)\n        {\n            return MemoryCache.Default.Contains(key);\n        }\n\n\n        /// <summary>\n        /// 获取Catch元素\n        /// </summary>\n        /// <typeparam name=\"T\">所获取的元素的类型</typeparam>\n        /// <param name=\"key\">元素的键</param>\n        /// <returns>特定的元素值</returns>\n        public static T Get<T>(string key)\n        {\n            if (string.IsNullOrWhiteSpace(key)) throw new ArgumentException(\"不合法的key!\");\n            if (!MemoryCache.Default.Contains(key))\n                throw new ArgumentException(\"获取失败,不存在该key!\");\n            if (!(MemoryCache.Default[key] is T))\n                throw new ArgumentException(\"未找到所需类型数据!\");\n            return (T)MemoryCache.Default[key];\n        }\n\n        /// <summary>\n        /// 添加Catch元素\n        /// </summary>\n        /// <param name=\"key\">元素的键</param>\n        /// <param name=\"value\">元素的值</param>\n        /// <param name=\"slidingExpiration\">元素过期时间(时间间隔)</param>\n        /// <param name=\"absoluteExpiration\">元素过期时间(绝对时间)</param>\n        /// <returns></returns>\n        public static bool Add(string key, object value, TimeSpan? slidingExpiration = null, DateTime? absoluteExpiration = null)\n        {\n            var item = new CacheItem(key, value);\n            var policy = CreatePolicy(slidingExpiration, absoluteExpiration);\n            lock (_locker)\n                return MemoryCache.Default.Add(item, policy);\n        }\n\n        /// <summary>\n        /// 移出Cache元素\n        /// </summary>\n        /// <typeparam name=\"T\">待移出元素的类型</typeparam>\n        /// <param name=\"key\">待移除元素的键</param>\n        /// <returns>已经移出的元素</returns>\n        public static T Remove<T>(string key)\n        {\n            if (string.IsNullOrWhiteSpace(key)) throw new ArgumentException(\"不合法的key!\");\n            if (!MemoryCache.Default.Contains(key))\n                throw new ArgumentException(\"获取失败,不存在该key!\");\n            var value = MemoryCache.Default.Get(key);\n            if (!(value is T))\n                throw new ArgumentException(\"未找到所需类型数据!\");\n            return (T)MemoryCache.Default.Remove(key);\n        }\n\n        /// <summary>\n        /// 移出多条缓存数据,默认为所有缓存\n        /// </summary>\n        /// <typeparam name=\"T\">待移出的缓存类型</typeparam>\n        /// <param name=\"keyList\"></param>\n        /// <returns></returns>\n        public static List<T> RemoveAll<T>(IEnumerable<string> keyList = null)\n        {\n            if (keyList != null)\n                return (from key in keyList\n                        where MemoryCache.Default.Contains(key)\n                        where MemoryCache.Default.Get(key) is T\n                        select (T)MemoryCache.Default.Remove(key)).ToList();\n            while (MemoryCache.Default.GetCount() > 0)\n                MemoryCache.Default.Remove(MemoryCache.Default.ElementAt(0).Key);\n            return new List<T>();\n        }\n\n        /// <summary>\n        /// 设置过期信息\n        /// </summary>\n        /// <param name=\"slidingExpiration\"></param>\n        /// <param name=\"absoluteExpiration\"></param>\n        /// <returns></returns>\n        private static CacheItemPolicy CreatePolicy(TimeSpan? slidingExpiration, DateTime? absoluteExpiration)\n        {\n            var policy = new CacheItemPolicy();\n\n            if (absoluteExpiration.HasValue)\n            {\n                policy.AbsoluteExpiration = absoluteExpiration.Value;\n            }\n            else if (slidingExpiration.HasValue)\n            {\n                policy.SlidingExpiration = slidingExpiration.Value;\n            }\n\n            policy.Priority = CacheItemPriority.Default;\n\n            return policy;\n        }\n    }\n}\n```","source":"_posts/【爬虫学习笔记】MemoryCache缓存的用法学习.md","raw":"---\ntitle: 【爬虫学习笔记】MemoryCache缓存的用法学习\ntags:\n  - 爬虫\n  - 缓存\nabbrlink: 30836\ndate: 2016-09-11 13:43:17\n---\n在完成了DNS解析模块之后，我意识到了DNS缓存机制也很有必要。在Redis，Memcache，和.Net自带的Cache之间,考虑到部署问题，最终选择了后者，之前在学习Web及开发的过程中用过System.Web.Caching.Cache这个类库，但是这次的爬虫程序我打算部署为桌面软件，所以选用了System.Runtime.Caching.MemoryCache（后期如有必要也会加入System.Web.Caching.Cache来适配Web端程序）。\n\nMemoryCache的使用网上介绍的不多，不过这个是.NET4.0新引入的缓存对象，估计主要是替换原来企业库的缓存模块，使得.NET的缓存可以无处不在，而不用基于特定的Windows版本上使用。\n\n出于方便考虑，我们将不再实例化新的MemoryCache对象，只对MemoryCache的默认示例Memory.Default进行增删查操作。\n## 基础操作\n### 增加\n![](http://p4au3q1y8.bkt.clouddn.com/20180218211417/20180218091804918.png)\n增加缓存需要提供两个参数，CacheItem类表示缓存中的单个缓存项,\n\n构造函数: \nCacheItem(String, Object, String)            用缓存项的指定键、值和区域初始化新的 CacheItem 实例。\n\n三个参数分别为：键、值和区域。\n\nCacheItemPolicy类则表示缓存项的过期信息，只含有默认的构造函数。\n\n增加一条缓存：\n```csharp\nvar item = new CacheItem(\"习大大\", \"两学一做\");\nvar policy = new CacheItemPolicy();\npolicy.SlidingExpiration = new TimeSpan(500);\n//插入一条key为\"习大大\",value为\"两学一做\",500毫秒后自动销毁的缓存\nMemoryCache.Default.Add(item, policy);\n//重新设置policy的过期时间为当前时间+十分钟\npolicy.AbsoluteExpiration = DateTimeOffset.Now + TimeSpan.FromMinutes(10);\n//注意,如果要使用Sliding时间,则Absolute必须为DateTimeOffset.MaxValue,反之,则Sliding必须为TimeSpan.Zero\npolicy.SlidingExpiration = TimeSpan.Zero;\n//重新插入,覆盖前一条数据\nMemoryCache.Default.Add(item, policy);\n```\n<font style=\"background-color: #ffff00\">注意,如果要使用Sliding时间,则Absolute<strong>必须为DateTimeOffset.MaxValue</strong>,反之,则Sliding<strong>必须为TimeSpan.Zero</strong></font><strong> </strong>\n### 查询\n缓存对象类似于字典集,查询可以直接采用memoryCache[key]来进行,例如我们查询一下前面插入的那条数据:\n```csharp\nvar idea = MemoryCache.Default[\"习大大\"];\n```\n### 移除\n![](http://p4au3q1y8.bkt.clouddn.com/20180218211417/20180218092011241.png)\n**参数**\n***key***:要移除的缓存项的唯一标识符。\n***regionName***:缓存中的一个添加了缓存项的命名区域。不要为该参数传递值。默认情况下，此参数为null，因为 MemoryCache 类未实现区域。\n**返回值**\n***Type***: *System.Object*  如果在缓存中找到该项，则为已移除的缓存项；否则为 null。\n\n删除前面加入的那一项:\n```csharp\nMemoryCache.Default.Remove(\"习大大\");\n```\n## 进一步封装\n明白了基本的用法之后，我们就可以对它做进一步的封装，使之使用起来更为便捷：\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Runtime.Caching;\n\nnamespace Crawler.Common\n{\n    /// <summary>\n    /// 基于MemoryCache的缓存辅助类\n    /// </summary>\n    public static class MemoryCacheHelper\n    {\n        private static readonly object _locker = new object();\n\n        public static bool Contains(string key)\n        {\n            return MemoryCache.Default.Contains(key);\n        }\n\n\n        /// <summary>\n        /// 获取Catch元素\n        /// </summary>\n        /// <typeparam name=\"T\">所获取的元素的类型</typeparam>\n        /// <param name=\"key\">元素的键</param>\n        /// <returns>特定的元素值</returns>\n        public static T Get<T>(string key)\n        {\n            if (string.IsNullOrWhiteSpace(key)) throw new ArgumentException(\"不合法的key!\");\n            if (!MemoryCache.Default.Contains(key))\n                throw new ArgumentException(\"获取失败,不存在该key!\");\n            if (!(MemoryCache.Default[key] is T))\n                throw new ArgumentException(\"未找到所需类型数据!\");\n            return (T)MemoryCache.Default[key];\n        }\n\n        /// <summary>\n        /// 添加Catch元素\n        /// </summary>\n        /// <param name=\"key\">元素的键</param>\n        /// <param name=\"value\">元素的值</param>\n        /// <param name=\"slidingExpiration\">元素过期时间(时间间隔)</param>\n        /// <param name=\"absoluteExpiration\">元素过期时间(绝对时间)</param>\n        /// <returns></returns>\n        public static bool Add(string key, object value, TimeSpan? slidingExpiration = null, DateTime? absoluteExpiration = null)\n        {\n            var item = new CacheItem(key, value);\n            var policy = CreatePolicy(slidingExpiration, absoluteExpiration);\n            lock (_locker)\n                return MemoryCache.Default.Add(item, policy);\n        }\n\n        /// <summary>\n        /// 移出Cache元素\n        /// </summary>\n        /// <typeparam name=\"T\">待移出元素的类型</typeparam>\n        /// <param name=\"key\">待移除元素的键</param>\n        /// <returns>已经移出的元素</returns>\n        public static T Remove<T>(string key)\n        {\n            if (string.IsNullOrWhiteSpace(key)) throw new ArgumentException(\"不合法的key!\");\n            if (!MemoryCache.Default.Contains(key))\n                throw new ArgumentException(\"获取失败,不存在该key!\");\n            var value = MemoryCache.Default.Get(key);\n            if (!(value is T))\n                throw new ArgumentException(\"未找到所需类型数据!\");\n            return (T)MemoryCache.Default.Remove(key);\n        }\n\n        /// <summary>\n        /// 移出多条缓存数据,默认为所有缓存\n        /// </summary>\n        /// <typeparam name=\"T\">待移出的缓存类型</typeparam>\n        /// <param name=\"keyList\"></param>\n        /// <returns></returns>\n        public static List<T> RemoveAll<T>(IEnumerable<string> keyList = null)\n        {\n            if (keyList != null)\n                return (from key in keyList\n                        where MemoryCache.Default.Contains(key)\n                        where MemoryCache.Default.Get(key) is T\n                        select (T)MemoryCache.Default.Remove(key)).ToList();\n            while (MemoryCache.Default.GetCount() > 0)\n                MemoryCache.Default.Remove(MemoryCache.Default.ElementAt(0).Key);\n            return new List<T>();\n        }\n\n        /// <summary>\n        /// 设置过期信息\n        /// </summary>\n        /// <param name=\"slidingExpiration\"></param>\n        /// <param name=\"absoluteExpiration\"></param>\n        /// <returns></returns>\n        private static CacheItemPolicy CreatePolicy(TimeSpan? slidingExpiration, DateTime? absoluteExpiration)\n        {\n            var policy = new CacheItemPolicy();\n\n            if (absoluteExpiration.HasValue)\n            {\n                policy.AbsoluteExpiration = absoluteExpiration.Value;\n            }\n            else if (slidingExpiration.HasValue)\n            {\n                policy.SlidingExpiration = slidingExpiration.Value;\n            }\n\n            policy.Priority = CacheItemPriority.Default;\n\n            return policy;\n        }\n    }\n}\n```","slug":"【爬虫学习笔记】MemoryCache缓存的用法学习","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ots001sd00o3a0m2e4y","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>在完成了DNS解析模块之后，我意识到了DNS缓存机制也很有必要。在Redis，Memcache，和.Net自带的Cache之间,考虑到部署问题，最终选择了后者，之前在学习Web及开发的过程中用过System.Web.Caching.Cache这个类库，但是这次的爬虫程序我打算部署为桌面软件，所以选用了System.Runtime.Caching.MemoryCache（后期如有必要也会加入System.Web.Caching.Cache来适配Web端程序）。</p><p>MemoryCache的使用网上介绍的不多，不过这个是.NET4.0新引入的缓存对象，估计主要是替换原来企业库的缓存模块，使得.NET的缓存可以无处不在，而不用基于特定的Windows版本上使用。</p><p>出于方便考虑，我们将不再实例化新的MemoryCache对象，只对MemoryCache的默认示例Memory.Default进行增删查操作。</p><h2 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h2><h3 id=\"增加\"><a href=\"#增加\" class=\"headerlink\" title=\"增加\"></a>增加</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218211417/20180218091804918.png\" alt=\"\"><br>增加缓存需要提供两个参数，CacheItem类表示缓存中的单个缓存项,</p><p>构造函数:<br>CacheItem(String, Object, String) 用缓存项的指定键、值和区域初始化新的 CacheItem 实例。</p><p>三个参数分别为：键、值和区域。</p><p>CacheItemPolicy类则表示缓存项的过期信息，只含有默认的构造函数。</p><p>增加一条缓存：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> item = <span class=\"keyword\">new</span> CacheItem(<span class=\"string\">\"习大大\"</span>, <span class=\"string\">\"两学一做\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> policy = <span class=\"keyword\">new</span> CacheItemPolicy();</span><br><span class=\"line\">policy.SlidingExpiration = <span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"comment\">//插入一条key为\"习大大\",value为\"两学一做\",500毫秒后自动销毁的缓存</span></span><br><span class=\"line\">MemoryCache.Default.Add(item, policy);</span><br><span class=\"line\"><span class=\"comment\">//重新设置policy的过期时间为当前时间+十分钟</span></span><br><span class=\"line\">policy.AbsoluteExpiration = DateTimeOffset.Now + TimeSpan.FromMinutes(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"comment\">//注意,如果要使用Sliding时间,则Absolute必须为DateTimeOffset.MaxValue,反之,则Sliding必须为TimeSpan.Zero</span></span><br><span class=\"line\">policy.SlidingExpiration = TimeSpan.Zero;</span><br><span class=\"line\"><span class=\"comment\">//重新插入,覆盖前一条数据</span></span><br><span class=\"line\">MemoryCache.Default.Add(item, policy);</span><br></pre></td></tr></table></figure><p></p><p><font style=\"background-color:#ff0\">注意,如果要使用Sliding时间,则Absolute<strong>必须为DateTimeOffset.MaxValue</strong>,反之,则Sliding<strong>必须为TimeSpan.Zero</strong></font><strong></strong></p><h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>缓存对象类似于字典集,查询可以直接采用memoryCache[key]来进行,例如我们查询一下前面插入的那条数据:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> idea = MemoryCache.Default[<span class=\"string\">\"习大大\"</span>];</span><br></pre></td></tr></table></figure><p></p><h3 id=\"移除\"><a href=\"#移除\" class=\"headerlink\" title=\"移除\"></a>移除</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218211417/20180218092011241.png\" alt=\"\"><br><strong>参数</strong><br><strong><em>key</em></strong>:要移除的缓存项的唯一标识符。<br><strong><em>regionName</em></strong>:缓存中的一个添加了缓存项的命名区域。不要为该参数传递值。默认情况下，此参数为null，因为 MemoryCache 类未实现区域。<br><strong>返回值</strong><br><strong><em>Type</em></strong>: <em>System.Object</em> 如果在缓存中找到该项，则为已移除的缓存项；否则为 null。</p><p>删除前面加入的那一项:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MemoryCache.Default.Remove(<span class=\"string\">\"习大大\"</span>);</span><br></pre></td></tr></table></figure><p></p><h2 id=\"进一步封装\"><a href=\"#进一步封装\" class=\"headerlink\" title=\"进一步封装\"></a>进一步封装</h2><p>明白了基本的用法之后，我们就可以对它做进一步的封装，使之使用起来更为便捷：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Runtime.Caching;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Common</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 基于MemoryCache的缓存辅助类</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">MemoryCacheHelper</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">object</span> _locker = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">Contains</span>(<span class=\"params\"><span class=\"keyword\">string</span> key</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> MemoryCache.Default.Contains(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获取Catch元素</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"T\"&gt;</span>所获取的元素的类型<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>元素的键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>特定的元素值<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T Get&lt;T&gt;(<span class=\"keyword\">string</span> key)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(key)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"不合法的key!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!MemoryCache.Default.Contains(key))</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"获取失败,不存在该key!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(MemoryCache.Default[key] <span class=\"keyword\">is</span> T))</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"未找到所需类型数据!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T)MemoryCache.Default[key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加Catch元素</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>元素的键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>元素的值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"slidingExpiration\"&gt;</span>元素过期时间(时间间隔)<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"absoluteExpiration\"&gt;</span>元素过期时间(绝对时间)<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">string</span> key, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span>, TimeSpan? slidingExpiration = <span class=\"literal\">null</span>, DateTime? absoluteExpiration = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> item = <span class=\"keyword\">new</span> CacheItem(key, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> policy = CreatePolicy(slidingExpiration, absoluteExpiration);</span><br><span class=\"line\">            <span class=\"keyword\">lock</span> (_locker)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> MemoryCache.Default.Add(item, policy);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 移出Cache元素</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"T\"&gt;</span>待移出元素的类型<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>待移除元素的键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>已经移出的元素<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T Remove&lt;T&gt;(<span class=\"keyword\">string</span> key)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(key)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"不合法的key!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!MemoryCache.Default.Contains(key))</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"获取失败,不存在该key!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = MemoryCache.Default.Get(key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> T))</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"未找到所需类型数据!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T)MemoryCache.Default.Remove(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 移出多条缓存数据,默认为所有缓存</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"T\"&gt;</span>待移出的缓存类型<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"keyList\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;T&gt; RemoveAll&lt;T&gt;(IEnumerable&lt;<span class=\"keyword\">string</span>&gt; keyList = <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (keyList != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"keyword\">from</span> key <span class=\"keyword\">in</span> keyList</span><br><span class=\"line\">                        <span class=\"keyword\">where</span> MemoryCache.Default.Contains(key)</span><br><span class=\"line\">                        <span class=\"keyword\">where</span> MemoryCache.Default.Get(key) <span class=\"keyword\">is</span> T</span><br><span class=\"line\">                        <span class=\"keyword\">select</span> (T)MemoryCache.Default.Remove(key)).ToList();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (MemoryCache.Default.GetCount() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                MemoryCache.Default.Remove(MemoryCache.Default.ElementAt(<span class=\"number\">0</span>).Key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> List&lt;T&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 设置过期信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"slidingExpiration\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"absoluteExpiration\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CacheItemPolicy <span class=\"title\">CreatePolicy</span>(<span class=\"params\">TimeSpan? slidingExpiration, DateTime? absoluteExpiration</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> policy = <span class=\"keyword\">new</span> CacheItemPolicy();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (absoluteExpiration.HasValue)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                policy.AbsoluteExpiration = absoluteExpiration.Value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (slidingExpiration.HasValue)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                policy.SlidingExpiration = slidingExpiration.Value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            policy.Priority = CacheItemPriority.Default;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> policy;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>在完成了DNS解析模块之后，我意识到了DNS缓存机制也很有必要。在Redis，Memcache，和.Net自带的Cache之间,考虑到部署问题，最终选择了后者，之前在学习Web及开发的过程中用过System.Web.Caching.Cache这个类库，但是这次的爬虫程序我打算部署为桌面软件，所以选用了System.Runtime.Caching.MemoryCache（后期如有必要也会加入System.Web.Caching.Cache来适配Web端程序）。</p><p>MemoryCache的使用网上介绍的不多，不过这个是.NET4.0新引入的缓存对象，估计主要是替换原来企业库的缓存模块，使得.NET的缓存可以无处不在，而不用基于特定的Windows版本上使用。</p><p>出于方便考虑，我们将不再实例化新的MemoryCache对象，只对MemoryCache的默认示例Memory.Default进行增删查操作。</p><h2 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h2><h3 id=\"增加\"><a href=\"#增加\" class=\"headerlink\" title=\"增加\"></a>增加</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218211417/20180218091804918.png\" alt=\"\"><br>增加缓存需要提供两个参数，CacheItem类表示缓存中的单个缓存项,</p><p>构造函数:<br>CacheItem(String, Object, String) 用缓存项的指定键、值和区域初始化新的 CacheItem 实例。</p><p>三个参数分别为：键、值和区域。</p><p>CacheItemPolicy类则表示缓存项的过期信息，只含有默认的构造函数。</p><p>增加一条缓存：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> item = <span class=\"keyword\">new</span> CacheItem(<span class=\"string\">\"习大大\"</span>, <span class=\"string\">\"两学一做\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> policy = <span class=\"keyword\">new</span> CacheItemPolicy();</span><br><span class=\"line\">policy.SlidingExpiration = <span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"comment\">//插入一条key为\"习大大\",value为\"两学一做\",500毫秒后自动销毁的缓存</span></span><br><span class=\"line\">MemoryCache.Default.Add(item, policy);</span><br><span class=\"line\"><span class=\"comment\">//重新设置policy的过期时间为当前时间+十分钟</span></span><br><span class=\"line\">policy.AbsoluteExpiration = DateTimeOffset.Now + TimeSpan.FromMinutes(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"comment\">//注意,如果要使用Sliding时间,则Absolute必须为DateTimeOffset.MaxValue,反之,则Sliding必须为TimeSpan.Zero</span></span><br><span class=\"line\">policy.SlidingExpiration = TimeSpan.Zero;</span><br><span class=\"line\"><span class=\"comment\">//重新插入,覆盖前一条数据</span></span><br><span class=\"line\">MemoryCache.Default.Add(item, policy);</span><br></pre></td></tr></table></figure><p></p><p><font style=\"background-color:#ff0\">注意,如果要使用Sliding时间,则Absolute<strong>必须为DateTimeOffset.MaxValue</strong>,反之,则Sliding<strong>必须为TimeSpan.Zero</strong></font><strong></strong></p><h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>缓存对象类似于字典集,查询可以直接采用memoryCache[key]来进行,例如我们查询一下前面插入的那条数据:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> idea = MemoryCache.Default[<span class=\"string\">\"习大大\"</span>];</span><br></pre></td></tr></table></figure><p></p><h3 id=\"移除\"><a href=\"#移除\" class=\"headerlink\" title=\"移除\"></a>移除</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218211417/20180218092011241.png\" alt=\"\"><br><strong>参数</strong><br><strong><em>key</em></strong>:要移除的缓存项的唯一标识符。<br><strong><em>regionName</em></strong>:缓存中的一个添加了缓存项的命名区域。不要为该参数传递值。默认情况下，此参数为null，因为 MemoryCache 类未实现区域。<br><strong>返回值</strong><br><strong><em>Type</em></strong>: <em>System.Object</em> 如果在缓存中找到该项，则为已移除的缓存项；否则为 null。</p><p>删除前面加入的那一项:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MemoryCache.Default.Remove(<span class=\"string\">\"习大大\"</span>);</span><br></pre></td></tr></table></figure><p></p><h2 id=\"进一步封装\"><a href=\"#进一步封装\" class=\"headerlink\" title=\"进一步封装\"></a>进一步封装</h2><p>明白了基本的用法之后，我们就可以对它做进一步的封装，使之使用起来更为便捷：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Runtime.Caching;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Common</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 基于MemoryCache的缓存辅助类</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">MemoryCacheHelper</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">object</span> _locker = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">Contains</span>(<span class=\"params\"><span class=\"keyword\">string</span> key</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> MemoryCache.Default.Contains(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获取Catch元素</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"T\"&gt;</span>所获取的元素的类型<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>元素的键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>特定的元素值<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T Get&lt;T&gt;(<span class=\"keyword\">string</span> key)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(key)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"不合法的key!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!MemoryCache.Default.Contains(key))</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"获取失败,不存在该key!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(MemoryCache.Default[key] <span class=\"keyword\">is</span> T))</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"未找到所需类型数据!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T)MemoryCache.Default[key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加Catch元素</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>元素的键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>元素的值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"slidingExpiration\"&gt;</span>元素过期时间(时间间隔)<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"absoluteExpiration\"&gt;</span>元素过期时间(绝对时间)<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">string</span> key, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span>, TimeSpan? slidingExpiration = <span class=\"literal\">null</span>, DateTime? absoluteExpiration = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> item = <span class=\"keyword\">new</span> CacheItem(key, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> policy = CreatePolicy(slidingExpiration, absoluteExpiration);</span><br><span class=\"line\">            <span class=\"keyword\">lock</span> (_locker)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> MemoryCache.Default.Add(item, policy);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 移出Cache元素</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"T\"&gt;</span>待移出元素的类型<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>待移除元素的键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>已经移出的元素<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T Remove&lt;T&gt;(<span class=\"keyword\">string</span> key)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(key)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"不合法的key!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!MemoryCache.Default.Contains(key))</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"获取失败,不存在该key!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = MemoryCache.Default.Get(key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> T))</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"未找到所需类型数据!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T)MemoryCache.Default.Remove(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 移出多条缓存数据,默认为所有缓存</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"T\"&gt;</span>待移出的缓存类型<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"keyList\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;T&gt; RemoveAll&lt;T&gt;(IEnumerable&lt;<span class=\"keyword\">string</span>&gt; keyList = <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (keyList != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"keyword\">from</span> key <span class=\"keyword\">in</span> keyList</span><br><span class=\"line\">                        <span class=\"keyword\">where</span> MemoryCache.Default.Contains(key)</span><br><span class=\"line\">                        <span class=\"keyword\">where</span> MemoryCache.Default.Get(key) <span class=\"keyword\">is</span> T</span><br><span class=\"line\">                        <span class=\"keyword\">select</span> (T)MemoryCache.Default.Remove(key)).ToList();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (MemoryCache.Default.GetCount() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                MemoryCache.Default.Remove(MemoryCache.Default.ElementAt(<span class=\"number\">0</span>).Key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> List&lt;T&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 设置过期信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"slidingExpiration\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"absoluteExpiration\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CacheItemPolicy <span class=\"title\">CreatePolicy</span>(<span class=\"params\">TimeSpan? slidingExpiration, DateTime? absoluteExpiration</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> policy = <span class=\"keyword\">new</span> CacheItemPolicy();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (absoluteExpiration.HasValue)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                policy.AbsoluteExpiration = absoluteExpiration.Value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (slidingExpiration.HasValue)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                policy.SlidingExpiration = slidingExpiration.Value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            policy.Priority = CacheItemPriority.Default;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> policy;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"【爬虫学习笔记】ScrapySharp简单封装为Requester","abbrlink":41785,"date":"2016-09-12T16:26:46.000Z","_content":"为了便于使用及日后的扩展，将Scrapy简单封装为了Requester。\n<!-- more -->\n具体代码如下：\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing Crawler.Common;\n\nnamespace Crawler.Protocol\n{\n    public class Requester\n    {\n        private Uri Url { get; set; }\n        private Browser Browser { get; set; }\n\n        public Requester(string url, Dictionary<string, string> headers = null, Browser browser = null)\n        {\n            var u = new Uri(url);\n            //检测地址是域名还是IP地址,如果是域名,则使用DnsResolver解析为IP地址\n            var leftPart = u.GetLeftPart(UriPartial.Authority).Replace(u.GetLeftPart(UriPartial.Scheme), \"\");\n            //正则匹配是否为IP地址\n            if (!RegexHelper.IsMatch(leftPart, @\"\\d+\\.\\d+\\.\\d+\\.\\d+\\w\"))\n            {\n                var dns = new DnsResolver(leftPart);\n                if (dns.IsSuccess)\n                    u = new Uri(url.Replace(leftPart, dns.Record.Address.ToString()));\n            }\n            Url = u;\n            Browser = browser ?? new Browser();\n            if (headers == null) return;\n            foreach (var header in headers)\n                Browser.Headers[header.Key] = header.Value;\n        }\n\n\n\n        public string GetHtml()\n        {\n            return Browser.DownloadString(Url);\n        }\n\n        public byte[] GetFile()\n        {\n            return Browser.NavigateToPage(Url).RawResponse.Body;\n        }\n    }\n}\n```\n考虑到可能对ScrapyBrowser做一些扩展（例如增加对FTP等其他协议的支持），故新建了Browser类继承自ScrapyBrowser类：\n```csharp\nusing ScrapySharp.Network;\n\nnamespace Crawler.Protocol\n{\n    public class Browser : ScrapingBrowser\n    {\n\n    }\n}\n```","source":"_posts/【爬虫学习笔记】ScrapySharp简单封装为Requester.md","raw":"---\ntitle: 【爬虫学习笔记】ScrapySharp简单封装为Requester\ntags:\n  - 爬虫\n  - ScrapySharp\nabbrlink: 41785\ndate: 2016-09-13 00:26:46\n---\n为了便于使用及日后的扩展，将Scrapy简单封装为了Requester。\n<!-- more -->\n具体代码如下：\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing Crawler.Common;\n\nnamespace Crawler.Protocol\n{\n    public class Requester\n    {\n        private Uri Url { get; set; }\n        private Browser Browser { get; set; }\n\n        public Requester(string url, Dictionary<string, string> headers = null, Browser browser = null)\n        {\n            var u = new Uri(url);\n            //检测地址是域名还是IP地址,如果是域名,则使用DnsResolver解析为IP地址\n            var leftPart = u.GetLeftPart(UriPartial.Authority).Replace(u.GetLeftPart(UriPartial.Scheme), \"\");\n            //正则匹配是否为IP地址\n            if (!RegexHelper.IsMatch(leftPart, @\"\\d+\\.\\d+\\.\\d+\\.\\d+\\w\"))\n            {\n                var dns = new DnsResolver(leftPart);\n                if (dns.IsSuccess)\n                    u = new Uri(url.Replace(leftPart, dns.Record.Address.ToString()));\n            }\n            Url = u;\n            Browser = browser ?? new Browser();\n            if (headers == null) return;\n            foreach (var header in headers)\n                Browser.Headers[header.Key] = header.Value;\n        }\n\n\n\n        public string GetHtml()\n        {\n            return Browser.DownloadString(Url);\n        }\n\n        public byte[] GetFile()\n        {\n            return Browser.NavigateToPage(Url).RawResponse.Body;\n        }\n    }\n}\n```\n考虑到可能对ScrapyBrowser做一些扩展（例如增加对FTP等其他协议的支持），故新建了Browser类继承自ScrapyBrowser类：\n```csharp\nusing ScrapySharp.Network;\n\nnamespace Crawler.Protocol\n{\n    public class Browser : ScrapingBrowser\n    {\n\n    }\n}\n```","slug":"【爬虫学习笔记】ScrapySharp简单封装为Requester","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24otu001ud00o9wrba3jb","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>为了便于使用及日后的扩展，将Scrapy简单封装为了Requester。<br><a id=\"more\"></a><br>具体代码如下：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Crawler.Common;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Protocol</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Requester</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Uri Url &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Browser Browser &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Requester</span>(<span class=\"params\"><span class=\"keyword\">string</span> url, Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">string</span>&gt; headers = <span class=\"literal\">null</span>, Browser browser = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> u = <span class=\"keyword\">new</span> Uri(url);</span><br><span class=\"line\">            <span class=\"comment\">//检测地址是域名还是IP地址,如果是域名,则使用DnsResolver解析为IP地址</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> leftPart = u.GetLeftPart(UriPartial.Authority).Replace(u.GetLeftPart(UriPartial.Scheme), <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//正则匹配是否为IP地址</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!RegexHelper.IsMatch(leftPart, <span class=\"string\">@\"\\d+\\.\\d+\\.\\d+\\.\\d+\\w\"</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> dns = <span class=\"keyword\">new</span> DnsResolver(leftPart);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dns.IsSuccess)</span><br><span class=\"line\">                    u = <span class=\"keyword\">new</span> Uri(url.Replace(leftPart, dns.Record.Address.ToString()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Url = u;</span><br><span class=\"line\">            Browser = browser ?? <span class=\"keyword\">new</span> Browser();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (headers == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> header <span class=\"keyword\">in</span> headers)</span><br><span class=\"line\">                Browser.Headers[header.Key] = header.Value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetHtml</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Browser.DownloadString(Url);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] <span class=\"title\">GetFile</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Browser.NavigateToPage(Url).RawResponse.Body;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>考虑到可能对ScrapyBrowser做一些扩展（例如增加对FTP等其他协议的支持），故新建了Browser类继承自ScrapyBrowser类：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> ScrapySharp.Network;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Protocol</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Browser</span> : <span class=\"title\">ScrapingBrowser</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>为了便于使用及日后的扩展，将Scrapy简单封装为了Requester。<br>","more":"<br>具体代码如下：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Crawler.Common;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Protocol</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Requester</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Uri Url &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Browser Browser &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Requester</span>(<span class=\"params\"><span class=\"keyword\">string</span> url, Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">string</span>&gt; headers = <span class=\"literal\">null</span>, Browser browser = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> u = <span class=\"keyword\">new</span> Uri(url);</span><br><span class=\"line\">            <span class=\"comment\">//检测地址是域名还是IP地址,如果是域名,则使用DnsResolver解析为IP地址</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> leftPart = u.GetLeftPart(UriPartial.Authority).Replace(u.GetLeftPart(UriPartial.Scheme), <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//正则匹配是否为IP地址</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!RegexHelper.IsMatch(leftPart, <span class=\"string\">@\"\\d+\\.\\d+\\.\\d+\\.\\d+\\w\"</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> dns = <span class=\"keyword\">new</span> DnsResolver(leftPart);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dns.IsSuccess)</span><br><span class=\"line\">                    u = <span class=\"keyword\">new</span> Uri(url.Replace(leftPart, dns.Record.Address.ToString()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Url = u;</span><br><span class=\"line\">            Browser = browser ?? <span class=\"keyword\">new</span> Browser();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (headers == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> header <span class=\"keyword\">in</span> headers)</span><br><span class=\"line\">                Browser.Headers[header.Key] = header.Value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetHtml</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Browser.DownloadString(Url);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] <span class=\"title\">GetFile</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Browser.NavigateToPage(Url).RawResponse.Body;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>考虑到可能对ScrapyBrowser做一些扩展（例如增加对FTP等其他协议的支持），故新建了Browser类继承自ScrapyBrowser类：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> ScrapySharp.Network;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Protocol</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Browser</span> : <span class=\"title\">ScrapingBrowser</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"【爬虫学习笔记】Url过滤模块UrlFilter","abbrlink":27677,"date":"2016-09-26T12:50:45.000Z","_content":"Url Filter则是对提取出来的URL再进行一次筛选。不同的应用筛选的标准是不一样的，比如对于baidu/google的搜索，一般不进行筛选，但是对于垂直搜索或者定向抓取的应用，那么它可能只需要满足某个条件的url，比如不需要图片的url，比如只需要某个特定网站的url等等。Url Filter是一个和应用密切相关的模块。\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing Crawler.Common;\n\nnamespace Crawler.Processing\n{\n    public class UrlFilter\n    {\n        public static List<Uri> RemoveByRegex(List<Uri> uris, params string[] regexs)\n        {\n            var uriList=new List<Uri>(uris);\n            for (var i = 0; i < uriList.Count; i++)\n            {\n                foreach (var r in regexs)\n                {\n                    if (!RegexHelper.IsMatch(uriList[i].ToString(), r)) continue;\n                    uris.RemoveAt(i);\n                    i--;\n                }\n            }\n            return uriList;\n        }\n\n        public static List<Uri> SelectByRegex(List<Uri> uris, params string[] regexs)\n        {\n            var uriList = new List<Uri>();\n            foreach (var t in uris)\n                foreach (var r in regexs)\n                    if (RegexHelper.IsMatch(t.ToString(), r))\n                        if(!uriList.Contains(t))\n                            uriList.Add(t);\n            return uriList;\n        }\n\n    }\n}\n```\n","source":"_posts/【爬虫学习笔记】Url过滤模块UrlFilter.md","raw":"---\ntitle: 【爬虫学习笔记】Url过滤模块UrlFilter\ntags:\n  - 爬虫\n  - UrlFilter\nabbrlink: 27677\ndate: 2016-09-26 20:50:45\n---\nUrl Filter则是对提取出来的URL再进行一次筛选。不同的应用筛选的标准是不一样的，比如对于baidu/google的搜索，一般不进行筛选，但是对于垂直搜索或者定向抓取的应用，那么它可能只需要满足某个条件的url，比如不需要图片的url，比如只需要某个特定网站的url等等。Url Filter是一个和应用密切相关的模块。\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing Crawler.Common;\n\nnamespace Crawler.Processing\n{\n    public class UrlFilter\n    {\n        public static List<Uri> RemoveByRegex(List<Uri> uris, params string[] regexs)\n        {\n            var uriList=new List<Uri>(uris);\n            for (var i = 0; i < uriList.Count; i++)\n            {\n                foreach (var r in regexs)\n                {\n                    if (!RegexHelper.IsMatch(uriList[i].ToString(), r)) continue;\n                    uris.RemoveAt(i);\n                    i--;\n                }\n            }\n            return uriList;\n        }\n\n        public static List<Uri> SelectByRegex(List<Uri> uris, params string[] regexs)\n        {\n            var uriList = new List<Uri>();\n            foreach (var t in uris)\n                foreach (var r in regexs)\n                    if (RegexHelper.IsMatch(t.ToString(), r))\n                        if(!uriList.Contains(t))\n                            uriList.Add(t);\n            return uriList;\n        }\n\n    }\n}\n```\n","slug":"【爬虫学习笔记】Url过滤模块UrlFilter","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24otx001xd00oaw67jnz5","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>Url Filter则是对提取出来的URL再进行一次筛选。不同的应用筛选的标准是不一样的，比如对于baidu/google的搜索，一般不进行筛选，但是对于垂直搜索或者定向抓取的应用，那么它可能只需要满足某个条件的url，比如不需要图片的url，比如只需要某个特定网站的url等等。Url Filter是一个和应用密切相关的模块。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Crawler.Common;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Processing</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UrlFilter</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Uri&gt; <span class=\"title\">RemoveByRegex</span>(<span class=\"params\">List&lt;Uri&gt; uris, <span class=\"keyword\">params</span> <span class=\"keyword\">string</span>[] regexs</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> uriList=<span class=\"keyword\">new</span> List&lt;Uri&gt;(uris);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; uriList.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> r <span class=\"keyword\">in</span> regexs)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!RegexHelper.IsMatch(uriList[i].ToString(), r)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    uris.RemoveAt(i);</span><br><span class=\"line\">                    i--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> uriList;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Uri&gt; <span class=\"title\">SelectByRegex</span>(<span class=\"params\">List&lt;Uri&gt; uris, <span class=\"keyword\">params</span> <span class=\"keyword\">string</span>[] regexs</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> uriList = <span class=\"keyword\">new</span> List&lt;Uri&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> uris)</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> r <span class=\"keyword\">in</span> regexs)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (RegexHelper.IsMatch(t.ToString(), r))</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!uriList.Contains(t))</span><br><span class=\"line\">                            uriList.Add(t);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> uriList;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>Url Filter则是对提取出来的URL再进行一次筛选。不同的应用筛选的标准是不一样的，比如对于baidu/google的搜索，一般不进行筛选，但是对于垂直搜索或者定向抓取的应用，那么它可能只需要满足某个条件的url，比如不需要图片的url，比如只需要某个特定网站的url等等。Url Filter是一个和应用密切相关的模块。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Crawler.Common;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Processing</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UrlFilter</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Uri&gt; <span class=\"title\">RemoveByRegex</span>(<span class=\"params\">List&lt;Uri&gt; uris, <span class=\"keyword\">params</span> <span class=\"keyword\">string</span>[] regexs</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> uriList=<span class=\"keyword\">new</span> List&lt;Uri&gt;(uris);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; uriList.Count; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> r <span class=\"keyword\">in</span> regexs)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!RegexHelper.IsMatch(uriList[i].ToString(), r)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    uris.RemoveAt(i);</span><br><span class=\"line\">                    i--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> uriList;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Uri&gt; <span class=\"title\">SelectByRegex</span>(<span class=\"params\">List&lt;Uri&gt; uris, <span class=\"keyword\">params</span> <span class=\"keyword\">string</span>[] regexs</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> uriList = <span class=\"keyword\">new</span> List&lt;Uri&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> uris)</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> r <span class=\"keyword\">in</span> regexs)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (RegexHelper.IsMatch(t.ToString(), r))</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!uriList.Contains(t))</span><br><span class=\"line\">                            uriList.Add(t);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> uriList;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"【爬虫学习笔记】基于 SimHash 的去重复处理模块ContentSeen的构建","abbrlink":38230,"date":"2016-09-13T12:00:39.000Z","_content":"Internet上的一些站点常常存在着镜像网站（mirror），即两个网站的内容一样但网页对应的域名不同。这样会导致对同一份网页爬虫重复抓取多次。为了避免这种情况，对于每一份抓取到的网页，它首先需要进入ContentSeen模块。该模块会判断网页的内容是否和已下载过的某个网页的内容一致，如果一致，则该网页不会再被送去进行下一步的处理。这样的做法能够显著的降低爬虫需要下载的网页数。至于如果判断两个网页的内容是否一致，一般的思路是这样的：并不会去直接比较两个网页的内容，而是将网页的内容经过计算生成FingerPrint（指纹），通常FingerPrint是一个固定长度的字符串，要比网页的正文短很多。如果两个网页的FingerPrint一样，则认为它们内容完全相同。\n\n为了完成这一模块，首先我们需要一个强大的指纹算法，将我们的网页内容计算成指纹存入数据库，下次直接判断指纹在保存前通过指纹的对比即可成功完成去重复操作。\n<!-- more -->\n## SmiHash算法\n首先来看一下大名鼎鼎的Google公司使用的网页去重复算法SimHash吧：\n\nGoogleMoses Charikar发表的一篇论文“detecting near-duplicates for web crawling”中提出了simhash算法，专门用来解决亿万级别的网页的去重任务。\n\nSimHash作为locality sensitive hash（局部敏感哈希）的一种：\n\n其主要思想是降维，将高维的特征向量映射成低维的特征向量，通过两个向量的Hamming Distance来确定文章是否重复或者高度近似。\n\n其中，Hamming Distance，又称汉明距离，在信息论中，两个等长字符串之间的汉明距离是两个字符串对应位置的不同字符的个数。也就是说，它就是将一个字符串变换成 另外一个字符串所需要替换的字符个数。例如：1011101 与 1001001 之间的汉明距离是 2。至于我们常说的字符串编辑距离则是一般形式的汉明距离。\n\n如此，通过比较多个文档的SimHash值的海明距离，可以获取它们的相似度。\n\n详情可以看这里[SimHash算法](http://www.cnblogs.com/chenying99/p/3830728.html)\n## 算法实现\n下面我们进行代码实现:\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Crawler.Common\n{\n    public class SimHashAnalyser\n    {\n\n        private const int HashSize = 32;\n\n        public static float GetLikenessValue(string needle, string haystack, TokeniserType type = TokeniserType.Overlapping)\n        {\n            var needleSimHash = GetSimHash(needle, type);\n            var hayStackSimHash = GetSimHash(haystack, type);\n            return GetLikenessValue(needleSimHash, hayStackSimHash);\n        }\n\n        public static float GetLikenessValue(int needleSimHash, int hayStackSimHash)\n        {\n            return (HashSize - GetHammingDistance(needleSimHash, hayStackSimHash)) / (float)HashSize;\n        }\n\n        private static IEnumerable<int> DoHashTokens(IEnumerable<string> tokens)\n        {\n            return tokens.Select(token => token.GetHashCode()).ToList();\n        }\n\n        private static int GetHammingDistance(int firstValue, int secondValue)\n        {\n            var hammingBits = firstValue ^ secondValue;\n            var hammingValue = 0;\n            for (var i = 0; i < 32; i++)\n                if (IsBitSet(hammingBits, i))\n                    hammingValue += 1;\n            return hammingValue;\n        }\n\n        private static bool IsBitSet(int b, int pos)\n        {\n            return (b & (1 << pos)) != 0;\n        }\n\n\n        public static int GetSimHash(string input)\n        {\n            return GetSimHash(input, TokeniserType.Overlapping);\n        }\n\n        public static int GetSimHash(string input, TokeniserType tokeniserType)\n        {\n            ITokeniser tokeniser;\n            if (tokeniserType == TokeniserType.Overlapping)\n                tokeniser = new OverlappingStringTokeniser();\n            else\n                tokeniser = new FixedSizeStringTokeniser();\n\n            var hashedtokens = DoHashTokens(tokeniser.Tokenise(input));\n            var vector = new int[HashSize];\n            for (var i = 0; i < HashSize; i++)\n                vector[i] = 0;\n\n            foreach (var value in hashedtokens)\n                for (var j = 0; j < HashSize; j++)\n                    if (IsBitSet(value, j))\n                        vector[j] += 1;\n                    else\n                        vector[j] -= 1;\n            var fingerprint = 0;\n            for (var i = 0; i < HashSize; i++)\n                if (vector[i] > 0)\n                    fingerprint += 1 << i;\n            return fingerprint;\n        }\n\n    }\n\n    public interface ITokeniser\n    {\n        IEnumerable<string> Tokenise(string input);\n    }\n\n    public class FixedSizeStringTokeniser : ITokeniser\n    {\n        private readonly ushort _tokensize;\n        public FixedSizeStringTokeniser(ushort tokenSize = 5)\n        {\n            if (tokenSize < 2)\n                throw new ArgumentException(\"Token 不能超出范围\");\n            if (tokenSize > 127)\n                throw new ArgumentException(\"Token 不能超出范围\");\n            _tokensize = tokenSize;\n        }\n\n        public IEnumerable<string> Tokenise(string input)\n        {\n            var chunks = new List<string>();\n            var offset = 0;\n            while (offset < input.Length)\n            {\n                chunks.Add(new string(input.Skip(offset).Take(_tokensize).ToArray()));\n                offset += _tokensize;\n            }\n            return chunks;\n        }\n\n    }\n\n    public class OverlappingStringTokeniser : ITokeniser\n    {\n\n        private readonly ushort _chunkSize;\n        private readonly ushort _overlapSize;\n\n        public OverlappingStringTokeniser(ushort chunkSize = 4, ushort overlapSize = 3)\n        {\n            if (chunkSize <= overlapSize)\n                throw new ArgumentException(\"Chunck 必须大于 overlap\");\n            _overlapSize = overlapSize;\n            _chunkSize = chunkSize;\n        }\n\n        public IEnumerable<string> Tokenise(string input)\n        {\n            var result = new List<string>();\n            var position = 0;\n            while (position < input.Length - _chunkSize)\n            {\n                result.Add(input.Substring(position, _chunkSize));\n                position += _chunkSize - _overlapSize;\n            }\n            return result;\n        }\n\n\n    }\n\n    public enum TokeniserType\n    {\n        Overlapping,\n        FixedSize\n    }\n}\n```\n## 调用\n调用方法如下:\n```csharp\nvar s1 = \"the cat sat on the mat.\";\nvar s2 = \"the cat sat on a mat.\";\n\nvar similarity = SimHashAnalyser.GetLikenessValue(s1, s2);\n\nConsole.Clear();\nConsole.WriteLine(\"相似度: {0}%\", similarity * 100);\nConsole.ReadKey();\n```\n输出为:\n**相似度: 78.125%**\n## 封装\n接下来就是对ContentSeen模块的简单封装:\n```csharp\nusing Crawler.Common;\n\nnamespace Crawler.Processing\n{\n    /// <summary>\n    /// 对于每一份抓取到的网页，它首先需要进入Content Seen模块。该模块会判断网页的内容是否和已下载过的某个网页的内容一致，如果一致，则该网页不会再被送去进行下一步的处理。\n    /// </summary>\n    public class ContentSeen\n    {\n        public static int GetFingerPrint(string html)\n        {\n            return SimHashAnalyser.GetSimHash(html);\n        }\n\n        public static float Similarity(int print1, int print2)\n        {\n            return SimHashAnalyser.GetLikenessValue(print1, print2);\n        }\n\n    }\n}\n```","source":"_posts/【爬虫学习笔记】基于-SimHash-的去重复处理模块ContentSeen的构建.md","raw":"---\ntitle: 【爬虫学习笔记】基于 SimHash 的去重复处理模块ContentSeen的构建\ntags:\n  - 爬虫\nabbrlink: 38230\ndate: 2016-09-13 20:00:39\n---\nInternet上的一些站点常常存在着镜像网站（mirror），即两个网站的内容一样但网页对应的域名不同。这样会导致对同一份网页爬虫重复抓取多次。为了避免这种情况，对于每一份抓取到的网页，它首先需要进入ContentSeen模块。该模块会判断网页的内容是否和已下载过的某个网页的内容一致，如果一致，则该网页不会再被送去进行下一步的处理。这样的做法能够显著的降低爬虫需要下载的网页数。至于如果判断两个网页的内容是否一致，一般的思路是这样的：并不会去直接比较两个网页的内容，而是将网页的内容经过计算生成FingerPrint（指纹），通常FingerPrint是一个固定长度的字符串，要比网页的正文短很多。如果两个网页的FingerPrint一样，则认为它们内容完全相同。\n\n为了完成这一模块，首先我们需要一个强大的指纹算法，将我们的网页内容计算成指纹存入数据库，下次直接判断指纹在保存前通过指纹的对比即可成功完成去重复操作。\n<!-- more -->\n## SmiHash算法\n首先来看一下大名鼎鼎的Google公司使用的网页去重复算法SimHash吧：\n\nGoogleMoses Charikar发表的一篇论文“detecting near-duplicates for web crawling”中提出了simhash算法，专门用来解决亿万级别的网页的去重任务。\n\nSimHash作为locality sensitive hash（局部敏感哈希）的一种：\n\n其主要思想是降维，将高维的特征向量映射成低维的特征向量，通过两个向量的Hamming Distance来确定文章是否重复或者高度近似。\n\n其中，Hamming Distance，又称汉明距离，在信息论中，两个等长字符串之间的汉明距离是两个字符串对应位置的不同字符的个数。也就是说，它就是将一个字符串变换成 另外一个字符串所需要替换的字符个数。例如：1011101 与 1001001 之间的汉明距离是 2。至于我们常说的字符串编辑距离则是一般形式的汉明距离。\n\n如此，通过比较多个文档的SimHash值的海明距离，可以获取它们的相似度。\n\n详情可以看这里[SimHash算法](http://www.cnblogs.com/chenying99/p/3830728.html)\n## 算法实现\n下面我们进行代码实现:\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Crawler.Common\n{\n    public class SimHashAnalyser\n    {\n\n        private const int HashSize = 32;\n\n        public static float GetLikenessValue(string needle, string haystack, TokeniserType type = TokeniserType.Overlapping)\n        {\n            var needleSimHash = GetSimHash(needle, type);\n            var hayStackSimHash = GetSimHash(haystack, type);\n            return GetLikenessValue(needleSimHash, hayStackSimHash);\n        }\n\n        public static float GetLikenessValue(int needleSimHash, int hayStackSimHash)\n        {\n            return (HashSize - GetHammingDistance(needleSimHash, hayStackSimHash)) / (float)HashSize;\n        }\n\n        private static IEnumerable<int> DoHashTokens(IEnumerable<string> tokens)\n        {\n            return tokens.Select(token => token.GetHashCode()).ToList();\n        }\n\n        private static int GetHammingDistance(int firstValue, int secondValue)\n        {\n            var hammingBits = firstValue ^ secondValue;\n            var hammingValue = 0;\n            for (var i = 0; i < 32; i++)\n                if (IsBitSet(hammingBits, i))\n                    hammingValue += 1;\n            return hammingValue;\n        }\n\n        private static bool IsBitSet(int b, int pos)\n        {\n            return (b & (1 << pos)) != 0;\n        }\n\n\n        public static int GetSimHash(string input)\n        {\n            return GetSimHash(input, TokeniserType.Overlapping);\n        }\n\n        public static int GetSimHash(string input, TokeniserType tokeniserType)\n        {\n            ITokeniser tokeniser;\n            if (tokeniserType == TokeniserType.Overlapping)\n                tokeniser = new OverlappingStringTokeniser();\n            else\n                tokeniser = new FixedSizeStringTokeniser();\n\n            var hashedtokens = DoHashTokens(tokeniser.Tokenise(input));\n            var vector = new int[HashSize];\n            for (var i = 0; i < HashSize; i++)\n                vector[i] = 0;\n\n            foreach (var value in hashedtokens)\n                for (var j = 0; j < HashSize; j++)\n                    if (IsBitSet(value, j))\n                        vector[j] += 1;\n                    else\n                        vector[j] -= 1;\n            var fingerprint = 0;\n            for (var i = 0; i < HashSize; i++)\n                if (vector[i] > 0)\n                    fingerprint += 1 << i;\n            return fingerprint;\n        }\n\n    }\n\n    public interface ITokeniser\n    {\n        IEnumerable<string> Tokenise(string input);\n    }\n\n    public class FixedSizeStringTokeniser : ITokeniser\n    {\n        private readonly ushort _tokensize;\n        public FixedSizeStringTokeniser(ushort tokenSize = 5)\n        {\n            if (tokenSize < 2)\n                throw new ArgumentException(\"Token 不能超出范围\");\n            if (tokenSize > 127)\n                throw new ArgumentException(\"Token 不能超出范围\");\n            _tokensize = tokenSize;\n        }\n\n        public IEnumerable<string> Tokenise(string input)\n        {\n            var chunks = new List<string>();\n            var offset = 0;\n            while (offset < input.Length)\n            {\n                chunks.Add(new string(input.Skip(offset).Take(_tokensize).ToArray()));\n                offset += _tokensize;\n            }\n            return chunks;\n        }\n\n    }\n\n    public class OverlappingStringTokeniser : ITokeniser\n    {\n\n        private readonly ushort _chunkSize;\n        private readonly ushort _overlapSize;\n\n        public OverlappingStringTokeniser(ushort chunkSize = 4, ushort overlapSize = 3)\n        {\n            if (chunkSize <= overlapSize)\n                throw new ArgumentException(\"Chunck 必须大于 overlap\");\n            _overlapSize = overlapSize;\n            _chunkSize = chunkSize;\n        }\n\n        public IEnumerable<string> Tokenise(string input)\n        {\n            var result = new List<string>();\n            var position = 0;\n            while (position < input.Length - _chunkSize)\n            {\n                result.Add(input.Substring(position, _chunkSize));\n                position += _chunkSize - _overlapSize;\n            }\n            return result;\n        }\n\n\n    }\n\n    public enum TokeniserType\n    {\n        Overlapping,\n        FixedSize\n    }\n}\n```\n## 调用\n调用方法如下:\n```csharp\nvar s1 = \"the cat sat on the mat.\";\nvar s2 = \"the cat sat on a mat.\";\n\nvar similarity = SimHashAnalyser.GetLikenessValue(s1, s2);\n\nConsole.Clear();\nConsole.WriteLine(\"相似度: {0}%\", similarity * 100);\nConsole.ReadKey();\n```\n输出为:\n**相似度: 78.125%**\n## 封装\n接下来就是对ContentSeen模块的简单封装:\n```csharp\nusing Crawler.Common;\n\nnamespace Crawler.Processing\n{\n    /// <summary>\n    /// 对于每一份抓取到的网页，它首先需要进入Content Seen模块。该模块会判断网页的内容是否和已下载过的某个网页的内容一致，如果一致，则该网页不会再被送去进行下一步的处理。\n    /// </summary>\n    public class ContentSeen\n    {\n        public static int GetFingerPrint(string html)\n        {\n            return SimHashAnalyser.GetSimHash(html);\n        }\n\n        public static float Similarity(int print1, int print2)\n        {\n            return SimHashAnalyser.GetLikenessValue(print1, print2);\n        }\n\n    }\n}\n```","slug":"【爬虫学习笔记】基于-SimHash-的去重复处理模块ContentSeen的构建","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24otz001zd00oe7zumi0g","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>Internet上的一些站点常常存在着镜像网站（mirror），即两个网站的内容一样但网页对应的域名不同。这样会导致对同一份网页爬虫重复抓取多次。为了避免这种情况，对于每一份抓取到的网页，它首先需要进入ContentSeen模块。该模块会判断网页的内容是否和已下载过的某个网页的内容一致，如果一致，则该网页不会再被送去进行下一步的处理。这样的做法能够显著的降低爬虫需要下载的网页数。至于如果判断两个网页的内容是否一致，一般的思路是这样的：并不会去直接比较两个网页的内容，而是将网页的内容经过计算生成FingerPrint（指纹），通常FingerPrint是一个固定长度的字符串，要比网页的正文短很多。如果两个网页的FingerPrint一样，则认为它们内容完全相同。</p><p>为了完成这一模块，首先我们需要一个强大的指纹算法，将我们的网页内容计算成指纹存入数据库，下次直接判断指纹在保存前通过指纹的对比即可成功完成去重复操作。<br><a id=\"more\"></a></p><h2 id=\"SmiHash算法\"><a href=\"#SmiHash算法\" class=\"headerlink\" title=\"SmiHash算法\"></a>SmiHash算法</h2><p>首先来看一下大名鼎鼎的Google公司使用的网页去重复算法SimHash吧：</p><p>GoogleMoses Charikar发表的一篇论文“detecting near-duplicates for web crawling”中提出了simhash算法，专门用来解决亿万级别的网页的去重任务。</p><p>SimHash作为locality sensitive hash（局部敏感哈希）的一种：</p><p>其主要思想是降维，将高维的特征向量映射成低维的特征向量，通过两个向量的Hamming Distance来确定文章是否重复或者高度近似。</p><p>其中，Hamming Distance，又称汉明距离，在信息论中，两个等长字符串之间的汉明距离是两个字符串对应位置的不同字符的个数。也就是说，它就是将一个字符串变换成 另外一个字符串所需要替换的字符个数。例如：1011101 与 1001001 之间的汉明距离是 2。至于我们常说的字符串编辑距离则是一般形式的汉明距离。</p><p>如此，通过比较多个文档的SimHash值的海明距离，可以获取它们的相似度。</p><p>详情可以看这里<a href=\"http://www.cnblogs.com/chenying99/p/3830728.html\" target=\"_blank\" rel=\"noopener\">SimHash算法</a></p><h2 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h2><p>下面我们进行代码实现:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Common</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SimHashAnalyser</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> HashSize = <span class=\"number\">32</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> <span class=\"title\">GetLikenessValue</span>(<span class=\"params\"><span class=\"keyword\">string</span> needle, <span class=\"keyword\">string</span> haystack, TokeniserType type = TokeniserType.Overlapping</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> needleSimHash = GetSimHash(needle, type);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> hayStackSimHash = GetSimHash(haystack, type);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> GetLikenessValue(needleSimHash, hayStackSimHash);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> <span class=\"title\">GetLikenessValue</span>(<span class=\"params\"><span class=\"keyword\">int</span> needleSimHash, <span class=\"keyword\">int</span> hayStackSimHash</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (HashSize - GetHammingDistance(needleSimHash, hayStackSimHash)) / (<span class=\"keyword\">float</span>)HashSize;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">DoHashTokens</span>(<span class=\"params\">IEnumerable&lt;<span class=\"keyword\">string</span>&gt; tokens</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tokens.Select(token =&gt; token.GetHashCode()).ToList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">GetHammingDistance</span>(<span class=\"params\"><span class=\"keyword\">int</span> firstValue, <span class=\"keyword\">int</span> secondValue</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> hammingBits = firstValue ^ secondValue;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> hammingValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; i++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (IsBitSet(hammingBits, i))</span><br><span class=\"line\">                    hammingValue += <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> hammingValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsBitSet</span>(<span class=\"params\"><span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> pos</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (b &amp; (<span class=\"number\">1</span> &lt;&lt; pos)) != <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">GetSimHash</span>(<span class=\"params\"><span class=\"keyword\">string</span> input</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> GetSimHash(input, TokeniserType.Overlapping);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">GetSimHash</span>(<span class=\"params\"><span class=\"keyword\">string</span> input, TokeniserType tokeniserType</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            ITokeniser tokeniser;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tokeniserType == TokeniserType.Overlapping)</span><br><span class=\"line\">                tokeniser = <span class=\"keyword\">new</span> OverlappingStringTokeniser();</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                tokeniser = <span class=\"keyword\">new</span> FixedSizeStringTokeniser();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> hashedtokens = DoHashTokens(tokeniser.Tokenise(input));</span><br><span class=\"line\">            <span class=\"keyword\">var</span> vector = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[HashSize];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; HashSize; i++)</span><br><span class=\"line\">                vector[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> <span class=\"keyword\">value</span> <span class=\"keyword\">in</span> hashedtokens)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; HashSize; j++)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (IsBitSet(<span class=\"keyword\">value</span>, j))</span><br><span class=\"line\">                        vector[j] += <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        vector[j] -= <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> fingerprint = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; HashSize; i++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (vector[i] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    fingerprint += <span class=\"number\">1</span> &lt;&lt; i;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fingerprint;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ITokeniser</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">IEnumerable&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">Tokenise</span>(<span class=\"params\"><span class=\"keyword\">string</span> input</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FixedSizeStringTokeniser</span> : <span class=\"title\">ITokeniser</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">ushort</span> _tokensize;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FixedSizeStringTokeniser</span>(<span class=\"params\"><span class=\"keyword\">ushort</span> tokenSize = <span class=\"number\">5</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tokenSize &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"Token 不能超出范围\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tokenSize &gt; <span class=\"number\">127</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"Token 不能超出范围\"</span>);</span><br><span class=\"line\">            _tokensize = tokenSize;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">Tokenise</span>(<span class=\"params\"><span class=\"keyword\">string</span> input</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> chunks = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> offset = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (offset &lt; input.Length)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                chunks.Add(<span class=\"keyword\">new</span> <span class=\"keyword\">string</span>(input.Skip(offset).Take(_tokensize).ToArray()));</span><br><span class=\"line\">                offset += _tokensize;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> chunks;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OverlappingStringTokeniser</span> : <span class=\"title\">ITokeniser</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">ushort</span> _chunkSize;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">ushort</span> _overlapSize;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OverlappingStringTokeniser</span>(<span class=\"params\"><span class=\"keyword\">ushort</span> chunkSize = <span class=\"number\">4</span>, <span class=\"keyword\">ushort</span> overlapSize = <span class=\"number\">3</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chunkSize &lt;= overlapSize)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"Chunck 必须大于 overlap\"</span>);</span><br><span class=\"line\">            _overlapSize = overlapSize;</span><br><span class=\"line\">            _chunkSize = chunkSize;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">Tokenise</span>(<span class=\"params\"><span class=\"keyword\">string</span> input</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> position = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (position &lt; input.Length - _chunkSize)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                result.Add(input.Substring(position, _chunkSize));</span><br><span class=\"line\">                position += _chunkSize - _overlapSize;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> TokeniserType</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Overlapping,</span><br><span class=\"line\">        FixedSize</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h2><p>调用方法如下:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"string\">\"the cat sat on the mat.\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"string\">\"the cat sat on a mat.\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> similarity = SimHashAnalyser.GetLikenessValue(s1, s2);</span><br><span class=\"line\"></span><br><span class=\"line\">Console.Clear();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">\"相似度: &#123;0&#125;%\"</span>, similarity * <span class=\"number\">100</span>);</span><br><span class=\"line\">Console.ReadKey();</span><br></pre></td></tr></table></figure><p></p><p>输出为:<br><strong>相似度: 78.125%</strong></p><h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><p>接下来就是对ContentSeen模块的简单封装:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Crawler.Common;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Processing</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 对于每一份抓取到的网页，它首先需要进入Content Seen模块。该模块会判断网页的内容是否和已下载过的某个网页的内容一致，如果一致，则该网页不会再被送去进行下一步的处理。</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ContentSeen</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">GetFingerPrint</span>(<span class=\"params\"><span class=\"keyword\">string</span> html</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> SimHashAnalyser.GetSimHash(html);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> <span class=\"title\">Similarity</span>(<span class=\"params\"><span class=\"keyword\">int</span> print1, <span class=\"keyword\">int</span> print2</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> SimHashAnalyser.GetLikenessValue(print1, print2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>Internet上的一些站点常常存在着镜像网站（mirror），即两个网站的内容一样但网页对应的域名不同。这样会导致对同一份网页爬虫重复抓取多次。为了避免这种情况，对于每一份抓取到的网页，它首先需要进入ContentSeen模块。该模块会判断网页的内容是否和已下载过的某个网页的内容一致，如果一致，则该网页不会再被送去进行下一步的处理。这样的做法能够显著的降低爬虫需要下载的网页数。至于如果判断两个网页的内容是否一致，一般的思路是这样的：并不会去直接比较两个网页的内容，而是将网页的内容经过计算生成FingerPrint（指纹），通常FingerPrint是一个固定长度的字符串，要比网页的正文短很多。如果两个网页的FingerPrint一样，则认为它们内容完全相同。</p><p>为了完成这一模块，首先我们需要一个强大的指纹算法，将我们的网页内容计算成指纹存入数据库，下次直接判断指纹在保存前通过指纹的对比即可成功完成去重复操作。<br>","more":"</p><h2 id=\"SmiHash算法\"><a href=\"#SmiHash算法\" class=\"headerlink\" title=\"SmiHash算法\"></a>SmiHash算法</h2><p>首先来看一下大名鼎鼎的Google公司使用的网页去重复算法SimHash吧：</p><p>GoogleMoses Charikar发表的一篇论文“detecting near-duplicates for web crawling”中提出了simhash算法，专门用来解决亿万级别的网页的去重任务。</p><p>SimHash作为locality sensitive hash（局部敏感哈希）的一种：</p><p>其主要思想是降维，将高维的特征向量映射成低维的特征向量，通过两个向量的Hamming Distance来确定文章是否重复或者高度近似。</p><p>其中，Hamming Distance，又称汉明距离，在信息论中，两个等长字符串之间的汉明距离是两个字符串对应位置的不同字符的个数。也就是说，它就是将一个字符串变换成 另外一个字符串所需要替换的字符个数。例如：1011101 与 1001001 之间的汉明距离是 2。至于我们常说的字符串编辑距离则是一般形式的汉明距离。</p><p>如此，通过比较多个文档的SimHash值的海明距离，可以获取它们的相似度。</p><p>详情可以看这里<a href=\"http://www.cnblogs.com/chenying99/p/3830728.html\" target=\"_blank\" rel=\"noopener\">SimHash算法</a></p><h2 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h2><p>下面我们进行代码实现:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Common</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SimHashAnalyser</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> HashSize = <span class=\"number\">32</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> <span class=\"title\">GetLikenessValue</span>(<span class=\"params\"><span class=\"keyword\">string</span> needle, <span class=\"keyword\">string</span> haystack, TokeniserType type = TokeniserType.Overlapping</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> needleSimHash = GetSimHash(needle, type);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> hayStackSimHash = GetSimHash(haystack, type);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> GetLikenessValue(needleSimHash, hayStackSimHash);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> <span class=\"title\">GetLikenessValue</span>(<span class=\"params\"><span class=\"keyword\">int</span> needleSimHash, <span class=\"keyword\">int</span> hayStackSimHash</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (HashSize - GetHammingDistance(needleSimHash, hayStackSimHash)) / (<span class=\"keyword\">float</span>)HashSize;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">DoHashTokens</span>(<span class=\"params\">IEnumerable&lt;<span class=\"keyword\">string</span>&gt; tokens</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tokens.Select(token =&gt; token.GetHashCode()).ToList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">GetHammingDistance</span>(<span class=\"params\"><span class=\"keyword\">int</span> firstValue, <span class=\"keyword\">int</span> secondValue</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> hammingBits = firstValue ^ secondValue;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> hammingValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; i++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (IsBitSet(hammingBits, i))</span><br><span class=\"line\">                    hammingValue += <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> hammingValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsBitSet</span>(<span class=\"params\"><span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> pos</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (b &amp; (<span class=\"number\">1</span> &lt;&lt; pos)) != <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">GetSimHash</span>(<span class=\"params\"><span class=\"keyword\">string</span> input</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> GetSimHash(input, TokeniserType.Overlapping);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">GetSimHash</span>(<span class=\"params\"><span class=\"keyword\">string</span> input, TokeniserType tokeniserType</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            ITokeniser tokeniser;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tokeniserType == TokeniserType.Overlapping)</span><br><span class=\"line\">                tokeniser = <span class=\"keyword\">new</span> OverlappingStringTokeniser();</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                tokeniser = <span class=\"keyword\">new</span> FixedSizeStringTokeniser();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> hashedtokens = DoHashTokens(tokeniser.Tokenise(input));</span><br><span class=\"line\">            <span class=\"keyword\">var</span> vector = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[HashSize];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; HashSize; i++)</span><br><span class=\"line\">                vector[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> <span class=\"keyword\">value</span> <span class=\"keyword\">in</span> hashedtokens)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; HashSize; j++)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (IsBitSet(<span class=\"keyword\">value</span>, j))</span><br><span class=\"line\">                        vector[j] += <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        vector[j] -= <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> fingerprint = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; HashSize; i++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (vector[i] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    fingerprint += <span class=\"number\">1</span> &lt;&lt; i;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fingerprint;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ITokeniser</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">IEnumerable&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">Tokenise</span>(<span class=\"params\"><span class=\"keyword\">string</span> input</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FixedSizeStringTokeniser</span> : <span class=\"title\">ITokeniser</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">ushort</span> _tokensize;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FixedSizeStringTokeniser</span>(<span class=\"params\"><span class=\"keyword\">ushort</span> tokenSize = <span class=\"number\">5</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tokenSize &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"Token 不能超出范围\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tokenSize &gt; <span class=\"number\">127</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"Token 不能超出范围\"</span>);</span><br><span class=\"line\">            _tokensize = tokenSize;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">Tokenise</span>(<span class=\"params\"><span class=\"keyword\">string</span> input</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> chunks = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> offset = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (offset &lt; input.Length)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                chunks.Add(<span class=\"keyword\">new</span> <span class=\"keyword\">string</span>(input.Skip(offset).Take(_tokensize).ToArray()));</span><br><span class=\"line\">                offset += _tokensize;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> chunks;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OverlappingStringTokeniser</span> : <span class=\"title\">ITokeniser</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">ushort</span> _chunkSize;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">ushort</span> _overlapSize;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OverlappingStringTokeniser</span>(<span class=\"params\"><span class=\"keyword\">ushort</span> chunkSize = <span class=\"number\">4</span>, <span class=\"keyword\">ushort</span> overlapSize = <span class=\"number\">3</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chunkSize &lt;= overlapSize)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"Chunck 必须大于 overlap\"</span>);</span><br><span class=\"line\">            _overlapSize = overlapSize;</span><br><span class=\"line\">            _chunkSize = chunkSize;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">Tokenise</span>(<span class=\"params\"><span class=\"keyword\">string</span> input</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> position = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (position &lt; input.Length - _chunkSize)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                result.Add(input.Substring(position, _chunkSize));</span><br><span class=\"line\">                position += _chunkSize - _overlapSize;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> TokeniserType</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Overlapping,</span><br><span class=\"line\">        FixedSize</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h2><p>调用方法如下:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"string\">\"the cat sat on the mat.\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"string\">\"the cat sat on a mat.\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> similarity = SimHashAnalyser.GetLikenessValue(s1, s2);</span><br><span class=\"line\"></span><br><span class=\"line\">Console.Clear();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">\"相似度: &#123;0&#125;%\"</span>, similarity * <span class=\"number\">100</span>);</span><br><span class=\"line\">Console.ReadKey();</span><br></pre></td></tr></table></figure><p></p><p>输出为:<br><strong>相似度: 78.125%</strong></p><h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><p>接下来就是对ContentSeen模块的简单封装:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Crawler.Common;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Processing</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 对于每一份抓取到的网页，它首先需要进入Content Seen模块。该模块会判断网页的内容是否和已下载过的某个网页的内容一致，如果一致，则该网页不会再被送去进行下一步的处理。</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ContentSeen</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">GetFingerPrint</span>(<span class=\"params\"><span class=\"keyword\">string</span> html</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> SimHashAnalyser.GetSimHash(html);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> <span class=\"title\">Similarity</span>(<span class=\"params\"><span class=\"keyword\">int</span> print1, <span class=\"keyword\">int</span> print2</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> SimHashAnalyser.GetLikenessValue(print1, print2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"【爬虫学习笔记】用于提取网页中所有链接的 Extractor 模块","abbrlink":33241,"date":"2016-09-24T16:55:25.000Z","_content":"   Extractor的工作是从下载的网页中将它包含的所有URL提取出来。这是个细致的工作，你需要考虑到所有可能的url的样式，比如网页中常常会包含相对路径的url，提取的时候需要将它转换成绝对路径。这里我们选择使用正则表达式来完成链接的提取。\n\n   html标签中的链接地址通常会出现在href属性或者src属性中，所以我们采用两个正则表达式来匹配网页中的所有链接地址。\n<!-- more -->\n网页链接提取器Extractor类：\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Crawler.Common;\n\nnamespace Crawler.Processing\n{\n    /// <summary>\n    /// Extractor的工作是从下载的网页中将它包含的所有URL提取出来。这是个细致的工作，你需要考虑到所有可能的url的样式，比如网页中常常会包含相对路径的url，提取的时候需要将它转换成绝对路径。\n    /// </summary>\n    public class Extractor\n    {\n        public List<Uri> GetAllUrl(string html, string host)\n        {\n            var list = new List<string>();\n            //匹配href属性\n            var href = RegexHelper.ExtractStringArray(html, \"href *= *['\\\"]*(\\\\S+)[\\\"']\");\n            //去掉匹配到字符串的空格、双引号和前面的href=，得到链接\n            var temp = from h in href\n                       select h.Replace(\" \", \"\").Replace(\"\\\"\", \"\").Substring(5);\n            //加入数组\n            list.AddRange(temp);\n\n            //匹配src属性\n            var src = RegexHelper.ExtractStringArray(html, \"src *= *['\\\"]*(\\\\S+)[\\\"']\");\n            temp = from s in src\n                   select s.Replace(\" \", \"\").Replace(\"\\\"\", \"\").Substring(4);\n            list.AddRange(temp);\n\n            //去重\n            list = list.Distinct().ToList();\n\n            //将链接地址中的相对路径转换为绝对路径\n            var uriList = list.Select(s => s.IndexOf(\"http://\", StringComparison.Ordinal) != 0 ? new Uri(new Uri(host), s) : new Uri(s)).ToList();\n            return uriList.ToList();\n        }\n    }\n}\n```","source":"_posts/【爬虫学习笔记】用于提取网页中所有链接的-Extractor-模块.md","raw":"---\ntitle: 【爬虫学习笔记】用于提取网页中所有链接的 Extractor 模块\ntags:\n  - 爬虫\n  - Extractor\nabbrlink: 33241\ndate: 2016-09-25 00:55:25\n---\n   Extractor的工作是从下载的网页中将它包含的所有URL提取出来。这是个细致的工作，你需要考虑到所有可能的url的样式，比如网页中常常会包含相对路径的url，提取的时候需要将它转换成绝对路径。这里我们选择使用正则表达式来完成链接的提取。\n\n   html标签中的链接地址通常会出现在href属性或者src属性中，所以我们采用两个正则表达式来匹配网页中的所有链接地址。\n<!-- more -->\n网页链接提取器Extractor类：\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Crawler.Common;\n\nnamespace Crawler.Processing\n{\n    /// <summary>\n    /// Extractor的工作是从下载的网页中将它包含的所有URL提取出来。这是个细致的工作，你需要考虑到所有可能的url的样式，比如网页中常常会包含相对路径的url，提取的时候需要将它转换成绝对路径。\n    /// </summary>\n    public class Extractor\n    {\n        public List<Uri> GetAllUrl(string html, string host)\n        {\n            var list = new List<string>();\n            //匹配href属性\n            var href = RegexHelper.ExtractStringArray(html, \"href *= *['\\\"]*(\\\\S+)[\\\"']\");\n            //去掉匹配到字符串的空格、双引号和前面的href=，得到链接\n            var temp = from h in href\n                       select h.Replace(\" \", \"\").Replace(\"\\\"\", \"\").Substring(5);\n            //加入数组\n            list.AddRange(temp);\n\n            //匹配src属性\n            var src = RegexHelper.ExtractStringArray(html, \"src *= *['\\\"]*(\\\\S+)[\\\"']\");\n            temp = from s in src\n                   select s.Replace(\" \", \"\").Replace(\"\\\"\", \"\").Substring(4);\n            list.AddRange(temp);\n\n            //去重\n            list = list.Distinct().ToList();\n\n            //将链接地址中的相对路径转换为绝对路径\n            var uriList = list.Select(s => s.IndexOf(\"http://\", StringComparison.Ordinal) != 0 ? new Uri(new Uri(host), s) : new Uri(s)).ToList();\n            return uriList.ToList();\n        }\n    }\n}\n```","slug":"【爬虫学习笔记】用于提取网页中所有链接的-Extractor-模块","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ou00022d00oxh5h5mik","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>Extractor的工作是从下载的网页中将它包含的所有URL提取出来。这是个细致的工作，你需要考虑到所有可能的url的样式，比如网页中常常会包含相对路径的url，提取的时候需要将它转换成绝对路径。这里我们选择使用正则表达式来完成链接的提取。</p><p>html标签中的链接地址通常会出现在href属性或者src属性中，所以我们采用两个正则表达式来匹配网页中的所有链接地址。<br><a id=\"more\"></a><br>网页链接提取器Extractor类：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Crawler.Common;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Processing</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> Extractor的工作是从下载的网页中将它包含的所有URL提取出来。这是个细致的工作，你需要考虑到所有可能的url的样式，比如网页中常常会包含相对路径的url，提取的时候需要将它转换成绝对路径。</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Extractor</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Uri&gt; <span class=\"title\">GetAllUrl</span>(<span class=\"params\"><span class=\"keyword\">string</span> html, <span class=\"keyword\">string</span> host</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> list = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//匹配href属性</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> href = RegexHelper.ExtractStringArray(html, <span class=\"string\">\"href *= *['\\\"]*(\\\\S+)[\\\"']\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//去掉匹配到字符串的空格、双引号和前面的href=，得到链接</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = <span class=\"keyword\">from</span> h <span class=\"keyword\">in</span> href</span><br><span class=\"line\">                       <span class=\"keyword\">select</span> h.Replace(<span class=\"string\">\" \"</span>, <span class=\"string\">\"\"</span>).Replace(<span class=\"string\">\"\\\"\"</span>, <span class=\"string\">\"\"</span>).Substring(<span class=\"number\">5</span>);</span><br><span class=\"line\">            <span class=\"comment\">//加入数组</span></span><br><span class=\"line\">            list.AddRange(temp);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//匹配src属性</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> src = RegexHelper.ExtractStringArray(html, <span class=\"string\">\"src *= *['\\\"]*(\\\\S+)[\\\"']\"</span>);</span><br><span class=\"line\">            temp = <span class=\"keyword\">from</span> s <span class=\"keyword\">in</span> src</span><br><span class=\"line\">                   <span class=\"keyword\">select</span> s.Replace(<span class=\"string\">\" \"</span>, <span class=\"string\">\"\"</span>).Replace(<span class=\"string\">\"\\\"\"</span>, <span class=\"string\">\"\"</span>).Substring(<span class=\"number\">4</span>);</span><br><span class=\"line\">            list.AddRange(temp);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//去重</span></span><br><span class=\"line\">            list = list.Distinct().ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//将链接地址中的相对路径转换为绝对路径</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> uriList = list.Select(s =&gt; s.IndexOf(<span class=\"string\">\"http://\"</span>, StringComparison.Ordinal) != <span class=\"number\">0</span> ? <span class=\"keyword\">new</span> Uri(<span class=\"keyword\">new</span> Uri(host), s) : <span class=\"keyword\">new</span> Uri(s)).ToList();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> uriList.ToList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>Extractor的工作是从下载的网页中将它包含的所有URL提取出来。这是个细致的工作，你需要考虑到所有可能的url的样式，比如网页中常常会包含相对路径的url，提取的时候需要将它转换成绝对路径。这里我们选择使用正则表达式来完成链接的提取。</p><p>html标签中的链接地址通常会出现在href属性或者src属性中，所以我们采用两个正则表达式来匹配网页中的所有链接地址。<br>","more":"<br>网页链接提取器Extractor类：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Crawler.Common;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Processing</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> Extractor的工作是从下载的网页中将它包含的所有URL提取出来。这是个细致的工作，你需要考虑到所有可能的url的样式，比如网页中常常会包含相对路径的url，提取的时候需要将它转换成绝对路径。</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Extractor</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Uri&gt; <span class=\"title\">GetAllUrl</span>(<span class=\"params\"><span class=\"keyword\">string</span> html, <span class=\"keyword\">string</span> host</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> list = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//匹配href属性</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> href = RegexHelper.ExtractStringArray(html, <span class=\"string\">\"href *= *['\\\"]*(\\\\S+)[\\\"']\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//去掉匹配到字符串的空格、双引号和前面的href=，得到链接</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = <span class=\"keyword\">from</span> h <span class=\"keyword\">in</span> href</span><br><span class=\"line\">                       <span class=\"keyword\">select</span> h.Replace(<span class=\"string\">\" \"</span>, <span class=\"string\">\"\"</span>).Replace(<span class=\"string\">\"\\\"\"</span>, <span class=\"string\">\"\"</span>).Substring(<span class=\"number\">5</span>);</span><br><span class=\"line\">            <span class=\"comment\">//加入数组</span></span><br><span class=\"line\">            list.AddRange(temp);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//匹配src属性</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> src = RegexHelper.ExtractStringArray(html, <span class=\"string\">\"src *= *['\\\"]*(\\\\S+)[\\\"']\"</span>);</span><br><span class=\"line\">            temp = <span class=\"keyword\">from</span> s <span class=\"keyword\">in</span> src</span><br><span class=\"line\">                   <span class=\"keyword\">select</span> s.Replace(<span class=\"string\">\" \"</span>, <span class=\"string\">\"\"</span>).Replace(<span class=\"string\">\"\\\"\"</span>, <span class=\"string\">\"\"</span>).Substring(<span class=\"number\">4</span>);</span><br><span class=\"line\">            list.AddRange(temp);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//去重</span></span><br><span class=\"line\">            list = list.Distinct().ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//将链接地址中的相对路径转换为绝对路径</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> uriList = list.Select(s =&gt; s.IndexOf(<span class=\"string\">\"http://\"</span>, StringComparison.Ordinal) != <span class=\"number\">0</span> ? <span class=\"keyword\">new</span> Uri(<span class=\"keyword\">new</span> Uri(host), s) : <span class=\"keyword\">new</span> Uri(s)).ToList();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> uriList.ToList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"【爬虫学习笔记】基于Bloom Filter的url去重模块UrlSeen","abbrlink":41470,"date":"2016-09-26T13:50:43.000Z","_content":"Url Seen用来做url去重。对于一个大的爬虫系统，它可能已经有百亿或者千亿的url，新来一个url如何能快速的判断url是否已经出现过非常关键。因为大的爬虫系统可能一秒钟就会下载几千个网页，一个网页一般能够抽取出几十个url，而每个url都需要执行去重操作，可想每秒需要执行大量的去重操作。因此Url Seen是整个爬虫系统中非常有技术含量的一个部分。\n<!-- more -->\n\n为了提高过滤的效率,我们使用有极低误判率但是效率非常高的算法——Bloom Filter，已经有高手写好了Bloom Filter的算法实现，我们这里就直接站在巨人的肩膀上直接使用他写好的类库啦。\n\nNuget:\n> Install-Package BloomFilter\n\n代码实现:\n```csharp\nusing System;\nusing BloomFilterDotNet;\n\nnamespace Crawler.Processing\n{\n    /// <summary>\n    /// Url Seen用来做url去重。对于一个大的爬虫系统，它可能已经有百亿或者千亿的url，新来一个url如何能快速的判断url是否已经出现过非常关键。因为大的爬虫系统可能一秒钟就会下载几千个网页，一个网页一般能够抽取出几十个url，而每个url都需要执行去重操作，可想每秒需要执行大量的去重操作。因此Url Seen是整个爬虫系统中非常有技术含量的一个部分。\n    /// </summary>\n    public class UrlSeen\n    {\n        private BloomFilter<string> Seen { set; get; }\n        public UrlSeen()\n        {\n            Seen = new BloomFilter<string>(1000000, 0.0001, null);\n        }\n        public UrlSeen(int targetCapacity, double falsePositiveRate)\n        {\n            Seen = new BloomFilter<string>(targetCapacity, falsePositiveRate, null);\n        }\n        public bool MatchUrl(Uri url)\n        {\n            return Seen.Contains(url.ToString());\n        }\n        public int Count\n        {\n            get { return Seen.Count; }\n        }\n        public void Add(Uri url)\n        {\n            Seen.Add(url.ToString());\n        }\n    }\n}\n```","source":"_posts/【爬虫学习笔记】基于Bloom-Filter的url去重模块UrlSeen.md","raw":"---\ntitle: 【爬虫学习笔记】基于Bloom Filter的url去重模块UrlSeen\ntags:\n  - 爬虫\n  - Bloom Filter\nabbrlink: 41470\ndate: 2016-09-26 21:50:43\n---\nUrl Seen用来做url去重。对于一个大的爬虫系统，它可能已经有百亿或者千亿的url，新来一个url如何能快速的判断url是否已经出现过非常关键。因为大的爬虫系统可能一秒钟就会下载几千个网页，一个网页一般能够抽取出几十个url，而每个url都需要执行去重操作，可想每秒需要执行大量的去重操作。因此Url Seen是整个爬虫系统中非常有技术含量的一个部分。\n<!-- more -->\n\n为了提高过滤的效率,我们使用有极低误判率但是效率非常高的算法——Bloom Filter，已经有高手写好了Bloom Filter的算法实现，我们这里就直接站在巨人的肩膀上直接使用他写好的类库啦。\n\nNuget:\n> Install-Package BloomFilter\n\n代码实现:\n```csharp\nusing System;\nusing BloomFilterDotNet;\n\nnamespace Crawler.Processing\n{\n    /// <summary>\n    /// Url Seen用来做url去重。对于一个大的爬虫系统，它可能已经有百亿或者千亿的url，新来一个url如何能快速的判断url是否已经出现过非常关键。因为大的爬虫系统可能一秒钟就会下载几千个网页，一个网页一般能够抽取出几十个url，而每个url都需要执行去重操作，可想每秒需要执行大量的去重操作。因此Url Seen是整个爬虫系统中非常有技术含量的一个部分。\n    /// </summary>\n    public class UrlSeen\n    {\n        private BloomFilter<string> Seen { set; get; }\n        public UrlSeen()\n        {\n            Seen = new BloomFilter<string>(1000000, 0.0001, null);\n        }\n        public UrlSeen(int targetCapacity, double falsePositiveRate)\n        {\n            Seen = new BloomFilter<string>(targetCapacity, falsePositiveRate, null);\n        }\n        public bool MatchUrl(Uri url)\n        {\n            return Seen.Contains(url.ToString());\n        }\n        public int Count\n        {\n            get { return Seen.Count; }\n        }\n        public void Add(Uri url)\n        {\n            Seen.Add(url.ToString());\n        }\n    }\n}\n```","slug":"【爬虫学习笔记】基于Bloom-Filter的url去重模块UrlSeen","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ou10024d00otzvvn4ce","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>Url Seen用来做url去重。对于一个大的爬虫系统，它可能已经有百亿或者千亿的url，新来一个url如何能快速的判断url是否已经出现过非常关键。因为大的爬虫系统可能一秒钟就会下载几千个网页，一个网页一般能够抽取出几十个url，而每个url都需要执行去重操作，可想每秒需要执行大量的去重操作。因此Url Seen是整个爬虫系统中非常有技术含量的一个部分。<br><a id=\"more\"></a></p><p>为了提高过滤的效率,我们使用有极低误判率但是效率非常高的算法——Bloom Filter，已经有高手写好了Bloom Filter的算法实现，我们这里就直接站在巨人的肩膀上直接使用他写好的类库啦。</p><p>Nuget:</p><blockquote><p>Install-Package BloomFilter</p></blockquote><p>代码实现:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> BloomFilterDotNet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Processing</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> Url Seen用来做url去重。对于一个大的爬虫系统，它可能已经有百亿或者千亿的url，新来一个url如何能快速的判断url是否已经出现过非常关键。因为大的爬虫系统可能一秒钟就会下载几千个网页，一个网页一般能够抽取出几十个url，而每个url都需要执行去重操作，可想每秒需要执行大量的去重操作。因此Url Seen是整个爬虫系统中非常有技术含量的一个部分。</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UrlSeen</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> BloomFilter&lt;<span class=\"keyword\">string</span>&gt; Seen &#123; <span class=\"keyword\">set</span>; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UrlSeen</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Seen = <span class=\"keyword\">new</span> BloomFilter&lt;<span class=\"keyword\">string</span>&gt;(<span class=\"number\">1000000</span>, <span class=\"number\">0.0001</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UrlSeen</span>(<span class=\"params\"><span class=\"keyword\">int</span> targetCapacity, <span class=\"keyword\">double</span> falsePositiveRate</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Seen = <span class=\"keyword\">new</span> BloomFilter&lt;<span class=\"keyword\">string</span>&gt;(targetCapacity, falsePositiveRate, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">MatchUrl</span>(<span class=\"params\">Uri url</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Seen.Contains(url.ToString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Count</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> Seen.Count; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Add</span>(<span class=\"params\">Uri url</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Seen.Add(url.ToString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>Url Seen用来做url去重。对于一个大的爬虫系统，它可能已经有百亿或者千亿的url，新来一个url如何能快速的判断url是否已经出现过非常关键。因为大的爬虫系统可能一秒钟就会下载几千个网页，一个网页一般能够抽取出几十个url，而每个url都需要执行去重操作，可想每秒需要执行大量的去重操作。因此Url Seen是整个爬虫系统中非常有技术含量的一个部分。<br>","more":"</p><p>为了提高过滤的效率,我们使用有极低误判率但是效率非常高的算法——Bloom Filter，已经有高手写好了Bloom Filter的算法实现，我们这里就直接站在巨人的肩膀上直接使用他写好的类库啦。</p><p>Nuget:</p><blockquote><p>Install-Package BloomFilter</p></blockquote><p>代码实现:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> BloomFilterDotNet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Crawler.Processing</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> Url Seen用来做url去重。对于一个大的爬虫系统，它可能已经有百亿或者千亿的url，新来一个url如何能快速的判断url是否已经出现过非常关键。因为大的爬虫系统可能一秒钟就会下载几千个网页，一个网页一般能够抽取出几十个url，而每个url都需要执行去重操作，可想每秒需要执行大量的去重操作。因此Url Seen是整个爬虫系统中非常有技术含量的一个部分。</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UrlSeen</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> BloomFilter&lt;<span class=\"keyword\">string</span>&gt; Seen &#123; <span class=\"keyword\">set</span>; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UrlSeen</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Seen = <span class=\"keyword\">new</span> BloomFilter&lt;<span class=\"keyword\">string</span>&gt;(<span class=\"number\">1000000</span>, <span class=\"number\">0.0001</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UrlSeen</span>(<span class=\"params\"><span class=\"keyword\">int</span> targetCapacity, <span class=\"keyword\">double</span> falsePositiveRate</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Seen = <span class=\"keyword\">new</span> BloomFilter&lt;<span class=\"keyword\">string</span>&gt;(targetCapacity, falsePositiveRate, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">MatchUrl</span>(<span class=\"params\">Uri url</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Seen.Contains(url.ToString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Count</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> Seen.Count; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Add</span>(<span class=\"params\">Uri url</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Seen.Add(url.ToString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"【迷宫中的算法实践】迷宫生成算法——Prim算法","abbrlink":47068,"date":"2016-09-20T13:04:44.000Z","_content":"  普里姆算法（Prim算法），图论中的一种算法，可在加权连通图里搜索最小生成树。意即由此算法搜索到的边子集所构成的树中，不但包括了连通图里的所有顶点（英语：Vertex (graph theory)），且其所有边的权值之和亦为最小。该算法于1930年由捷克数学家沃伊捷赫·亚尔尼克（英语：Vojtěch Jarník）发现；并在1957年由美国计算机科学家罗伯特·普里姆（英语：Robert C. Prim）独立发现；1959年，艾兹格·迪科斯彻再次发现了该算法。因此，在某些场合，普里姆算法又被称为DJP算法、亚尔尼克算法或普里姆－亚尔尼克算法。\n\n——来自百度百科\n<!-- more -->\n当我们将Prim算法用于迷宫生成时，情况有些不同，维基百科中给出了[随机Prim迷宫生成算法(Randomized Prim's algorithm)](https://en.wikipedia.org/wiki/Prim%27s_algorithm)的解释及实现过程：\n![](http://p4au3q1y8.bkt.clouddn.com/20180218224344/20180218104613142.png)\n我们将算法实现部分翻译成中文 \n1. 让迷宫全都是墙.。\n2. 选一个格，作为迷宫的通路，然后把它的邻墙放入列表.。\n3. 当列表里还有墙时:\n    1). 从列表里随机选一个墙，如果它对面的格子不是迷宫的通路:\n    2). 把墙打通，让对面的格子成为迷宫的通路.。\n把那个格子的邻墙加入列表。\n4. 如果对面的格子已经是通路了，那就从列表里移除这面墙。\n\n\n简单研究算法实现过程我们可以发现，Prim算法就是不断地从所有可以是通路的位置中随意选一个挖洞，直到没有可能为通路的位置。\n\n 整个实现过程还是相当于随意为路线附权值的Prim算法。\n\n下面我们来做C#下的代码实现：\n```csharp\n/// <summary>\n/// 普利姆迷宫生成法\n/// </summary>\n/// <param name=\"startX\">起始点X坐标</param>\n/// <param name=\"startY\">起始点Y坐标</param>\n/// <param name=\"widthLimit\">迷宫宽度</param>\n/// <param name=\"heightLimit\">迷宫高度</param>\n/// <param name=\"haveBorder\">迷宫是否含有墙</param>\nprivate int[,] Prim(int startX, int startY, int widthLimit, int heightLimit,bool haveBorder)\n{\n    //block:不可通行    unBlock:可通行\n    const int block = 0,unBlock = 1;\n    var r=new Random();\n    //迷宫尺寸合法化\n    if (widthLimit < 1)\n        widthLimit = 1;\n    if (heightLimit < 1)\n        heightLimit = 1;\n    //迷宫起点合法化\n    if (startX < 0 || startX >= widthLimit)\n        startX = r.Next(0, widthLimit);\n    if (startY < 0 || startY >= heightLimit)\n        startY = r.Next(0, heightLimit);\n    //减去边框所占的格子\n    if (!haveBorder)\n    {\n        widthLimit--;\n        heightLimit--;\n    }\n    //迷宫尺寸换算成带墙尺寸\n    widthLimit *= 2;\n    heightLimit *= 2;\n    //迷宫起点换算成带墙起点\n    startX *= 2;\n    startY *= 2;\n    if (haveBorder)\n    {\n        startX++;\n        startY++;\n    }\n    //产生空白迷宫\n    var mazeMap = new int[widthLimit + 1, heightLimit + 1];\n    for (int x = 0; x <= widthLimit; x++)\n    {\n        //mazeMap.Add(new BitArray(heightLimit + 1));\n        for (int y = 0; y <= heightLimit; y++)\n        {\n            mazeMap[x, y] = block;\n        }\n    }\n\n    //邻墙列表\n    var blockPos = new List<int>();\n    //将起点作为目标格\n    int targetX = startX, targetY = startY;\n    //将起点标记为通路\n    mazeMap[targetX, targetY] = unBlock;\n\n    //记录邻墙\n    if (targetY > 1)\n    {\n        blockPos.AddRange(new int[] { targetX, targetY - 1, 0 });\n    }\n    if (targetX < widthLimit)\n    {\n        blockPos.AddRange(new int[] { targetX + 1, targetY, 1 });\n    }\n    if (targetY < heightLimit)\n    {\n        blockPos.AddRange(new int[] { targetX, targetY + 1, 2 });\n    }\n    if (targetX > 1)\n    {\n        blockPos.AddRange(new int[] { targetX - 1, targetY, 3 });\n    }\n    while (blockPos.Count > 0)\n    {\n        //随机选一堵墙\n        var blockIndex = r.Next(0, blockPos.Count / 3) * 3;\n        //找到墙对面的墙\n        if (blockPos[blockIndex + 2] == 0)\n        {\n            targetX = blockPos[blockIndex];\n            targetY = blockPos[blockIndex + 1] - 1;\n        }\n        else if (blockPos[blockIndex + 2] == 1)\n        {\n            targetX = blockPos[blockIndex] + 1;\n            targetY = blockPos[blockIndex + 1];\n        }\n        else if (blockPos[blockIndex + 2] == 2)\n        {\n            targetX = blockPos[blockIndex];\n            targetY = blockPos[blockIndex + 1] + 1;\n        }\n        else if (blockPos[blockIndex + 2] == 3)\n        {\n            targetX = blockPos[blockIndex] - 1;\n            targetY = blockPos[blockIndex + 1];\n        }\n        //如果目标格未连通\n        if (mazeMap[targetX, targetY] == block)\n        {\n            //联通目标格\n            mazeMap[blockPos[blockIndex], blockPos[blockIndex + 1]] = unBlock;\n            mazeMap[targetX, targetY] = unBlock;\n            //添加目标格相邻格\n            if (targetY > 1 && mazeMap[targetX, targetY - 1] == block && mazeMap[targetX, targetY - 2] == block)\n            {\n                blockPos.AddRange(new int[] { targetX, targetY - 1, 0 });\n            }\n            if (targetX < widthLimit && mazeMap[targetX + 1, targetY] == block && mazeMap[targetX + 2, targetY] == block)\n            {\n                blockPos.AddRange(new int[] { targetX + 1, targetY, 1 });\n            }\n            if (targetY < heightLimit && mazeMap[targetX, targetY + 1] == block && mazeMap[targetX, targetY + 2] == block)\n            {\n                blockPos.AddRange(new int[] { targetX, targetY + 1, 2 });\n            }\n            if (targetX > 1 && mazeMap[targetX - 1, targetY] == block && mazeMap[targetX - 1, targetY] == block)\n            {\n                blockPos.AddRange(new int[] { targetX - 1, targetY, 3 });\n            }\n        }\n        blockPos.RemoveRange(blockIndex, 3);\n    }\n    return mazeMap;\n}\n```","source":"_posts/【迷宫中的算法实践】迷宫生成算法——Prim算法.md","raw":"---\ntitle: 【迷宫中的算法实践】迷宫生成算法——Prim算法\ntags:\n  - 迷宫\n  - 算法\n  - Prim\nabbrlink: 47068\ndate: 2016-09-20 21:04:44\n---\n  普里姆算法（Prim算法），图论中的一种算法，可在加权连通图里搜索最小生成树。意即由此算法搜索到的边子集所构成的树中，不但包括了连通图里的所有顶点（英语：Vertex (graph theory)），且其所有边的权值之和亦为最小。该算法于1930年由捷克数学家沃伊捷赫·亚尔尼克（英语：Vojtěch Jarník）发现；并在1957年由美国计算机科学家罗伯特·普里姆（英语：Robert C. Prim）独立发现；1959年，艾兹格·迪科斯彻再次发现了该算法。因此，在某些场合，普里姆算法又被称为DJP算法、亚尔尼克算法或普里姆－亚尔尼克算法。\n\n——来自百度百科\n<!-- more -->\n当我们将Prim算法用于迷宫生成时，情况有些不同，维基百科中给出了[随机Prim迷宫生成算法(Randomized Prim's algorithm)](https://en.wikipedia.org/wiki/Prim%27s_algorithm)的解释及实现过程：\n![](http://p4au3q1y8.bkt.clouddn.com/20180218224344/20180218104613142.png)\n我们将算法实现部分翻译成中文 \n1. 让迷宫全都是墙.。\n2. 选一个格，作为迷宫的通路，然后把它的邻墙放入列表.。\n3. 当列表里还有墙时:\n    1). 从列表里随机选一个墙，如果它对面的格子不是迷宫的通路:\n    2). 把墙打通，让对面的格子成为迷宫的通路.。\n把那个格子的邻墙加入列表。\n4. 如果对面的格子已经是通路了，那就从列表里移除这面墙。\n\n\n简单研究算法实现过程我们可以发现，Prim算法就是不断地从所有可以是通路的位置中随意选一个挖洞，直到没有可能为通路的位置。\n\n 整个实现过程还是相当于随意为路线附权值的Prim算法。\n\n下面我们来做C#下的代码实现：\n```csharp\n/// <summary>\n/// 普利姆迷宫生成法\n/// </summary>\n/// <param name=\"startX\">起始点X坐标</param>\n/// <param name=\"startY\">起始点Y坐标</param>\n/// <param name=\"widthLimit\">迷宫宽度</param>\n/// <param name=\"heightLimit\">迷宫高度</param>\n/// <param name=\"haveBorder\">迷宫是否含有墙</param>\nprivate int[,] Prim(int startX, int startY, int widthLimit, int heightLimit,bool haveBorder)\n{\n    //block:不可通行    unBlock:可通行\n    const int block = 0,unBlock = 1;\n    var r=new Random();\n    //迷宫尺寸合法化\n    if (widthLimit < 1)\n        widthLimit = 1;\n    if (heightLimit < 1)\n        heightLimit = 1;\n    //迷宫起点合法化\n    if (startX < 0 || startX >= widthLimit)\n        startX = r.Next(0, widthLimit);\n    if (startY < 0 || startY >= heightLimit)\n        startY = r.Next(0, heightLimit);\n    //减去边框所占的格子\n    if (!haveBorder)\n    {\n        widthLimit--;\n        heightLimit--;\n    }\n    //迷宫尺寸换算成带墙尺寸\n    widthLimit *= 2;\n    heightLimit *= 2;\n    //迷宫起点换算成带墙起点\n    startX *= 2;\n    startY *= 2;\n    if (haveBorder)\n    {\n        startX++;\n        startY++;\n    }\n    //产生空白迷宫\n    var mazeMap = new int[widthLimit + 1, heightLimit + 1];\n    for (int x = 0; x <= widthLimit; x++)\n    {\n        //mazeMap.Add(new BitArray(heightLimit + 1));\n        for (int y = 0; y <= heightLimit; y++)\n        {\n            mazeMap[x, y] = block;\n        }\n    }\n\n    //邻墙列表\n    var blockPos = new List<int>();\n    //将起点作为目标格\n    int targetX = startX, targetY = startY;\n    //将起点标记为通路\n    mazeMap[targetX, targetY] = unBlock;\n\n    //记录邻墙\n    if (targetY > 1)\n    {\n        blockPos.AddRange(new int[] { targetX, targetY - 1, 0 });\n    }\n    if (targetX < widthLimit)\n    {\n        blockPos.AddRange(new int[] { targetX + 1, targetY, 1 });\n    }\n    if (targetY < heightLimit)\n    {\n        blockPos.AddRange(new int[] { targetX, targetY + 1, 2 });\n    }\n    if (targetX > 1)\n    {\n        blockPos.AddRange(new int[] { targetX - 1, targetY, 3 });\n    }\n    while (blockPos.Count > 0)\n    {\n        //随机选一堵墙\n        var blockIndex = r.Next(0, blockPos.Count / 3) * 3;\n        //找到墙对面的墙\n        if (blockPos[blockIndex + 2] == 0)\n        {\n            targetX = blockPos[blockIndex];\n            targetY = blockPos[blockIndex + 1] - 1;\n        }\n        else if (blockPos[blockIndex + 2] == 1)\n        {\n            targetX = blockPos[blockIndex] + 1;\n            targetY = blockPos[blockIndex + 1];\n        }\n        else if (blockPos[blockIndex + 2] == 2)\n        {\n            targetX = blockPos[blockIndex];\n            targetY = blockPos[blockIndex + 1] + 1;\n        }\n        else if (blockPos[blockIndex + 2] == 3)\n        {\n            targetX = blockPos[blockIndex] - 1;\n            targetY = blockPos[blockIndex + 1];\n        }\n        //如果目标格未连通\n        if (mazeMap[targetX, targetY] == block)\n        {\n            //联通目标格\n            mazeMap[blockPos[blockIndex], blockPos[blockIndex + 1]] = unBlock;\n            mazeMap[targetX, targetY] = unBlock;\n            //添加目标格相邻格\n            if (targetY > 1 && mazeMap[targetX, targetY - 1] == block && mazeMap[targetX, targetY - 2] == block)\n            {\n                blockPos.AddRange(new int[] { targetX, targetY - 1, 0 });\n            }\n            if (targetX < widthLimit && mazeMap[targetX + 1, targetY] == block && mazeMap[targetX + 2, targetY] == block)\n            {\n                blockPos.AddRange(new int[] { targetX + 1, targetY, 1 });\n            }\n            if (targetY < heightLimit && mazeMap[targetX, targetY + 1] == block && mazeMap[targetX, targetY + 2] == block)\n            {\n                blockPos.AddRange(new int[] { targetX, targetY + 1, 2 });\n            }\n            if (targetX > 1 && mazeMap[targetX - 1, targetY] == block && mazeMap[targetX - 1, targetY] == block)\n            {\n                blockPos.AddRange(new int[] { targetX - 1, targetY, 3 });\n            }\n        }\n        blockPos.RemoveRange(blockIndex, 3);\n    }\n    return mazeMap;\n}\n```","slug":"【迷宫中的算法实践】迷宫生成算法——Prim算法","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ou30026d00oqluizzot","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>普里姆算法（Prim算法），图论中的一种算法，可在加权连通图里搜索最小生成树。意即由此算法搜索到的边子集所构成的树中，不但包括了连通图里的所有顶点（英语：Vertex (graph theory)），且其所有边的权值之和亦为最小。该算法于1930年由捷克数学家沃伊捷赫·亚尔尼克（英语：Vojtěch Jarník）发现；并在1957年由美国计算机科学家罗伯特·普里姆（英语：Robert C. Prim）独立发现；1959年，艾兹格·迪科斯彻再次发现了该算法。因此，在某些场合，普里姆算法又被称为DJP算法、亚尔尼克算法或普里姆－亚尔尼克算法。</p><p>——来自百度百科<br><a id=\"more\"></a><br>当我们将Prim算法用于迷宫生成时，情况有些不同，维基百科中给出了<a href=\"https://en.wikipedia.org/wiki/Prim%27s_algorithm\" target=\"_blank\" rel=\"noopener\">随机Prim迷宫生成算法(Randomized Prim’s algorithm)</a>的解释及实现过程：<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218224344/20180218104613142.png\" alt=\"\"><br>我们将算法实现部分翻译成中文</p><ol><li>让迷宫全都是墙.。</li><li>选一个格，作为迷宫的通路，然后把它的邻墙放入列表.。</li><li>当列表里还有墙时:<br>1). 从列表里随机选一个墙，如果它对面的格子不是迷宫的通路:<br>2). 把墙打通，让对面的格子成为迷宫的通路.。<br>把那个格子的邻墙加入列表。</li><li>如果对面的格子已经是通路了，那就从列表里移除这面墙。</li></ol><p>简单研究算法实现过程我们可以发现，Prim算法就是不断地从所有可以是通路的位置中随意选一个挖洞，直到没有可能为通路的位置。</p><p>整个实现过程还是相当于随意为路线附权值的Prim算法。</p><p>下面我们来做C#下的代码实现：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 普利姆迷宫生成法</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"startX\"&gt;</span>起始点X坐标<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"startY\"&gt;</span>起始点Y坐标<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"widthLimit\"&gt;</span>迷宫宽度<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"heightLimit\"&gt;</span>迷宫高度<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"haveBorder\"&gt;</span>迷宫是否含有墙<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[,] Prim(<span class=\"keyword\">int</span> startX, <span class=\"keyword\">int</span> startY, <span class=\"keyword\">int</span> widthLimit, <span class=\"keyword\">int</span> heightLimit,<span class=\"keyword\">bool</span> haveBorder)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//block:不可通行    unBlock:可通行</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> block = <span class=\"number\">0</span>,unBlock = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r=<span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">    <span class=\"comment\">//迷宫尺寸合法化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (widthLimit &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        widthLimit = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (heightLimit &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        heightLimit = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//迷宫起点合法化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (startX &lt; <span class=\"number\">0</span> || startX &gt;= widthLimit)</span><br><span class=\"line\">        startX = r.Next(<span class=\"number\">0</span>, widthLimit);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (startY &lt; <span class=\"number\">0</span> || startY &gt;= heightLimit)</span><br><span class=\"line\">        startY = r.Next(<span class=\"number\">0</span>, heightLimit);</span><br><span class=\"line\">    <span class=\"comment\">//减去边框所占的格子</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!haveBorder)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        widthLimit--;</span><br><span class=\"line\">        heightLimit--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//迷宫尺寸换算成带墙尺寸</span></span><br><span class=\"line\">    widthLimit *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    heightLimit *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">//迷宫起点换算成带墙起点</span></span><br><span class=\"line\">    startX *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    startY *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (haveBorder)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        startX++;</span><br><span class=\"line\">        startY++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//产生空白迷宫</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mazeMap = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[widthLimit + <span class=\"number\">1</span>, heightLimit + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt;= widthLimit; x++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//mazeMap.Add(new BitArray(heightLimit + 1));</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>; y &lt;= heightLimit; y++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mazeMap[x, y] = block;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//邻墙列表</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> blockPos = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//将起点作为目标格</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> targetX = startX, targetY = startY;</span><br><span class=\"line\">    <span class=\"comment\">//将起点标记为通路</span></span><br><span class=\"line\">    mazeMap[targetX, targetY] = unBlock;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//记录邻墙</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (targetY &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        blockPos.AddRange(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; targetX, targetY - <span class=\"number\">1</span>, <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (targetX &lt; widthLimit)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        blockPos.AddRange(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; targetX + <span class=\"number\">1</span>, targetY, <span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (targetY &lt; heightLimit)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        blockPos.AddRange(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; targetX, targetY + <span class=\"number\">1</span>, <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (targetX &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        blockPos.AddRange(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; targetX - <span class=\"number\">1</span>, targetY, <span class=\"number\">3</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (blockPos.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//随机选一堵墙</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> blockIndex = r.Next(<span class=\"number\">0</span>, blockPos.Count / <span class=\"number\">3</span>) * <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"comment\">//找到墙对面的墙</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (blockPos[blockIndex + <span class=\"number\">2</span>] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            targetX = blockPos[blockIndex];</span><br><span class=\"line\">            targetY = blockPos[blockIndex + <span class=\"number\">1</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (blockPos[blockIndex + <span class=\"number\">2</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            targetX = blockPos[blockIndex] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            targetY = blockPos[blockIndex + <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (blockPos[blockIndex + <span class=\"number\">2</span>] == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            targetX = blockPos[blockIndex];</span><br><span class=\"line\">            targetY = blockPos[blockIndex + <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (blockPos[blockIndex + <span class=\"number\">2</span>] == <span class=\"number\">3</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            targetX = blockPos[blockIndex] - <span class=\"number\">1</span>;</span><br><span class=\"line\">            targetY = blockPos[blockIndex + <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果目标格未连通</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mazeMap[targetX, targetY] == block)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//联通目标格</span></span><br><span class=\"line\">            mazeMap[blockPos[blockIndex], blockPos[blockIndex + <span class=\"number\">1</span>]] = unBlock;</span><br><span class=\"line\">            mazeMap[targetX, targetY] = unBlock;</span><br><span class=\"line\">            <span class=\"comment\">//添加目标格相邻格</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetY &gt; <span class=\"number\">1</span> &amp;&amp; mazeMap[targetX, targetY - <span class=\"number\">1</span>] == block &amp;&amp; mazeMap[targetX, targetY - <span class=\"number\">2</span>] == block)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                blockPos.AddRange(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; targetX, targetY - <span class=\"number\">1</span>, <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetX &lt; widthLimit &amp;&amp; mazeMap[targetX + <span class=\"number\">1</span>, targetY] == block &amp;&amp; mazeMap[targetX + <span class=\"number\">2</span>, targetY] == block)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                blockPos.AddRange(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; targetX + <span class=\"number\">1</span>, targetY, <span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetY &lt; heightLimit &amp;&amp; mazeMap[targetX, targetY + <span class=\"number\">1</span>] == block &amp;&amp; mazeMap[targetX, targetY + <span class=\"number\">2</span>] == block)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                blockPos.AddRange(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; targetX, targetY + <span class=\"number\">1</span>, <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetX &gt; <span class=\"number\">1</span> &amp;&amp; mazeMap[targetX - <span class=\"number\">1</span>, targetY] == block &amp;&amp; mazeMap[targetX - <span class=\"number\">1</span>, targetY] == block)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                blockPos.AddRange(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; targetX - <span class=\"number\">1</span>, targetY, <span class=\"number\">3</span> &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        blockPos.RemoveRange(blockIndex, <span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mazeMap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>普里姆算法（Prim算法），图论中的一种算法，可在加权连通图里搜索最小生成树。意即由此算法搜索到的边子集所构成的树中，不但包括了连通图里的所有顶点（英语：Vertex (graph theory)），且其所有边的权值之和亦为最小。该算法于1930年由捷克数学家沃伊捷赫·亚尔尼克（英语：Vojtěch Jarník）发现；并在1957年由美国计算机科学家罗伯特·普里姆（英语：Robert C. Prim）独立发现；1959年，艾兹格·迪科斯彻再次发现了该算法。因此，在某些场合，普里姆算法又被称为DJP算法、亚尔尼克算法或普里姆－亚尔尼克算法。</p><p>——来自百度百科<br>","more":"<br>当我们将Prim算法用于迷宫生成时，情况有些不同，维基百科中给出了<a href=\"https://en.wikipedia.org/wiki/Prim%27s_algorithm\" target=\"_blank\" rel=\"noopener\">随机Prim迷宫生成算法(Randomized Prim’s algorithm)</a>的解释及实现过程：<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218224344/20180218104613142.png\" alt=\"\"><br>我们将算法实现部分翻译成中文</p><ol><li>让迷宫全都是墙.。</li><li>选一个格，作为迷宫的通路，然后把它的邻墙放入列表.。</li><li>当列表里还有墙时:<br>1). 从列表里随机选一个墙，如果它对面的格子不是迷宫的通路:<br>2). 把墙打通，让对面的格子成为迷宫的通路.。<br>把那个格子的邻墙加入列表。</li><li>如果对面的格子已经是通路了，那就从列表里移除这面墙。</li></ol><p>简单研究算法实现过程我们可以发现，Prim算法就是不断地从所有可以是通路的位置中随意选一个挖洞，直到没有可能为通路的位置。</p><p>整个实现过程还是相当于随意为路线附权值的Prim算法。</p><p>下面我们来做C#下的代码实现：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 普利姆迷宫生成法</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"startX\"&gt;</span>起始点X坐标<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"startY\"&gt;</span>起始点Y坐标<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"widthLimit\"&gt;</span>迷宫宽度<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"heightLimit\"&gt;</span>迷宫高度<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"haveBorder\"&gt;</span>迷宫是否含有墙<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[,] Prim(<span class=\"keyword\">int</span> startX, <span class=\"keyword\">int</span> startY, <span class=\"keyword\">int</span> widthLimit, <span class=\"keyword\">int</span> heightLimit,<span class=\"keyword\">bool</span> haveBorder)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//block:不可通行    unBlock:可通行</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> block = <span class=\"number\">0</span>,unBlock = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r=<span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">    <span class=\"comment\">//迷宫尺寸合法化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (widthLimit &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        widthLimit = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (heightLimit &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        heightLimit = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//迷宫起点合法化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (startX &lt; <span class=\"number\">0</span> || startX &gt;= widthLimit)</span><br><span class=\"line\">        startX = r.Next(<span class=\"number\">0</span>, widthLimit);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (startY &lt; <span class=\"number\">0</span> || startY &gt;= heightLimit)</span><br><span class=\"line\">        startY = r.Next(<span class=\"number\">0</span>, heightLimit);</span><br><span class=\"line\">    <span class=\"comment\">//减去边框所占的格子</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!haveBorder)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        widthLimit--;</span><br><span class=\"line\">        heightLimit--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//迷宫尺寸换算成带墙尺寸</span></span><br><span class=\"line\">    widthLimit *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    heightLimit *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">//迷宫起点换算成带墙起点</span></span><br><span class=\"line\">    startX *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    startY *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (haveBorder)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        startX++;</span><br><span class=\"line\">        startY++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//产生空白迷宫</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mazeMap = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[widthLimit + <span class=\"number\">1</span>, heightLimit + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt;= widthLimit; x++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//mazeMap.Add(new BitArray(heightLimit + 1));</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>; y &lt;= heightLimit; y++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mazeMap[x, y] = block;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//邻墙列表</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> blockPos = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//将起点作为目标格</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> targetX = startX, targetY = startY;</span><br><span class=\"line\">    <span class=\"comment\">//将起点标记为通路</span></span><br><span class=\"line\">    mazeMap[targetX, targetY] = unBlock;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//记录邻墙</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (targetY &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        blockPos.AddRange(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; targetX, targetY - <span class=\"number\">1</span>, <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (targetX &lt; widthLimit)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        blockPos.AddRange(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; targetX + <span class=\"number\">1</span>, targetY, <span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (targetY &lt; heightLimit)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        blockPos.AddRange(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; targetX, targetY + <span class=\"number\">1</span>, <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (targetX &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        blockPos.AddRange(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; targetX - <span class=\"number\">1</span>, targetY, <span class=\"number\">3</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (blockPos.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//随机选一堵墙</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> blockIndex = r.Next(<span class=\"number\">0</span>, blockPos.Count / <span class=\"number\">3</span>) * <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"comment\">//找到墙对面的墙</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (blockPos[blockIndex + <span class=\"number\">2</span>] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            targetX = blockPos[blockIndex];</span><br><span class=\"line\">            targetY = blockPos[blockIndex + <span class=\"number\">1</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (blockPos[blockIndex + <span class=\"number\">2</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            targetX = blockPos[blockIndex] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            targetY = blockPos[blockIndex + <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (blockPos[blockIndex + <span class=\"number\">2</span>] == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            targetX = blockPos[blockIndex];</span><br><span class=\"line\">            targetY = blockPos[blockIndex + <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (blockPos[blockIndex + <span class=\"number\">2</span>] == <span class=\"number\">3</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            targetX = blockPos[blockIndex] - <span class=\"number\">1</span>;</span><br><span class=\"line\">            targetY = blockPos[blockIndex + <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果目标格未连通</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mazeMap[targetX, targetY] == block)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//联通目标格</span></span><br><span class=\"line\">            mazeMap[blockPos[blockIndex], blockPos[blockIndex + <span class=\"number\">1</span>]] = unBlock;</span><br><span class=\"line\">            mazeMap[targetX, targetY] = unBlock;</span><br><span class=\"line\">            <span class=\"comment\">//添加目标格相邻格</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetY &gt; <span class=\"number\">1</span> &amp;&amp; mazeMap[targetX, targetY - <span class=\"number\">1</span>] == block &amp;&amp; mazeMap[targetX, targetY - <span class=\"number\">2</span>] == block)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                blockPos.AddRange(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; targetX, targetY - <span class=\"number\">1</span>, <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetX &lt; widthLimit &amp;&amp; mazeMap[targetX + <span class=\"number\">1</span>, targetY] == block &amp;&amp; mazeMap[targetX + <span class=\"number\">2</span>, targetY] == block)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                blockPos.AddRange(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; targetX + <span class=\"number\">1</span>, targetY, <span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetY &lt; heightLimit &amp;&amp; mazeMap[targetX, targetY + <span class=\"number\">1</span>] == block &amp;&amp; mazeMap[targetX, targetY + <span class=\"number\">2</span>] == block)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                blockPos.AddRange(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; targetX, targetY + <span class=\"number\">1</span>, <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetX &gt; <span class=\"number\">1</span> &amp;&amp; mazeMap[targetX - <span class=\"number\">1</span>, targetY] == block &amp;&amp; mazeMap[targetX - <span class=\"number\">1</span>, targetY] == block)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                blockPos.AddRange(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; targetX - <span class=\"number\">1</span>, targetY, <span class=\"number\">3</span> &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        blockPos.RemoveRange(blockIndex, <span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mazeMap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"【迷宫中的算法实践】迷宫生成算法——递归分割算法","abbrlink":62848,"date":"2016-11-22T01:44:37.000Z","_content":"**Recursive division method**\n\nMazes can be created with recursive division, an algorithm which works as follows: Begin with the maze's space with no walls. Call this a chamber. Divide the chamber with a randomly positioned wall (or multiple walls) where each wall contains a randomly positioned passage opening within it. Then recursively repeat the process on the subchambers until all chambers are minimum sized. This method results in mazes with long straight walls crossing their space, making it easier to see which areas to avoid.\n\nFor example, in a rectangular maze, build at random points two walls that are perpendicular to each other. These two walls divide the large chamber into four smaller chambers separated by four walls. Choose three of the four walls at random, and open a one cell-wide hole at a random point in each of the three. Continue in this manner recursively, until every chamber has a width of one cell in either of the two directions.\n<!-- more -->\n![](http://p4au3q1y8.bkt.clouddn.com/20180218231937/20180218112102947.gif)\n## 递归分割算法\n 可以用递归分割法创建迷宫，算法的工作原理如下：\n\n1. 开始创建迷宫，使整个空间没有壁，我们称之为“室”。\n\n2. 在随机位置生成壁将室分割为两个子室，并在壁上随机开孔，使子室联通。\n\n3. 重复步骤2，直到所有子室全部不可分割（即子室某一个维度等于1）。\n\n\n例如，在矩形迷宫中，在任意点建立彼此垂直的两个壁。 这两个壁将大腔室分成由四个壁分开的四个较小腔室。 随机选择四个墙壁中的三个，并在三个墙壁的随机点处打开一个单元格的孔。 继续以这种方式递归，直到每个室在两个方向中的任一个方向上具有一个单元的宽度。\n\n## 代码实现\n下面我们来做C#的代码实现：\n```csharp\n/// <summary>\n/// 递归回溯法迷宫生成法\n/// </summary>\n/// <param name=\"startX\"></param>\n/// <param name=\"startY\"></param>\n/// <param name=\"widthLimit\"></param>\n/// <param name=\"heightLimit\"></param>\nprivate void RecursiveBacktrack(int startX, int startY, int widthLimit, int heightLimit)\n{\n    PathStack = new Stack<Point>();\n    //周围未连通格坐标\n    int[] blockPos = new int[4];\n    //周围未标记格的数量\n    int blockNum = 0;\n\n    //将起点作为当前格\n    int currentX = startX;\n    int currentY = startY;\n\n    //标记起点\n    MazeMap[currentX, currentY] = UnBlock;\n    CreateScript.Add(new ScriptPoint(new Point(currentX, currentY), false));\n    do\n    {\n        //检测周围有没有未连通的格子\n        blockNum = 0;\n        //检查上方\n        if (currentY > 1 && MazeMap[currentX, currentY - 2] == Block)\n        {\n            blockPos[blockNum] = 0;\n            blockNum++;\n        }\n        //检查右侧\n        if (currentX < widthLimit && MazeMap[currentX + 2, currentY] == Block)\n        {\n            blockPos[blockNum] = 1;\n            blockNum++;\n        }\n        //检查下方\n        if (currentY < heightLimit && MazeMap[currentX, currentY + 2] == Block)\n        {\n            blockPos[blockNum] = 2;\n            blockNum++;\n        }\n        //检查左侧\n        if (currentX > 1 && MazeMap[currentX - 2, currentY] == Block)\n        {\n            blockPos[blockNum] = 3;\n            blockNum++;\n        }\n\n        //选出下一个当前格\n        if (blockNum > 0)\n        {\n            //随机选择一个邻格\n            blockNum = _r.Next(0, blockNum);\n            //把当前格入栈\n            PathStack.Push(new Point(currentX, currentY));\n            //连通邻格，并将邻格指定为当前格\n            switch (blockPos[blockNum])\n            {\n                case 0:\n                    MazeMap[currentX, currentY - 1] = UnBlock;\n                    CreateScript.Add(new ScriptPoint(new Point(currentX, currentY - 1), false));\n                    currentY -= 2;\n                    break;\n                case 1:\n                    MazeMap[currentX + 1, currentY] = UnBlock;\n                    CreateScript.Add(new ScriptPoint(new Point(currentX + 1, currentY), false));\n                    currentX += 2;\n                    break;\n                case 2:\n                    MazeMap[currentX, currentY + 1] = UnBlock;\n                    CreateScript.Add(new ScriptPoint(new Point(currentX, currentY + 1), false));\n                    currentY += 2;\n                    break;\n                case 3:\n                    MazeMap[currentX - 1, currentY] = UnBlock;\n                    CreateScript.Add(new ScriptPoint(new Point(currentX - 1, currentY), false));\n                    currentX -= 2;\n                    break;\n\n            }\n            //标记当前格\n            MazeMap[currentX, currentY] = UnBlock;\n            CreateScript.Add(new ScriptPoint(new Point(currentX, currentY), false));\n        }\n        else if (PathStack.Count > 0)\n        {\n            //将栈顶作为当前格\n            Point top = PathStack.Pop();\n            currentY = top.Y;\n            currentX = top.X;\n        }\n    } while (PathStack.Count > 0);\n}\n```","source":"_posts/【迷宫中的算法实践】迷宫生成算法——递归分割算法.md","raw":"---\ntitle: 【迷宫中的算法实践】迷宫生成算法——递归分割算法\ntags:\n  - 迷宫\n  - 算法\n  - 递归分割\nabbrlink: 62848\ndate: 2016-11-22 09:44:37\n---\n**Recursive division method**\n\nMazes can be created with recursive division, an algorithm which works as follows: Begin with the maze's space with no walls. Call this a chamber. Divide the chamber with a randomly positioned wall (or multiple walls) where each wall contains a randomly positioned passage opening within it. Then recursively repeat the process on the subchambers until all chambers are minimum sized. This method results in mazes with long straight walls crossing their space, making it easier to see which areas to avoid.\n\nFor example, in a rectangular maze, build at random points two walls that are perpendicular to each other. These two walls divide the large chamber into four smaller chambers separated by four walls. Choose three of the four walls at random, and open a one cell-wide hole at a random point in each of the three. Continue in this manner recursively, until every chamber has a width of one cell in either of the two directions.\n<!-- more -->\n![](http://p4au3q1y8.bkt.clouddn.com/20180218231937/20180218112102947.gif)\n## 递归分割算法\n 可以用递归分割法创建迷宫，算法的工作原理如下：\n\n1. 开始创建迷宫，使整个空间没有壁，我们称之为“室”。\n\n2. 在随机位置生成壁将室分割为两个子室，并在壁上随机开孔，使子室联通。\n\n3. 重复步骤2，直到所有子室全部不可分割（即子室某一个维度等于1）。\n\n\n例如，在矩形迷宫中，在任意点建立彼此垂直的两个壁。 这两个壁将大腔室分成由四个壁分开的四个较小腔室。 随机选择四个墙壁中的三个，并在三个墙壁的随机点处打开一个单元格的孔。 继续以这种方式递归，直到每个室在两个方向中的任一个方向上具有一个单元的宽度。\n\n## 代码实现\n下面我们来做C#的代码实现：\n```csharp\n/// <summary>\n/// 递归回溯法迷宫生成法\n/// </summary>\n/// <param name=\"startX\"></param>\n/// <param name=\"startY\"></param>\n/// <param name=\"widthLimit\"></param>\n/// <param name=\"heightLimit\"></param>\nprivate void RecursiveBacktrack(int startX, int startY, int widthLimit, int heightLimit)\n{\n    PathStack = new Stack<Point>();\n    //周围未连通格坐标\n    int[] blockPos = new int[4];\n    //周围未标记格的数量\n    int blockNum = 0;\n\n    //将起点作为当前格\n    int currentX = startX;\n    int currentY = startY;\n\n    //标记起点\n    MazeMap[currentX, currentY] = UnBlock;\n    CreateScript.Add(new ScriptPoint(new Point(currentX, currentY), false));\n    do\n    {\n        //检测周围有没有未连通的格子\n        blockNum = 0;\n        //检查上方\n        if (currentY > 1 && MazeMap[currentX, currentY - 2] == Block)\n        {\n            blockPos[blockNum] = 0;\n            blockNum++;\n        }\n        //检查右侧\n        if (currentX < widthLimit && MazeMap[currentX + 2, currentY] == Block)\n        {\n            blockPos[blockNum] = 1;\n            blockNum++;\n        }\n        //检查下方\n        if (currentY < heightLimit && MazeMap[currentX, currentY + 2] == Block)\n        {\n            blockPos[blockNum] = 2;\n            blockNum++;\n        }\n        //检查左侧\n        if (currentX > 1 && MazeMap[currentX - 2, currentY] == Block)\n        {\n            blockPos[blockNum] = 3;\n            blockNum++;\n        }\n\n        //选出下一个当前格\n        if (blockNum > 0)\n        {\n            //随机选择一个邻格\n            blockNum = _r.Next(0, blockNum);\n            //把当前格入栈\n            PathStack.Push(new Point(currentX, currentY));\n            //连通邻格，并将邻格指定为当前格\n            switch (blockPos[blockNum])\n            {\n                case 0:\n                    MazeMap[currentX, currentY - 1] = UnBlock;\n                    CreateScript.Add(new ScriptPoint(new Point(currentX, currentY - 1), false));\n                    currentY -= 2;\n                    break;\n                case 1:\n                    MazeMap[currentX + 1, currentY] = UnBlock;\n                    CreateScript.Add(new ScriptPoint(new Point(currentX + 1, currentY), false));\n                    currentX += 2;\n                    break;\n                case 2:\n                    MazeMap[currentX, currentY + 1] = UnBlock;\n                    CreateScript.Add(new ScriptPoint(new Point(currentX, currentY + 1), false));\n                    currentY += 2;\n                    break;\n                case 3:\n                    MazeMap[currentX - 1, currentY] = UnBlock;\n                    CreateScript.Add(new ScriptPoint(new Point(currentX - 1, currentY), false));\n                    currentX -= 2;\n                    break;\n\n            }\n            //标记当前格\n            MazeMap[currentX, currentY] = UnBlock;\n            CreateScript.Add(new ScriptPoint(new Point(currentX, currentY), false));\n        }\n        else if (PathStack.Count > 0)\n        {\n            //将栈顶作为当前格\n            Point top = PathStack.Pop();\n            currentY = top.Y;\n            currentX = top.X;\n        }\n    } while (PathStack.Count > 0);\n}\n```","slug":"【迷宫中的算法实践】迷宫生成算法——递归分割算法","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ou40029d00od0a1xprz","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p><strong>Recursive division method</strong></p><p>Mazes can be created with recursive division, an algorithm which works as follows: Begin with the maze’s space with no walls. Call this a chamber. Divide the chamber with a randomly positioned wall (or multiple walls) where each wall contains a randomly positioned passage opening within it. Then recursively repeat the process on the subchambers until all chambers are minimum sized. This method results in mazes with long straight walls crossing their space, making it easier to see which areas to avoid.</p><p>For example, in a rectangular maze, build at random points two walls that are perpendicular to each other. These two walls divide the large chamber into four smaller chambers separated by four walls. Choose three of the four walls at random, and open a one cell-wide hole at a random point in each of the three. Continue in this manner recursively, until every chamber has a width of one cell in either of the two directions.<br><a id=\"more\"></a><br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218231937/20180218112102947.gif\" alt=\"\"></p><h2 id=\"递归分割算法\"><a href=\"#递归分割算法\" class=\"headerlink\" title=\"递归分割算法\"></a>递归分割算法</h2><p>可以用递归分割法创建迷宫，算法的工作原理如下：</p><ol><li><p>开始创建迷宫，使整个空间没有壁，我们称之为“室”。</p></li><li><p>在随机位置生成壁将室分割为两个子室，并在壁上随机开孔，使子室联通。</p></li><li><p>重复步骤2，直到所有子室全部不可分割（即子室某一个维度等于1）。</p></li></ol><p>例如，在矩形迷宫中，在任意点建立彼此垂直的两个壁。 这两个壁将大腔室分成由四个壁分开的四个较小腔室。 随机选择四个墙壁中的三个，并在三个墙壁的随机点处打开一个单元格的孔。 继续以这种方式递归，直到每个室在两个方向中的任一个方向上具有一个单元的宽度。</p><h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>下面我们来做C#的代码实现：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 递归回溯法迷宫生成法</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"startX\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"startY\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"widthLimit\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"heightLimit\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">RecursiveBacktrack</span>(<span class=\"params\"><span class=\"keyword\">int</span> startX, <span class=\"keyword\">int</span> startY, <span class=\"keyword\">int</span> widthLimit, <span class=\"keyword\">int</span> heightLimit</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    PathStack = <span class=\"keyword\">new</span> Stack&lt;Point&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//周围未连通格坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] blockPos = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"comment\">//周围未标记格的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> blockNum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将起点作为当前格</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> currentX = startX;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> currentY = startY;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//标记起点</span></span><br><span class=\"line\">    MazeMap[currentX, currentY] = UnBlock;</span><br><span class=\"line\">    CreateScript.Add(<span class=\"keyword\">new</span> ScriptPoint(<span class=\"keyword\">new</span> Point(currentX, currentY), <span class=\"literal\">false</span>));</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//检测周围有没有未连通的格子</span></span><br><span class=\"line\">        blockNum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//检查上方</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentY &gt; <span class=\"number\">1</span> &amp;&amp; MazeMap[currentX, currentY - <span class=\"number\">2</span>] == Block)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            blockPos[blockNum] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            blockNum++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//检查右侧</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentX &lt; widthLimit &amp;&amp; MazeMap[currentX + <span class=\"number\">2</span>, currentY] == Block)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            blockPos[blockNum] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            blockNum++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//检查下方</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentY &lt; heightLimit &amp;&amp; MazeMap[currentX, currentY + <span class=\"number\">2</span>] == Block)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            blockPos[blockNum] = <span class=\"number\">2</span>;</span><br><span class=\"line\">            blockNum++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//检查左侧</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentX &gt; <span class=\"number\">1</span> &amp;&amp; MazeMap[currentX - <span class=\"number\">2</span>, currentY] == Block)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            blockPos[blockNum] = <span class=\"number\">3</span>;</span><br><span class=\"line\">            blockNum++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//选出下一个当前格</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (blockNum &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//随机选择一个邻格</span></span><br><span class=\"line\">            blockNum = _r.Next(<span class=\"number\">0</span>, blockNum);</span><br><span class=\"line\">            <span class=\"comment\">//把当前格入栈</span></span><br><span class=\"line\">            PathStack.Push(<span class=\"keyword\">new</span> Point(currentX, currentY));</span><br><span class=\"line\">            <span class=\"comment\">//连通邻格，并将邻格指定为当前格</span></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (blockPos[blockNum])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                    MazeMap[currentX, currentY - <span class=\"number\">1</span>] = UnBlock;</span><br><span class=\"line\">                    CreateScript.Add(<span class=\"keyword\">new</span> ScriptPoint(<span class=\"keyword\">new</span> Point(currentX, currentY - <span class=\"number\">1</span>), <span class=\"literal\">false</span>));</span><br><span class=\"line\">                    currentY -= <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    MazeMap[currentX + <span class=\"number\">1</span>, currentY] = UnBlock;</span><br><span class=\"line\">                    CreateScript.Add(<span class=\"keyword\">new</span> ScriptPoint(<span class=\"keyword\">new</span> Point(currentX + <span class=\"number\">1</span>, currentY), <span class=\"literal\">false</span>));</span><br><span class=\"line\">                    currentX += <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    MazeMap[currentX, currentY + <span class=\"number\">1</span>] = UnBlock;</span><br><span class=\"line\">                    CreateScript.Add(<span class=\"keyword\">new</span> ScriptPoint(<span class=\"keyword\">new</span> Point(currentX, currentY + <span class=\"number\">1</span>), <span class=\"literal\">false</span>));</span><br><span class=\"line\">                    currentY += <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                    MazeMap[currentX - <span class=\"number\">1</span>, currentY] = UnBlock;</span><br><span class=\"line\">                    CreateScript.Add(<span class=\"keyword\">new</span> ScriptPoint(<span class=\"keyword\">new</span> Point(currentX - <span class=\"number\">1</span>, currentY), <span class=\"literal\">false</span>));</span><br><span class=\"line\">                    currentX -= <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//标记当前格</span></span><br><span class=\"line\">            MazeMap[currentX, currentY] = UnBlock;</span><br><span class=\"line\">            CreateScript.Add(<span class=\"keyword\">new</span> ScriptPoint(<span class=\"keyword\">new</span> Point(currentX, currentY), <span class=\"literal\">false</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (PathStack.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//将栈顶作为当前格</span></span><br><span class=\"line\">            Point top = PathStack.Pop();</span><br><span class=\"line\">            currentY = top.Y;</span><br><span class=\"line\">            currentX = top.X;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (PathStack.Count &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p><strong>Recursive division method</strong></p><p>Mazes can be created with recursive division, an algorithm which works as follows: Begin with the maze’s space with no walls. Call this a chamber. Divide the chamber with a randomly positioned wall (or multiple walls) where each wall contains a randomly positioned passage opening within it. Then recursively repeat the process on the subchambers until all chambers are minimum sized. This method results in mazes with long straight walls crossing their space, making it easier to see which areas to avoid.</p><p>For example, in a rectangular maze, build at random points two walls that are perpendicular to each other. These two walls divide the large chamber into four smaller chambers separated by four walls. Choose three of the four walls at random, and open a one cell-wide hole at a random point in each of the three. Continue in this manner recursively, until every chamber has a width of one cell in either of the two directions.<br>","more":"<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218231937/20180218112102947.gif\" alt=\"\"></p><h2 id=\"递归分割算法\"><a href=\"#递归分割算法\" class=\"headerlink\" title=\"递归分割算法\"></a>递归分割算法</h2><p>可以用递归分割法创建迷宫，算法的工作原理如下：</p><ol><li><p>开始创建迷宫，使整个空间没有壁，我们称之为“室”。</p></li><li><p>在随机位置生成壁将室分割为两个子室，并在壁上随机开孔，使子室联通。</p></li><li><p>重复步骤2，直到所有子室全部不可分割（即子室某一个维度等于1）。</p></li></ol><p>例如，在矩形迷宫中，在任意点建立彼此垂直的两个壁。 这两个壁将大腔室分成由四个壁分开的四个较小腔室。 随机选择四个墙壁中的三个，并在三个墙壁的随机点处打开一个单元格的孔。 继续以这种方式递归，直到每个室在两个方向中的任一个方向上具有一个单元的宽度。</p><h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>下面我们来做C#的代码实现：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 递归回溯法迷宫生成法</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"startX\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"startY\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"widthLimit\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"heightLimit\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">RecursiveBacktrack</span>(<span class=\"params\"><span class=\"keyword\">int</span> startX, <span class=\"keyword\">int</span> startY, <span class=\"keyword\">int</span> widthLimit, <span class=\"keyword\">int</span> heightLimit</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    PathStack = <span class=\"keyword\">new</span> Stack&lt;Point&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//周围未连通格坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] blockPos = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"comment\">//周围未标记格的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> blockNum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将起点作为当前格</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> currentX = startX;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> currentY = startY;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//标记起点</span></span><br><span class=\"line\">    MazeMap[currentX, currentY] = UnBlock;</span><br><span class=\"line\">    CreateScript.Add(<span class=\"keyword\">new</span> ScriptPoint(<span class=\"keyword\">new</span> Point(currentX, currentY), <span class=\"literal\">false</span>));</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//检测周围有没有未连通的格子</span></span><br><span class=\"line\">        blockNum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//检查上方</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentY &gt; <span class=\"number\">1</span> &amp;&amp; MazeMap[currentX, currentY - <span class=\"number\">2</span>] == Block)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            blockPos[blockNum] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            blockNum++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//检查右侧</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentX &lt; widthLimit &amp;&amp; MazeMap[currentX + <span class=\"number\">2</span>, currentY] == Block)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            blockPos[blockNum] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            blockNum++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//检查下方</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentY &lt; heightLimit &amp;&amp; MazeMap[currentX, currentY + <span class=\"number\">2</span>] == Block)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            blockPos[blockNum] = <span class=\"number\">2</span>;</span><br><span class=\"line\">            blockNum++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//检查左侧</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentX &gt; <span class=\"number\">1</span> &amp;&amp; MazeMap[currentX - <span class=\"number\">2</span>, currentY] == Block)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            blockPos[blockNum] = <span class=\"number\">3</span>;</span><br><span class=\"line\">            blockNum++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//选出下一个当前格</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (blockNum &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//随机选择一个邻格</span></span><br><span class=\"line\">            blockNum = _r.Next(<span class=\"number\">0</span>, blockNum);</span><br><span class=\"line\">            <span class=\"comment\">//把当前格入栈</span></span><br><span class=\"line\">            PathStack.Push(<span class=\"keyword\">new</span> Point(currentX, currentY));</span><br><span class=\"line\">            <span class=\"comment\">//连通邻格，并将邻格指定为当前格</span></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (blockPos[blockNum])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                    MazeMap[currentX, currentY - <span class=\"number\">1</span>] = UnBlock;</span><br><span class=\"line\">                    CreateScript.Add(<span class=\"keyword\">new</span> ScriptPoint(<span class=\"keyword\">new</span> Point(currentX, currentY - <span class=\"number\">1</span>), <span class=\"literal\">false</span>));</span><br><span class=\"line\">                    currentY -= <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    MazeMap[currentX + <span class=\"number\">1</span>, currentY] = UnBlock;</span><br><span class=\"line\">                    CreateScript.Add(<span class=\"keyword\">new</span> ScriptPoint(<span class=\"keyword\">new</span> Point(currentX + <span class=\"number\">1</span>, currentY), <span class=\"literal\">false</span>));</span><br><span class=\"line\">                    currentX += <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    MazeMap[currentX, currentY + <span class=\"number\">1</span>] = UnBlock;</span><br><span class=\"line\">                    CreateScript.Add(<span class=\"keyword\">new</span> ScriptPoint(<span class=\"keyword\">new</span> Point(currentX, currentY + <span class=\"number\">1</span>), <span class=\"literal\">false</span>));</span><br><span class=\"line\">                    currentY += <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                    MazeMap[currentX - <span class=\"number\">1</span>, currentY] = UnBlock;</span><br><span class=\"line\">                    CreateScript.Add(<span class=\"keyword\">new</span> ScriptPoint(<span class=\"keyword\">new</span> Point(currentX - <span class=\"number\">1</span>, currentY), <span class=\"literal\">false</span>));</span><br><span class=\"line\">                    currentX -= <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//标记当前格</span></span><br><span class=\"line\">            MazeMap[currentX, currentY] = UnBlock;</span><br><span class=\"line\">            CreateScript.Add(<span class=\"keyword\">new</span> ScriptPoint(<span class=\"keyword\">new</span> Point(currentX, currentY), <span class=\"literal\">false</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (PathStack.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//将栈顶作为当前格</span></span><br><span class=\"line\">            Point top = PathStack.Pop();</span><br><span class=\"line\">            currentY = top.Y;</span><br><span class=\"line\">            currentX = top.X;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (PathStack.Count &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"【迷宫中的算法实践】迷宫问题算法综述","abbrlink":26097,"date":"2016-09-18T10:49:43.000Z","_content":" 最近听闻数据结构与算法实践课的老师又出了和上年一样的选题，不禁想起了去年自己完成作业时的点点滴滴，遗憾当时没有写博客的习惯，之前的一些心得这一年实践的过去也逐渐淡忘了，突然就有了总结一下的想法，希望能有新的收获吧。\n <!-- more -->\n 由于当时也没注意保存，软件完成过程中的一些文档早已丢失了，幸运的是Winform版源码还在，Unity3D版程序也还幸存，虽然由于时间紧张只完成了大概框架，但美观程度也远非Winform可以相比的，先上几张软件图吧：\n ![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218102928613.png)\n ![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218102935756.png)\n ![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218102935756.png)\n## 生成算法\n软件实现了普利姆算法、递归回溯算法、递归分割算法和深度遍历图算法四种算法来完成迷宫的生成，前两种算法生成的迷宫本质上是一个二维矩阵网络形式的生成树，也就是说其中没有回路，同时从左下角的起点到迷宫中的每一点都有且仅有一条路径，递归分割法虽然不是生成树算法但是同样属于没有回路的迷宫生成算法，深度遍历图算法则来源于知网上的一篇论文，属于图的深度遍历算法，生成的迷宫随机性更强，路径也不止一条，但不得不说的确扮相比较差。\n### 普利姆算法迷宫（Prim）\n![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103025583.gif)\n### 递归分割算法（Recursive division）\n![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103145980.gif)\n### 递归回溯（Recursive backtracker）\n![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103226097.gif)\n### 深度遍历图（Deep traversal graph）\n![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103309658.gif)\n## 寻路算法\n至于寻路算法，软件实现了深度优先遍历、广度优先遍历、和A-Star三种算法，前两种自不必说，A-Star算法是一种启发式搜索算法，移动时会评估向周围八个方向行走的预期代价，实时选出更小代价的移动方向，不过因为生成的迷宫均为正方形迷宫且起点和终点固定为左上和右下，所以在本项目中，A-Star算法并未发挥出它应有的机智，效率与广度优先基本相同。后两种算法可以寻找到最短路径，而深度优先则并不能展示。图中绿色为正确路线，蓝色为寻路过程中经过的路线。。（PS：设定为深度广度四方向移动，A-Star八方向移动）\n### 深度优先遍历（DFS）\n![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103413877.gif)\n### 广度优先遍历（BFS）\n![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103500950.gif)\n### A-Star\n![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103540517.gif)\n因为实例中的迷宫入口出口位置的特殊性，广度优先在寻路过程中基本要走完全称，显得有些不太机智，而A-Star的表现也和广度优先近似。\n**本文章属于综述，后面的算法会分篇分别阐述。**","source":"_posts/【迷宫中的算法实践】迷宫问题算法综述.md","raw":"---\ntitle: 【迷宫中的算法实践】迷宫问题算法综述\ntags:\n  - 迷宫\n  - 算法\nabbrlink: 26097\ndate: 2016-09-18 18:49:43\n---\n 最近听闻数据结构与算法实践课的老师又出了和上年一样的选题，不禁想起了去年自己完成作业时的点点滴滴，遗憾当时没有写博客的习惯，之前的一些心得这一年实践的过去也逐渐淡忘了，突然就有了总结一下的想法，希望能有新的收获吧。\n <!-- more -->\n 由于当时也没注意保存，软件完成过程中的一些文档早已丢失了，幸运的是Winform版源码还在，Unity3D版程序也还幸存，虽然由于时间紧张只完成了大概框架，但美观程度也远非Winform可以相比的，先上几张软件图吧：\n ![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218102928613.png)\n ![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218102935756.png)\n ![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218102935756.png)\n## 生成算法\n软件实现了普利姆算法、递归回溯算法、递归分割算法和深度遍历图算法四种算法来完成迷宫的生成，前两种算法生成的迷宫本质上是一个二维矩阵网络形式的生成树，也就是说其中没有回路，同时从左下角的起点到迷宫中的每一点都有且仅有一条路径，递归分割法虽然不是生成树算法但是同样属于没有回路的迷宫生成算法，深度遍历图算法则来源于知网上的一篇论文，属于图的深度遍历算法，生成的迷宫随机性更强，路径也不止一条，但不得不说的确扮相比较差。\n### 普利姆算法迷宫（Prim）\n![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103025583.gif)\n### 递归分割算法（Recursive division）\n![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103145980.gif)\n### 递归回溯（Recursive backtracker）\n![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103226097.gif)\n### 深度遍历图（Deep traversal graph）\n![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103309658.gif)\n## 寻路算法\n至于寻路算法，软件实现了深度优先遍历、广度优先遍历、和A-Star三种算法，前两种自不必说，A-Star算法是一种启发式搜索算法，移动时会评估向周围八个方向行走的预期代价，实时选出更小代价的移动方向，不过因为生成的迷宫均为正方形迷宫且起点和终点固定为左上和右下，所以在本项目中，A-Star算法并未发挥出它应有的机智，效率与广度优先基本相同。后两种算法可以寻找到最短路径，而深度优先则并不能展示。图中绿色为正确路线，蓝色为寻路过程中经过的路线。。（PS：设定为深度广度四方向移动，A-Star八方向移动）\n### 深度优先遍历（DFS）\n![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103413877.gif)\n### 广度优先遍历（BFS）\n![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103500950.gif)\n### A-Star\n![](http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103540517.gif)\n因为实例中的迷宫入口出口位置的特殊性，广度优先在寻路过程中基本要走完全称，显得有些不太机智，而A-Star的表现也和广度优先近似。\n**本文章属于综述，后面的算法会分篇分别阐述。**","slug":"【迷宫中的算法实践】迷宫问题算法综述","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ou6002bd00oi4damau4","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>最近听闻数据结构与算法实践课的老师又出了和上年一样的选题，不禁想起了去年自己完成作业时的点点滴滴，遗憾当时没有写博客的习惯，之前的一些心得这一年实践的过去也逐渐淡忘了，突然就有了总结一下的想法，希望能有新的收获吧。<br><a id=\"more\"></a><br>由于当时也没注意保存，软件完成过程中的一些文档早已丢失了，幸运的是Winform版源码还在，Unity3D版程序也还幸存，虽然由于时间紧张只完成了大概框架，但美观程度也远非Winform可以相比的，先上几张软件图吧：<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218102928613.png\" alt=\"\"><br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218102935756.png\" alt=\"\"><br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218102935756.png\" alt=\"\"></p><h2 id=\"生成算法\"><a href=\"#生成算法\" class=\"headerlink\" title=\"生成算法\"></a>生成算法</h2><p>软件实现了普利姆算法、递归回溯算法、递归分割算法和深度遍历图算法四种算法来完成迷宫的生成，前两种算法生成的迷宫本质上是一个二维矩阵网络形式的生成树，也就是说其中没有回路，同时从左下角的起点到迷宫中的每一点都有且仅有一条路径，递归分割法虽然不是生成树算法但是同样属于没有回路的迷宫生成算法，深度遍历图算法则来源于知网上的一篇论文，属于图的深度遍历算法，生成的迷宫随机性更强，路径也不止一条，但不得不说的确扮相比较差。</p><h3 id=\"普利姆算法迷宫（Prim）\"><a href=\"#普利姆算法迷宫（Prim）\" class=\"headerlink\" title=\"普利姆算法迷宫（Prim）\"></a>普利姆算法迷宫（Prim）</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103025583.gif\" alt=\"\"></p><h3 id=\"递归分割算法（Recursive-division）\"><a href=\"#递归分割算法（Recursive-division）\" class=\"headerlink\" title=\"递归分割算法（Recursive division）\"></a>递归分割算法（Recursive division）</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103145980.gif\" alt=\"\"></p><h3 id=\"递归回溯（Recursive-backtracker）\"><a href=\"#递归回溯（Recursive-backtracker）\" class=\"headerlink\" title=\"递归回溯（Recursive backtracker）\"></a>递归回溯（Recursive backtracker）</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103226097.gif\" alt=\"\"></p><h3 id=\"深度遍历图（Deep-traversal-graph）\"><a href=\"#深度遍历图（Deep-traversal-graph）\" class=\"headerlink\" title=\"深度遍历图（Deep traversal graph）\"></a>深度遍历图（Deep traversal graph）</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103309658.gif\" alt=\"\"></p><h2 id=\"寻路算法\"><a href=\"#寻路算法\" class=\"headerlink\" title=\"寻路算法\"></a>寻路算法</h2><p>至于寻路算法，软件实现了深度优先遍历、广度优先遍历、和A-Star三种算法，前两种自不必说，A-Star算法是一种启发式搜索算法，移动时会评估向周围八个方向行走的预期代价，实时选出更小代价的移动方向，不过因为生成的迷宫均为正方形迷宫且起点和终点固定为左上和右下，所以在本项目中，A-Star算法并未发挥出它应有的机智，效率与广度优先基本相同。后两种算法可以寻找到最短路径，而深度优先则并不能展示。图中绿色为正确路线，蓝色为寻路过程中经过的路线。。（PS：设定为深度广度四方向移动，A-Star八方向移动）</p><h3 id=\"深度优先遍历（DFS）\"><a href=\"#深度优先遍历（DFS）\" class=\"headerlink\" title=\"深度优先遍历（DFS）\"></a>深度优先遍历（DFS）</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103413877.gif\" alt=\"\"></p><h3 id=\"广度优先遍历（BFS）\"><a href=\"#广度优先遍历（BFS）\" class=\"headerlink\" title=\"广度优先遍历（BFS）\"></a>广度优先遍历（BFS）</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103500950.gif\" alt=\"\"></p><h3 id=\"A-Star\"><a href=\"#A-Star\" class=\"headerlink\" title=\"A-Star\"></a>A-Star</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103540517.gif\" alt=\"\"><br>因为实例中的迷宫入口出口位置的特殊性，广度优先在寻路过程中基本要走完全称，显得有些不太机智，而A-Star的表现也和广度优先近似。<br><strong>本文章属于综述，后面的算法会分篇分别阐述。</strong></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>最近听闻数据结构与算法实践课的老师又出了和上年一样的选题，不禁想起了去年自己完成作业时的点点滴滴，遗憾当时没有写博客的习惯，之前的一些心得这一年实践的过去也逐渐淡忘了，突然就有了总结一下的想法，希望能有新的收获吧。<br>","more":"<br>由于当时也没注意保存，软件完成过程中的一些文档早已丢失了，幸运的是Winform版源码还在，Unity3D版程序也还幸存，虽然由于时间紧张只完成了大概框架，但美观程度也远非Winform可以相比的，先上几张软件图吧：<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218102928613.png\" alt=\"\"><br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218102935756.png\" alt=\"\"><br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218102935756.png\" alt=\"\"></p><h2 id=\"生成算法\"><a href=\"#生成算法\" class=\"headerlink\" title=\"生成算法\"></a>生成算法</h2><p>软件实现了普利姆算法、递归回溯算法、递归分割算法和深度遍历图算法四种算法来完成迷宫的生成，前两种算法生成的迷宫本质上是一个二维矩阵网络形式的生成树，也就是说其中没有回路，同时从左下角的起点到迷宫中的每一点都有且仅有一条路径，递归分割法虽然不是生成树算法但是同样属于没有回路的迷宫生成算法，深度遍历图算法则来源于知网上的一篇论文，属于图的深度遍历算法，生成的迷宫随机性更强，路径也不止一条，但不得不说的确扮相比较差。</p><h3 id=\"普利姆算法迷宫（Prim）\"><a href=\"#普利姆算法迷宫（Prim）\" class=\"headerlink\" title=\"普利姆算法迷宫（Prim）\"></a>普利姆算法迷宫（Prim）</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103025583.gif\" alt=\"\"></p><h3 id=\"递归分割算法（Recursive-division）\"><a href=\"#递归分割算法（Recursive-division）\" class=\"headerlink\" title=\"递归分割算法（Recursive division）\"></a>递归分割算法（Recursive division）</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103145980.gif\" alt=\"\"></p><h3 id=\"递归回溯（Recursive-backtracker）\"><a href=\"#递归回溯（Recursive-backtracker）\" class=\"headerlink\" title=\"递归回溯（Recursive backtracker）\"></a>递归回溯（Recursive backtracker）</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103226097.gif\" alt=\"\"></p><h3 id=\"深度遍历图（Deep-traversal-graph）\"><a href=\"#深度遍历图（Deep-traversal-graph）\" class=\"headerlink\" title=\"深度遍历图（Deep traversal graph）\"></a>深度遍历图（Deep traversal graph）</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103309658.gif\" alt=\"\"></p><h2 id=\"寻路算法\"><a href=\"#寻路算法\" class=\"headerlink\" title=\"寻路算法\"></a>寻路算法</h2><p>至于寻路算法，软件实现了深度优先遍历、广度优先遍历、和A-Star三种算法，前两种自不必说，A-Star算法是一种启发式搜索算法，移动时会评估向周围八个方向行走的预期代价，实时选出更小代价的移动方向，不过因为生成的迷宫均为正方形迷宫且起点和终点固定为左上和右下，所以在本项目中，A-Star算法并未发挥出它应有的机智，效率与广度优先基本相同。后两种算法可以寻找到最短路径，而深度优先则并不能展示。图中绿色为正确路线，蓝色为寻路过程中经过的路线。。（PS：设定为深度广度四方向移动，A-Star八方向移动）</p><h3 id=\"深度优先遍历（DFS）\"><a href=\"#深度优先遍历（DFS）\" class=\"headerlink\" title=\"深度优先遍历（DFS）\"></a>深度优先遍历（DFS）</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103413877.gif\" alt=\"\"></p><h3 id=\"广度优先遍历（BFS）\"><a href=\"#广度优先遍历（BFS）\" class=\"headerlink\" title=\"广度优先遍历（BFS）\"></a>广度优先遍历（BFS）</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103500950.gif\" alt=\"\"></p><h3 id=\"A-Star\"><a href=\"#A-Star\" class=\"headerlink\" title=\"A-Star\"></a>A-Star</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218222743/20180218103540517.gif\" alt=\"\"><br>因为实例中的迷宫入口出口位置的特殊性，广度优先在寻路过程中基本要走完全称，显得有些不太机智，而A-Star的表现也和广度优先近似。<br><strong>本文章属于综述，后面的算法会分篇分别阐述。</strong></p><!-- rebuild by neat -->"},{"title":"一木禾网盘文件下载地址抓取分析","abbrlink":5284,"date":"2016-02-01T06:47:11.000Z","_content":"本文是对抓取一木禾网盘文件下载地址的整个流程就行分析，并依次解决其中各个环节涉及的技术问题。\n<!-- more -->\n## 缘由\n最近因为一些个人原因用到了一木禾网盘，这个收费网盘虽然较一些国外的倒数30秒网盘容易了一些，也没有十分钟只能下载一个的限制，但如果下载资源较多还是显得十分麻烦。\n网上搜索了很长时间，功夫不负有心认，终于在[吾爱破解](https://www.52pojie.cn/forum.php)找到了 [cylisme](http://www.52pojie.cn/space-uid-126109.html) 作品 [一木禾网盘批量下载](http://www.52pojie.cn/thread-215719-1-1.html) 。\n软件界面如下：\n![](http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218063130751.png)\n虽然可以进行使用，但是每一个验证码都必须手动输入，就起了自己制作一个网盘批量下载器的想法 。\n**我本人只是一个C#初学者，言辞中有不正确的请指出，若文中内容侵犯了您的权益，请联系删除。**\n## 流程分析\n网页端获取下载地址流程分析：\n使用Chrome的开发人员工具得到了以下流程\n![](http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218063408396.png)\n由上图可知，关键性技术问题为验证码识别\n## 验证码识别\n一木禾的验证码是杂色点比较多的四位数字，如下图：\n![](http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218083729794.png)\n尝试过几次自行去杂色点识别数字，但是因为个人对图形处理方面的知识十分有限，均以失败告终，最终使用了**次世代验证码识别系统2.3**来完成验证码识别，系统支持C#调用，经过几次调教之后已经能对一木禾验证码有不错的识别率。\n以下是软件界面:\n![](http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218083901347.png)\n![](http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218083907810.png)\n***本篇主要进行一些理论分析，下篇做具体代码实现。***","source":"_posts/一木禾网盘下载分析及批量获取下载地址的实现（上）.md","raw":"---\ntitle: 一木禾网盘文件下载地址抓取分析\ntags:\n  - 爬虫\nabbrlink: 5284\ndate: 2016-02-01 14:47:11\n---\n本文是对抓取一木禾网盘文件下载地址的整个流程就行分析，并依次解决其中各个环节涉及的技术问题。\n<!-- more -->\n## 缘由\n最近因为一些个人原因用到了一木禾网盘，这个收费网盘虽然较一些国外的倒数30秒网盘容易了一些，也没有十分钟只能下载一个的限制，但如果下载资源较多还是显得十分麻烦。\n网上搜索了很长时间，功夫不负有心认，终于在[吾爱破解](https://www.52pojie.cn/forum.php)找到了 [cylisme](http://www.52pojie.cn/space-uid-126109.html) 作品 [一木禾网盘批量下载](http://www.52pojie.cn/thread-215719-1-1.html) 。\n软件界面如下：\n![](http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218063130751.png)\n虽然可以进行使用，但是每一个验证码都必须手动输入，就起了自己制作一个网盘批量下载器的想法 。\n**我本人只是一个C#初学者，言辞中有不正确的请指出，若文中内容侵犯了您的权益，请联系删除。**\n## 流程分析\n网页端获取下载地址流程分析：\n使用Chrome的开发人员工具得到了以下流程\n![](http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218063408396.png)\n由上图可知，关键性技术问题为验证码识别\n## 验证码识别\n一木禾的验证码是杂色点比较多的四位数字，如下图：\n![](http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218083729794.png)\n尝试过几次自行去杂色点识别数字，但是因为个人对图形处理方面的知识十分有限，均以失败告终，最终使用了**次世代验证码识别系统2.3**来完成验证码识别，系统支持C#调用，经过几次调教之后已经能对一木禾验证码有不错的识别率。\n以下是软件界面:\n![](http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218083901347.png)\n![](http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218083907810.png)\n***本篇主要进行一些理论分析，下篇做具体代码实现。***","slug":"一木禾网盘下载分析及批量获取下载地址的实现（上）","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ou7002ed00oqwm8ab65","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>本文是对抓取一木禾网盘文件下载地址的整个流程就行分析，并依次解决其中各个环节涉及的技术问题。<br><a id=\"more\"></a></p><h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>最近因为一些个人原因用到了一木禾网盘，这个收费网盘虽然较一些国外的倒数30秒网盘容易了一些，也没有十分钟只能下载一个的限制，但如果下载资源较多还是显得十分麻烦。<br>网上搜索了很长时间，功夫不负有心认，终于在<a href=\"https://www.52pojie.cn/forum.php\" target=\"_blank\" rel=\"noopener\">吾爱破解</a>找到了 <a href=\"http://www.52pojie.cn/space-uid-126109.html\" target=\"_blank\" rel=\"noopener\">cylisme</a> 作品 <a href=\"http://www.52pojie.cn/thread-215719-1-1.html\" target=\"_blank\" rel=\"noopener\">一木禾网盘批量下载</a> 。<br>软件界面如下：<br><img src=\"http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218063130751.png\" alt=\"\"><br>虽然可以进行使用，但是每一个验证码都必须手动输入，就起了自己制作一个网盘批量下载器的想法 。<br><strong>我本人只是一个C#初学者，言辞中有不正确的请指出，若文中内容侵犯了您的权益，请联系删除。</strong></p><h2 id=\"流程分析\"><a href=\"#流程分析\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h2><p>网页端获取下载地址流程分析：<br>使用Chrome的开发人员工具得到了以下流程<br><img src=\"http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218063408396.png\" alt=\"\"><br>由上图可知，关键性技术问题为验证码识别</p><h2 id=\"验证码识别\"><a href=\"#验证码识别\" class=\"headerlink\" title=\"验证码识别\"></a>验证码识别</h2><p>一木禾的验证码是杂色点比较多的四位数字，如下图：<br><img src=\"http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218083729794.png\" alt=\"\"><br>尝试过几次自行去杂色点识别数字，但是因为个人对图形处理方面的知识十分有限，均以失败告终，最终使用了<strong>次世代验证码识别系统2.3</strong>来完成验证码识别，系统支持C#调用，经过几次调教之后已经能对一木禾验证码有不错的识别率。<br>以下是软件界面:<br><img src=\"http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218083901347.png\" alt=\"\"><br><img src=\"http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218083907810.png\" alt=\"\"><br><strong><em>本篇主要进行一些理论分析，下篇做具体代码实现。</em></strong></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>本文是对抓取一木禾网盘文件下载地址的整个流程就行分析，并依次解决其中各个环节涉及的技术问题。<br>","more":"</p><h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>最近因为一些个人原因用到了一木禾网盘，这个收费网盘虽然较一些国外的倒数30秒网盘容易了一些，也没有十分钟只能下载一个的限制，但如果下载资源较多还是显得十分麻烦。<br>网上搜索了很长时间，功夫不负有心认，终于在<a href=\"https://www.52pojie.cn/forum.php\" target=\"_blank\" rel=\"noopener\">吾爱破解</a>找到了 <a href=\"http://www.52pojie.cn/space-uid-126109.html\" target=\"_blank\" rel=\"noopener\">cylisme</a> 作品 <a href=\"http://www.52pojie.cn/thread-215719-1-1.html\" target=\"_blank\" rel=\"noopener\">一木禾网盘批量下载</a> 。<br>软件界面如下：<br><img src=\"http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218063130751.png\" alt=\"\"><br>虽然可以进行使用，但是每一个验证码都必须手动输入，就起了自己制作一个网盘批量下载器的想法 。<br><strong>我本人只是一个C#初学者，言辞中有不正确的请指出，若文中内容侵犯了您的权益，请联系删除。</strong></p><h2 id=\"流程分析\"><a href=\"#流程分析\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h2><p>网页端获取下载地址流程分析：<br>使用Chrome的开发人员工具得到了以下流程<br><img src=\"http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218063408396.png\" alt=\"\"><br>由上图可知，关键性技术问题为验证码识别</p><h2 id=\"验证码识别\"><a href=\"#验证码识别\" class=\"headerlink\" title=\"验证码识别\"></a>验证码识别</h2><p>一木禾的验证码是杂色点比较多的四位数字，如下图：<br><img src=\"http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218083729794.png\" alt=\"\"><br>尝试过几次自行去杂色点识别数字，但是因为个人对图形处理方面的知识十分有限，均以失败告终，最终使用了<strong>次世代验证码识别系统2.3</strong>来完成验证码识别，系统支持C#调用，经过几次调教之后已经能对一木禾验证码有不错的识别率。<br>以下是软件界面:<br><img src=\"http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218083901347.png\" alt=\"\"><br><img src=\"http://p4au3q1y8.bkt.clouddn.com//20180218182211/20180218083907810.png\" alt=\"\"><br><strong><em>本篇主要进行一些理论分析，下篇做具体代码实现。</em></strong></p><!-- rebuild by neat -->"},{"title":"使用委托解决方法的跨线程调用问题","abbrlink":51547,"date":"2017-08-03T01:38:45.000Z","_content":"```csharp\n//声明和需进行跨线程调用的方法相同形参表的委托\npublic delegate void AddStatusInfoToFormCallback(string str);\nprivate void AddStatusInfoToForm(string str)\n{\n    //检测调用控件的线程和创建控件的线程是否相同\n    //如果调用控件的线程和创建创建控件的线程不是同一个则为True\n    if (InvokeRequired)\n    {\n        //使用委托调用本方法\n        var d = new AddStatusInfoToFormCallback(AddStatusInfoToForm);\n        Invoke(d, str);\n    }\n    else\n    {\n        //当前线程调用\n        Controls.Clear();\n    }\n}\n```\n<!-- more -->","source":"_posts/使用委托解决方法的跨线程调用问题.md","raw":"---\ntitle: 使用委托解决方法的跨线程调用问题\ntags:\n  - Winform\n  - 跨线程\n  - 委托\nabbrlink: 51547\ndate: 2017-08-03 09:38:45\n---\n```csharp\n//声明和需进行跨线程调用的方法相同形参表的委托\npublic delegate void AddStatusInfoToFormCallback(string str);\nprivate void AddStatusInfoToForm(string str)\n{\n    //检测调用控件的线程和创建控件的线程是否相同\n    //如果调用控件的线程和创建创建控件的线程不是同一个则为True\n    if (InvokeRequired)\n    {\n        //使用委托调用本方法\n        var d = new AddStatusInfoToFormCallback(AddStatusInfoToForm);\n        Invoke(d, str);\n    }\n    else\n    {\n        //当前线程调用\n        Controls.Clear();\n    }\n}\n```\n<!-- more -->","slug":"使用委托解决方法的跨线程调用问题","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ou8002gd00oo1jn73wq","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明和需进行跨线程调用的方法相同形参表的委托</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">AddStatusInfoToFormCallback</span>(<span class=\"params\"><span class=\"keyword\">string</span> str</span>)</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">AddStatusInfoToForm</span>(<span class=\"params\"><span class=\"keyword\">string</span> str</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//检测调用控件的线程和创建控件的线程是否相同</span></span><br><span class=\"line\">    <span class=\"comment\">//如果调用控件的线程和创建创建控件的线程不是同一个则为True</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (InvokeRequired)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用委托调用本方法</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> AddStatusInfoToFormCallback(AddStatusInfoToForm);</span><br><span class=\"line\">        Invoke(d, str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//当前线程调用</span></span><br><span class=\"line\">        Controls.Clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><a id=\"more\"></a><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明和需进行跨线程调用的方法相同形参表的委托</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">AddStatusInfoToFormCallback</span>(<span class=\"params\"><span class=\"keyword\">string</span> str</span>)</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">AddStatusInfoToForm</span>(<span class=\"params\"><span class=\"keyword\">string</span> str</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//检测调用控件的线程和创建控件的线程是否相同</span></span><br><span class=\"line\">    <span class=\"comment\">//如果调用控件的线程和创建创建控件的线程不是同一个则为True</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (InvokeRequired)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用委托调用本方法</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> AddStatusInfoToFormCallback(AddStatusInfoToForm);</span><br><span class=\"line\">        Invoke(d, str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//当前线程调用</span></span><br><span class=\"line\">        Controls.Clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<!-- rebuild by neat -->"},{"title":"关于.Net 调用广州医保HG_Interface.dll调用的一些总结（外部组件异常）","abbrlink":57100,"date":"2017-01-21T02:01:06.000Z","_content":" 开始做的时候也遇到了奇葩的情况、创智提供的dll只能在有UI的Winform、WPF上使用，WebForm、WPF、WebService完全没办法使用，Console在加上了[STAThread]的线程Attribute之后也可以成功调用，推测和dll使用MFC编写有关、但是各种引入MFC的dll均无果，一筹莫展之际把问题提到了交流群里，吾乐吧的牛总给出了可行的解决方案----使用WCF来调用。\n\n有了具体解决方案一切就顺风顺水了，但是完成程序之后又出现了奇葩的问题，部署到服务器也会出现外部组件异常的问题，本机调试可以部署却不行，很明显就是环境的问题了，由于dll为非托管dll，我们无法从错误中得到有效的错误信息，从环境下手尝试解决，虽然最终成功了，但是目前还并不清楚到底是因为什么，这里的经验是MSSOAP、MSXML、WebMatrix一定要装，如果还是不能成功运行可以考虑安装VS环境试试看。期待能有高手给出具体的解决之道。\n<!-- more -->\n","source":"_posts/关于C#调用广州医保HG_Interface.dll调用的一些总结（外部组件异常）.md","raw":"---\ntitle: 关于.Net 调用广州医保HG_Interface.dll调用的一些总结（外部组件异常）\ntags:\n  - 广州医保\n  - HG_Interface.dll\n  - 外部组件异常\n  - 'C#'\nabbrlink: 57100\ndate: 2017-01-21 10:01:06\n---\n 开始做的时候也遇到了奇葩的情况、创智提供的dll只能在有UI的Winform、WPF上使用，WebForm、WPF、WebService完全没办法使用，Console在加上了[STAThread]的线程Attribute之后也可以成功调用，推测和dll使用MFC编写有关、但是各种引入MFC的dll均无果，一筹莫展之际把问题提到了交流群里，吾乐吧的牛总给出了可行的解决方案----使用WCF来调用。\n\n有了具体解决方案一切就顺风顺水了，但是完成程序之后又出现了奇葩的问题，部署到服务器也会出现外部组件异常的问题，本机调试可以部署却不行，很明显就是环境的问题了，由于dll为非托管dll，我们无法从错误中得到有效的错误信息，从环境下手尝试解决，虽然最终成功了，但是目前还并不清楚到底是因为什么，这里的经验是MSSOAP、MSXML、WebMatrix一定要装，如果还是不能成功运行可以考虑安装VS环境试试看。期待能有高手给出具体的解决之道。\n<!-- more -->\n","slug":"关于C#调用广州医保HG_Interface.dll调用的一些总结（外部组件异常）","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24oua002jd00oirs4xkgl","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>开始做的时候也遇到了奇葩的情况、创智提供的dll只能在有UI的Winform、WPF上使用，WebForm、WPF、WebService完全没办法使用，Console在加上了[STAThread]的线程Attribute之后也可以成功调用，推测和dll使用MFC编写有关、但是各种引入MFC的dll均无果，一筹莫展之际把问题提到了交流群里，吾乐吧的牛总给出了可行的解决方案—-使用WCF来调用。</p><p>有了具体解决方案一切就顺风顺水了，但是完成程序之后又出现了奇葩的问题，部署到服务器也会出现外部组件异常的问题，本机调试可以部署却不行，很明显就是环境的问题了，由于dll为非托管dll，我们无法从错误中得到有效的错误信息，从环境下手尝试解决，虽然最终成功了，但是目前还并不清楚到底是因为什么，这里的经验是MSSOAP、MSXML、WebMatrix一定要装，如果还是不能成功运行可以考虑安装VS环境试试看。期待能有高手给出具体的解决之道。<br><a id=\"more\"></a></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>开始做的时候也遇到了奇葩的情况、创智提供的dll只能在有UI的Winform、WPF上使用，WebForm、WPF、WebService完全没办法使用，Console在加上了[STAThread]的线程Attribute之后也可以成功调用，推测和dll使用MFC编写有关、但是各种引入MFC的dll均无果，一筹莫展之际把问题提到了交流群里，吾乐吧的牛总给出了可行的解决方案—-使用WCF来调用。</p><p>有了具体解决方案一切就顺风顺水了，但是完成程序之后又出现了奇葩的问题，部署到服务器也会出现外部组件异常的问题，本机调试可以部署却不行，很明显就是环境的问题了，由于dll为非托管dll，我们无法从错误中得到有效的错误信息，从环境下手尝试解决，虽然最终成功了，但是目前还并不清楚到底是因为什么，这里的经验是MSSOAP、MSXML、WebMatrix一定要装，如果还是不能成功运行可以考虑安装VS环境试试看。期待能有高手给出具体的解决之道。<br>","more":"</p><!-- rebuild by neat -->"},{"title":"如何在IIS中托管.Net Core应用","abbrlink":19877,"date":"2018-03-04T17:36:13.000Z","_content":"Asp.Net Core 应用如果需要托管在IIS下，需要为IIS[下载](https://www.microsoft.com/net/download/all)安装 AspNetCoreModule 模块。\n\n\n<!--more-->\n下面以最新的.NET Core Runtime 2.1.0-preview1版本为例：\n## 安装 Server Hosting Installer\n首先访问微软的[.Net下载中心](https://www.microsoft.com/net/download/all)\n，并找到我们要下载的版本。\n![](http://p4au3q1y8.bkt.clouddn.com/20180305013606660/20180305014343191.png)\n点击进入详情页后，找到 Windows 分类下的 **Server Hosting Installer** 链接，并点击下载\n![](http://p4au3q1y8.bkt.clouddn.com/20180305013606660/20180305014516178.png)\n下载安装完成以后即可在IIS的模块中找到托管.Net Core 应用所需的 AspNetCoreModule 模块。\n![](http://p4au3q1y8.bkt.clouddn.com/20180305013606660/20180305014647982.png)\n\n## 发布程序\n```shell\ndotnet publish -o D:\\Web\\aspnetcoredemo\n```","source":"_posts/如何在IIS中托管Asp.Net-Core应用.md","raw":"---\ntitle: 如何在IIS中托管.Net Core应用\ntags:\n  - .Net Core\n  - IIS\nabbrlink: 19877\ndate: 2018-03-05 01:36:13\n---\nAsp.Net Core 应用如果需要托管在IIS下，需要为IIS[下载](https://www.microsoft.com/net/download/all)安装 AspNetCoreModule 模块。\n\n\n<!--more-->\n下面以最新的.NET Core Runtime 2.1.0-preview1版本为例：\n## 安装 Server Hosting Installer\n首先访问微软的[.Net下载中心](https://www.microsoft.com/net/download/all)\n，并找到我们要下载的版本。\n![](http://p4au3q1y8.bkt.clouddn.com/20180305013606660/20180305014343191.png)\n点击进入详情页后，找到 Windows 分类下的 **Server Hosting Installer** 链接，并点击下载\n![](http://p4au3q1y8.bkt.clouddn.com/20180305013606660/20180305014516178.png)\n下载安装完成以后即可在IIS的模块中找到托管.Net Core 应用所需的 AspNetCoreModule 模块。\n![](http://p4au3q1y8.bkt.clouddn.com/20180305013606660/20180305014647982.png)\n\n## 发布程序\n```shell\ndotnet publish -o D:\\Web\\aspnetcoredemo\n```","slug":"如何在IIS中托管Asp.Net-Core应用","published":1,"updated":"2018-10-24T09:12:41.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ouc002ld00o6xysdzx2","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>Asp.Net Core 应用如果需要托管在IIS下，需要为IIS<a href=\"https://www.microsoft.com/net/download/all\" target=\"_blank\" rel=\"noopener\">下载</a>安装 AspNetCoreModule 模块。</p><a id=\"more\"></a><p>下面以最新的.NET Core Runtime 2.1.0-preview1版本为例：</p><h2 id=\"安装-Server-Hosting-Installer\"><a href=\"#安装-Server-Hosting-Installer\" class=\"headerlink\" title=\"安装 Server Hosting Installer\"></a>安装 Server Hosting Installer</h2><p>首先访问微软的<a href=\"https://www.microsoft.com/net/download/all\" target=\"_blank\" rel=\"noopener\">.Net下载中心</a><br>，并找到我们要下载的版本。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180305013606660/20180305014343191.png\" alt=\"\"><br>点击进入详情页后，找到 Windows 分类下的 <strong>Server Hosting Installer</strong> 链接，并点击下载<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180305013606660/20180305014516178.png\" alt=\"\"><br>下载安装完成以后即可在IIS的模块中找到托管.Net Core 应用所需的 AspNetCoreModule 模块。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180305013606660/20180305014647982.png\" alt=\"\"></p><h2 id=\"发布程序\"><a href=\"#发布程序\" class=\"headerlink\" title=\"发布程序\"></a>发布程序</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet publish -o D:\\Web\\aspnetcoredemo</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>Asp.Net Core 应用如果需要托管在IIS下，需要为IIS<a href=\"https://www.microsoft.com/net/download/all\" target=\"_blank\" rel=\"noopener\">下载</a>安装 AspNetCoreModule 模块。</p>","more":"<p>下面以最新的.NET Core Runtime 2.1.0-preview1版本为例：</p><h2 id=\"安装-Server-Hosting-Installer\"><a href=\"#安装-Server-Hosting-Installer\" class=\"headerlink\" title=\"安装 Server Hosting Installer\"></a>安装 Server Hosting Installer</h2><p>首先访问微软的<a href=\"https://www.microsoft.com/net/download/all\" target=\"_blank\" rel=\"noopener\">.Net下载中心</a><br>，并找到我们要下载的版本。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180305013606660/20180305014343191.png\" alt=\"\"><br>点击进入详情页后，找到 Windows 分类下的 <strong>Server Hosting Installer</strong> 链接，并点击下载<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180305013606660/20180305014516178.png\" alt=\"\"><br>下载安装完成以后即可在IIS的模块中找到托管.Net Core 应用所需的 AspNetCoreModule 模块。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180305013606660/20180305014647982.png\" alt=\"\"></p><h2 id=\"发布程序\"><a href=\"#发布程序\" class=\"headerlink\" title=\"发布程序\"></a>发布程序</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet publish -o D:\\Web\\aspnetcoredemo</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"安装DotNetCore.1.0.1-VS2015Tools.Preview2.0.2出现0x80072f8a未指定的错误","abbrlink":35658,"date":"2016-09-21T05:08:58.000Z","_content":"最近DotNetCore更新到了1.0.1，Azure tools也更新到了2.9.5，尝试更新时发现，DotNetCore更新失败，提示：0x80072f8a未指定的错误，而Azure Tools中也包含了DotNetCore的更新，0x80072f8a问题，导致两个软件都不能成功地完成更新。\n\n研究安装的错误日志后才发现，原来使因为证书过期导致的无法下载微软在线资源，所以无法成功安装，解决证书问题之后就顺利的成功安装啦！\n<!-- more -->\n和大家分享一下解决的方法：\n\n### 方案一，修改IE选项，取消选项 “检查服务器证书是否已吊销”\n![](http://p4au3q1y8.bkt.clouddn.com/20180218224858/20180218104959569.png)\n### 方案二，修改时间到证书有效期内即可\n具体证书有效期是什么范围我也不太清楚，不过经我测试直接把年修改为2015即可成功安装\n![](http://p4au3q1y8.bkt.clouddn.com/20180218224858/20180218105022336.png)","source":"_posts/安装DotNetCore.1.0.1-VS2015Tools.Preview2.0.2出现0x80072f8a未指定的错误.md","raw":"---\ntitle: 安装DotNetCore.1.0.1-VS2015Tools.Preview2.0.2出现0x80072f8a未指定的错误\ntags:\n  - 软件心得\nabbrlink: 35658\ndate: 2016-09-21 13:08:58\n---\n最近DotNetCore更新到了1.0.1，Azure tools也更新到了2.9.5，尝试更新时发现，DotNetCore更新失败，提示：0x80072f8a未指定的错误，而Azure Tools中也包含了DotNetCore的更新，0x80072f8a问题，导致两个软件都不能成功地完成更新。\n\n研究安装的错误日志后才发现，原来使因为证书过期导致的无法下载微软在线资源，所以无法成功安装，解决证书问题之后就顺利的成功安装啦！\n<!-- more -->\n和大家分享一下解决的方法：\n\n### 方案一，修改IE选项，取消选项 “检查服务器证书是否已吊销”\n![](http://p4au3q1y8.bkt.clouddn.com/20180218224858/20180218104959569.png)\n### 方案二，修改时间到证书有效期内即可\n具体证书有效期是什么范围我也不太清楚，不过经我测试直接把年修改为2015即可成功安装\n![](http://p4au3q1y8.bkt.clouddn.com/20180218224858/20180218105022336.png)","slug":"安装DotNetCore.1.0.1-VS2015Tools.Preview2.0.2出现0x80072f8a未指定的错误","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24oud002od00oal3l1uqv","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>最近DotNetCore更新到了1.0.1，Azure tools也更新到了2.9.5，尝试更新时发现，DotNetCore更新失败，提示：0x80072f8a未指定的错误，而Azure Tools中也包含了DotNetCore的更新，0x80072f8a问题，导致两个软件都不能成功地完成更新。</p><p>研究安装的错误日志后才发现，原来使因为证书过期导致的无法下载微软在线资源，所以无法成功安装，解决证书问题之后就顺利的成功安装啦！<br><a id=\"more\"></a><br>和大家分享一下解决的方法：</p><h3 id=\"方案一，修改IE选项，取消选项-“检查服务器证书是否已吊销”\"><a href=\"#方案一，修改IE选项，取消选项-“检查服务器证书是否已吊销”\" class=\"headerlink\" title=\"方案一，修改IE选项，取消选项 “检查服务器证书是否已吊销”\"></a>方案一，修改IE选项，取消选项 “检查服务器证书是否已吊销”</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218224858/20180218104959569.png\" alt=\"\"></p><h3 id=\"方案二，修改时间到证书有效期内即可\"><a href=\"#方案二，修改时间到证书有效期内即可\" class=\"headerlink\" title=\"方案二，修改时间到证书有效期内即可\"></a>方案二，修改时间到证书有效期内即可</h3><p>具体证书有效期是什么范围我也不太清楚，不过经我测试直接把年修改为2015即可成功安装<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218224858/20180218105022336.png\" alt=\"\"></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>最近DotNetCore更新到了1.0.1，Azure tools也更新到了2.9.5，尝试更新时发现，DotNetCore更新失败，提示：0x80072f8a未指定的错误，而Azure Tools中也包含了DotNetCore的更新，0x80072f8a问题，导致两个软件都不能成功地完成更新。</p><p>研究安装的错误日志后才发现，原来使因为证书过期导致的无法下载微软在线资源，所以无法成功安装，解决证书问题之后就顺利的成功安装啦！<br>","more":"<br>和大家分享一下解决的方法：</p><h3 id=\"方案一，修改IE选项，取消选项-“检查服务器证书是否已吊销”\"><a href=\"#方案一，修改IE选项，取消选项-“检查服务器证书是否已吊销”\" class=\"headerlink\" title=\"方案一，修改IE选项，取消选项 “检查服务器证书是否已吊销”\"></a>方案一，修改IE选项，取消选项 “检查服务器证书是否已吊销”</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218224858/20180218104959569.png\" alt=\"\"></p><h3 id=\"方案二，修改时间到证书有效期内即可\"><a href=\"#方案二，修改时间到证书有效期内即可\" class=\"headerlink\" title=\"方案二，修改时间到证书有效期内即可\"></a>方案二，修改时间到证书有效期内即可</h3><p>具体证书有效期是什么范围我也不太清楚，不过经我测试直接把年修改为2015即可成功安装<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218224858/20180218105022336.png\" alt=\"\"></p><!-- rebuild by neat -->"},{"title":"新手正式入驻博客园","abbrlink":63944,"date":"2015-05-18T09:43:00.000Z","_content":"### 本人是计算机专业大二狗一枚，目前在学习C#，今天突发奇想，打算开一个博客，定期记录一些自己学习期间的心得，希望各位大牛能多多提点。\n![](http://p4au3q1y8.bkt.clouddn.com/20180218125523/20180218125653974.png)","source":"_posts/新手正式入驻博客园.md","raw":"---\ntitle: 新手正式入驻博客园\nabbrlink: 63944\ndate: 2015-05-18 17:43:00\ntags:\n---\n### 本人是计算机专业大二狗一枚，目前在学习C#，今天突发奇想，打算开一个博客，定期记录一些自己学习期间的心得，希望各位大牛能多多提点。\n![](http://p4au3q1y8.bkt.clouddn.com/20180218125523/20180218125653974.png)","slug":"新手正式入驻博客园","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24oue002qd00oeb81gotk","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><h3 id=\"本人是计算机专业大二狗一枚，目前在学习C-，今天突发奇想，打算开一个博客，定期记录一些自己学习期间的心得，希望各位大牛能多多提点。\"><a href=\"#本人是计算机专业大二狗一枚，目前在学习C-，今天突发奇想，打算开一个博客，定期记录一些自己学习期间的心得，希望各位大牛能多多提点。\" class=\"headerlink\" title=\"本人是计算机专业大二狗一枚，目前在学习C#，今天突发奇想，打算开一个博客，定期记录一些自己学习期间的心得，希望各位大牛能多多提点。\"></a>本人是计算机专业大二狗一枚，目前在学习C#，今天突发奇想，打算开一个博客，定期记录一些自己学习期间的心得，希望各位大牛能多多提点。</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218125523/20180218125653974.png\" alt=\"\"></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><h3 id=\"本人是计算机专业大二狗一枚，目前在学习C-，今天突发奇想，打算开一个博客，定期记录一些自己学习期间的心得，希望各位大牛能多多提点。\"><a href=\"#本人是计算机专业大二狗一枚，目前在学习C-，今天突发奇想，打算开一个博客，定期记录一些自己学习期间的心得，希望各位大牛能多多提点。\" class=\"headerlink\" title=\"本人是计算机专业大二狗一枚，目前在学习C#，今天突发奇想，打算开一个博客，定期记录一些自己学习期间的心得，希望各位大牛能多多提点。\"></a>本人是计算机专业大二狗一枚，目前在学习C#，今天突发奇想，打算开一个博客，定期记录一些自己学习期间的心得，希望各位大牛能多多提点。</h3><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218125523/20180218125653974.png\" alt=\"\"></p><!-- rebuild by neat -->"},{"title":"查看当前IP和归属地的方法","abbrlink":2316,"date":"2018-02-19T13:45:56.000Z","_content":"可以通过http协议进行get请求来获得当前IP及归属地信息。\n<!--more-->\n### [ip138](http://2017.ip138.com/ic.asp)\nXpath获取文字信息\n```\n//center\n```\n![](http://p4au3q1y8.bkt.clouddn.com/20180219214549906/20180219095338344.png)\n### [whatismyip](http://www.whatismyip.com.tw/)\nXpath获取信息:\n1. IP地址\n```\n//body/span[1]\n```\n2. 来源地区\n```\n//body/span[2]\n```\n![](http://p4au3q1y8.bkt.clouddn.com/20180219214549906/20180219095925145.png)\n\n### 优劣\n二者网页大小差不多，均为300+KB。ip138 为国内服务商，对国内IP地址可以精确到市级，并且会包含运营商信息，不过信息包含在一个标签中，需要获取之后自行截取。whatismyip 为台湾网站，只能精确到国家，但是比较方便的是IP地址和来源是包含在两个标签中的，获取更为方便。","source":"_posts/查看当前IP和归属地的方法.md","raw":"---\ntitle: 查看当前IP和归属地的方法\ntags:\n  - 软件心得\n  - IP\n  - 爬虫\nabbrlink: 2316\ndate: 2018-02-19 21:45:56\n---\n可以通过http协议进行get请求来获得当前IP及归属地信息。\n<!--more-->\n### [ip138](http://2017.ip138.com/ic.asp)\nXpath获取文字信息\n```\n//center\n```\n![](http://p4au3q1y8.bkt.clouddn.com/20180219214549906/20180219095338344.png)\n### [whatismyip](http://www.whatismyip.com.tw/)\nXpath获取信息:\n1. IP地址\n```\n//body/span[1]\n```\n2. 来源地区\n```\n//body/span[2]\n```\n![](http://p4au3q1y8.bkt.clouddn.com/20180219214549906/20180219095925145.png)\n\n### 优劣\n二者网页大小差不多，均为300+KB。ip138 为国内服务商，对国内IP地址可以精确到市级，并且会包含运营商信息，不过信息包含在一个标签中，需要获取之后自行截取。whatismyip 为台湾网站，只能精确到国家，但是比较方便的是IP地址和来源是包含在两个标签中的，获取更为方便。","slug":"查看当前IP和归属地的方法","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24oug002sd00ojeoy1fh1","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>可以通过http协议进行get请求来获得当前IP及归属地信息。<br><a id=\"more\"></a></p><h3 id=\"ip138\"><a href=\"#ip138\" class=\"headerlink\" title=\"ip138\"></a><a href=\"http://2017.ip138.com/ic.asp\" target=\"_blank\" rel=\"noopener\">ip138</a></h3><p>Xpath获取文字信息<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//center</span><br></pre></td></tr></table></figure><p></p><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180219214549906/20180219095338344.png\" alt=\"\"></p><h3 id=\"whatismyip\"><a href=\"#whatismyip\" class=\"headerlink\" title=\"whatismyip\"></a><a href=\"http://www.whatismyip.com.tw/\" target=\"_blank\" rel=\"noopener\">whatismyip</a></h3><p>Xpath获取信息:</p><ol><li><p>IP地址</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//body/span[1]</span><br></pre></td></tr></table></figure></li><li><p>来源地区</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//body/span[2]</span><br></pre></td></tr></table></figure></li></ol><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180219214549906/20180219095925145.png\" alt=\"\"></p><h3 id=\"优劣\"><a href=\"#优劣\" class=\"headerlink\" title=\"优劣\"></a>优劣</h3><p>二者网页大小差不多，均为300+KB。ip138 为国内服务商，对国内IP地址可以精确到市级，并且会包含运营商信息，不过信息包含在一个标签中，需要获取之后自行截取。whatismyip 为台湾网站，只能精确到国家，但是比较方便的是IP地址和来源是包含在两个标签中的，获取更为方便。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>可以通过http协议进行get请求来获得当前IP及归属地信息。<br>","more":"</p><h3 id=\"ip138\"><a href=\"#ip138\" class=\"headerlink\" title=\"ip138\"></a><a href=\"http://2017.ip138.com/ic.asp\" target=\"_blank\" rel=\"noopener\">ip138</a></h3><p>Xpath获取文字信息<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//center</span><br></pre></td></tr></table></figure><p></p><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180219214549906/20180219095338344.png\" alt=\"\"></p><h3 id=\"whatismyip\"><a href=\"#whatismyip\" class=\"headerlink\" title=\"whatismyip\"></a><a href=\"http://www.whatismyip.com.tw/\" target=\"_blank\" rel=\"noopener\">whatismyip</a></h3><p>Xpath获取信息:</p><ol><li><p>IP地址</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//body/span[1]</span><br></pre></td></tr></table></figure></li><li><p>来源地区</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//body/span[2]</span><br></pre></td></tr></table></figure></li></ol><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180219214549906/20180219095925145.png\" alt=\"\"></p><h3 id=\"优劣\"><a href=\"#优劣\" class=\"headerlink\" title=\"优劣\"></a>优劣</h3><p>二者网页大小差不多，均为300+KB。ip138 为国内服务商，对国内IP地址可以精确到市级，并且会包含运营商信息，不过信息包含在一个标签中，需要获取之后自行截取。whatismyip 为台湾网站，只能精确到国家，但是比较方便的是IP地址和来源是包含在两个标签中的，获取更为方便。</p><!-- rebuild by neat -->"},{"title":"模块化InnoSetup依赖项安装","abbrlink":24425,"date":"2016-11-23T03:07:33.000Z","_content":"原文在这里:http://www.codeproject.com/Articles/20868/NET-Framework-Installer-for-InnoSetup\n\n源文件地址:http://www.codeproject.com/KB/install/dotnetfx_innosetup_instal/innodependencyinstaller.zip\n\n源文件需要注册登录CodeProject才能下载\n<!-- more -->\n![](http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112438669.png)\n![](http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112442373.png)\n\n**说明:\n通过添加模块化innosetup脚本来自动下载和安装各种依赖项 如.NET Framework 、VC++运行环境等。**\n\n源代码是模块化的，结构如下：\n![](http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112524045.png)\n* setup.iss - 包含基本设置，其中包含所需的模块（产品）。 \n   你需要把所需的模块在顶部使用#include命令包含在源代码中,例如：\n   #include \"scripts\\products\\dotnetfx11.iss\"\n   然后你只需要在[Code]段调用它们的main函数,如：\n   dotnetfx11();\n\n* bin - 包含安装程序的最终输出\n* src - 包含您的程序的应用程序文件\n* scripts\n    * products.iss - 包含产品脚本的共享代码。 您只需要更改[CustomMessages]部分和[Files]部分（包括isxdl语言文件）\n    * isxdl - 包含用于设置（如果有要下载的内容）及其语言文件（例如german.ini）的下载器DLL。 这是您可以放置​​isxdldownloader的语言文件的地方。\n    * products - 包含应用程序所需的产品的脚本（例如.NET Framework 2.0）\n        * dotnetfx11.iss - .NET Framework 1.1\n        * dotnetfx11lp.iss - .NET Framework 1.1 Language Pack\n        * dotnetfx11sp1.iss - .NET Framework 1.1 + Service Pack 1\n        * dotnetfx20.iss - .NET Framework 2.0\n        * dotnetfx20lp.iss - .NET Framework 2.0 Language Pack\n        * dotnetfx20sp1.iss - .NET Framework 2.0 + Service Pack 1\n        * dotnetfx20sp1lp.iss - .NET Framework 2.0 Service Pack 1 Language Pack\n        * dotnetfx20sp2.iss - .NET Framework 2.0 + Service Pack 2\n        * dotnetfx20sp2lp.iss - .NET Framework 2.0 Service Pack 2 Language Pack\n        * dotnetfx35.iss - .NET Framework 3.5\n        * dotnetfx35lp.iss - .NET Framework 3.5 Language Pack\n        * dotnetfx35sp1.iss - .NET Framework 3.5 + Service Pack 1\n        * dotnetfx35sp1lp.iss - .NET Framework 3.5 Service Pack 1 Language Pack\n        * dotnetfx40client.iss - .NET Framework 4.0 Client Profile\n        * dotnetfx40full.iss - .NET Framework 4.0 Full\n        * dotnetfx46.iss - .NET Framework 4.6\n        * ie6.iss - Internet Explorer 6\n        * iis.iss - Internet Information Services (just a check if it is installed)\n        * jet4sp8.iss - Jet 4 + Service Pack 8\n        * kb835732.iss - Security Update (KB835732) which is required by .NET Framework 2.0 Service Pack 1 on Windows 2000 Service Pack 4\n        * mdac28.iss - Microsoft Data Access Components (MDAC) 2.8\n        * msi20.iss - Windows Installer 2.0\n        * msi31.iss - Windows Installer 3.1\n        * msi45.iss - Windows Installer 4.5\n        * sql2005express.iss - SQL Server 2005 Express + Service Pack 3\n        * sql2008express.iss - SQL Server 2008 Express R2\n        * sqlcompact35sp2.iss - SQL Server Compact 3.5 + Service Pack 2\n        * vcredist2005.iss - Visual C++ 2005 Redistributable\n        * vcredist2008.iss - Visual C++ 2008 Redistributable\n        * vcredist2010.iss - Visual C++ 2010 Redistributable\n        * vcredist2012.iss - Visual C++ 2012 Redistributable\n        * vcredist2013.iss - Visual C++ 2013 Redistributable\n        * vcredist2015.iss - Visual C++ 2015 Redistributable\n        * wic.iss - Windows Imaging Component\n        * winversion.iss - helper functions to determine the installed Windows version\n        * fileversion.iss - helper functions to determine the version of a file\n        * stringversion.iss - helper functions to correctly parse a version string\n        * dotnetfxversion.iss - helper functions to determine the installed .NET Framework version including service packs\n        * msiproduct.iss - helper functions to check for installed msi products\n\n你很可能需要调整setup.iss，以适应不同Windows版本所需的依赖项。\n\n如果依赖项没有安装，安装过程会检查相关依赖项的安装文件是否存在于.\\MyProgramDependencies.文件夹下。如果不存在那么程序将会自动下载。\n![](http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112911329.png)\n![](http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112917754.png)\n用于脚本的应用程序包括：\n\n* [Inno Setup](http://www.jrsoftware.org/isinfo.php) - (版本5.5.5)\n* [ISTool](http://www.istool.org/default.aspx) -  Inno Setup的扩展组件。但是我只需要 isxdl.dll downloader (版本5.3.0)","source":"_posts/模块化InnoSetup依赖项安装.md","raw":"---\ntitle: 模块化InnoSetup依赖项安装\ntags:\n  - InnoSetup\n  - 安装包\nabbrlink: 24425\ndate: 2016-11-23 11:07:33\n---\n原文在这里:http://www.codeproject.com/Articles/20868/NET-Framework-Installer-for-InnoSetup\n\n源文件地址:http://www.codeproject.com/KB/install/dotnetfx_innosetup_instal/innodependencyinstaller.zip\n\n源文件需要注册登录CodeProject才能下载\n<!-- more -->\n![](http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112438669.png)\n![](http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112442373.png)\n\n**说明:\n通过添加模块化innosetup脚本来自动下载和安装各种依赖项 如.NET Framework 、VC++运行环境等。**\n\n源代码是模块化的，结构如下：\n![](http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112524045.png)\n* setup.iss - 包含基本设置，其中包含所需的模块（产品）。 \n   你需要把所需的模块在顶部使用#include命令包含在源代码中,例如：\n   #include \"scripts\\products\\dotnetfx11.iss\"\n   然后你只需要在[Code]段调用它们的main函数,如：\n   dotnetfx11();\n\n* bin - 包含安装程序的最终输出\n* src - 包含您的程序的应用程序文件\n* scripts\n    * products.iss - 包含产品脚本的共享代码。 您只需要更改[CustomMessages]部分和[Files]部分（包括isxdl语言文件）\n    * isxdl - 包含用于设置（如果有要下载的内容）及其语言文件（例如german.ini）的下载器DLL。 这是您可以放置​​isxdldownloader的语言文件的地方。\n    * products - 包含应用程序所需的产品的脚本（例如.NET Framework 2.0）\n        * dotnetfx11.iss - .NET Framework 1.1\n        * dotnetfx11lp.iss - .NET Framework 1.1 Language Pack\n        * dotnetfx11sp1.iss - .NET Framework 1.1 + Service Pack 1\n        * dotnetfx20.iss - .NET Framework 2.0\n        * dotnetfx20lp.iss - .NET Framework 2.0 Language Pack\n        * dotnetfx20sp1.iss - .NET Framework 2.0 + Service Pack 1\n        * dotnetfx20sp1lp.iss - .NET Framework 2.0 Service Pack 1 Language Pack\n        * dotnetfx20sp2.iss - .NET Framework 2.0 + Service Pack 2\n        * dotnetfx20sp2lp.iss - .NET Framework 2.0 Service Pack 2 Language Pack\n        * dotnetfx35.iss - .NET Framework 3.5\n        * dotnetfx35lp.iss - .NET Framework 3.5 Language Pack\n        * dotnetfx35sp1.iss - .NET Framework 3.5 + Service Pack 1\n        * dotnetfx35sp1lp.iss - .NET Framework 3.5 Service Pack 1 Language Pack\n        * dotnetfx40client.iss - .NET Framework 4.0 Client Profile\n        * dotnetfx40full.iss - .NET Framework 4.0 Full\n        * dotnetfx46.iss - .NET Framework 4.6\n        * ie6.iss - Internet Explorer 6\n        * iis.iss - Internet Information Services (just a check if it is installed)\n        * jet4sp8.iss - Jet 4 + Service Pack 8\n        * kb835732.iss - Security Update (KB835732) which is required by .NET Framework 2.0 Service Pack 1 on Windows 2000 Service Pack 4\n        * mdac28.iss - Microsoft Data Access Components (MDAC) 2.8\n        * msi20.iss - Windows Installer 2.0\n        * msi31.iss - Windows Installer 3.1\n        * msi45.iss - Windows Installer 4.5\n        * sql2005express.iss - SQL Server 2005 Express + Service Pack 3\n        * sql2008express.iss - SQL Server 2008 Express R2\n        * sqlcompact35sp2.iss - SQL Server Compact 3.5 + Service Pack 2\n        * vcredist2005.iss - Visual C++ 2005 Redistributable\n        * vcredist2008.iss - Visual C++ 2008 Redistributable\n        * vcredist2010.iss - Visual C++ 2010 Redistributable\n        * vcredist2012.iss - Visual C++ 2012 Redistributable\n        * vcredist2013.iss - Visual C++ 2013 Redistributable\n        * vcredist2015.iss - Visual C++ 2015 Redistributable\n        * wic.iss - Windows Imaging Component\n        * winversion.iss - helper functions to determine the installed Windows version\n        * fileversion.iss - helper functions to determine the version of a file\n        * stringversion.iss - helper functions to correctly parse a version string\n        * dotnetfxversion.iss - helper functions to determine the installed .NET Framework version including service packs\n        * msiproduct.iss - helper functions to check for installed msi products\n\n你很可能需要调整setup.iss，以适应不同Windows版本所需的依赖项。\n\n如果依赖项没有安装，安装过程会检查相关依赖项的安装文件是否存在于.\\MyProgramDependencies.文件夹下。如果不存在那么程序将会自动下载。\n![](http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112911329.png)\n![](http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112917754.png)\n用于脚本的应用程序包括：\n\n* [Inno Setup](http://www.jrsoftware.org/isinfo.php) - (版本5.5.5)\n* [ISTool](http://www.istool.org/default.aspx) -  Inno Setup的扩展组件。但是我只需要 isxdl.dll downloader (版本5.3.0)","slug":"模块化InnoSetup依赖项安装","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24oui002vd00oczsq3w9v","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>原文在这里:<a href=\"http://www.codeproject.com/Articles/20868/NET-Framework-Installer-for-InnoSetup\" target=\"_blank\" rel=\"noopener\">http://www.codeproject.com/Articles/20868/NET-Framework-Installer-for-InnoSetup</a></p><p>源文件地址:<a href=\"http://www.codeproject.com/KB/install/dotnetfx_innosetup_instal/innodependencyinstaller.zip\" target=\"_blank\" rel=\"noopener\">http://www.codeproject.com/KB/install/dotnetfx_innosetup_instal/innodependencyinstaller.zip</a></p><p>源文件需要注册登录CodeProject才能下载<br><a id=\"more\"></a><br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112438669.png\" alt=\"\"><br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112442373.png\" alt=\"\"></p><p><strong>说明:<br>通过添加模块化innosetup脚本来自动下载和安装各种依赖项 如.NET Framework 、VC++运行环境等。</strong></p><p>源代码是模块化的，结构如下：<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112524045.png\" alt=\"\"></p><ul><li><p>setup.iss - 包含基本设置，其中包含所需的模块（产品）。<br>你需要把所需的模块在顶部使用#include命令包含在源代码中,例如：<br>#include “scripts\\products\\dotnetfx11.iss”<br>然后你只需要在[Code]段调用它们的main函数,如：<br>dotnetfx11();</p></li><li><p>bin - 包含安装程序的最终输出</p></li><li>src - 包含您的程序的应用程序文件</li><li>scripts<ul><li>products.iss - 包含产品脚本的共享代码。 您只需要更改[CustomMessages]部分和[Files]部分（包括isxdl语言文件）</li><li>isxdl - 包含用于设置（如果有要下载的内容）及其语言文件（例如german.ini）的下载器DLL。 这是您可以放置​​isxdldownloader的语言文件的地方。</li><li>products - 包含应用程序所需的产品的脚本（例如.NET Framework 2.0）<ul><li>dotnetfx11.iss - .NET Framework 1.1</li><li>dotnetfx11lp.iss - .NET Framework 1.1 Language Pack</li><li>dotnetfx11sp1.iss - .NET Framework 1.1 + Service Pack 1</li><li>dotnetfx20.iss - .NET Framework 2.0</li><li>dotnetfx20lp.iss - .NET Framework 2.0 Language Pack</li><li>dotnetfx20sp1.iss - .NET Framework 2.0 + Service Pack 1</li><li>dotnetfx20sp1lp.iss - .NET Framework 2.0 Service Pack 1 Language Pack</li><li>dotnetfx20sp2.iss - .NET Framework 2.0 + Service Pack 2</li><li>dotnetfx20sp2lp.iss - .NET Framework 2.0 Service Pack 2 Language Pack</li><li>dotnetfx35.iss - .NET Framework 3.5</li><li>dotnetfx35lp.iss - .NET Framework 3.5 Language Pack</li><li>dotnetfx35sp1.iss - .NET Framework 3.5 + Service Pack 1</li><li>dotnetfx35sp1lp.iss - .NET Framework 3.5 Service Pack 1 Language Pack</li><li>dotnetfx40client.iss - .NET Framework 4.0 Client Profile</li><li>dotnetfx40full.iss - .NET Framework 4.0 Full</li><li>dotnetfx46.iss - .NET Framework 4.6</li><li>ie6.iss - Internet Explorer 6</li><li>iis.iss - Internet Information Services (just a check if it is installed)</li><li>jet4sp8.iss - Jet 4 + Service Pack 8</li><li>kb835732.iss - Security Update (KB835732) which is required by .NET Framework 2.0 Service Pack 1 on Windows 2000 Service Pack 4</li><li>mdac28.iss - Microsoft Data Access Components (MDAC) 2.8</li><li>msi20.iss - Windows Installer 2.0</li><li>msi31.iss - Windows Installer 3.1</li><li>msi45.iss - Windows Installer 4.5</li><li>sql2005express.iss - SQL Server 2005 Express + Service Pack 3</li><li>sql2008express.iss - SQL Server 2008 Express R2</li><li>sqlcompact35sp2.iss - SQL Server Compact 3.5 + Service Pack 2</li><li>vcredist2005.iss - Visual C++ 2005 Redistributable</li><li>vcredist2008.iss - Visual C++ 2008 Redistributable</li><li>vcredist2010.iss - Visual C++ 2010 Redistributable</li><li>vcredist2012.iss - Visual C++ 2012 Redistributable</li><li>vcredist2013.iss - Visual C++ 2013 Redistributable</li><li>vcredist2015.iss - Visual C++ 2015 Redistributable</li><li>wic.iss - Windows Imaging Component</li><li>winversion.iss - helper functions to determine the installed Windows version</li><li>fileversion.iss - helper functions to determine the version of a file</li><li>stringversion.iss - helper functions to correctly parse a version string</li><li>dotnetfxversion.iss - helper functions to determine the installed .NET Framework version including service packs</li><li>msiproduct.iss - helper functions to check for installed msi products</li></ul></li></ul></li></ul><p>你很可能需要调整setup.iss，以适应不同Windows版本所需的依赖项。</p><p>如果依赖项没有安装，安装过程会检查相关依赖项的安装文件是否存在于.\\MyProgramDependencies.文件夹下。如果不存在那么程序将会自动下载。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112911329.png\" alt=\"\"><br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112917754.png\" alt=\"\"><br>用于脚本的应用程序包括：</p><ul><li><a href=\"http://www.jrsoftware.org/isinfo.php\" target=\"_blank\" rel=\"noopener\">Inno Setup</a> - (版本5.5.5)</li><li><a href=\"http://www.istool.org/default.aspx\" target=\"_blank\" rel=\"noopener\">ISTool</a> - Inno Setup的扩展组件。但是我只需要 isxdl.dll downloader (版本5.3.0)</li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>原文在这里:<a href=\"http://www.codeproject.com/Articles/20868/NET-Framework-Installer-for-InnoSetup\" target=\"_blank\" rel=\"noopener\">http://www.codeproject.com/Articles/20868/NET-Framework-Installer-for-InnoSetup</a></p><p>源文件地址:<a href=\"http://www.codeproject.com/KB/install/dotnetfx_innosetup_instal/innodependencyinstaller.zip\" target=\"_blank\" rel=\"noopener\">http://www.codeproject.com/KB/install/dotnetfx_innosetup_instal/innodependencyinstaller.zip</a></p><p>源文件需要注册登录CodeProject才能下载<br>","more":"<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112438669.png\" alt=\"\"><br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112442373.png\" alt=\"\"></p><p><strong>说明:<br>通过添加模块化innosetup脚本来自动下载和安装各种依赖项 如.NET Framework 、VC++运行环境等。</strong></p><p>源代码是模块化的，结构如下：<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112524045.png\" alt=\"\"></p><ul><li><p>setup.iss - 包含基本设置，其中包含所需的模块（产品）。<br>你需要把所需的模块在顶部使用#include命令包含在源代码中,例如：<br>#include “scripts\\products\\dotnetfx11.iss”<br>然后你只需要在[Code]段调用它们的main函数,如：<br>dotnetfx11();</p></li><li><p>bin - 包含安装程序的最终输出</p></li><li>src - 包含您的程序的应用程序文件</li><li>scripts<ul><li>products.iss - 包含产品脚本的共享代码。 您只需要更改[CustomMessages]部分和[Files]部分（包括isxdl语言文件）</li><li>isxdl - 包含用于设置（如果有要下载的内容）及其语言文件（例如german.ini）的下载器DLL。 这是您可以放置​​isxdldownloader的语言文件的地方。</li><li>products - 包含应用程序所需的产品的脚本（例如.NET Framework 2.0）<ul><li>dotnetfx11.iss - .NET Framework 1.1</li><li>dotnetfx11lp.iss - .NET Framework 1.1 Language Pack</li><li>dotnetfx11sp1.iss - .NET Framework 1.1 + Service Pack 1</li><li>dotnetfx20.iss - .NET Framework 2.0</li><li>dotnetfx20lp.iss - .NET Framework 2.0 Language Pack</li><li>dotnetfx20sp1.iss - .NET Framework 2.0 + Service Pack 1</li><li>dotnetfx20sp1lp.iss - .NET Framework 2.0 Service Pack 1 Language Pack</li><li>dotnetfx20sp2.iss - .NET Framework 2.0 + Service Pack 2</li><li>dotnetfx20sp2lp.iss - .NET Framework 2.0 Service Pack 2 Language Pack</li><li>dotnetfx35.iss - .NET Framework 3.5</li><li>dotnetfx35lp.iss - .NET Framework 3.5 Language Pack</li><li>dotnetfx35sp1.iss - .NET Framework 3.5 + Service Pack 1</li><li>dotnetfx35sp1lp.iss - .NET Framework 3.5 Service Pack 1 Language Pack</li><li>dotnetfx40client.iss - .NET Framework 4.0 Client Profile</li><li>dotnetfx40full.iss - .NET Framework 4.0 Full</li><li>dotnetfx46.iss - .NET Framework 4.6</li><li>ie6.iss - Internet Explorer 6</li><li>iis.iss - Internet Information Services (just a check if it is installed)</li><li>jet4sp8.iss - Jet 4 + Service Pack 8</li><li>kb835732.iss - Security Update (KB835732) which is required by .NET Framework 2.0 Service Pack 1 on Windows 2000 Service Pack 4</li><li>mdac28.iss - Microsoft Data Access Components (MDAC) 2.8</li><li>msi20.iss - Windows Installer 2.0</li><li>msi31.iss - Windows Installer 3.1</li><li>msi45.iss - Windows Installer 4.5</li><li>sql2005express.iss - SQL Server 2005 Express + Service Pack 3</li><li>sql2008express.iss - SQL Server 2008 Express R2</li><li>sqlcompact35sp2.iss - SQL Server Compact 3.5 + Service Pack 2</li><li>vcredist2005.iss - Visual C++ 2005 Redistributable</li><li>vcredist2008.iss - Visual C++ 2008 Redistributable</li><li>vcredist2010.iss - Visual C++ 2010 Redistributable</li><li>vcredist2012.iss - Visual C++ 2012 Redistributable</li><li>vcredist2013.iss - Visual C++ 2013 Redistributable</li><li>vcredist2015.iss - Visual C++ 2015 Redistributable</li><li>wic.iss - Windows Imaging Component</li><li>winversion.iss - helper functions to determine the installed Windows version</li><li>fileversion.iss - helper functions to determine the version of a file</li><li>stringversion.iss - helper functions to correctly parse a version string</li><li>dotnetfxversion.iss - helper functions to determine the installed .NET Framework version including service packs</li><li>msiproduct.iss - helper functions to check for installed msi products</li></ul></li></ul></li></ul><p>你很可能需要调整setup.iss，以适应不同Windows版本所需的依赖项。</p><p>如果依赖项没有安装，安装过程会检查相关依赖项的安装文件是否存在于.\\MyProgramDependencies.文件夹下。如果不存在那么程序将会自动下载。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112911329.png\" alt=\"\"><br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218232333/20180218112917754.png\" alt=\"\"><br>用于脚本的应用程序包括：</p><ul><li><a href=\"http://www.jrsoftware.org/isinfo.php\" target=\"_blank\" rel=\"noopener\">Inno Setup</a> - (版本5.5.5)</li><li><a href=\"http://www.istool.org/default.aspx\" target=\"_blank\" rel=\"noopener\">ISTool</a> - Inno Setup的扩展组件。但是我只需要 isxdl.dll downloader (版本5.3.0)</li></ul><!-- rebuild by neat -->"},{"title":"缺少google api密钥,因此chromium的部分功能将无法使用”的解决办法","abbrlink":37840,"date":"2016-10-01T06:27:20.000Z","_content":" 使用Chromium时会遇到 “缺少google api密钥,因此chromium的部分功能将无法使用”提示，google了一下 setx Google_API_KEY 和 chromium portable google api keys are missing 找到了解决办法。\n <!-- more -->\n 打开windows的cmd命令提示符，依次输入以下命令： \n```cmd\nsetx GOOGLE_API_KEY \"no\" \nsetx GOOGLE_DEFAULT_CLIENT_ID \"no\" \nsetx GOOGLE_DEFAULT_CLIENT_SECRET \"no\"\n```\n\n![](http://p4au3q1y8.bkt.clouddn.com/20180218230720/20180218110847654.png)\n当然,这样只是可以去掉chromium开启时的提示,如果需要使用Google API 服务,还是推荐去谷歌申请,然后重新setx为真实api key。","source":"_posts/缺少google-api密钥,因此chromium的部分功能将无法使用”的解决办法.md","raw":"---\ntitle: '缺少google api密钥,因此chromium的部分功能将无法使用”的解决办法'\ntags:\n  - 软件心得\nabbrlink: 37840\ndate: 2016-10-01 14:27:20\n---\n 使用Chromium时会遇到 “缺少google api密钥,因此chromium的部分功能将无法使用”提示，google了一下 setx Google_API_KEY 和 chromium portable google api keys are missing 找到了解决办法。\n <!-- more -->\n 打开windows的cmd命令提示符，依次输入以下命令： \n```cmd\nsetx GOOGLE_API_KEY \"no\" \nsetx GOOGLE_DEFAULT_CLIENT_ID \"no\" \nsetx GOOGLE_DEFAULT_CLIENT_SECRET \"no\"\n```\n\n![](http://p4au3q1y8.bkt.clouddn.com/20180218230720/20180218110847654.png)\n当然,这样只是可以去掉chromium开启时的提示,如果需要使用Google API 服务,还是推荐去谷歌申请,然后重新setx为真实api key。","slug":"缺少google-api密钥,因此chromium的部分功能将无法使用”的解决办法","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24ouk002xd00opukdy88n","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>使用Chromium时会遇到 “缺少google api密钥,因此chromium的部分功能将无法使用”提示，google了一下 setx Google_API_KEY 和 chromium portable google api keys are missing 找到了解决办法。<br><a id=\"more\"></a><br>打开windows的cmd命令提示符，依次输入以下命令：<br></p><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setx GOOGLE_API_KEY \"no\" </span><br><span class=\"line\">setx GOOGLE_DEFAULT_CLIENT_ID \"no\" </span><br><span class=\"line\">setx GOOGLE_DEFAULT_CLIENT_SECRET \"no\"</span><br></pre></td></tr></table></figure><p></p><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218230720/20180218110847654.png\" alt=\"\"><br>当然,这样只是可以去掉chromium开启时的提示,如果需要使用Google API 服务,还是推荐去谷歌申请,然后重新setx为真实api key。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>使用Chromium时会遇到 “缺少google api密钥,因此chromium的部分功能将无法使用”提示，google了一下 setx Google_API_KEY 和 chromium portable google api keys are missing 找到了解决办法。<br>","more":"<br>打开windows的cmd命令提示符，依次输入以下命令：<br></p><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setx GOOGLE_API_KEY \"no\" </span><br><span class=\"line\">setx GOOGLE_DEFAULT_CLIENT_ID \"no\" </span><br><span class=\"line\">setx GOOGLE_DEFAULT_CLIENT_SECRET \"no\"</span><br></pre></td></tr></table></figure><p></p><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218230720/20180218110847654.png\" alt=\"\"><br>当然,这样只是可以去掉chromium开启时的提示,如果需要使用Google API 服务,还是推荐去谷歌申请,然后重新setx为真实api key。</p><!-- rebuild by neat -->"},{"title":".Net 讯飞语音识别Demo","abbrlink":43271,"date":"2018-03-02T03:35:00.000Z","_content":"[讯飞语音识别](http://www.xfyun.cn/services/voicedictation)官方号称具有以下六个优势：\n1. 超过95%的准确率\n2. 支持多种语种和方言\n3. 方便快捷的信息沟通\n4. 个性的语音识别\n5. 中文标点智能预测\n6. 支持垂直领域和应用级听写\n\n![](http://p4au3q1y8.bkt.clouddn.com/20180302113535116/20180302114420073.png)\n<!--more-->\n## 获得APPID和调用Dll\n在讯飞开放平台的[控制台](http://console.xfyun.cn/app/myapp)新建一个应用，平台选择Windows，新建完成后为应用添加语音听写服务。\n![](http://p4au3q1y8.bkt.clouddn.com/20180302113535116/20180302114712451.png)\n下载SDK\n![](http://p4au3q1y8.bkt.clouddn.com/20180302113535116/20180302114758665.png)\n\n解压出你下载的压缩包bin目录中的msc.dll等待使用\n![](http://p4au3q1y8.bkt.clouddn.com/20180302113535116/20180302114914214.png)\n**注意：下面步骤里的Dll必须使用自行下载的版本，此Dll并不通用**\n## Coding\n### 识别文件实现\n```csharp\n/// <summary>\n/// 执行语音识别的异步方法\n/// </summary>\n/// <param name=\"inFile\">音频文件，pcm无文件头，采样率16k，数据16位，单声道</param>\n/// <param name=\"outFile\">输出识别结果到文件</param>\npublic void Audio2TxtAsync(string inFile, string outFile = null)\n{\n    var dlt = new DltSpeek(Audio2Txt);\n    dlt.BeginInvoke(inFile, outFile, null, null);\n}\n\n/// <summary>\n/// 进行声音识别\n/// </summary>\n/// <param name=\"inFile\">音频文件，pcm无文件头，采样率16k，数据16位，单声道</param>\n/// <param name=\"outFile\">输出识别结果到文件</param>\npublic void Audio2Txt(string inFile, string outFile = null)\n{\n    var ret = 0;\n    var result = \"\";\n    try\n    {\n        //模拟录音，输入音频\n        if (!File.Exists(inFile)) throw new Exception(\"文件\" + inFile + \"不存在！\");\n        if (inFile.Substring(inFile.Length - 3, 3).ToUpper() != \"WAV\" && inFile.Substring(inFile.Length - 3, 3).ToUpper() != \"PCM\")\n            throw new Exception(\"音频文件格式不对！\");\n        var fp = new FileStream(inFile, FileMode.Open);\n        if (inFile.Substring(inFile.Length - 3, 3).ToUpper() == \"WAV\") fp.Position = 44;\n        var buff = new byte[BufferNum];\n        var bp = Marshal.AllocHGlobal(BufferNum);\n        int len;\n        var status = AudioStatus.IsrAudioSampleContinue;\n        var epStatus = EpStatus.IsrEpNull;\n        var recStatus = RecogStatus.IsrRecNull;\n        var rsltStatus = RecogStatus.IsrRecNull;\n        //ep_status        端点检测（End-point detected）器所处的状态\n        //rec_status       识别器所处的状态\n        //rslt_status      识别器所处的状态\n        while (fp.Position != fp.Length)\n        {\n            len = fp.Read(buff, 0, BufferNum);\n            Marshal.Copy(buff, 0, bp, buff.Length);\n            //开始向服务器发送音频数据\n            ret = AsrDll.QISRAudioWrite(_sessID, bp, (uint)len, status, ref epStatus, ref recStatus);\n            if (ret != 0)\n            {\n                fp.Close();\n                throw new Exception(\"QISRAudioWrite err,errCode=\" + ((ErrorCode)ret).ToString(\"G\"));\n            }\n            //服务器返回部分结果\n            if (recStatus == RecogStatus.IsrRecStatusSuccess)\n            {\n                var p = AsrDll.QISRGetResult(_sessID, ref rsltStatus, WaitTime, ref ret);\n                if (p != IntPtr.Zero)\n                {\n                    var tmp = FlyTts.Ptr2Str(p);\n                    DataArrived?.Invoke(this, new DataArrivedEventArgs(tmp));\n                    result += tmp;\n                    Console.WriteLine(@\"返回部分结果！:\" + tmp);\n                }\n            }\n            Thread.Sleep(500);\n        }\n        fp.Close();\n\n        //最后一块数据\n        status = AudioStatus.IsrAudioSampleLast;\n\n        ret = AsrDll.QISRAudioWrite(_sessID, bp, 1, status, ref epStatus, ref recStatus);\n        if (ret != 0) throw new Exception(\"QISRAudioWrite write last audio err,errCode=\" + ((ErrorCode)ret).ToString(\"G\"));\n        Marshal.FreeHGlobal(bp);\n        var loopCount = 0;\n        //最后一块数据发完之后，循环从服务器端获取结果\n        //考虑到网络环境不好的情况下，需要对循环次数作限定\n        do\n        {\n            var p = AsrDll.QISRGetResult(_sessID, ref rsltStatus, WaitTime, ref ret);\n            if (p != IntPtr.Zero)\n            {\n                var tmp = FlyTts.Ptr2Str(p);\n                DataArrived?.Invoke(this, new DataArrivedEventArgs(tmp)); //激发识别数据到达事件\n                result += tmp;\n                Console.WriteLine(@\"传完音频后返回结果！:\" + tmp);\n            }\n            if (ret != 0) throw new Exception(\"QISRGetResult err,errCode=\" + ((ErrorCode)ret).ToString(\"G\"));\n            Thread.Sleep(200);\n        } while (rsltStatus != RecogStatus.IsrRecStatusSpeechComplete && loopCount++ < 30);\n        if (outFile != null)\n        {\n            var fout = new FileStream(outFile, FileMode.OpenOrCreate);\n            fout.Write(Encoding.Default.GetBytes(result), 0, Encoding.Default.GetByteCount(result));\n            fout.Close();\n        }\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine(ex.Message);\n    }\n    finally\n    {\n        ret = AsrDll.QISRSessionEnd(_sessID, string.Empty);\n        ret = AsrDll.MSPLogout();\n        IsrEnd?.Invoke(this, new EventArgs()); //通知识别结束\n    }\n}\n```\n### 录音实现\n```csharp\npublic void StartRecoding()\n{\n    WaveMonitor = new WaveInEvent { WaveFormat = new WaveFormat(16000, 16, 1) };\n\n    if (!Directory.Exists(\"temp\"))\n        Directory.CreateDirectory(\"temp\");\n    _fileName = Path.Combine(\"temp\", Guid.NewGuid() + \".wav\");\n\n    Writer = new WaveFileWriter(_fileName, WaveMonitor.WaveFormat);\n\n    WaveMonitor.DataAvailable += (s, a) => Writer.Write(a.Buffer, 0, a.BytesRecorded);\n    WaveMonitor.RecordingStopped += (s, a) => { Writer?.Dispose(); WaveMonitor?.Dispose(); };\n\n    WaveMonitor.StartRecording();\n}\n\npublic void StopRecoding()\n{\n    WaveMonitor.StopRecording();\n    Writer?.Close();\n\n    Audio2Txt(_fileName);\n}\n```\n### 完整源码\n托管在[GitHub](https://github.com/WayneShao/iFlyDotNet)\n\n\n## 结论\n讯飞语音识别实测识别率其实并没有比百度好多少，准确率在服务提供商看来是越精确越好，但在实际应用中90%和95%差距并不大，故虽然讯飞看起来在数据上更好一些，但是API易用性实在比较差，还是更推荐百度一些。","source":"_posts/讯飞语音识别Demo.md","raw":"---\ntitle: .Net 讯飞语音识别Demo\ntags:\n  - ASR\n  - TTS\n  - NAudio\n  - 讯飞语音识别\ncategories: []\nabbrlink: 43271\ndate: 2018-03-02 11:35:00\n---\n[讯飞语音识别](http://www.xfyun.cn/services/voicedictation)官方号称具有以下六个优势：\n1. 超过95%的准确率\n2. 支持多种语种和方言\n3. 方便快捷的信息沟通\n4. 个性的语音识别\n5. 中文标点智能预测\n6. 支持垂直领域和应用级听写\n\n![](http://p4au3q1y8.bkt.clouddn.com/20180302113535116/20180302114420073.png)\n<!--more-->\n## 获得APPID和调用Dll\n在讯飞开放平台的[控制台](http://console.xfyun.cn/app/myapp)新建一个应用，平台选择Windows，新建完成后为应用添加语音听写服务。\n![](http://p4au3q1y8.bkt.clouddn.com/20180302113535116/20180302114712451.png)\n下载SDK\n![](http://p4au3q1y8.bkt.clouddn.com/20180302113535116/20180302114758665.png)\n\n解压出你下载的压缩包bin目录中的msc.dll等待使用\n![](http://p4au3q1y8.bkt.clouddn.com/20180302113535116/20180302114914214.png)\n**注意：下面步骤里的Dll必须使用自行下载的版本，此Dll并不通用**\n## Coding\n### 识别文件实现\n```csharp\n/// <summary>\n/// 执行语音识别的异步方法\n/// </summary>\n/// <param name=\"inFile\">音频文件，pcm无文件头，采样率16k，数据16位，单声道</param>\n/// <param name=\"outFile\">输出识别结果到文件</param>\npublic void Audio2TxtAsync(string inFile, string outFile = null)\n{\n    var dlt = new DltSpeek(Audio2Txt);\n    dlt.BeginInvoke(inFile, outFile, null, null);\n}\n\n/// <summary>\n/// 进行声音识别\n/// </summary>\n/// <param name=\"inFile\">音频文件，pcm无文件头，采样率16k，数据16位，单声道</param>\n/// <param name=\"outFile\">输出识别结果到文件</param>\npublic void Audio2Txt(string inFile, string outFile = null)\n{\n    var ret = 0;\n    var result = \"\";\n    try\n    {\n        //模拟录音，输入音频\n        if (!File.Exists(inFile)) throw new Exception(\"文件\" + inFile + \"不存在！\");\n        if (inFile.Substring(inFile.Length - 3, 3).ToUpper() != \"WAV\" && inFile.Substring(inFile.Length - 3, 3).ToUpper() != \"PCM\")\n            throw new Exception(\"音频文件格式不对！\");\n        var fp = new FileStream(inFile, FileMode.Open);\n        if (inFile.Substring(inFile.Length - 3, 3).ToUpper() == \"WAV\") fp.Position = 44;\n        var buff = new byte[BufferNum];\n        var bp = Marshal.AllocHGlobal(BufferNum);\n        int len;\n        var status = AudioStatus.IsrAudioSampleContinue;\n        var epStatus = EpStatus.IsrEpNull;\n        var recStatus = RecogStatus.IsrRecNull;\n        var rsltStatus = RecogStatus.IsrRecNull;\n        //ep_status        端点检测（End-point detected）器所处的状态\n        //rec_status       识别器所处的状态\n        //rslt_status      识别器所处的状态\n        while (fp.Position != fp.Length)\n        {\n            len = fp.Read(buff, 0, BufferNum);\n            Marshal.Copy(buff, 0, bp, buff.Length);\n            //开始向服务器发送音频数据\n            ret = AsrDll.QISRAudioWrite(_sessID, bp, (uint)len, status, ref epStatus, ref recStatus);\n            if (ret != 0)\n            {\n                fp.Close();\n                throw new Exception(\"QISRAudioWrite err,errCode=\" + ((ErrorCode)ret).ToString(\"G\"));\n            }\n            //服务器返回部分结果\n            if (recStatus == RecogStatus.IsrRecStatusSuccess)\n            {\n                var p = AsrDll.QISRGetResult(_sessID, ref rsltStatus, WaitTime, ref ret);\n                if (p != IntPtr.Zero)\n                {\n                    var tmp = FlyTts.Ptr2Str(p);\n                    DataArrived?.Invoke(this, new DataArrivedEventArgs(tmp));\n                    result += tmp;\n                    Console.WriteLine(@\"返回部分结果！:\" + tmp);\n                }\n            }\n            Thread.Sleep(500);\n        }\n        fp.Close();\n\n        //最后一块数据\n        status = AudioStatus.IsrAudioSampleLast;\n\n        ret = AsrDll.QISRAudioWrite(_sessID, bp, 1, status, ref epStatus, ref recStatus);\n        if (ret != 0) throw new Exception(\"QISRAudioWrite write last audio err,errCode=\" + ((ErrorCode)ret).ToString(\"G\"));\n        Marshal.FreeHGlobal(bp);\n        var loopCount = 0;\n        //最后一块数据发完之后，循环从服务器端获取结果\n        //考虑到网络环境不好的情况下，需要对循环次数作限定\n        do\n        {\n            var p = AsrDll.QISRGetResult(_sessID, ref rsltStatus, WaitTime, ref ret);\n            if (p != IntPtr.Zero)\n            {\n                var tmp = FlyTts.Ptr2Str(p);\n                DataArrived?.Invoke(this, new DataArrivedEventArgs(tmp)); //激发识别数据到达事件\n                result += tmp;\n                Console.WriteLine(@\"传完音频后返回结果！:\" + tmp);\n            }\n            if (ret != 0) throw new Exception(\"QISRGetResult err,errCode=\" + ((ErrorCode)ret).ToString(\"G\"));\n            Thread.Sleep(200);\n        } while (rsltStatus != RecogStatus.IsrRecStatusSpeechComplete && loopCount++ < 30);\n        if (outFile != null)\n        {\n            var fout = new FileStream(outFile, FileMode.OpenOrCreate);\n            fout.Write(Encoding.Default.GetBytes(result), 0, Encoding.Default.GetByteCount(result));\n            fout.Close();\n        }\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine(ex.Message);\n    }\n    finally\n    {\n        ret = AsrDll.QISRSessionEnd(_sessID, string.Empty);\n        ret = AsrDll.MSPLogout();\n        IsrEnd?.Invoke(this, new EventArgs()); //通知识别结束\n    }\n}\n```\n### 录音实现\n```csharp\npublic void StartRecoding()\n{\n    WaveMonitor = new WaveInEvent { WaveFormat = new WaveFormat(16000, 16, 1) };\n\n    if (!Directory.Exists(\"temp\"))\n        Directory.CreateDirectory(\"temp\");\n    _fileName = Path.Combine(\"temp\", Guid.NewGuid() + \".wav\");\n\n    Writer = new WaveFileWriter(_fileName, WaveMonitor.WaveFormat);\n\n    WaveMonitor.DataAvailable += (s, a) => Writer.Write(a.Buffer, 0, a.BytesRecorded);\n    WaveMonitor.RecordingStopped += (s, a) => { Writer?.Dispose(); WaveMonitor?.Dispose(); };\n\n    WaveMonitor.StartRecording();\n}\n\npublic void StopRecoding()\n{\n    WaveMonitor.StopRecording();\n    Writer?.Close();\n\n    Audio2Txt(_fileName);\n}\n```\n### 完整源码\n托管在[GitHub](https://github.com/WayneShao/iFlyDotNet)\n\n\n## 结论\n讯飞语音识别实测识别率其实并没有比百度好多少，准确率在服务提供商看来是越精确越好，但在实际应用中90%和95%差距并不大，故虽然讯飞看起来在数据上更好一些，但是API易用性实在比较差，还是更推荐百度一些。","slug":"讯飞语音识别Demo","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24oum0030d00of6d0hbmf","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.xfyun.cn/services/voicedictation\" target=\"_blank\" rel=\"noopener\">讯飞语音识别</a>官方号称具有以下六个优势：</p><ol><li>超过95%的准确率</li><li>支持多种语种和方言</li><li>方便快捷的信息沟通</li><li>个性的语音识别</li><li>中文标点智能预测</li><li>支持垂直领域和应用级听写</li></ol><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180302113535116/20180302114420073.png\" alt=\"\"><br><a id=\"more\"></a></p><h2 id=\"获得APPID和调用Dll\"><a href=\"#获得APPID和调用Dll\" class=\"headerlink\" title=\"获得APPID和调用Dll\"></a>获得APPID和调用Dll</h2><p>在讯飞开放平台的<a href=\"http://console.xfyun.cn/app/myapp\" target=\"_blank\" rel=\"noopener\">控制台</a>新建一个应用，平台选择Windows，新建完成后为应用添加语音听写服务。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180302113535116/20180302114712451.png\" alt=\"\"><br>下载SDK<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180302113535116/20180302114758665.png\" alt=\"\"></p><p>解压出你下载的压缩包bin目录中的msc.dll等待使用<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180302113535116/20180302114914214.png\" alt=\"\"><br><strong>注意：下面步骤里的Dll必须使用自行下载的版本，此Dll并不通用</strong></p><h2 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2><h3 id=\"识别文件实现\"><a href=\"#识别文件实现\" class=\"headerlink\" title=\"识别文件实现\"></a>识别文件实现</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 执行语音识别的异步方法</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"inFile\"&gt;</span>音频文件，pcm无文件头，采样率16k，数据16位，单声道<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"outFile\"&gt;</span>输出识别结果到文件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Audio2TxtAsync</span>(<span class=\"params\"><span class=\"keyword\">string</span> inFile, <span class=\"keyword\">string</span> outFile = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dlt = <span class=\"keyword\">new</span> DltSpeek(Audio2Txt);</span><br><span class=\"line\">    dlt.BeginInvoke(inFile, outFile, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 进行声音识别</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"inFile\"&gt;</span>音频文件，pcm无文件头，采样率16k，数据16位，单声道<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"outFile\"&gt;</span>输出识别结果到文件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Audio2Txt</span>(<span class=\"params\"><span class=\"keyword\">string</span> inFile, <span class=\"keyword\">string</span> outFile = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//模拟录音，输入音频</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!File.Exists(inFile)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"文件\"</span> + inFile + <span class=\"string\">\"不存在！\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inFile.Substring(inFile.Length - <span class=\"number\">3</span>, <span class=\"number\">3</span>).ToUpper() != <span class=\"string\">\"WAV\"</span> &amp;&amp; inFile.Substring(inFile.Length - <span class=\"number\">3</span>, <span class=\"number\">3</span>).ToUpper() != <span class=\"string\">\"PCM\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"音频文件格式不对！\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fp = <span class=\"keyword\">new</span> FileStream(inFile, FileMode.Open);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inFile.Substring(inFile.Length - <span class=\"number\">3</span>, <span class=\"number\">3</span>).ToUpper() == <span class=\"string\">\"WAV\"</span>) fp.Position = <span class=\"number\">44</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> buff = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[BufferNum];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> bp = Marshal.AllocHGlobal(BufferNum);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> status = AudioStatus.IsrAudioSampleContinue;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> epStatus = EpStatus.IsrEpNull;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> recStatus = RecogStatus.IsrRecNull;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rsltStatus = RecogStatus.IsrRecNull;</span><br><span class=\"line\">        <span class=\"comment\">//ep_status        端点检测（End-point detected）器所处的状态</span></span><br><span class=\"line\">        <span class=\"comment\">//rec_status       识别器所处的状态</span></span><br><span class=\"line\">        <span class=\"comment\">//rslt_status      识别器所处的状态</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (fp.Position != fp.Length)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            len = fp.Read(buff, <span class=\"number\">0</span>, BufferNum);</span><br><span class=\"line\">            Marshal.Copy(buff, <span class=\"number\">0</span>, bp, buff.Length);</span><br><span class=\"line\">            <span class=\"comment\">//开始向服务器发送音频数据</span></span><br><span class=\"line\">            ret = AsrDll.QISRAudioWrite(_sessID, bp, (<span class=\"keyword\">uint</span>)len, status, <span class=\"keyword\">ref</span> epStatus, <span class=\"keyword\">ref</span> recStatus);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ret != <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                fp.Close();</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"QISRAudioWrite err,errCode=\"</span> + ((ErrorCode)ret).ToString(<span class=\"string\">\"G\"</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//服务器返回部分结果</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (recStatus == RecogStatus.IsrRecStatusSuccess)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> p = AsrDll.QISRGetResult(_sessID, <span class=\"keyword\">ref</span> rsltStatus, WaitTime, <span class=\"keyword\">ref</span> ret);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p != IntPtr.Zero)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> tmp = FlyTts.Ptr2Str(p);</span><br><span class=\"line\">                    DataArrived?.Invoke(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> DataArrivedEventArgs(tmp));</span><br><span class=\"line\">                    result += tmp;</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">@\"返回部分结果！:\"</span> + tmp);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Thread.Sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fp.Close();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//最后一块数据</span></span><br><span class=\"line\">        status = AudioStatus.IsrAudioSampleLast;</span><br><span class=\"line\"></span><br><span class=\"line\">        ret = AsrDll.QISRAudioWrite(_sessID, bp, <span class=\"number\">1</span>, status, <span class=\"keyword\">ref</span> epStatus, <span class=\"keyword\">ref</span> recStatus);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret != <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"QISRAudioWrite write last audio err,errCode=\"</span> + ((ErrorCode)ret).ToString(<span class=\"string\">\"G\"</span>));</span><br><span class=\"line\">        Marshal.FreeHGlobal(bp);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> loopCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//最后一块数据发完之后，循环从服务器端获取结果</span></span><br><span class=\"line\">        <span class=\"comment\">//考虑到网络环境不好的情况下，需要对循环次数作限定</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> p = AsrDll.QISRGetResult(_sessID, <span class=\"keyword\">ref</span> rsltStatus, WaitTime, <span class=\"keyword\">ref</span> ret);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p != IntPtr.Zero)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> tmp = FlyTts.Ptr2Str(p);</span><br><span class=\"line\">                DataArrived?.Invoke(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> DataArrivedEventArgs(tmp)); <span class=\"comment\">//激发识别数据到达事件</span></span><br><span class=\"line\">                result += tmp;</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">@\"传完音频后返回结果！:\"</span> + tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ret != <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"QISRGetResult err,errCode=\"</span> + ((ErrorCode)ret).ToString(<span class=\"string\">\"G\"</span>));</span><br><span class=\"line\">            Thread.Sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (rsltStatus != RecogStatus.IsrRecStatusSpeechComplete &amp;&amp; loopCount++ &lt; <span class=\"number\">30</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (outFile != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> fout = <span class=\"keyword\">new</span> FileStream(outFile, FileMode.OpenOrCreate);</span><br><span class=\"line\">            fout.Write(Encoding.Default.GetBytes(result), <span class=\"number\">0</span>, Encoding.Default.GetByteCount(result));</span><br><span class=\"line\">            fout.Close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(ex.Message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret = AsrDll.QISRSessionEnd(_sessID, <span class=\"keyword\">string</span>.Empty);</span><br><span class=\"line\">        ret = AsrDll.MSPLogout();</span><br><span class=\"line\">        IsrEnd?.Invoke(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> EventArgs()); <span class=\"comment\">//通知识别结束</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"录音实现\"><a href=\"#录音实现\" class=\"headerlink\" title=\"录音实现\"></a>录音实现</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">StartRecoding</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    WaveMonitor = <span class=\"keyword\">new</span> WaveInEvent &#123; WaveFormat = <span class=\"keyword\">new</span> WaveFormat(<span class=\"number\">16000</span>, <span class=\"number\">16</span>, <span class=\"number\">1</span>) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Directory.Exists(<span class=\"string\">\"temp\"</span>))</span><br><span class=\"line\">        Directory.CreateDirectory(<span class=\"string\">\"temp\"</span>);</span><br><span class=\"line\">    _fileName = Path.Combine(<span class=\"string\">\"temp\"</span>, Guid.NewGuid() + <span class=\"string\">\".wav\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Writer = <span class=\"keyword\">new</span> WaveFileWriter(_fileName, WaveMonitor.WaveFormat);</span><br><span class=\"line\"></span><br><span class=\"line\">    WaveMonitor.DataAvailable += (s, a) =&gt; Writer.Write(a.Buffer, <span class=\"number\">0</span>, a.BytesRecorded);</span><br><span class=\"line\">    WaveMonitor.RecordingStopped += (s, a) =&gt; &#123; Writer?.Dispose(); WaveMonitor?.Dispose(); &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    WaveMonitor.StartRecording();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">StopRecoding</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    WaveMonitor.StopRecording();</span><br><span class=\"line\">    Writer?.Close();</span><br><span class=\"line\"></span><br><span class=\"line\">    Audio2Txt(_fileName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"完整源码\"><a href=\"#完整源码\" class=\"headerlink\" title=\"完整源码\"></a>完整源码</h3><p>托管在<a href=\"https://github.com/WayneShao/iFlyDotNet\" target=\"_blank\" rel=\"noopener\">GitHub</a></p><h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>讯飞语音识别实测识别率其实并没有比百度好多少，准确率在服务提供商看来是越精确越好，但在实际应用中90%和95%差距并不大，故虽然讯飞看起来在数据上更好一些，但是API易用性实在比较差，还是更推荐百度一些。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p><a href=\"http://www.xfyun.cn/services/voicedictation\" target=\"_blank\" rel=\"noopener\">讯飞语音识别</a>官方号称具有以下六个优势：</p><ol><li>超过95%的准确率</li><li>支持多种语种和方言</li><li>方便快捷的信息沟通</li><li>个性的语音识别</li><li>中文标点智能预测</li><li>支持垂直领域和应用级听写</li></ol><p><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180302113535116/20180302114420073.png\" alt=\"\"><br>","more":"</p><h2 id=\"获得APPID和调用Dll\"><a href=\"#获得APPID和调用Dll\" class=\"headerlink\" title=\"获得APPID和调用Dll\"></a>获得APPID和调用Dll</h2><p>在讯飞开放平台的<a href=\"http://console.xfyun.cn/app/myapp\" target=\"_blank\" rel=\"noopener\">控制台</a>新建一个应用，平台选择Windows，新建完成后为应用添加语音听写服务。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180302113535116/20180302114712451.png\" alt=\"\"><br>下载SDK<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180302113535116/20180302114758665.png\" alt=\"\"></p><p>解压出你下载的压缩包bin目录中的msc.dll等待使用<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180302113535116/20180302114914214.png\" alt=\"\"><br><strong>注意：下面步骤里的Dll必须使用自行下载的版本，此Dll并不通用</strong></p><h2 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2><h3 id=\"识别文件实现\"><a href=\"#识别文件实现\" class=\"headerlink\" title=\"识别文件实现\"></a>识别文件实现</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 执行语音识别的异步方法</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"inFile\"&gt;</span>音频文件，pcm无文件头，采样率16k，数据16位，单声道<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"outFile\"&gt;</span>输出识别结果到文件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Audio2TxtAsync</span>(<span class=\"params\"><span class=\"keyword\">string</span> inFile, <span class=\"keyword\">string</span> outFile = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dlt = <span class=\"keyword\">new</span> DltSpeek(Audio2Txt);</span><br><span class=\"line\">    dlt.BeginInvoke(inFile, outFile, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 进行声音识别</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"inFile\"&gt;</span>音频文件，pcm无文件头，采样率16k，数据16位，单声道<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"outFile\"&gt;</span>输出识别结果到文件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Audio2Txt</span>(<span class=\"params\"><span class=\"keyword\">string</span> inFile, <span class=\"keyword\">string</span> outFile = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//模拟录音，输入音频</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!File.Exists(inFile)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"文件\"</span> + inFile + <span class=\"string\">\"不存在！\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inFile.Substring(inFile.Length - <span class=\"number\">3</span>, <span class=\"number\">3</span>).ToUpper() != <span class=\"string\">\"WAV\"</span> &amp;&amp; inFile.Substring(inFile.Length - <span class=\"number\">3</span>, <span class=\"number\">3</span>).ToUpper() != <span class=\"string\">\"PCM\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"音频文件格式不对！\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fp = <span class=\"keyword\">new</span> FileStream(inFile, FileMode.Open);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inFile.Substring(inFile.Length - <span class=\"number\">3</span>, <span class=\"number\">3</span>).ToUpper() == <span class=\"string\">\"WAV\"</span>) fp.Position = <span class=\"number\">44</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> buff = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[BufferNum];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> bp = Marshal.AllocHGlobal(BufferNum);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> status = AudioStatus.IsrAudioSampleContinue;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> epStatus = EpStatus.IsrEpNull;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> recStatus = RecogStatus.IsrRecNull;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rsltStatus = RecogStatus.IsrRecNull;</span><br><span class=\"line\">        <span class=\"comment\">//ep_status        端点检测（End-point detected）器所处的状态</span></span><br><span class=\"line\">        <span class=\"comment\">//rec_status       识别器所处的状态</span></span><br><span class=\"line\">        <span class=\"comment\">//rslt_status      识别器所处的状态</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (fp.Position != fp.Length)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            len = fp.Read(buff, <span class=\"number\">0</span>, BufferNum);</span><br><span class=\"line\">            Marshal.Copy(buff, <span class=\"number\">0</span>, bp, buff.Length);</span><br><span class=\"line\">            <span class=\"comment\">//开始向服务器发送音频数据</span></span><br><span class=\"line\">            ret = AsrDll.QISRAudioWrite(_sessID, bp, (<span class=\"keyword\">uint</span>)len, status, <span class=\"keyword\">ref</span> epStatus, <span class=\"keyword\">ref</span> recStatus);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ret != <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                fp.Close();</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"QISRAudioWrite err,errCode=\"</span> + ((ErrorCode)ret).ToString(<span class=\"string\">\"G\"</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//服务器返回部分结果</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (recStatus == RecogStatus.IsrRecStatusSuccess)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> p = AsrDll.QISRGetResult(_sessID, <span class=\"keyword\">ref</span> rsltStatus, WaitTime, <span class=\"keyword\">ref</span> ret);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p != IntPtr.Zero)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> tmp = FlyTts.Ptr2Str(p);</span><br><span class=\"line\">                    DataArrived?.Invoke(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> DataArrivedEventArgs(tmp));</span><br><span class=\"line\">                    result += tmp;</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">@\"返回部分结果！:\"</span> + tmp);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Thread.Sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fp.Close();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//最后一块数据</span></span><br><span class=\"line\">        status = AudioStatus.IsrAudioSampleLast;</span><br><span class=\"line\"></span><br><span class=\"line\">        ret = AsrDll.QISRAudioWrite(_sessID, bp, <span class=\"number\">1</span>, status, <span class=\"keyword\">ref</span> epStatus, <span class=\"keyword\">ref</span> recStatus);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret != <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"QISRAudioWrite write last audio err,errCode=\"</span> + ((ErrorCode)ret).ToString(<span class=\"string\">\"G\"</span>));</span><br><span class=\"line\">        Marshal.FreeHGlobal(bp);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> loopCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//最后一块数据发完之后，循环从服务器端获取结果</span></span><br><span class=\"line\">        <span class=\"comment\">//考虑到网络环境不好的情况下，需要对循环次数作限定</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> p = AsrDll.QISRGetResult(_sessID, <span class=\"keyword\">ref</span> rsltStatus, WaitTime, <span class=\"keyword\">ref</span> ret);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p != IntPtr.Zero)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> tmp = FlyTts.Ptr2Str(p);</span><br><span class=\"line\">                DataArrived?.Invoke(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> DataArrivedEventArgs(tmp)); <span class=\"comment\">//激发识别数据到达事件</span></span><br><span class=\"line\">                result += tmp;</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">@\"传完音频后返回结果！:\"</span> + tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ret != <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"QISRGetResult err,errCode=\"</span> + ((ErrorCode)ret).ToString(<span class=\"string\">\"G\"</span>));</span><br><span class=\"line\">            Thread.Sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (rsltStatus != RecogStatus.IsrRecStatusSpeechComplete &amp;&amp; loopCount++ &lt; <span class=\"number\">30</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (outFile != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> fout = <span class=\"keyword\">new</span> FileStream(outFile, FileMode.OpenOrCreate);</span><br><span class=\"line\">            fout.Write(Encoding.Default.GetBytes(result), <span class=\"number\">0</span>, Encoding.Default.GetByteCount(result));</span><br><span class=\"line\">            fout.Close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(ex.Message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret = AsrDll.QISRSessionEnd(_sessID, <span class=\"keyword\">string</span>.Empty);</span><br><span class=\"line\">        ret = AsrDll.MSPLogout();</span><br><span class=\"line\">        IsrEnd?.Invoke(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> EventArgs()); <span class=\"comment\">//通知识别结束</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"录音实现\"><a href=\"#录音实现\" class=\"headerlink\" title=\"录音实现\"></a>录音实现</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">StartRecoding</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    WaveMonitor = <span class=\"keyword\">new</span> WaveInEvent &#123; WaveFormat = <span class=\"keyword\">new</span> WaveFormat(<span class=\"number\">16000</span>, <span class=\"number\">16</span>, <span class=\"number\">1</span>) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Directory.Exists(<span class=\"string\">\"temp\"</span>))</span><br><span class=\"line\">        Directory.CreateDirectory(<span class=\"string\">\"temp\"</span>);</span><br><span class=\"line\">    _fileName = Path.Combine(<span class=\"string\">\"temp\"</span>, Guid.NewGuid() + <span class=\"string\">\".wav\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Writer = <span class=\"keyword\">new</span> WaveFileWriter(_fileName, WaveMonitor.WaveFormat);</span><br><span class=\"line\"></span><br><span class=\"line\">    WaveMonitor.DataAvailable += (s, a) =&gt; Writer.Write(a.Buffer, <span class=\"number\">0</span>, a.BytesRecorded);</span><br><span class=\"line\">    WaveMonitor.RecordingStopped += (s, a) =&gt; &#123; Writer?.Dispose(); WaveMonitor?.Dispose(); &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    WaveMonitor.StartRecording();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">StopRecoding</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    WaveMonitor.StopRecording();</span><br><span class=\"line\">    Writer?.Close();</span><br><span class=\"line\"></span><br><span class=\"line\">    Audio2Txt(_fileName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"完整源码\"><a href=\"#完整源码\" class=\"headerlink\" title=\"完整源码\"></a>完整源码</h3><p>托管在<a href=\"https://github.com/WayneShao/iFlyDotNet\" target=\"_blank\" rel=\"noopener\">GitHub</a></p><h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>讯飞语音识别实测识别率其实并没有比百度好多少，准确率在服务提供商看来是越精确越好，但在实际应用中90%和95%差距并不大，故虽然讯飞看起来在数据上更好一些，但是API易用性实在比较差，还是更推荐百度一些。</p><!-- rebuild by neat -->"},{"title":"Selenium PhantomJS 巧妙过渡到 Firefox/Chrome","author":"玮仔Wayne","abbrlink":40690,"date":"2018-07-11T12:19:29.000Z","_content":"\n# PhantomJS Obsolete\n## Origin\n前段时间因为一些个人爱好，想要对某网站的数据进行整站采集，其中需要对某些页面的一些区块进行截图采集，整个采集任务中还涉及一些验证码识别之类的工作。学艺不精，我当前掌握的 Scrapy 知识很难完成这样一个爬虫，就使用了 Selenium + PhantomJS 制作了一个模拟浏览器访问来爬取数据的小爬虫，完成了整套抓取任务。\n![](http://qiniucdn.wayneshao.com/20180711045204672.gif)\n<!--more-->\n然而上个月手误格掉了整块数据硬盘，之前的代码也没留下备份，我还仍然有同样的数据采集需要，只能准备按照原有思路重新做一个爬虫，这本来应该只是个体力活，只要重新抓样本，做好验证码识别，之后就应该一马平川，一泻千里了。\n![](http://qiniucdn.wayneshao.com/Selenium-+-Firefox-Chrome-%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711050254778.png)\n然而就在我开始动手的时候，PhantomJSDriver 类型下的蓝色下划线成功吸引了有强迫症的程序员本尊的注意\n![](http://qiniucdn.wayneshao.com/20180711213420950/20180711101818131.png)\n![](http://qiniucdn.wayneshao.com/20180711213420950/20180711101850349.png)\n![](http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711080149417.png)\n\n运用我考了三遍都没过的四级英语定睛一看，这个意思是说， PhantomJSDriver 类型已经被**弃用**，PhantomJS 的开发工作已经停止，PhantomJS 的驱动**将会在未来的某个 release 版本上被移除**。\n**天哪~！**\n![](http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711080102494.png)\n告诉我不是真的！Selenium 居然放弃了他的好基友 PhantomJS！\n***（这个声明颇有 “不是我他跟不上我的进步被我抛弃，而是他渣，他抛弃了我” 的戏剧性，让我不由得想要查证一下）***\n\n## Investigate\n不敢相信的我祭出了谷歌神器\n\n> Chrome 59 将支持 Headless 模式。而在 Chrome 未提供原生 Headless 模式前，Web 开发者可以使用 PhantomJS 等第三方 Headless 浏览器。现在官方准备提供 Headless 了，PhantomJS 主要的贡献者 Vitaly Slobodin 随即在邮件列表上宣布辞职。\n> ![](http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711080802730.png)\n因为这半年都没有过写新爬虫的需求，而最近一直在跑着的爬虫用的是老版本 Selenium 开发，所以还 PhantomJS 玩得很嗨，殊不知已经 Out 了。查了一下，**去年四月份的 Chrome 59 版本和六月份的 Firefox 56 版本都引入了 Headless 模式**，PhantomJS 的独领风骚地位瞬间丧失，开发者流失，仅剩的一位开发者 Vitaly Slobodin 看不到 PhantomJS 的未来，选择了**停止开发**，然后 “不思进取” 的 PhantomJS 逐渐消失在历史的尘埃中…… 小厂出的创新产品，大厂做出类似产品之后，小厂 GG，大概也就是这么一回事吧……\n***（虽然果真是 PhantomJS 做了负心汉，但还是莫名悲壮，有种丈夫不思进取，觉得配不上努力上进妻子然后自我了断给妻子自由的既视感）***\n\n# Headless Chrome/Firefox\n想要使用 Selenium 控制 Firefox 进行页面浏览，需要先做以下的准备工作：\n## Headless Firefox\n### Prepare\n1. 安装最新版本的 Firefox 浏览器。\n2. 下载最新版本的适应当前系统的 GeckoDriver。\n3. 将步骤 2 下载的 GeckoDriver 的程序文件移动到 Firefox 的程序目录中，使两个程序的执行文件处于同一目录中，并将程序所在的目录加入到环境变量中。\n\n然后引入官方的四个 Nuget 包：\n![](http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711082732423.png)\n\n> Install-Package Selenium.WebDriver\nInstall-Package Selenium.WebDriverBackedSelenium\nInstall-Package Selenium.Support\nInstall-Package Selenium.RC\n\n### Coding\n随意拉一个窗体用于测试，然后敲入以下代码：\n```csharp\nvar firefoxOption = new FirefoxOptions();\nfirefoxOption.AddArguments(\"-headless\");\nvar firefoxDriver = new FirefoxDriver(firefoxOption);\n\nfirefoxDriver.Navigate().GoToUrl(\"http://www.baidu.com/\");\n\ntextBox1.Text = firefoxDriver.PageSource;\n```\n运行结果：\n![](http://qiniucdn.wayneshao.com/20180711213420950/20180711105729884.png)\n## Headless Chrome\n### Prepare\n想要使用 Selenium 控制 Chrome 进行页面浏览，需要做的准备工作和上面的 Firefox 大同小异：\n\n1. 安装最新版本的 Chrome 浏览器（也可以考虑像我一样使用国内大牛写的 Chrome 绿色化工具 MyChrome 安装绿色版 Chrome ，在版本控制、用户文件本地化方面更具优势）。\n2. 下载最新版本的适应当前系统的 ChromeDriver。\n3. 将步骤 2 下载的 ChromeDriver 的程序文件移动到 Chrome 的程序目录中，使两个程序的执行文件处于同一目录中，并将程序所在的目录加入到环境变量中。\n\n依然是官方的四个 Nuget 包（如果已经安装过，则直接跳过）：\n![](http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711082732423.png)\n\n> Install-Package Selenium.WebDriver\nInstall-Package Selenium.WebDriverBackedSelenium\nInstall-Package Selenium.Support\nInstall-Package Selenium.RC\n\n### Coding\n随意拉一个窗体用于测试，然后敲入以下代码：\n```csharp\nvar chromeOption = new ChromeOptions();\nchromeOption.AddArguments(\"--headless\", \"--disable-gpu\");\nvar chromeDriver = new ChromeDriver(chromeOption);\n\nchromeDriver.Navigate().GoToUrl(\"http://www.baidu.com/\");\n\ntextBox1.Text = chromeDriver.PageSource;\n```\n运行结果：\n![](http://qiniucdn.wayneshao.com/20180711213420950/20180711111201947.png)\n\n## Full Page ScreenShot\n无头模式是已经实现了，在打开时间上效率略差于 PhantomJS，但是执行页面抓取是却要更优于 PhantomJS ，无愧于老牌浏览器的称号。可是接下来就遇到了新的问题，上面提到的，我的爬虫求有截取页面某一区域图片的需求，而 Selenium 的驱动 API 标准获取图片的只有 GetScreenShot ，在之前使用 PhantomJS 时，由于 PhantomJS 从从诞生时起就是一个为爬虫服务的没有界面的浏览器，所以截图 API 截到的就是整个页面的图片，在获取某一区域的渲染图片时，只需要从截到的全页面图中将区域所在的矩形取出来，就可以完成要求。但是对于 Chrome 和 Firefox 这样的浏览器，虽然有 Headless 模式，但是窗口的概念是一只存在的， GetScreenShot 截到的只会是浏览器窗口显示的部分页面的截图，所以我们需要找到一种可以截全图的方法。\n### Thinking\n想要在每次只能截到浏览器显示区域截图的情况下得到整个页面的截图，有如下两个思路：\n\n1. 控制浏览器滚动条移动，将所有区域的截图全都获取到，再根据每次截图时滚动条所处的位置信息，将所有截图合并到一起，最终得到全页面的截图。\n2. 把浏览器的窗口大小设置到页面一样大，甚至比页面稍大些，再进行截图，就可以得到全页面的截图。\n比较而言无疑是思路 2 更为简单高效，而且在 Headless 模式下，浏览器窗口的变化也完全不会有什么影响，故我们选用第二种思路来实现全页面截图。\n\n### Coding\n这里我们使用. NET 知名开源图片处理组件 ImageProcessor 来进行图片裁剪。\n\n> Install-Package ImageProcessor\n\n并非专业前端的我开始觉得 html 标签的尺寸应该就是整个页面的尺寸了，所以有了如下的代码：\n\n```csharp\npublic static Image GetElementImage(this RemoteWebDriver driver, IWebElement element)\n{\n    driver.Manage().Window.Size = driver.FindElementByTagName(\"html\").Size;\n    var photoBytes = driver.GetScreenshot().AsByteArray;\n    using (var inStream = new MemoryStream(photoBytes))\n    {\n        using (var outStream = new MemoryStream())\n        {\n            using (var imageFactory = new ImageFactory(true))\n            {\n                imageFactory.Load(inStream)\n                    .Crop(new Rectangle(element.Location, element.Size))\n                    .Save(outStream);\n            }\n            return Image.FromStream(outStream);\n        }\n    }\n}\n```\n\n但是在测试过程中发现并非如此，具体测试页面为 “Selenium 的维基百科关键词主页”https://en.wikipedia.org/wiki/Selenium_(software)\n调用代码：\n\n```csharp\npictureBox1.Image =\n                chromeDriver.GetElementImage(\n                    chromeDriver.FindElementByXPath(@\"//*[@id=\"\"footer-copyrightico\"\"]/a/img\"));\n```\n\n![](http://qiniucdn.wayneshao.com/20180711213420950/20180711115157926.png)\n\n调用代码中的 XPath 命中的标签为页面底部的维基百科 logo 图片，调试信息可知，该标签的 Y 坐标远大于 Html 标签的 Height ，故 Html 的尺寸应该和页面实际尺寸并不完全吻合。\n\n居然不对？！\n![](http://qiniucdn.wayneshao.com/20180711213420950/20180712120904055.png)\n\n[查询资料大法：](https://www.zhihu.com/question/20816879)\n\n```csharp\n//页面尺寸\nvar pageWidth = Math.max(\n     document.body.scrollWidth,\n     document.documentElement.scrollWidth,\n     document.body.offsetWidth, \n     document.documentElement.offsetWidth,\n     document.documentElement.clientWidth\n);\n\n\nvar pageHeight = Math.max(\n     document.body.scrollHeight,\n     document.documentElement.scrollHeight,\n     document.body.offsetHeight, \n     document.documentElement.offsetHeight,\n     document.documentElement.clientHeight\n);\n```\n于是我决定改用执行 JS 代码来获取页面实际尺寸：\n封装 JS 执行方法：\n```csharp\npublic static T Execute<T>(this IWebDriver driver, string script) \n            => (T)((IJavaScriptExecutor)driver).ExecuteScript(script);\n```\n获取实际尺寸\n```csharp\nvar height = driver.Execute<long>(\"return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);\");\nvar width = driver.Execute<long>(\"return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);\");\n```\n\n使用新思路重新封装方法\n```csharp\npublic static Image GetElementImage(this RemoteWebDriver driver, IWebElement element)\n{\n    //driver.Manage().Window.Size = driver.FindElementByTagName(\"html\").Size;\n\n    var height = driver.Execute<long>(\"return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);\");\n    var width = driver.Execute<long>(\"return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);\");\n\n    driver.Manage().Window.Size = new Size((int)width + 100, (int)height + 100);\n\n    var photoBytes = driver.GetScreenshot().AsByteArray;\n\n    using (var inStream = new MemoryStream(photoBytes))\n    {\n        using (var outStream = new MemoryStream())\n        {\n            using (var imageFactory = new ImageFactory(true))\n            {\n                imageFactory.Load(inStream)\n                    .Crop(new Rectangle(element.Location, element.Size))\n                    .Save(outStream);\n            }\n            return Image.FromStream(outStream);\n        }\n    }\n}\n```\n代码执行结果如下：\n![](http://qiniucdn.wayneshao.com/20180711213420950/20180712120513778.png)\n\n成功！\n\n![](http://qiniucdn.wayneshao.com/20180711213420950/20180712120712325.png)","source":"_posts/Selenium-PhantomJS-巧妙过渡到-Firefox-Chrome.md","raw":"---\ntitle: Selenium PhantomJS 巧妙过渡到 Firefox/Chrome\nauthor: 玮仔Wayne\ntags:\n  - 'C#'\n  - selenium\n  - full page screenshot\n  - 全页面截图\ncategories:\n  - 经验之谈\nabbrlink: 40690\ndate: 2018-07-11 20:19:29\n---\n\n# PhantomJS Obsolete\n## Origin\n前段时间因为一些个人爱好，想要对某网站的数据进行整站采集，其中需要对某些页面的一些区块进行截图采集，整个采集任务中还涉及一些验证码识别之类的工作。学艺不精，我当前掌握的 Scrapy 知识很难完成这样一个爬虫，就使用了 Selenium + PhantomJS 制作了一个模拟浏览器访问来爬取数据的小爬虫，完成了整套抓取任务。\n![](http://qiniucdn.wayneshao.com/20180711045204672.gif)\n<!--more-->\n然而上个月手误格掉了整块数据硬盘，之前的代码也没留下备份，我还仍然有同样的数据采集需要，只能准备按照原有思路重新做一个爬虫，这本来应该只是个体力活，只要重新抓样本，做好验证码识别，之后就应该一马平川，一泻千里了。\n![](http://qiniucdn.wayneshao.com/Selenium-+-Firefox-Chrome-%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711050254778.png)\n然而就在我开始动手的时候，PhantomJSDriver 类型下的蓝色下划线成功吸引了有强迫症的程序员本尊的注意\n![](http://qiniucdn.wayneshao.com/20180711213420950/20180711101818131.png)\n![](http://qiniucdn.wayneshao.com/20180711213420950/20180711101850349.png)\n![](http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711080149417.png)\n\n运用我考了三遍都没过的四级英语定睛一看，这个意思是说， PhantomJSDriver 类型已经被**弃用**，PhantomJS 的开发工作已经停止，PhantomJS 的驱动**将会在未来的某个 release 版本上被移除**。\n**天哪~！**\n![](http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711080102494.png)\n告诉我不是真的！Selenium 居然放弃了他的好基友 PhantomJS！\n***（这个声明颇有 “不是我他跟不上我的进步被我抛弃，而是他渣，他抛弃了我” 的戏剧性，让我不由得想要查证一下）***\n\n## Investigate\n不敢相信的我祭出了谷歌神器\n\n> Chrome 59 将支持 Headless 模式。而在 Chrome 未提供原生 Headless 模式前，Web 开发者可以使用 PhantomJS 等第三方 Headless 浏览器。现在官方准备提供 Headless 了，PhantomJS 主要的贡献者 Vitaly Slobodin 随即在邮件列表上宣布辞职。\n> ![](http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711080802730.png)\n因为这半年都没有过写新爬虫的需求，而最近一直在跑着的爬虫用的是老版本 Selenium 开发，所以还 PhantomJS 玩得很嗨，殊不知已经 Out 了。查了一下，**去年四月份的 Chrome 59 版本和六月份的 Firefox 56 版本都引入了 Headless 模式**，PhantomJS 的独领风骚地位瞬间丧失，开发者流失，仅剩的一位开发者 Vitaly Slobodin 看不到 PhantomJS 的未来，选择了**停止开发**，然后 “不思进取” 的 PhantomJS 逐渐消失在历史的尘埃中…… 小厂出的创新产品，大厂做出类似产品之后，小厂 GG，大概也就是这么一回事吧……\n***（虽然果真是 PhantomJS 做了负心汉，但还是莫名悲壮，有种丈夫不思进取，觉得配不上努力上进妻子然后自我了断给妻子自由的既视感）***\n\n# Headless Chrome/Firefox\n想要使用 Selenium 控制 Firefox 进行页面浏览，需要先做以下的准备工作：\n## Headless Firefox\n### Prepare\n1. 安装最新版本的 Firefox 浏览器。\n2. 下载最新版本的适应当前系统的 GeckoDriver。\n3. 将步骤 2 下载的 GeckoDriver 的程序文件移动到 Firefox 的程序目录中，使两个程序的执行文件处于同一目录中，并将程序所在的目录加入到环境变量中。\n\n然后引入官方的四个 Nuget 包：\n![](http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711082732423.png)\n\n> Install-Package Selenium.WebDriver\nInstall-Package Selenium.WebDriverBackedSelenium\nInstall-Package Selenium.Support\nInstall-Package Selenium.RC\n\n### Coding\n随意拉一个窗体用于测试，然后敲入以下代码：\n```csharp\nvar firefoxOption = new FirefoxOptions();\nfirefoxOption.AddArguments(\"-headless\");\nvar firefoxDriver = new FirefoxDriver(firefoxOption);\n\nfirefoxDriver.Navigate().GoToUrl(\"http://www.baidu.com/\");\n\ntextBox1.Text = firefoxDriver.PageSource;\n```\n运行结果：\n![](http://qiniucdn.wayneshao.com/20180711213420950/20180711105729884.png)\n## Headless Chrome\n### Prepare\n想要使用 Selenium 控制 Chrome 进行页面浏览，需要做的准备工作和上面的 Firefox 大同小异：\n\n1. 安装最新版本的 Chrome 浏览器（也可以考虑像我一样使用国内大牛写的 Chrome 绿色化工具 MyChrome 安装绿色版 Chrome ，在版本控制、用户文件本地化方面更具优势）。\n2. 下载最新版本的适应当前系统的 ChromeDriver。\n3. 将步骤 2 下载的 ChromeDriver 的程序文件移动到 Chrome 的程序目录中，使两个程序的执行文件处于同一目录中，并将程序所在的目录加入到环境变量中。\n\n依然是官方的四个 Nuget 包（如果已经安装过，则直接跳过）：\n![](http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711082732423.png)\n\n> Install-Package Selenium.WebDriver\nInstall-Package Selenium.WebDriverBackedSelenium\nInstall-Package Selenium.Support\nInstall-Package Selenium.RC\n\n### Coding\n随意拉一个窗体用于测试，然后敲入以下代码：\n```csharp\nvar chromeOption = new ChromeOptions();\nchromeOption.AddArguments(\"--headless\", \"--disable-gpu\");\nvar chromeDriver = new ChromeDriver(chromeOption);\n\nchromeDriver.Navigate().GoToUrl(\"http://www.baidu.com/\");\n\ntextBox1.Text = chromeDriver.PageSource;\n```\n运行结果：\n![](http://qiniucdn.wayneshao.com/20180711213420950/20180711111201947.png)\n\n## Full Page ScreenShot\n无头模式是已经实现了，在打开时间上效率略差于 PhantomJS，但是执行页面抓取是却要更优于 PhantomJS ，无愧于老牌浏览器的称号。可是接下来就遇到了新的问题，上面提到的，我的爬虫求有截取页面某一区域图片的需求，而 Selenium 的驱动 API 标准获取图片的只有 GetScreenShot ，在之前使用 PhantomJS 时，由于 PhantomJS 从从诞生时起就是一个为爬虫服务的没有界面的浏览器，所以截图 API 截到的就是整个页面的图片，在获取某一区域的渲染图片时，只需要从截到的全页面图中将区域所在的矩形取出来，就可以完成要求。但是对于 Chrome 和 Firefox 这样的浏览器，虽然有 Headless 模式，但是窗口的概念是一只存在的， GetScreenShot 截到的只会是浏览器窗口显示的部分页面的截图，所以我们需要找到一种可以截全图的方法。\n### Thinking\n想要在每次只能截到浏览器显示区域截图的情况下得到整个页面的截图，有如下两个思路：\n\n1. 控制浏览器滚动条移动，将所有区域的截图全都获取到，再根据每次截图时滚动条所处的位置信息，将所有截图合并到一起，最终得到全页面的截图。\n2. 把浏览器的窗口大小设置到页面一样大，甚至比页面稍大些，再进行截图，就可以得到全页面的截图。\n比较而言无疑是思路 2 更为简单高效，而且在 Headless 模式下，浏览器窗口的变化也完全不会有什么影响，故我们选用第二种思路来实现全页面截图。\n\n### Coding\n这里我们使用. NET 知名开源图片处理组件 ImageProcessor 来进行图片裁剪。\n\n> Install-Package ImageProcessor\n\n并非专业前端的我开始觉得 html 标签的尺寸应该就是整个页面的尺寸了，所以有了如下的代码：\n\n```csharp\npublic static Image GetElementImage(this RemoteWebDriver driver, IWebElement element)\n{\n    driver.Manage().Window.Size = driver.FindElementByTagName(\"html\").Size;\n    var photoBytes = driver.GetScreenshot().AsByteArray;\n    using (var inStream = new MemoryStream(photoBytes))\n    {\n        using (var outStream = new MemoryStream())\n        {\n            using (var imageFactory = new ImageFactory(true))\n            {\n                imageFactory.Load(inStream)\n                    .Crop(new Rectangle(element.Location, element.Size))\n                    .Save(outStream);\n            }\n            return Image.FromStream(outStream);\n        }\n    }\n}\n```\n\n但是在测试过程中发现并非如此，具体测试页面为 “Selenium 的维基百科关键词主页”https://en.wikipedia.org/wiki/Selenium_(software)\n调用代码：\n\n```csharp\npictureBox1.Image =\n                chromeDriver.GetElementImage(\n                    chromeDriver.FindElementByXPath(@\"//*[@id=\"\"footer-copyrightico\"\"]/a/img\"));\n```\n\n![](http://qiniucdn.wayneshao.com/20180711213420950/20180711115157926.png)\n\n调用代码中的 XPath 命中的标签为页面底部的维基百科 logo 图片，调试信息可知，该标签的 Y 坐标远大于 Html 标签的 Height ，故 Html 的尺寸应该和页面实际尺寸并不完全吻合。\n\n居然不对？！\n![](http://qiniucdn.wayneshao.com/20180711213420950/20180712120904055.png)\n\n[查询资料大法：](https://www.zhihu.com/question/20816879)\n\n```csharp\n//页面尺寸\nvar pageWidth = Math.max(\n     document.body.scrollWidth,\n     document.documentElement.scrollWidth,\n     document.body.offsetWidth, \n     document.documentElement.offsetWidth,\n     document.documentElement.clientWidth\n);\n\n\nvar pageHeight = Math.max(\n     document.body.scrollHeight,\n     document.documentElement.scrollHeight,\n     document.body.offsetHeight, \n     document.documentElement.offsetHeight,\n     document.documentElement.clientHeight\n);\n```\n于是我决定改用执行 JS 代码来获取页面实际尺寸：\n封装 JS 执行方法：\n```csharp\npublic static T Execute<T>(this IWebDriver driver, string script) \n            => (T)((IJavaScriptExecutor)driver).ExecuteScript(script);\n```\n获取实际尺寸\n```csharp\nvar height = driver.Execute<long>(\"return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);\");\nvar width = driver.Execute<long>(\"return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);\");\n```\n\n使用新思路重新封装方法\n```csharp\npublic static Image GetElementImage(this RemoteWebDriver driver, IWebElement element)\n{\n    //driver.Manage().Window.Size = driver.FindElementByTagName(\"html\").Size;\n\n    var height = driver.Execute<long>(\"return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);\");\n    var width = driver.Execute<long>(\"return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);\");\n\n    driver.Manage().Window.Size = new Size((int)width + 100, (int)height + 100);\n\n    var photoBytes = driver.GetScreenshot().AsByteArray;\n\n    using (var inStream = new MemoryStream(photoBytes))\n    {\n        using (var outStream = new MemoryStream())\n        {\n            using (var imageFactory = new ImageFactory(true))\n            {\n                imageFactory.Load(inStream)\n                    .Crop(new Rectangle(element.Location, element.Size))\n                    .Save(outStream);\n            }\n            return Image.FromStream(outStream);\n        }\n    }\n}\n```\n代码执行结果如下：\n![](http://qiniucdn.wayneshao.com/20180711213420950/20180712120513778.png)\n\n成功！\n\n![](http://qiniucdn.wayneshao.com/20180711213420950/20180712120712325.png)","slug":"Selenium-PhantomJS-巧妙过渡到-Firefox-Chrome","published":1,"updated":"2018-10-25T03:46:18.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24p240071d00oc3m3fdbk","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><h1 id=\"PhantomJS-Obsolete\"><a href=\"#PhantomJS-Obsolete\" class=\"headerlink\" title=\"PhantomJS Obsolete\"></a>PhantomJS Obsolete</h1><h2 id=\"Origin\"><a href=\"#Origin\" class=\"headerlink\" title=\"Origin\"></a>Origin</h2><p>前段时间因为一些个人爱好，想要对某网站的数据进行整站采集，其中需要对某些页面的一些区块进行截图采集，整个采集任务中还涉及一些验证码识别之类的工作。学艺不精，我当前掌握的 Scrapy 知识很难完成这样一个爬虫，就使用了 Selenium + PhantomJS 制作了一个模拟浏览器访问来爬取数据的小爬虫，完成了整套抓取任务。<br><img src=\"http://qiniucdn.wayneshao.com/20180711045204672.gif\" alt=\"\"><br><a id=\"more\"></a><br>然而上个月手误格掉了整块数据硬盘，之前的代码也没留下备份，我还仍然有同样的数据采集需要，只能准备按照原有思路重新做一个爬虫，这本来应该只是个体力活，只要重新抓样本，做好验证码识别，之后就应该一马平川，一泻千里了。<br><img src=\"http://qiniucdn.wayneshao.com/Selenium-+-Firefox-Chrome-%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711050254778.png\" alt=\"\"><br>然而就在我开始动手的时候，PhantomJSDriver 类型下的蓝色下划线成功吸引了有强迫症的程序员本尊的注意<br><img src=\"http://qiniucdn.wayneshao.com/20180711213420950/20180711101818131.png\" alt=\"\"><br><img src=\"http://qiniucdn.wayneshao.com/20180711213420950/20180711101850349.png\" alt=\"\"><br><img src=\"http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711080149417.png\" alt=\"\"></p><p>运用我考了三遍都没过的四级英语定睛一看，这个意思是说， PhantomJSDriver 类型已经被<strong>弃用</strong>，PhantomJS 的开发工作已经停止，PhantomJS 的驱动<strong>将会在未来的某个 release 版本上被移除</strong>。<br><strong>天哪~！</strong><br><img src=\"http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711080102494.png\" alt=\"\"><br>告诉我不是真的！Selenium 居然放弃了他的好基友 PhantomJS！<br><strong><em>（这个声明颇有 “不是我他跟不上我的进步被我抛弃，而是他渣，他抛弃了我” 的戏剧性，让我不由得想要查证一下）</em></strong></p><h2 id=\"Investigate\"><a href=\"#Investigate\" class=\"headerlink\" title=\"Investigate\"></a>Investigate</h2><p>不敢相信的我祭出了谷歌神器</p><blockquote><p>Chrome 59 将支持 Headless 模式。而在 Chrome 未提供原生 Headless 模式前，Web 开发者可以使用 PhantomJS 等第三方 Headless 浏览器。现在官方准备提供 Headless 了，PhantomJS 主要的贡献者 Vitaly Slobodin 随即在邮件列表上宣布辞职。<br><img src=\"http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711080802730.png\" alt=\"\"><br>因为这半年都没有过写新爬虫的需求，而最近一直在跑着的爬虫用的是老版本 Selenium 开发，所以还 PhantomJS 玩得很嗨，殊不知已经 Out 了。查了一下，<strong>去年四月份的 Chrome 59 版本和六月份的 Firefox 56 版本都引入了 Headless 模式</strong>，PhantomJS 的独领风骚地位瞬间丧失，开发者流失，仅剩的一位开发者 Vitaly Slobodin 看不到 PhantomJS 的未来，选择了<strong>停止开发</strong>，然后 “不思进取” 的 PhantomJS 逐渐消失在历史的尘埃中…… 小厂出的创新产品，大厂做出类似产品之后，小厂 GG，大概也就是这么一回事吧……<br><strong><em>（虽然果真是 PhantomJS 做了负心汉，但还是莫名悲壮，有种丈夫不思进取，觉得配不上努力上进妻子然后自我了断给妻子自由的既视感）</em></strong></p></blockquote><h1 id=\"Headless-Chrome-Firefox\"><a href=\"#Headless-Chrome-Firefox\" class=\"headerlink\" title=\"Headless Chrome/Firefox\"></a>Headless Chrome/Firefox</h1><p>想要使用 Selenium 控制 Firefox 进行页面浏览，需要先做以下的准备工作：</p><h2 id=\"Headless-Firefox\"><a href=\"#Headless-Firefox\" class=\"headerlink\" title=\"Headless Firefox\"></a>Headless Firefox</h2><h3 id=\"Prepare\"><a href=\"#Prepare\" class=\"headerlink\" title=\"Prepare\"></a>Prepare</h3><ol><li>安装最新版本的 Firefox 浏览器。</li><li>下载最新版本的适应当前系统的 GeckoDriver。</li><li>将步骤 2 下载的 GeckoDriver 的程序文件移动到 Firefox 的程序目录中，使两个程序的执行文件处于同一目录中，并将程序所在的目录加入到环境变量中。</li></ol><p>然后引入官方的四个 Nuget 包：<br><img src=\"http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711082732423.png\" alt=\"\"></p><blockquote><p>Install-Package Selenium.WebDriver<br>Install-Package Selenium.WebDriverBackedSelenium<br>Install-Package Selenium.Support<br>Install-Package Selenium.RC</p></blockquote><h3 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h3><p>随意拉一个窗体用于测试，然后敲入以下代码：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> firefoxOption = <span class=\"keyword\">new</span> FirefoxOptions();</span><br><span class=\"line\">firefoxOption.AddArguments(<span class=\"string\">\"-headless\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> firefoxDriver = <span class=\"keyword\">new</span> FirefoxDriver(firefoxOption);</span><br><span class=\"line\"></span><br><span class=\"line\">firefoxDriver.Navigate().GoToUrl(<span class=\"string\">\"http://www.baidu.com/\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">textBox1.Text = firefoxDriver.PageSource;</span><br></pre></td></tr></table></figure><p></p><p>运行结果：<br><img src=\"http://qiniucdn.wayneshao.com/20180711213420950/20180711105729884.png\" alt=\"\"></p><h2 id=\"Headless-Chrome\"><a href=\"#Headless-Chrome\" class=\"headerlink\" title=\"Headless Chrome\"></a>Headless Chrome</h2><h3 id=\"Prepare-1\"><a href=\"#Prepare-1\" class=\"headerlink\" title=\"Prepare\"></a>Prepare</h3><p>想要使用 Selenium 控制 Chrome 进行页面浏览，需要做的准备工作和上面的 Firefox 大同小异：</p><ol><li>安装最新版本的 Chrome 浏览器（也可以考虑像我一样使用国内大牛写的 Chrome 绿色化工具 MyChrome 安装绿色版 Chrome ，在版本控制、用户文件本地化方面更具优势）。</li><li>下载最新版本的适应当前系统的 ChromeDriver。</li><li>将步骤 2 下载的 ChromeDriver 的程序文件移动到 Chrome 的程序目录中，使两个程序的执行文件处于同一目录中，并将程序所在的目录加入到环境变量中。</li></ol><p>依然是官方的四个 Nuget 包（如果已经安装过，则直接跳过）：<br><img src=\"http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711082732423.png\" alt=\"\"></p><blockquote><p>Install-Package Selenium.WebDriver<br>Install-Package Selenium.WebDriverBackedSelenium<br>Install-Package Selenium.Support<br>Install-Package Selenium.RC</p></blockquote><h3 id=\"Coding-1\"><a href=\"#Coding-1\" class=\"headerlink\" title=\"Coding\"></a>Coding</h3><p>随意拉一个窗体用于测试，然后敲入以下代码：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> chromeOption = <span class=\"keyword\">new</span> ChromeOptions();</span><br><span class=\"line\">chromeOption.AddArguments(<span class=\"string\">\"--headless\"</span>, <span class=\"string\">\"--disable-gpu\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> chromeDriver = <span class=\"keyword\">new</span> ChromeDriver(chromeOption);</span><br><span class=\"line\"></span><br><span class=\"line\">chromeDriver.Navigate().GoToUrl(<span class=\"string\">\"http://www.baidu.com/\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">textBox1.Text = chromeDriver.PageSource;</span><br></pre></td></tr></table></figure><p></p><p>运行结果：<br><img src=\"http://qiniucdn.wayneshao.com/20180711213420950/20180711111201947.png\" alt=\"\"></p><h2 id=\"Full-Page-ScreenShot\"><a href=\"#Full-Page-ScreenShot\" class=\"headerlink\" title=\"Full Page ScreenShot\"></a>Full Page ScreenShot</h2><p>无头模式是已经实现了，在打开时间上效率略差于 PhantomJS，但是执行页面抓取是却要更优于 PhantomJS ，无愧于老牌浏览器的称号。可是接下来就遇到了新的问题，上面提到的，我的爬虫求有截取页面某一区域图片的需求，而 Selenium 的驱动 API 标准获取图片的只有 GetScreenShot ，在之前使用 PhantomJS 时，由于 PhantomJS 从从诞生时起就是一个为爬虫服务的没有界面的浏览器，所以截图 API 截到的就是整个页面的图片，在获取某一区域的渲染图片时，只需要从截到的全页面图中将区域所在的矩形取出来，就可以完成要求。但是对于 Chrome 和 Firefox 这样的浏览器，虽然有 Headless 模式，但是窗口的概念是一只存在的， GetScreenShot 截到的只会是浏览器窗口显示的部分页面的截图，所以我们需要找到一种可以截全图的方法。</p><h3 id=\"Thinking\"><a href=\"#Thinking\" class=\"headerlink\" title=\"Thinking\"></a>Thinking</h3><p>想要在每次只能截到浏览器显示区域截图的情况下得到整个页面的截图，有如下两个思路：</p><ol><li>控制浏览器滚动条移动，将所有区域的截图全都获取到，再根据每次截图时滚动条所处的位置信息，将所有截图合并到一起，最终得到全页面的截图。</li><li>把浏览器的窗口大小设置到页面一样大，甚至比页面稍大些，再进行截图，就可以得到全页面的截图。<br>比较而言无疑是思路 2 更为简单高效，而且在 Headless 模式下，浏览器窗口的变化也完全不会有什么影响，故我们选用第二种思路来实现全页面截图。</li></ol><h3 id=\"Coding-2\"><a href=\"#Coding-2\" class=\"headerlink\" title=\"Coding\"></a>Coding</h3><p>这里我们使用. NET 知名开源图片处理组件 ImageProcessor 来进行图片裁剪。</p><blockquote><p>Install-Package ImageProcessor</p></blockquote><p>并非专业前端的我开始觉得 html 标签的尺寸应该就是整个页面的尺寸了，所以有了如下的代码：</p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Image <span class=\"title\">GetElementImage</span>(<span class=\"params\"><span class=\"keyword\">this</span> RemoteWebDriver driver, IWebElement element</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    driver.Manage().Window.Size = driver.FindElementByTagName(<span class=\"string\">\"html\"</span>).Size;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> photoBytes = driver.GetScreenshot().AsByteArray;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> inStream = <span class=\"keyword\">new</span> MemoryStream(photoBytes))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> outStream = <span class=\"keyword\">new</span> MemoryStream())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> imageFactory = <span class=\"keyword\">new</span> ImageFactory(<span class=\"literal\">true</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                imageFactory.Load(inStream)</span><br><span class=\"line\">                    .Crop(<span class=\"keyword\">new</span> Rectangle(element.Location, element.Size))</span><br><span class=\"line\">                    .Save(outStream);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Image.FromStream(outStream);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>但是在测试过程中发现并非如此，具体测试页面为 “Selenium 的维基百科关键词主页”<a href=\"https://en.wikipedia.org/wiki/Selenium_(software\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Selenium_(software</a>)<br>调用代码：</p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pictureBox1.Image =</span><br><span class=\"line\">                chromeDriver.GetElementImage(</span><br><span class=\"line\">                    chromeDriver.FindElementByXPath(<span class=\"string\">@\"//*[@id=\"\"footer-copyrightico\"\"]/a/img\"</span>));</span><br></pre></td></tr></table></figure><p><img src=\"http://qiniucdn.wayneshao.com/20180711213420950/20180711115157926.png\" alt=\"\"></p><p>调用代码中的 XPath 命中的标签为页面底部的维基百科 logo 图片，调试信息可知，该标签的 Y 坐标远大于 Html 标签的 Height ，故 Html 的尺寸应该和页面实际尺寸并不完全吻合。</p><p>居然不对？！<br><img src=\"http://qiniucdn.wayneshao.com/20180711213420950/20180712120904055.png\" alt=\"\"></p><p><a href=\"https://www.zhihu.com/question/20816879\" target=\"_blank\" rel=\"noopener\">查询资料大法：</a></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//页面尺寸</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pageWidth = Math.max(</span><br><span class=\"line\">     document.body.scrollWidth,</span><br><span class=\"line\">     document.documentElement.scrollWidth,</span><br><span class=\"line\">     document.body.offsetWidth, </span><br><span class=\"line\">     document.documentElement.offsetWidth,</span><br><span class=\"line\">     document.documentElement.clientWidth</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pageHeight = Math.max(</span><br><span class=\"line\">     document.body.scrollHeight,</span><br><span class=\"line\">     document.documentElement.scrollHeight,</span><br><span class=\"line\">     document.body.offsetHeight, </span><br><span class=\"line\">     document.documentElement.offsetHeight,</span><br><span class=\"line\">     document.documentElement.clientHeight</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><p>于是我决定改用执行 JS 代码来获取页面实际尺寸：<br>封装 JS 执行方法：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T Execute&lt;T&gt;(<span class=\"keyword\">this</span> IWebDriver driver, <span class=\"keyword\">string</span> script) </span><br><span class=\"line\">            =&gt; (T)((IJavaScriptExecutor)driver).ExecuteScript(script);</span><br></pre></td></tr></table></figure><p></p><p>获取实际尺寸<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> height = driver.Execute&lt;<span class=\"keyword\">long</span>&gt;(<span class=\"string\">\"return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> width = driver.Execute&lt;<span class=\"keyword\">long</span>&gt;(<span class=\"string\">\"return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);\"</span>);</span><br></pre></td></tr></table></figure><p></p><p>使用新思路重新封装方法<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Image <span class=\"title\">GetElementImage</span>(<span class=\"params\"><span class=\"keyword\">this</span> RemoteWebDriver driver, IWebElement element</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//driver.Manage().Window.Size = driver.FindElementByTagName(\"html\").Size;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> height = driver.Execute&lt;<span class=\"keyword\">long</span>&gt;(<span class=\"string\">\"return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = driver.Execute&lt;<span class=\"keyword\">long</span>&gt;(<span class=\"string\">\"return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    driver.Manage().Window.Size = <span class=\"keyword\">new</span> Size((<span class=\"keyword\">int</span>)width + <span class=\"number\">100</span>, (<span class=\"keyword\">int</span>)height + <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> photoBytes = driver.GetScreenshot().AsByteArray;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> inStream = <span class=\"keyword\">new</span> MemoryStream(photoBytes))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> outStream = <span class=\"keyword\">new</span> MemoryStream())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> imageFactory = <span class=\"keyword\">new</span> ImageFactory(<span class=\"literal\">true</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                imageFactory.Load(inStream)</span><br><span class=\"line\">                    .Crop(<span class=\"keyword\">new</span> Rectangle(element.Location, element.Size))</span><br><span class=\"line\">                    .Save(outStream);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Image.FromStream(outStream);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>代码执行结果如下：<br><img src=\"http://qiniucdn.wayneshao.com/20180711213420950/20180712120513778.png\" alt=\"\"></p><p>成功！</p><p><img src=\"http://qiniucdn.wayneshao.com/20180711213420950/20180712120712325.png\" alt=\"\"></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><h1 id=\"PhantomJS-Obsolete\"><a href=\"#PhantomJS-Obsolete\" class=\"headerlink\" title=\"PhantomJS Obsolete\"></a>PhantomJS Obsolete</h1><h2 id=\"Origin\"><a href=\"#Origin\" class=\"headerlink\" title=\"Origin\"></a>Origin</h2><p>前段时间因为一些个人爱好，想要对某网站的数据进行整站采集，其中需要对某些页面的一些区块进行截图采集，整个采集任务中还涉及一些验证码识别之类的工作。学艺不精，我当前掌握的 Scrapy 知识很难完成这样一个爬虫，就使用了 Selenium + PhantomJS 制作了一个模拟浏览器访问来爬取数据的小爬虫，完成了整套抓取任务。<br><img src=\"http://qiniucdn.wayneshao.com/20180711045204672.gif\" alt=\"\"><br>","more":"<br>然而上个月手误格掉了整块数据硬盘，之前的代码也没留下备份，我还仍然有同样的数据采集需要，只能准备按照原有思路重新做一个爬虫，这本来应该只是个体力活，只要重新抓样本，做好验证码识别，之后就应该一马平川，一泻千里了。<br><img src=\"http://qiniucdn.wayneshao.com/Selenium-+-Firefox-Chrome-%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711050254778.png\" alt=\"\"><br>然而就在我开始动手的时候，PhantomJSDriver 类型下的蓝色下划线成功吸引了有强迫症的程序员本尊的注意<br><img src=\"http://qiniucdn.wayneshao.com/20180711213420950/20180711101818131.png\" alt=\"\"><br><img src=\"http://qiniucdn.wayneshao.com/20180711213420950/20180711101850349.png\" alt=\"\"><br><img src=\"http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711080149417.png\" alt=\"\"></p><p>运用我考了三遍都没过的四级英语定睛一看，这个意思是说， PhantomJSDriver 类型已经被<strong>弃用</strong>，PhantomJS 的开发工作已经停止，PhantomJS 的驱动<strong>将会在未来的某个 release 版本上被移除</strong>。<br><strong>天哪~！</strong><br><img src=\"http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711080102494.png\" alt=\"\"><br>告诉我不是真的！Selenium 居然放弃了他的好基友 PhantomJS！<br><strong><em>（这个声明颇有 “不是我他跟不上我的进步被我抛弃，而是他渣，他抛弃了我” 的戏剧性，让我不由得想要查证一下）</em></strong></p><h2 id=\"Investigate\"><a href=\"#Investigate\" class=\"headerlink\" title=\"Investigate\"></a>Investigate</h2><p>不敢相信的我祭出了谷歌神器</p><blockquote><p>Chrome 59 将支持 Headless 模式。而在 Chrome 未提供原生 Headless 模式前，Web 开发者可以使用 PhantomJS 等第三方 Headless 浏览器。现在官方准备提供 Headless 了，PhantomJS 主要的贡献者 Vitaly Slobodin 随即在邮件列表上宣布辞职。<br><img src=\"http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711080802730.png\" alt=\"\"><br>因为这半年都没有过写新爬虫的需求，而最近一直在跑着的爬虫用的是老版本 Selenium 开发，所以还 PhantomJS 玩得很嗨，殊不知已经 Out 了。查了一下，<strong>去年四月份的 Chrome 59 版本和六月份的 Firefox 56 版本都引入了 Headless 模式</strong>，PhantomJS 的独领风骚地位瞬间丧失，开发者流失，仅剩的一位开发者 Vitaly Slobodin 看不到 PhantomJS 的未来，选择了<strong>停止开发</strong>，然后 “不思进取” 的 PhantomJS 逐渐消失在历史的尘埃中…… 小厂出的创新产品，大厂做出类似产品之后，小厂 GG，大概也就是这么一回事吧……<br><strong><em>（虽然果真是 PhantomJS 做了负心汉，但还是莫名悲壮，有种丈夫不思进取，觉得配不上努力上进妻子然后自我了断给妻子自由的既视感）</em></strong></p></blockquote><h1 id=\"Headless-Chrome-Firefox\"><a href=\"#Headless-Chrome-Firefox\" class=\"headerlink\" title=\"Headless Chrome/Firefox\"></a>Headless Chrome/Firefox</h1><p>想要使用 Selenium 控制 Firefox 进行页面浏览，需要先做以下的准备工作：</p><h2 id=\"Headless-Firefox\"><a href=\"#Headless-Firefox\" class=\"headerlink\" title=\"Headless Firefox\"></a>Headless Firefox</h2><h3 id=\"Prepare\"><a href=\"#Prepare\" class=\"headerlink\" title=\"Prepare\"></a>Prepare</h3><ol><li>安装最新版本的 Firefox 浏览器。</li><li>下载最新版本的适应当前系统的 GeckoDriver。</li><li>将步骤 2 下载的 GeckoDriver 的程序文件移动到 Firefox 的程序目录中，使两个程序的执行文件处于同一目录中，并将程序所在的目录加入到环境变量中。</li></ol><p>然后引入官方的四个 Nuget 包：<br><img src=\"http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711082732423.png\" alt=\"\"></p><blockquote><p>Install-Package Selenium.WebDriver<br>Install-Package Selenium.WebDriverBackedSelenium<br>Install-Package Selenium.Support<br>Install-Package Selenium.RC</p></blockquote><h3 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h3><p>随意拉一个窗体用于测试，然后敲入以下代码：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> firefoxOption = <span class=\"keyword\">new</span> FirefoxOptions();</span><br><span class=\"line\">firefoxOption.AddArguments(<span class=\"string\">\"-headless\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> firefoxDriver = <span class=\"keyword\">new</span> FirefoxDriver(firefoxOption);</span><br><span class=\"line\"></span><br><span class=\"line\">firefoxDriver.Navigate().GoToUrl(<span class=\"string\">\"http://www.baidu.com/\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">textBox1.Text = firefoxDriver.PageSource;</span><br></pre></td></tr></table></figure><p></p><p>运行结果：<br><img src=\"http://qiniucdn.wayneshao.com/20180711213420950/20180711105729884.png\" alt=\"\"></p><h2 id=\"Headless-Chrome\"><a href=\"#Headless-Chrome\" class=\"headerlink\" title=\"Headless Chrome\"></a>Headless Chrome</h2><h3 id=\"Prepare-1\"><a href=\"#Prepare-1\" class=\"headerlink\" title=\"Prepare\"></a>Prepare</h3><p>想要使用 Selenium 控制 Chrome 进行页面浏览，需要做的准备工作和上面的 Firefox 大同小异：</p><ol><li>安装最新版本的 Chrome 浏览器（也可以考虑像我一样使用国内大牛写的 Chrome 绿色化工具 MyChrome 安装绿色版 Chrome ，在版本控制、用户文件本地化方面更具优势）。</li><li>下载最新版本的适应当前系统的 ChromeDriver。</li><li>将步骤 2 下载的 ChromeDriver 的程序文件移动到 Chrome 的程序目录中，使两个程序的执行文件处于同一目录中，并将程序所在的目录加入到环境变量中。</li></ol><p>依然是官方的四个 Nuget 包（如果已经安装过，则直接跳过）：<br><img src=\"http://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711082732423.png\" alt=\"\"></p><blockquote><p>Install-Package Selenium.WebDriver<br>Install-Package Selenium.WebDriverBackedSelenium<br>Install-Package Selenium.Support<br>Install-Package Selenium.RC</p></blockquote><h3 id=\"Coding-1\"><a href=\"#Coding-1\" class=\"headerlink\" title=\"Coding\"></a>Coding</h3><p>随意拉一个窗体用于测试，然后敲入以下代码：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> chromeOption = <span class=\"keyword\">new</span> ChromeOptions();</span><br><span class=\"line\">chromeOption.AddArguments(<span class=\"string\">\"--headless\"</span>, <span class=\"string\">\"--disable-gpu\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> chromeDriver = <span class=\"keyword\">new</span> ChromeDriver(chromeOption);</span><br><span class=\"line\"></span><br><span class=\"line\">chromeDriver.Navigate().GoToUrl(<span class=\"string\">\"http://www.baidu.com/\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">textBox1.Text = chromeDriver.PageSource;</span><br></pre></td></tr></table></figure><p></p><p>运行结果：<br><img src=\"http://qiniucdn.wayneshao.com/20180711213420950/20180711111201947.png\" alt=\"\"></p><h2 id=\"Full-Page-ScreenShot\"><a href=\"#Full-Page-ScreenShot\" class=\"headerlink\" title=\"Full Page ScreenShot\"></a>Full Page ScreenShot</h2><p>无头模式是已经实现了，在打开时间上效率略差于 PhantomJS，但是执行页面抓取是却要更优于 PhantomJS ，无愧于老牌浏览器的称号。可是接下来就遇到了新的问题，上面提到的，我的爬虫求有截取页面某一区域图片的需求，而 Selenium 的驱动 API 标准获取图片的只有 GetScreenShot ，在之前使用 PhantomJS 时，由于 PhantomJS 从从诞生时起就是一个为爬虫服务的没有界面的浏览器，所以截图 API 截到的就是整个页面的图片，在获取某一区域的渲染图片时，只需要从截到的全页面图中将区域所在的矩形取出来，就可以完成要求。但是对于 Chrome 和 Firefox 这样的浏览器，虽然有 Headless 模式，但是窗口的概念是一只存在的， GetScreenShot 截到的只会是浏览器窗口显示的部分页面的截图，所以我们需要找到一种可以截全图的方法。</p><h3 id=\"Thinking\"><a href=\"#Thinking\" class=\"headerlink\" title=\"Thinking\"></a>Thinking</h3><p>想要在每次只能截到浏览器显示区域截图的情况下得到整个页面的截图，有如下两个思路：</p><ol><li>控制浏览器滚动条移动，将所有区域的截图全都获取到，再根据每次截图时滚动条所处的位置信息，将所有截图合并到一起，最终得到全页面的截图。</li><li>把浏览器的窗口大小设置到页面一样大，甚至比页面稍大些，再进行截图，就可以得到全页面的截图。<br>比较而言无疑是思路 2 更为简单高效，而且在 Headless 模式下，浏览器窗口的变化也完全不会有什么影响，故我们选用第二种思路来实现全页面截图。</li></ol><h3 id=\"Coding-2\"><a href=\"#Coding-2\" class=\"headerlink\" title=\"Coding\"></a>Coding</h3><p>这里我们使用. NET 知名开源图片处理组件 ImageProcessor 来进行图片裁剪。</p><blockquote><p>Install-Package ImageProcessor</p></blockquote><p>并非专业前端的我开始觉得 html 标签的尺寸应该就是整个页面的尺寸了，所以有了如下的代码：</p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Image <span class=\"title\">GetElementImage</span>(<span class=\"params\"><span class=\"keyword\">this</span> RemoteWebDriver driver, IWebElement element</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    driver.Manage().Window.Size = driver.FindElementByTagName(<span class=\"string\">\"html\"</span>).Size;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> photoBytes = driver.GetScreenshot().AsByteArray;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> inStream = <span class=\"keyword\">new</span> MemoryStream(photoBytes))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> outStream = <span class=\"keyword\">new</span> MemoryStream())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> imageFactory = <span class=\"keyword\">new</span> ImageFactory(<span class=\"literal\">true</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                imageFactory.Load(inStream)</span><br><span class=\"line\">                    .Crop(<span class=\"keyword\">new</span> Rectangle(element.Location, element.Size))</span><br><span class=\"line\">                    .Save(outStream);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Image.FromStream(outStream);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>但是在测试过程中发现并非如此，具体测试页面为 “Selenium 的维基百科关键词主页”<a href=\"https://en.wikipedia.org/wiki/Selenium_(software\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Selenium_(software</a>)<br>调用代码：</p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pictureBox1.Image =</span><br><span class=\"line\">                chromeDriver.GetElementImage(</span><br><span class=\"line\">                    chromeDriver.FindElementByXPath(<span class=\"string\">@\"//*[@id=\"\"footer-copyrightico\"\"]/a/img\"</span>));</span><br></pre></td></tr></table></figure><p><img src=\"http://qiniucdn.wayneshao.com/20180711213420950/20180711115157926.png\" alt=\"\"></p><p>调用代码中的 XPath 命中的标签为页面底部的维基百科 logo 图片，调试信息可知，该标签的 Y 坐标远大于 Html 标签的 Height ，故 Html 的尺寸应该和页面实际尺寸并不完全吻合。</p><p>居然不对？！<br><img src=\"http://qiniucdn.wayneshao.com/20180711213420950/20180712120904055.png\" alt=\"\"></p><p><a href=\"https://www.zhihu.com/question/20816879\" target=\"_blank\" rel=\"noopener\">查询资料大法：</a></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//页面尺寸</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pageWidth = Math.max(</span><br><span class=\"line\">     document.body.scrollWidth,</span><br><span class=\"line\">     document.documentElement.scrollWidth,</span><br><span class=\"line\">     document.body.offsetWidth, </span><br><span class=\"line\">     document.documentElement.offsetWidth,</span><br><span class=\"line\">     document.documentElement.clientWidth</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pageHeight = Math.max(</span><br><span class=\"line\">     document.body.scrollHeight,</span><br><span class=\"line\">     document.documentElement.scrollHeight,</span><br><span class=\"line\">     document.body.offsetHeight, </span><br><span class=\"line\">     document.documentElement.offsetHeight,</span><br><span class=\"line\">     document.documentElement.clientHeight</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><p>于是我决定改用执行 JS 代码来获取页面实际尺寸：<br>封装 JS 执行方法：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T Execute&lt;T&gt;(<span class=\"keyword\">this</span> IWebDriver driver, <span class=\"keyword\">string</span> script) </span><br><span class=\"line\">            =&gt; (T)((IJavaScriptExecutor)driver).ExecuteScript(script);</span><br></pre></td></tr></table></figure><p></p><p>获取实际尺寸<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> height = driver.Execute&lt;<span class=\"keyword\">long</span>&gt;(<span class=\"string\">\"return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> width = driver.Execute&lt;<span class=\"keyword\">long</span>&gt;(<span class=\"string\">\"return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);\"</span>);</span><br></pre></td></tr></table></figure><p></p><p>使用新思路重新封装方法<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Image <span class=\"title\">GetElementImage</span>(<span class=\"params\"><span class=\"keyword\">this</span> RemoteWebDriver driver, IWebElement element</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//driver.Manage().Window.Size = driver.FindElementByTagName(\"html\").Size;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> height = driver.Execute&lt;<span class=\"keyword\">long</span>&gt;(<span class=\"string\">\"return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = driver.Execute&lt;<span class=\"keyword\">long</span>&gt;(<span class=\"string\">\"return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    driver.Manage().Window.Size = <span class=\"keyword\">new</span> Size((<span class=\"keyword\">int</span>)width + <span class=\"number\">100</span>, (<span class=\"keyword\">int</span>)height + <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> photoBytes = driver.GetScreenshot().AsByteArray;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> inStream = <span class=\"keyword\">new</span> MemoryStream(photoBytes))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> outStream = <span class=\"keyword\">new</span> MemoryStream())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> imageFactory = <span class=\"keyword\">new</span> ImageFactory(<span class=\"literal\">true</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                imageFactory.Load(inStream)</span><br><span class=\"line\">                    .Crop(<span class=\"keyword\">new</span> Rectangle(element.Location, element.Size))</span><br><span class=\"line\">                    .Save(outStream);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Image.FromStream(outStream);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>代码执行结果如下：<br><img src=\"http://qiniucdn.wayneshao.com/20180711213420950/20180712120513778.png\" alt=\"\"></p><p>成功！</p><p><img src=\"http://qiniucdn.wayneshao.com/20180711213420950/20180712120712325.png\" alt=\"\"></p><!-- rebuild by neat -->"},{"title":"【MVC学习笔记】2.使用T4模板生成其他类的具体实现","abbrlink":18563,"date":"2016-09-16T10:35:07.000Z","_content":"在前篇中我们已经将User类中的代码做了具体的实现，但仍然有多个实体类未实现，以后可能还会增加新的数据表，数据表结构也有可能发生变化，所以我们使用T4模板来完成类的生成，这样就算数据库表发生了改变，也会自动根据改变后的实体对类进行重新生成。\n<!-- more -->\n### DAL层\n下面是数据访问层的T4模板文件 Dal.tt\n```csharp\n<#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#>\n<#@ include file=\"EF.Utility.CS.ttinclude\"#><#@\n output extension=\".cs\"#>\n \n<#\n\nCodeGenerationTools code = new CodeGenerationTools(this);\nMetadataLoader loader = new MetadataLoader(this);\nCodeRegion region = new CodeRegion(this, 1);\nMetadataTools ef = new MetadataTools(this);\n\n//EF实体文件在项目中的路径\nstring inputFile = @\"..\\\\PMS.Model\\\\PMS.edmx\";\n\nEdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);\nstring namespaceName = code.VsNamespaceSuggestion();\n\nEntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);\n\n#>\n<#//这里为命名空间部分，手动更改为相应的命名空间 #>\nusing PMS.IDAL;\nusing PMS.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PMS.DAL\n{\n<#\n// Emit Entity Types\n\nforeach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))\n{\n    //fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");\n    //BeginNamespace(namespaceName, code);    \n#>        \n    public partial class <#=entity.Name#>Dal :BaseDal<<#=entity.Name#>>,I<#=entity.Name#>Dal\n    {\n\n    }\n<#}#>\n    \n}\n```\n我们将EF实体文件路径、命名空间更改为对应的值时，**Ctrl+S** 保存，即可生成对应的其他类型的数据访问类\n\n其他层中也大同小异，只需要做对应的更改即可，下面我将提供相应的代码。\n### IDAL层\nIDal.tt\n```csharp\n<#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#>\n<#@ include file=\"EF.Utility.CS.ttinclude\"#><#@\n output extension=\".cs\"#> \n<#\nCodeGenerationTools code = new CodeGenerationTools(this);\nMetadataLoader loader = new MetadataLoader(this);\nCodeRegion region = new CodeRegion(this, 1);\nMetadataTools ef = new MetadataTools(this);\n\nstring inputFile = @\"..\\\\PMS.Model\\\\PMS.edmx\";\n\nEdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);\nstring namespaceName = code.VsNamespaceSuggestion();\n\nEntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);\n\n#>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing PMS.Model;\n\nnamespace PMS.IDAL\n{\n   \n<#\n// Emit Entity Types\n\nforeach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))\n{\n    //fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");\n    //BeginNamespace(namespaceName, code);    \n#>    \n    public partial interface I<#=entity.Name#>Dal :IBaseDal<<#=entity.Name#>>\n    {\n      \n    }\n<#}#>\n    \n}\n```\nIDbSession.tt\n```csharp\n<#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#>\n<#@ include file=\"EF.Utility.CS.ttinclude\"#><#@\n output extension=\".cs\"#>\n \n<#\n\nCodeGenerationTools code = new CodeGenerationTools(this);\nMetadataLoader loader = new MetadataLoader(this);\nCodeRegion region = new CodeRegion(this, 1);\nMetadataTools ef = new MetadataTools(this);\n\nstring inputFile = @\"..\\\\PMS.Model\\\\PMS.edmx\";\n\nEdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);\nstring namespaceName = code.VsNamespaceSuggestion();\n\nEntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);\n\n#>\n\nusing System;\nusing System.Collections.Generic;\nusing System.Data.Entity;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PMS.IDAL\n{\n    public partial interface IDbSession\n    {\n\n<#\n// Emit Entity Types\n\nforeach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))\n{\n    //fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");\n    //BeginNamespace(namespaceName, code);    \n#>    \n        I<#=entity.Name#>Dal <#=entity.Name#>Dal{get;set;}\n<#}#>\n    }    \n}\n```\n### DALFactory层\nSimpleDalFactory.tt\n```csharp\n<#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#>\n<#@ include file=\"EF.Utility.CS.ttinclude\"#><#@\n output extension=\".cs\"#>\n \n<#\n\nCodeGenerationTools code = new CodeGenerationTools(this);\nMetadataLoader loader = new MetadataLoader(this);\nCodeRegion region = new CodeRegion(this, 1);\nMetadataTools ef = new MetadataTools(this);\n\nstring inputFile =@\"..\\\\PMS.Model\\\\PMS.edmx\";\n\nEdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);\nstring namespaceName = code.VsNamespaceSuggestion();\n\nEntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);\n\n#>\n\nusing SW.OA.IDAL;\nusing System;\nusing System.Collections.Generic;\nusing System.Configuration;\nusing System.Linq;\nusing System.Reflection;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace SW.OA.DALFactory\n{\n    public partial class AbstractFactory\n    {\n      \n   \n<#\nforeach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))\n{    \n#>        \n        public static I<#=entity.Name#>Dal Create<#=entity.Name#>Dal()\n        {\n\n         string fullClassName = NameSpace + \".<#=entity.Name#>Dal\";\n          return CreateInstance(fullClassName) as I<#=entity.Name#>Dal;\n\n        }\n<#}#>\n    }\n    \n}\n```\nDbSession.tt\n```csharp\n<#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#>\n<#@ include file=\"EF.Utility.CS.ttinclude\"#><#@\n output extension=\".cs\"#>\n \n<#\n\nCodeGenerationTools code = new CodeGenerationTools(this);\nMetadataLoader loader = new MetadataLoader(this);\nCodeRegion region = new CodeRegion(this, 1);\nMetadataTools ef = new MetadataTools(this);\n\nstring inputFile = @\"..\\\\PMS.Model\\\\PMS.edmx\";\n\nEdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);\nstring namespaceName = code.VsNamespaceSuggestion();\n\nEntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);\n\n#>\nusing PMS.DAL;\nusing PMS.IDAL;\nusing PMS.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Data.Entity;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PMS.DALFactory\n{\n    public partial class DBSession : IDBSession\n    {\n<#\n// Emit Entity Types\n\nforeach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))\n{\n    //fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");\n    //BeginNamespace(namespaceName, code);    \n#>    \n        private I<#=entity.Name#>Dal _<#=entity.Name#>Dal;\n        public I<#=entity.Name#>Dal <#=entity.Name#>Dal\n        {\n            get\n            {\n                if(_<#=entity.Name#>Dal == null)\n                {\n                    _<#=entity.Name#>Dal = AbstractFactory.Create<#=entity.Name#>Dal();\n                }\n                return _<#=entity.Name#>Dal;\n            }\n            set { _<#=entity.Name#>Dal = value; }\n        }\n<#}#>\n    }    \n}\n```\n### BLL层\nService.tt\n```csharp\n<#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#>\n<#@ include file=\"EF.Utility.CS.ttinclude\"#><#@\n output extension=\".cs\"#>\n \n<#\n\nCodeGenerationTools code = new CodeGenerationTools(this);\nMetadataLoader loader = new MetadataLoader(this);\nCodeRegion region = new CodeRegion(this, 1);\nMetadataTools ef = new MetadataTools(this);\n\nstring inputFile = @\"..\\\\PMS.Model\\\\PMS.edmx\";\n\nEdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);\nstring namespaceName = code.VsNamespaceSuggestion();\n\nEntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);\n\n#>\nusing PMS.IBLL;\nusing PMS.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PMS.BLL\n{\n<#\n// Emit Entity Types\n\nforeach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))\n{\n    //fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");\n    //BeginNamespace(namespaceName, code);    \n#>    \n    public partial class <#=entity.Name#>Service :BaseService<<#=entity.Name#>>,I<#=entity.Name#>Service\n    {\n    \n\n         public override void SetCurrentDal()\n        {\n            CurrentDal = this.CurrentDbSession.<#=entity.Name#>Dal;\n        }\n    }   \n<#}#>\n    \n}\n```\n### IBLL层\nIService.tt\n```csharp\n<#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#>\n<#@ include file=\"EF.Utility.CS.ttinclude\"#><#@\n output extension=\".cs\"#>\n \n<#\n\nCodeGenerationTools code = new CodeGenerationTools(this);\nMetadataLoader loader = new MetadataLoader(this);\nCodeRegion region = new CodeRegion(this, 1);\nMetadataTools ef = new MetadataTools(this);\n\nstring inputFile = @\"..\\\\PMS.Model\\\\PMS.edmx\";\n\nEdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);\nstring namespaceName = code.VsNamespaceSuggestion();\n\nEntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);\n\n#>\n\nusing PMS.Model;\nusing PMS.Model.Search;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PMS.IBLL\n{\n<#\n// Emit Entity Types\n\nforeach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))\n{\n    //fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");\n    //BeginNamespace(namespaceName, code);    \n#>    \n    public partial interface I<#=entity.Name#>Service : IBaseService<<#=entity.Name#>>\n    {\n       \n    }   \n<#}#>\n    \n}\n```\n至此，我们完成了基本框架内容的填充。","source":"_posts/【MVC学习笔记】2.使用T4模板生成其他类的具体实现.md","raw":"---\ntitle: 【MVC学习笔记】2.使用T4模板生成其他类的具体实现\ntags:\n  - MVC\nabbrlink: 18563\ndate: 2016-09-16 18:35:07\n---\n在前篇中我们已经将User类中的代码做了具体的实现，但仍然有多个实体类未实现，以后可能还会增加新的数据表，数据表结构也有可能发生变化，所以我们使用T4模板来完成类的生成，这样就算数据库表发生了改变，也会自动根据改变后的实体对类进行重新生成。\n<!-- more -->\n### DAL层\n下面是数据访问层的T4模板文件 Dal.tt\n```csharp\n<#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#>\n<#@ include file=\"EF.Utility.CS.ttinclude\"#><#@\n output extension=\".cs\"#>\n \n<#\n\nCodeGenerationTools code = new CodeGenerationTools(this);\nMetadataLoader loader = new MetadataLoader(this);\nCodeRegion region = new CodeRegion(this, 1);\nMetadataTools ef = new MetadataTools(this);\n\n//EF实体文件在项目中的路径\nstring inputFile = @\"..\\\\PMS.Model\\\\PMS.edmx\";\n\nEdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);\nstring namespaceName = code.VsNamespaceSuggestion();\n\nEntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);\n\n#>\n<#//这里为命名空间部分，手动更改为相应的命名空间 #>\nusing PMS.IDAL;\nusing PMS.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PMS.DAL\n{\n<#\n// Emit Entity Types\n\nforeach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))\n{\n    //fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");\n    //BeginNamespace(namespaceName, code);    \n#>        \n    public partial class <#=entity.Name#>Dal :BaseDal<<#=entity.Name#>>,I<#=entity.Name#>Dal\n    {\n\n    }\n<#}#>\n    \n}\n```\n我们将EF实体文件路径、命名空间更改为对应的值时，**Ctrl+S** 保存，即可生成对应的其他类型的数据访问类\n\n其他层中也大同小异，只需要做对应的更改即可，下面我将提供相应的代码。\n### IDAL层\nIDal.tt\n```csharp\n<#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#>\n<#@ include file=\"EF.Utility.CS.ttinclude\"#><#@\n output extension=\".cs\"#> \n<#\nCodeGenerationTools code = new CodeGenerationTools(this);\nMetadataLoader loader = new MetadataLoader(this);\nCodeRegion region = new CodeRegion(this, 1);\nMetadataTools ef = new MetadataTools(this);\n\nstring inputFile = @\"..\\\\PMS.Model\\\\PMS.edmx\";\n\nEdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);\nstring namespaceName = code.VsNamespaceSuggestion();\n\nEntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);\n\n#>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing PMS.Model;\n\nnamespace PMS.IDAL\n{\n   \n<#\n// Emit Entity Types\n\nforeach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))\n{\n    //fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");\n    //BeginNamespace(namespaceName, code);    \n#>    \n    public partial interface I<#=entity.Name#>Dal :IBaseDal<<#=entity.Name#>>\n    {\n      \n    }\n<#}#>\n    \n}\n```\nIDbSession.tt\n```csharp\n<#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#>\n<#@ include file=\"EF.Utility.CS.ttinclude\"#><#@\n output extension=\".cs\"#>\n \n<#\n\nCodeGenerationTools code = new CodeGenerationTools(this);\nMetadataLoader loader = new MetadataLoader(this);\nCodeRegion region = new CodeRegion(this, 1);\nMetadataTools ef = new MetadataTools(this);\n\nstring inputFile = @\"..\\\\PMS.Model\\\\PMS.edmx\";\n\nEdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);\nstring namespaceName = code.VsNamespaceSuggestion();\n\nEntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);\n\n#>\n\nusing System;\nusing System.Collections.Generic;\nusing System.Data.Entity;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PMS.IDAL\n{\n    public partial interface IDbSession\n    {\n\n<#\n// Emit Entity Types\n\nforeach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))\n{\n    //fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");\n    //BeginNamespace(namespaceName, code);    \n#>    \n        I<#=entity.Name#>Dal <#=entity.Name#>Dal{get;set;}\n<#}#>\n    }    \n}\n```\n### DALFactory层\nSimpleDalFactory.tt\n```csharp\n<#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#>\n<#@ include file=\"EF.Utility.CS.ttinclude\"#><#@\n output extension=\".cs\"#>\n \n<#\n\nCodeGenerationTools code = new CodeGenerationTools(this);\nMetadataLoader loader = new MetadataLoader(this);\nCodeRegion region = new CodeRegion(this, 1);\nMetadataTools ef = new MetadataTools(this);\n\nstring inputFile =@\"..\\\\PMS.Model\\\\PMS.edmx\";\n\nEdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);\nstring namespaceName = code.VsNamespaceSuggestion();\n\nEntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);\n\n#>\n\nusing SW.OA.IDAL;\nusing System;\nusing System.Collections.Generic;\nusing System.Configuration;\nusing System.Linq;\nusing System.Reflection;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace SW.OA.DALFactory\n{\n    public partial class AbstractFactory\n    {\n      \n   \n<#\nforeach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))\n{    \n#>        \n        public static I<#=entity.Name#>Dal Create<#=entity.Name#>Dal()\n        {\n\n         string fullClassName = NameSpace + \".<#=entity.Name#>Dal\";\n          return CreateInstance(fullClassName) as I<#=entity.Name#>Dal;\n\n        }\n<#}#>\n    }\n    \n}\n```\nDbSession.tt\n```csharp\n<#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#>\n<#@ include file=\"EF.Utility.CS.ttinclude\"#><#@\n output extension=\".cs\"#>\n \n<#\n\nCodeGenerationTools code = new CodeGenerationTools(this);\nMetadataLoader loader = new MetadataLoader(this);\nCodeRegion region = new CodeRegion(this, 1);\nMetadataTools ef = new MetadataTools(this);\n\nstring inputFile = @\"..\\\\PMS.Model\\\\PMS.edmx\";\n\nEdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);\nstring namespaceName = code.VsNamespaceSuggestion();\n\nEntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);\n\n#>\nusing PMS.DAL;\nusing PMS.IDAL;\nusing PMS.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Data.Entity;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PMS.DALFactory\n{\n    public partial class DBSession : IDBSession\n    {\n<#\n// Emit Entity Types\n\nforeach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))\n{\n    //fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");\n    //BeginNamespace(namespaceName, code);    \n#>    \n        private I<#=entity.Name#>Dal _<#=entity.Name#>Dal;\n        public I<#=entity.Name#>Dal <#=entity.Name#>Dal\n        {\n            get\n            {\n                if(_<#=entity.Name#>Dal == null)\n                {\n                    _<#=entity.Name#>Dal = AbstractFactory.Create<#=entity.Name#>Dal();\n                }\n                return _<#=entity.Name#>Dal;\n            }\n            set { _<#=entity.Name#>Dal = value; }\n        }\n<#}#>\n    }    \n}\n```\n### BLL层\nService.tt\n```csharp\n<#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#>\n<#@ include file=\"EF.Utility.CS.ttinclude\"#><#@\n output extension=\".cs\"#>\n \n<#\n\nCodeGenerationTools code = new CodeGenerationTools(this);\nMetadataLoader loader = new MetadataLoader(this);\nCodeRegion region = new CodeRegion(this, 1);\nMetadataTools ef = new MetadataTools(this);\n\nstring inputFile = @\"..\\\\PMS.Model\\\\PMS.edmx\";\n\nEdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);\nstring namespaceName = code.VsNamespaceSuggestion();\n\nEntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);\n\n#>\nusing PMS.IBLL;\nusing PMS.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PMS.BLL\n{\n<#\n// Emit Entity Types\n\nforeach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))\n{\n    //fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");\n    //BeginNamespace(namespaceName, code);    \n#>    \n    public partial class <#=entity.Name#>Service :BaseService<<#=entity.Name#>>,I<#=entity.Name#>Service\n    {\n    \n\n         public override void SetCurrentDal()\n        {\n            CurrentDal = this.CurrentDbSession.<#=entity.Name#>Dal;\n        }\n    }   \n<#}#>\n    \n}\n```\n### IBLL层\nIService.tt\n```csharp\n<#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#>\n<#@ include file=\"EF.Utility.CS.ttinclude\"#><#@\n output extension=\".cs\"#>\n \n<#\n\nCodeGenerationTools code = new CodeGenerationTools(this);\nMetadataLoader loader = new MetadataLoader(this);\nCodeRegion region = new CodeRegion(this, 1);\nMetadataTools ef = new MetadataTools(this);\n\nstring inputFile = @\"..\\\\PMS.Model\\\\PMS.edmx\";\n\nEdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);\nstring namespaceName = code.VsNamespaceSuggestion();\n\nEntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);\n\n#>\n\nusing PMS.Model;\nusing PMS.Model.Search;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PMS.IBLL\n{\n<#\n// Emit Entity Types\n\nforeach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))\n{\n    //fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");\n    //BeginNamespace(namespaceName, code);    \n#>    \n    public partial interface I<#=entity.Name#>Service : IBaseService<<#=entity.Name#>>\n    {\n       \n    }   \n<#}#>\n    \n}\n```\n至此，我们完成了基本框架内容的填充。","slug":"【MVC学习笔记】2.使用T4模板生成其他类的具体实现","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24p270073d00oe5g1p38g","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>在前篇中我们已经将User类中的代码做了具体的实现，但仍然有多个实体类未实现，以后可能还会增加新的数据表，数据表结构也有可能发生变化，所以我们使用T4模板来完成类的生成，这样就算数据库表发生了改变，也会自动根据改变后的实体对类进行重新生成。<br><a id=\"more\"></a></p><h3 id=\"DAL层\"><a href=\"#DAL层\" class=\"headerlink\" title=\"DAL层\"></a>DAL层</h3><p>下面是数据访问层的T4模板文件 Dal.tt<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#&gt;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#@ include file=\"EF.Utility.CS.ttinclude\"#&gt;&lt;#@</span></span><br><span class=\"line\"> output extension=<span class=\"string\">\".cs\"</span><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\">CodeGenerationTools code = <span class=\"keyword\">new</span> CodeGenerationTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">MetadataLoader loader = <span class=\"keyword\">new</span> MetadataLoader(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">CodeRegion region = <span class=\"keyword\">new</span> CodeRegion(<span class=\"keyword\">this</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">MetadataTools ef = <span class=\"keyword\">new</span> MetadataTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//EF实体文件在项目中的路径</span></span><br><span class=\"line\"><span class=\"keyword\">string</span> inputFile = <span class=\"string\">@\"..\\\\PMS.Model\\\\PMS.edmx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class=\"line\"><span class=\"keyword\">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class=\"line\"></span><br><span class=\"line\">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#//这里为命名空间部分，手动更改为相应的命名空间 #&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IDAL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.DAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"comment\">// Emit Entity Types</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (EntityType entity <span class=\"keyword\">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");</span></span><br><span class=\"line\">    <span class=\"comment\">//BeginNamespace(namespaceName, code);    </span></span><br><span class=\"line\"><span class=\"meta\">#&gt;        </span></span><br><span class=\"line\">    public partial class &lt;#=entity.Name#&gt;Dal :BaseDal&lt;&lt;#=entity.Name#&gt;&gt;,I&lt;#=entity.Name#&gt;Dal</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;<span class=\"meta\">#&#125;#&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们将EF实体文件路径、命名空间更改为对应的值时，<strong>Ctrl+S</strong> 保存，即可生成对应的其他类型的数据访问类</p><p>其他层中也大同小异，只需要做对应的更改即可，下面我将提供相应的代码。</p><h3 id=\"IDAL层\"><a href=\"#IDAL层\" class=\"headerlink\" title=\"IDAL层\"></a>IDAL层</h3><p>IDal.tt<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#&gt;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#@ include file=\"EF.Utility.CS.ttinclude\"#&gt;&lt;#@</span></span><br><span class=\"line\"> output extension=<span class=\"string\">\".cs\"</span><span class=\"meta\">#&gt; </span></span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\">CodeGenerationTools code = <span class=\"keyword\">new</span> CodeGenerationTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">MetadataLoader loader = <span class=\"keyword\">new</span> MetadataLoader(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">CodeRegion region = <span class=\"keyword\">new</span> CodeRegion(<span class=\"keyword\">this</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">MetadataTools ef = <span class=\"keyword\">new</span> MetadataTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">string</span> inputFile = <span class=\"string\">@\"..\\\\PMS.Model\\\\PMS.edmx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class=\"line\"><span class=\"keyword\">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class=\"line\"></span><br><span class=\"line\">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.IDAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"comment\">// Emit Entity Types</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (EntityType entity <span class=\"keyword\">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");</span></span><br><span class=\"line\">    <span class=\"comment\">//BeginNamespace(namespaceName, code);    </span></span><br><span class=\"line\"><span class=\"meta\">#&gt;    </span></span><br><span class=\"line\">    public partial interface I&lt;#=entity.Name#&gt;Dal :IBaseDal&lt;&lt;#=entity.Name#&gt;&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;<span class=\"meta\">#&#125;#&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>IDbSession.tt<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#&gt;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#@ include file=\"EF.Utility.CS.ttinclude\"#&gt;&lt;#@</span></span><br><span class=\"line\"> output extension=<span class=\"string\">\".cs\"</span><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\">CodeGenerationTools code = <span class=\"keyword\">new</span> CodeGenerationTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">MetadataLoader loader = <span class=\"keyword\">new</span> MetadataLoader(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">CodeRegion region = <span class=\"keyword\">new</span> CodeRegion(<span class=\"keyword\">this</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">MetadataTools ef = <span class=\"keyword\">new</span> MetadataTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">string</span> inputFile = <span class=\"string\">@\"..\\\\PMS.Model\\\\PMS.edmx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class=\"line\"><span class=\"keyword\">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class=\"line\"></span><br><span class=\"line\">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data.Entity;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.IDAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">interface</span> <span class=\"title\">IDbSession</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"comment\">// Emit Entity Types</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (EntityType entity <span class=\"keyword\">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");</span></span><br><span class=\"line\">    <span class=\"comment\">//BeginNamespace(namespaceName, code);    </span></span><br><span class=\"line\"><span class=\"meta\">#&gt;    </span></span><br><span class=\"line\">        I&lt;<span class=\"meta\">#=entity.Name#&gt;Dal &lt;#=entity.Name#&gt;Dal&#123;get;set;&#125;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#&#125;#&gt;</span></span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"DALFactory层\"><a href=\"#DALFactory层\" class=\"headerlink\" title=\"DALFactory层\"></a>DALFactory层</h3><p>SimpleDalFactory.tt<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#&gt;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#@ include file=\"EF.Utility.CS.ttinclude\"#&gt;&lt;#@</span></span><br><span class=\"line\"> output extension=<span class=\"string\">\".cs\"</span><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\">CodeGenerationTools code = <span class=\"keyword\">new</span> CodeGenerationTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">MetadataLoader loader = <span class=\"keyword\">new</span> MetadataLoader(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">CodeRegion region = <span class=\"keyword\">new</span> CodeRegion(<span class=\"keyword\">this</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">MetadataTools ef = <span class=\"keyword\">new</span> MetadataTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">string</span> inputFile =<span class=\"string\">@\"..\\\\PMS.Model\\\\PMS.edmx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class=\"line\"><span class=\"keyword\">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class=\"line\"></span><br><span class=\"line\">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> SW.OA.IDAL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Reflection;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SW.OA.DALFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">   </span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (EntityType entity <span class=\"keyword\">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\"><span class=\"meta\">#&gt;        </span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> I&lt;<span class=\"meta\">#=entity.Name#&gt;Dal Create&lt;#=entity.Name#&gt;Dal()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">string</span> fullClassName = NameSpace + <span class=\"string\">\".&lt;#=entity.Name#&gt;Dal\"</span>;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> CreateInstance(fullClassName) <span class=\"keyword\">as</span> I&lt;<span class=\"meta\">#=entity.Name#&gt;Dal;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&lt;<span class=\"meta\">#&#125;#&gt;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>DbSession.tt<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#&gt;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#@ include file=\"EF.Utility.CS.ttinclude\"#&gt;&lt;#@</span></span><br><span class=\"line\"> output extension=<span class=\"string\">\".cs\"</span><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\">CodeGenerationTools code = <span class=\"keyword\">new</span> CodeGenerationTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">MetadataLoader loader = <span class=\"keyword\">new</span> MetadataLoader(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">CodeRegion region = <span class=\"keyword\">new</span> CodeRegion(<span class=\"keyword\">this</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">MetadataTools ef = <span class=\"keyword\">new</span> MetadataTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">string</span> inputFile = <span class=\"string\">@\"..\\\\PMS.Model\\\\PMS.edmx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class=\"line\"><span class=\"keyword\">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class=\"line\"></span><br><span class=\"line\">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.DAL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IDAL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data.Entity;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.DALFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">DBSession</span> : <span class=\"title\">IDBSession</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"comment\">// Emit Entity Types</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (EntityType entity <span class=\"keyword\">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");</span></span><br><span class=\"line\">    <span class=\"comment\">//BeginNamespace(namespaceName, code);    </span></span><br><span class=\"line\"><span class=\"meta\">#&gt;    </span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> I&lt;<span class=\"meta\">#=entity.Name#&gt;Dal _&lt;#=entity.Name#&gt;Dal;</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> I&lt;<span class=\"meta\">#=entity.Name#&gt;Dal &lt;#=entity.Name#&gt;Dal</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(_&lt;<span class=\"meta\">#=entity.Name#&gt;Dal == null)</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    _&lt;<span class=\"meta\">#=entity.Name#&gt;Dal = AbstractFactory.Create&lt;#=entity.Name#&gt;Dal();</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _&lt;<span class=\"meta\">#=entity.Name#&gt;Dal;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> &#123; _&lt;<span class=\"meta\">#=entity.Name#&gt;Dal = value; &#125;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&lt;<span class=\"meta\">#&#125;#&gt;</span></span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"BLL层\"><a href=\"#BLL层\" class=\"headerlink\" title=\"BLL层\"></a>BLL层</h3><p>Service.tt<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#&gt;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#@ include file=\"EF.Utility.CS.ttinclude\"#&gt;&lt;#@</span></span><br><span class=\"line\"> output extension=<span class=\"string\">\".cs\"</span><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\">CodeGenerationTools code = <span class=\"keyword\">new</span> CodeGenerationTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">MetadataLoader loader = <span class=\"keyword\">new</span> MetadataLoader(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">CodeRegion region = <span class=\"keyword\">new</span> CodeRegion(<span class=\"keyword\">this</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">MetadataTools ef = <span class=\"keyword\">new</span> MetadataTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">string</span> inputFile = <span class=\"string\">@\"..\\\\PMS.Model\\\\PMS.edmx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class=\"line\"><span class=\"keyword\">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class=\"line\"></span><br><span class=\"line\">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IBLL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.BLL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"comment\">// Emit Entity Types</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (EntityType entity <span class=\"keyword\">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");</span></span><br><span class=\"line\">    <span class=\"comment\">//BeginNamespace(namespaceName, code);    </span></span><br><span class=\"line\"><span class=\"meta\">#&gt;    </span></span><br><span class=\"line\">    public partial class &lt;#=entity.Name#&gt;Service :BaseService&lt;&lt;#=entity.Name#&gt;&gt;,I&lt;#=entity.Name#&gt;Service</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">SetCurrentDal</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            CurrentDal = <span class=\"keyword\">this</span>.CurrentDbSession.&lt;<span class=\"meta\">#=entity.Name#&gt;Dal;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&lt;<span class=\"meta\">#&#125;#&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"IBLL层\"><a href=\"#IBLL层\" class=\"headerlink\" title=\"IBLL层\"></a>IBLL层</h3><p>IService.tt<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#&gt;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#@ include file=\"EF.Utility.CS.ttinclude\"#&gt;&lt;#@</span></span><br><span class=\"line\"> output extension=<span class=\"string\">\".cs\"</span><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\">CodeGenerationTools code = <span class=\"keyword\">new</span> CodeGenerationTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">MetadataLoader loader = <span class=\"keyword\">new</span> MetadataLoader(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">CodeRegion region = <span class=\"keyword\">new</span> CodeRegion(<span class=\"keyword\">this</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">MetadataTools ef = <span class=\"keyword\">new</span> MetadataTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">string</span> inputFile = <span class=\"string\">@\"..\\\\PMS.Model\\\\PMS.edmx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class=\"line\"><span class=\"keyword\">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class=\"line\"></span><br><span class=\"line\">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model.Search;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.IBLL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"comment\">// Emit Entity Types</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (EntityType entity <span class=\"keyword\">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");</span></span><br><span class=\"line\">    <span class=\"comment\">//BeginNamespace(namespaceName, code);    </span></span><br><span class=\"line\"><span class=\"meta\">#&gt;    </span></span><br><span class=\"line\">    public partial interface I&lt;#=entity.Name#&gt;Service : IBaseService&lt;&lt;#=entity.Name#&gt;&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&lt;<span class=\"meta\">#&#125;#&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>至此，我们完成了基本框架内容的填充。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>在前篇中我们已经将User类中的代码做了具体的实现，但仍然有多个实体类未实现，以后可能还会增加新的数据表，数据表结构也有可能发生变化，所以我们使用T4模板来完成类的生成，这样就算数据库表发生了改变，也会自动根据改变后的实体对类进行重新生成。<br>","more":"</p><h3 id=\"DAL层\"><a href=\"#DAL层\" class=\"headerlink\" title=\"DAL层\"></a>DAL层</h3><p>下面是数据访问层的T4模板文件 Dal.tt<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#&gt;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#@ include file=\"EF.Utility.CS.ttinclude\"#&gt;&lt;#@</span></span><br><span class=\"line\"> output extension=<span class=\"string\">\".cs\"</span><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\">CodeGenerationTools code = <span class=\"keyword\">new</span> CodeGenerationTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">MetadataLoader loader = <span class=\"keyword\">new</span> MetadataLoader(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">CodeRegion region = <span class=\"keyword\">new</span> CodeRegion(<span class=\"keyword\">this</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">MetadataTools ef = <span class=\"keyword\">new</span> MetadataTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//EF实体文件在项目中的路径</span></span><br><span class=\"line\"><span class=\"keyword\">string</span> inputFile = <span class=\"string\">@\"..\\\\PMS.Model\\\\PMS.edmx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class=\"line\"><span class=\"keyword\">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class=\"line\"></span><br><span class=\"line\">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#//这里为命名空间部分，手动更改为相应的命名空间 #&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IDAL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.DAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"comment\">// Emit Entity Types</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (EntityType entity <span class=\"keyword\">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");</span></span><br><span class=\"line\">    <span class=\"comment\">//BeginNamespace(namespaceName, code);    </span></span><br><span class=\"line\"><span class=\"meta\">#&gt;        </span></span><br><span class=\"line\">    public partial class &lt;#=entity.Name#&gt;Dal :BaseDal&lt;&lt;#=entity.Name#&gt;&gt;,I&lt;#=entity.Name#&gt;Dal</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;<span class=\"meta\">#&#125;#&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们将EF实体文件路径、命名空间更改为对应的值时，<strong>Ctrl+S</strong> 保存，即可生成对应的其他类型的数据访问类</p><p>其他层中也大同小异，只需要做对应的更改即可，下面我将提供相应的代码。</p><h3 id=\"IDAL层\"><a href=\"#IDAL层\" class=\"headerlink\" title=\"IDAL层\"></a>IDAL层</h3><p>IDal.tt<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#&gt;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#@ include file=\"EF.Utility.CS.ttinclude\"#&gt;&lt;#@</span></span><br><span class=\"line\"> output extension=<span class=\"string\">\".cs\"</span><span class=\"meta\">#&gt; </span></span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\">CodeGenerationTools code = <span class=\"keyword\">new</span> CodeGenerationTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">MetadataLoader loader = <span class=\"keyword\">new</span> MetadataLoader(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">CodeRegion region = <span class=\"keyword\">new</span> CodeRegion(<span class=\"keyword\">this</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">MetadataTools ef = <span class=\"keyword\">new</span> MetadataTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">string</span> inputFile = <span class=\"string\">@\"..\\\\PMS.Model\\\\PMS.edmx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class=\"line\"><span class=\"keyword\">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class=\"line\"></span><br><span class=\"line\">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.IDAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"comment\">// Emit Entity Types</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (EntityType entity <span class=\"keyword\">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");</span></span><br><span class=\"line\">    <span class=\"comment\">//BeginNamespace(namespaceName, code);    </span></span><br><span class=\"line\"><span class=\"meta\">#&gt;    </span></span><br><span class=\"line\">    public partial interface I&lt;#=entity.Name#&gt;Dal :IBaseDal&lt;&lt;#=entity.Name#&gt;&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;<span class=\"meta\">#&#125;#&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>IDbSession.tt<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#&gt;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#@ include file=\"EF.Utility.CS.ttinclude\"#&gt;&lt;#@</span></span><br><span class=\"line\"> output extension=<span class=\"string\">\".cs\"</span><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\">CodeGenerationTools code = <span class=\"keyword\">new</span> CodeGenerationTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">MetadataLoader loader = <span class=\"keyword\">new</span> MetadataLoader(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">CodeRegion region = <span class=\"keyword\">new</span> CodeRegion(<span class=\"keyword\">this</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">MetadataTools ef = <span class=\"keyword\">new</span> MetadataTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">string</span> inputFile = <span class=\"string\">@\"..\\\\PMS.Model\\\\PMS.edmx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class=\"line\"><span class=\"keyword\">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class=\"line\"></span><br><span class=\"line\">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data.Entity;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.IDAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">interface</span> <span class=\"title\">IDbSession</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"comment\">// Emit Entity Types</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (EntityType entity <span class=\"keyword\">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");</span></span><br><span class=\"line\">    <span class=\"comment\">//BeginNamespace(namespaceName, code);    </span></span><br><span class=\"line\"><span class=\"meta\">#&gt;    </span></span><br><span class=\"line\">        I&lt;<span class=\"meta\">#=entity.Name#&gt;Dal &lt;#=entity.Name#&gt;Dal&#123;get;set;&#125;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#&#125;#&gt;</span></span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"DALFactory层\"><a href=\"#DALFactory层\" class=\"headerlink\" title=\"DALFactory层\"></a>DALFactory层</h3><p>SimpleDalFactory.tt<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#&gt;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#@ include file=\"EF.Utility.CS.ttinclude\"#&gt;&lt;#@</span></span><br><span class=\"line\"> output extension=<span class=\"string\">\".cs\"</span><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\">CodeGenerationTools code = <span class=\"keyword\">new</span> CodeGenerationTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">MetadataLoader loader = <span class=\"keyword\">new</span> MetadataLoader(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">CodeRegion region = <span class=\"keyword\">new</span> CodeRegion(<span class=\"keyword\">this</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">MetadataTools ef = <span class=\"keyword\">new</span> MetadataTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">string</span> inputFile =<span class=\"string\">@\"..\\\\PMS.Model\\\\PMS.edmx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class=\"line\"><span class=\"keyword\">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class=\"line\"></span><br><span class=\"line\">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> SW.OA.IDAL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Reflection;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SW.OA.DALFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">   </span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (EntityType entity <span class=\"keyword\">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\"><span class=\"meta\">#&gt;        </span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> I&lt;<span class=\"meta\">#=entity.Name#&gt;Dal Create&lt;#=entity.Name#&gt;Dal()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">string</span> fullClassName = NameSpace + <span class=\"string\">\".&lt;#=entity.Name#&gt;Dal\"</span>;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> CreateInstance(fullClassName) <span class=\"keyword\">as</span> I&lt;<span class=\"meta\">#=entity.Name#&gt;Dal;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&lt;<span class=\"meta\">#&#125;#&gt;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>DbSession.tt<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#&gt;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#@ include file=\"EF.Utility.CS.ttinclude\"#&gt;&lt;#@</span></span><br><span class=\"line\"> output extension=<span class=\"string\">\".cs\"</span><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\">CodeGenerationTools code = <span class=\"keyword\">new</span> CodeGenerationTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">MetadataLoader loader = <span class=\"keyword\">new</span> MetadataLoader(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">CodeRegion region = <span class=\"keyword\">new</span> CodeRegion(<span class=\"keyword\">this</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">MetadataTools ef = <span class=\"keyword\">new</span> MetadataTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">string</span> inputFile = <span class=\"string\">@\"..\\\\PMS.Model\\\\PMS.edmx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class=\"line\"><span class=\"keyword\">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class=\"line\"></span><br><span class=\"line\">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.DAL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IDAL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data.Entity;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.DALFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">DBSession</span> : <span class=\"title\">IDBSession</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"comment\">// Emit Entity Types</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (EntityType entity <span class=\"keyword\">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");</span></span><br><span class=\"line\">    <span class=\"comment\">//BeginNamespace(namespaceName, code);    </span></span><br><span class=\"line\"><span class=\"meta\">#&gt;    </span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> I&lt;<span class=\"meta\">#=entity.Name#&gt;Dal _&lt;#=entity.Name#&gt;Dal;</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> I&lt;<span class=\"meta\">#=entity.Name#&gt;Dal &lt;#=entity.Name#&gt;Dal</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(_&lt;<span class=\"meta\">#=entity.Name#&gt;Dal == null)</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    _&lt;<span class=\"meta\">#=entity.Name#&gt;Dal = AbstractFactory.Create&lt;#=entity.Name#&gt;Dal();</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _&lt;<span class=\"meta\">#=entity.Name#&gt;Dal;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> &#123; _&lt;<span class=\"meta\">#=entity.Name#&gt;Dal = value; &#125;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&lt;<span class=\"meta\">#&#125;#&gt;</span></span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"BLL层\"><a href=\"#BLL层\" class=\"headerlink\" title=\"BLL层\"></a>BLL层</h3><p>Service.tt<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#&gt;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#@ include file=\"EF.Utility.CS.ttinclude\"#&gt;&lt;#@</span></span><br><span class=\"line\"> output extension=<span class=\"string\">\".cs\"</span><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\">CodeGenerationTools code = <span class=\"keyword\">new</span> CodeGenerationTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">MetadataLoader loader = <span class=\"keyword\">new</span> MetadataLoader(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">CodeRegion region = <span class=\"keyword\">new</span> CodeRegion(<span class=\"keyword\">this</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">MetadataTools ef = <span class=\"keyword\">new</span> MetadataTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">string</span> inputFile = <span class=\"string\">@\"..\\\\PMS.Model\\\\PMS.edmx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class=\"line\"><span class=\"keyword\">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class=\"line\"></span><br><span class=\"line\">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IBLL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.BLL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"comment\">// Emit Entity Types</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (EntityType entity <span class=\"keyword\">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");</span></span><br><span class=\"line\">    <span class=\"comment\">//BeginNamespace(namespaceName, code);    </span></span><br><span class=\"line\"><span class=\"meta\">#&gt;    </span></span><br><span class=\"line\">    public partial class &lt;#=entity.Name#&gt;Service :BaseService&lt;&lt;#=entity.Name#&gt;&gt;,I&lt;#=entity.Name#&gt;Service</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">SetCurrentDal</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            CurrentDal = <span class=\"keyword\">this</span>.CurrentDbSession.&lt;<span class=\"meta\">#=entity.Name#&gt;Dal;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&lt;<span class=\"meta\">#&#125;#&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"IBLL层\"><a href=\"#IBLL层\" class=\"headerlink\" title=\"IBLL层\"></a>IBLL层</h3><p>IService.tt<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"meta\">#@ template language=\"C#\" debug=\"false\" hostspecific=\"true\"#&gt;</span></span><br><span class=\"line\">&lt;<span class=\"meta\">#@ include file=\"EF.Utility.CS.ttinclude\"#&gt;&lt;#@</span></span><br><span class=\"line\"> output extension=<span class=\"string\">\".cs\"</span><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\">CodeGenerationTools code = <span class=\"keyword\">new</span> CodeGenerationTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">MetadataLoader loader = <span class=\"keyword\">new</span> MetadataLoader(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">CodeRegion region = <span class=\"keyword\">new</span> CodeRegion(<span class=\"keyword\">this</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">MetadataTools ef = <span class=\"keyword\">new</span> MetadataTools(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">string</span> inputFile = <span class=\"string\">@\"..\\\\PMS.Model\\\\PMS.edmx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class=\"line\"><span class=\"keyword\">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class=\"line\"></span><br><span class=\"line\">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model.Search;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.IBLL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&lt;<span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"comment\">// Emit Entity Types</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (EntityType entity <span class=\"keyword\">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//fileManager.StartNewFile(entity.Name + \"RepositoryExt.cs\");</span></span><br><span class=\"line\">    <span class=\"comment\">//BeginNamespace(namespaceName, code);    </span></span><br><span class=\"line\"><span class=\"meta\">#&gt;    </span></span><br><span class=\"line\">    public partial interface I&lt;#=entity.Name#&gt;Service : IBaseService&lt;&lt;#=entity.Name#&gt;&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&lt;<span class=\"meta\">#&#125;#&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>至此，我们完成了基本框架内容的填充。</p><!-- rebuild by neat -->"},{"title":"【MVC学习笔记】1.项目结构搭建及单个类在各个层次中的实现","abbrlink":21959,"date":"2016-09-16T10:14:43.000Z","_content":" 新人刚开始学习ASP.NET MVC，若有不足之处希望能得到您的指点，不胜感激！\n<!-- more -->\n## 层级结构\n先来一张项目的层级结构图:\n![](http://p4au3q1y8.bkt.clouddn.com/20180218213243/20180218093427987.png)\n Model：模型层，主要是各种类型、枚举以及ORM框架，框架完成数据库和实体类的映射。项目中选用了微软的开源ORM框架 EntityFramework 6.0 （以下简称EF），数据库则选择了微软的轻量级数据库SQL Server Compact 4.0本地数据库（简称Compact），Compact对EF支持比较完美，又属于文档型数据库，部署起来比较简洁。\n\n* ***DAL***：**数据访问层**，主要是对数据库的操作层，为业务逻辑层或表示层提供数据服务。\n\n* ***IDAL***：**数据访问接口层**，是数据访问层的接口，降低耦合。\n\n* ***DALFactory***：**数据会话层**，封装了所有数据操作类实例的创建，将数据访问层与业务逻辑层解耦。\n\n* ***BLL***：**业务逻辑层**，主要负责对数据层的操作，把一些数据层的操作进行组合以完成业务的需要。\n\n* ***IBLL***：**业务逻辑接口层**，业务逻辑层的接口，降低耦合。\n\n* ***WebApp***：**表现层**，是一个ASP.NET MVC项目，完成具体网站的实现。\n\n* ***Common***：**通用层**，用来存放一些工具类。\n\n下面是各个层级之间具体的实现，首先创建以 项目名.层级名 命名的各个层次，除WebApp层为ASP.NET MVC项目外，其余均创建为类库项目。\n![](http://p4au3q1y8.bkt.clouddn.com/20180218213243/20180218093803742.png)\n## 各层级搭建\n### 模型层的构建\n先建立模型层，新建ASP.NET 实体数据模型，关联到已经设计好的数据库，EF自动完成模型类的创建。\n![](http://p4au3q1y8.bkt.clouddn.com/20180218213243/20180218093918538.png)\n### 数据访问层的构建\nDAL层中，我们首先需要一个方法来获取单例的EF数据操纵上下文对象，以保证每个用户访问时只有使用一个上下文对象对数据库进行操作。DbContextFactory.cs\n```csharp\nusing System.Data.Entity;\nusing System.Runtime.Remoting.Messaging;\nusing PMS.Model;\n\nnamespace PMS.DAL\n{\n    public class DbContextFactory\n    {\n        /// <summary>\n        /// 负责创建EF数据操作上下文实例,必须保证线程内唯一\n        /// </summary>\n        public static DbContext CreateContext()\n        {\n            DbContext dbContext = (DbContext)CallContext.GetData(\"dbContext\");\n            if (dbContext != null) return dbContext;\n            dbContext = new PMSEntities();\n            CallContext.SetData(\"dbContext\", dbContext);\n            return dbContext;\n        }\n    }\n}\n```\n为User类创建DAL层，实现查询、分页查询、增加、删除和修改这五个基本的方法：UserDAL.cs\n```csharp\nusing System;\nusing System.Data.Entity;\nusing System.Linq;\nusing PMS.IDAL;\n\nnamespace PMS.DAL\n{\n    public partial class UserDal \n\n        {\n        public DbContext DbEntities = DbContextFactory.CreateContext();\n\n        /// <summary>\n        /// 查询过滤\n        /// </summary>\n        /// <param name=\"whereLamada\">过滤条件Lambda表达式</param>\n        /// <returns>实体集合</returns>\n        public IQueryable<UserDal> LoadEntities(System.Linq.Expressions.Expression<Func<UserDal, bool>> whereLamada)\n        {\n            return DbEntities.Set<UserDal>().Where(whereLamada);\n        }\n\n        /// <summary>\n        /// 分页查询\n        /// </summary>\n        /// <typeparam name=\"TS\">排序类型</typeparam>\n        /// <param name=\"pageIndex\">查询的页码</param>\n        /// <param name=\"pageSize\">每页显示的数目</param>\n        /// <param name=\"totalCount\">符合条件的总行数</param>\n        /// <param name=\"whereLambda\">过滤条件Lambda表达式</param>\n        /// <param name=\"orderbyLambda\">排序Lambda表达式</param>\n        /// <param name=\"isAsc\">排序方向</param>\n        /// <returns>实体集合</returns>\n        public IQueryable<UserDal> LoadPageEntities<TS>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<UserDal, bool>> whereLambda, System.Linq.Expressions.Expression<Func<UserDal, TS>> orderbyLambda, bool isAsc)\n        {\n            var temp = DbEntities.Set<UserDal>().Where(whereLambda);\n            totalCount = temp.Count();\n            temp = isAsc ? temp.OrderBy(orderbyLambda).Skip((pageIndex - 1) * pageSize).Take(pageSize) : temp.OrderByDescending(orderbyLambda).Skip((pageIndex - 1) * pageSize).Take(pageSize);\n            return temp;\n        }\n\n        /// <summary>\n        /// 删除数据\n        /// </summary>\n        /// <param name=\"entity\">待删数据</param>\n        /// <returns>删除结果</returns>\n        public bool DeleteEntity(UserDal entity)\n        {\n            DbEntities.Entry(entity).State = EntityState.Deleted;\n            return true;\n        }\n\n        /// <summary>\n        /// 编辑数据\n        /// </summary>\n        /// <param name=\"entity\">待编辑数据</param>\n        /// <returns>编辑结果</returns>\n        public bool EditEntity(UserDal entity)\n        {\n            DbEntities.Entry(entity).State = EntityState.Modified;\n            return true;\n        }\n\n        /// <summary>\n        /// 添加数据\n        /// </summary>\n        /// <param name=\"entity\">待添加数据</param>\n        /// <returns>已添加数据</returns>\n        public UserDal AddEntity(UserDal entity)\n        {\n            entity = DbEntities.Set<UserDal>().Add(entity);\n            return entity;\n        }       \n    }\n}\n```\n**注**：这里的增删改操作并不即时进行，而是在封装在数据会话层中，以实现工作单元模式，提高数据库的操作效率。\n\n考虑到每个类都需要实现相同的数据操作，我们可以将以上方法封装到一个泛型基类中，各类型只需要继承泛型基类就可以实现以上方法：BaseDal.cs\n```csharp\nusing System;\nusing System.Data.Entity;\nusing System.Linq;\n\nnamespace PMS.DAL\n{\n    public class BaseDal<T> where T:class ,new()\n    {\n        public DbContext DbEntities = DbContextFactory.CreateContext();\n\n        /// <summary>\n        /// 查询过滤\n        /// </summary>\n        /// <param name=\"whereLamada\">过滤条件Lambda表达式</param>\n        /// <returns>实体集合</returns>\n        public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLamada)\n        {\n            return DbEntities.Set<T>().Where(whereLamada);\n        }\n\n        /// <summary>\n        /// 分页查询\n        /// </summary>\n        /// <typeparam name=\"TS\">排序类型</typeparam>\n        /// <param name=\"pageIndex\">查询的页码</param>\n        /// <param name=\"pageSize\">每页显示的数目</param>\n        /// <param name=\"totalCount\">符合条件的总行数</param>\n        /// <param name=\"whereLambda\">过滤条件Lambda表达式</param>\n        /// <param name=\"orderbyLambda\">排序Lambda表达式</param>\n        /// <param name=\"isAsc\">排序方向</param>\n        /// <returns>实体集合</returns>\n        public IQueryable<T> LoadPageEntities<TS>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, TS>> orderbyLambda, bool isAsc)\n        {\n            var temp = DbEntities.Set<T>().Where(whereLambda);\n            totalCount = temp.Count();\n            temp = isAsc ? temp.OrderBy(orderbyLambda).Skip((pageIndex - 1) * pageSize).Take(pageSize) : temp.OrderByDescending(orderbyLambda).Skip((pageIndex - 1) * pageSize).Take(pageSize);\n            return temp;\n        }\n\n        /// <summary>\n        /// 删除数据\n        /// </summary>\n        /// <param name=\"entity\">待删数据</param>\n        /// <returns>删除结果</returns>\n        public bool DeleteEntity(T entity)\n        {\n            DbEntities.Entry(entity).State = EntityState.Deleted;\n            return true;\n        }\n\n        /// <summary>\n        /// 编辑数据\n        /// </summary>\n        /// <param name=\"entity\">待编辑数据</param>\n        /// <returns>编辑结果</returns>\n        public bool EditEntity(T entity)\n        {\n            DbEntities.Entry(entity).State = EntityState.Modified;\n            return true;\n        }\n\n        /// <summary>\n        /// 添加数据\n        /// </summary>\n        /// <param name=\"entity\">待添加数据</param>\n        /// <returns>已添加数据</returns>\n        public T AddEntity(T entity)\n        {\n            entity = DbEntities.Set<T>().Add(entity);\n            //DbEntities.SaveChanges();\n            return entity;\n        }\n    }\n}\n```\nUserDal继承BaseDal\n```csharp\nusing PMS.IDAL;\nusing PMS.Model;\n\nnamespace PMS.DAL\n{\n    public partial class UserDal : BaseDal<User>\n    {\n        \n    }\n}\n```\n### 数据访问接口层的构建\n然后我们建立相应的IbaseDal接口和IUserDal接口，并且使UserDal类实现IUserDal接口\nIBaseDal：\n```csharp\nusing System;\nusing System.Linq;\n\nnamespace PMS.IDAL\n{\n    public interface IBaseDal<T> where T:class,new()\n    {\n        IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLamada);\n\n        IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount,\n            System.Linq.Expressions.Expression<Func<T, bool>> whereLambda,\n            System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc);\n\n        bool DeleteEntity(T entity);\n        \n        bool EditEntity(T entity);\n\n        T AddEntity(T entity);\n    }\n}\n```\nIUserDal：\n```csharp\nusing PMS.Model;\n\nnamespace PMS.IDAL\n{\n    public partial interface IUserDal:IBaseDal<User>\n    {\n\n    }\n}\n```\nUserDal实现IUserDal接口：\n```csharp\npublic partial class UserDal : BaseDal<User>,IUserDal\n```\n### 数据会话层的构建\n抽象工厂类AbstractFactory：\n```csharp\nusing System.Configuration;\nusing System.Reflection;\nusing PMS.IDAL;\n\nnamespace PMS.DALFactory\n{\n    public partial class AbstractFactory\n    {\n        //读取保存在配置文件中的程序集名称与命名空间名\n        private static readonly string AssemblyPath = ConfigurationManager.AppSettings[\"AssemblyPath\"];\n        private static readonly string NameSpace = ConfigurationManager.AppSettings[\"NameSpace\"];\n        /// <summary>\n        /// 获取UserDal的实例\n        /// </summary>\n        /// <returns></returns>\n        public static IUserDal CreateUserInfoDal()\n        {\n            var fullClassName = NameSpace + \".UserInfoDal\";\n            return CreateInstance(fullClassName) as IUserDal;\n        }\n        /// <summary>\n        /// 通过反射获得程序集中某类型的实例\n        /// </summary>\n        /// <param name=\"className\"></param>\n        /// <returns></returns>\n        private static object CreateInstance(string className)\n        {\n            var assembly = Assembly.Load(AssemblyPath);\n            return assembly.CreateInstance(className);\n        }\n    }\n}\n```\n数据会话类DbSession：\n```csharp\nusing System.Data.Entity;\nusing PMS.IDAL;\nusing PMS.DAL;\n\nnamespace PMS.DALFactory\n{\n    public partial class DbSession:IDbSession\n    {\n        public DbContext Db\n        {\n            get { return DbContextFactory.CreateContext(); }\n        }\n\n        private IUserDal _userDal;\n        public IUserDal UserDal\n        {\n            get { return _userDal ?? (_userDal = AbstractFactory.CreateUserInfoDal()); }\n            set { _userDal = value; }\n        }\n\n        /// <summary>\n        /// 工作单元模式，统一保存数据\n        /// </summary>\n        /// <returns></returns>\n        public bool SaveChanges()\n        {\n            return Db.SaveChanges() > 0;\n        }\n    }\n}\n```\n### 业务逻辑层的构建\n业务类基类BaseService\n```csharp\nusing System;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing PMS.DALFactory;\nusing PMS.IDAL;\n\nnamespace PMS.BLL\n{\n    public abstract class BaseService<T> where T:class,new()\n    {\n        public IDbSession CurrentDbSession\n       {\n           get\n           {\n               return new DbSession();\n           }\n       }\n       public IBaseDal<T> CurrentDal { get; set; }\n       public abstract void SetCurrentDal();\n       public BaseService()\n       {\n           SetCurrentDal();//子类一定要实现抽象方法，以指明当前类的子类类型。\n       }\n\n       /// <summary>\n       /// 查询过滤\n       /// </summary>\n       /// <param name=\"whereLambda\"></param>\n       /// <returns></returns>\n       public IQueryable<T> LoadEntities(Expression<Func<T, bool>> whereLambda)\n       {\n           return CurrentDal.LoadEntities(whereLambda);\n       }\n\n       /// <summary>\n       /// 分页\n       /// </summary>\n       /// <typeparam name=\"s\"></typeparam>\n       /// <param name=\"pageIndex\"></param>\n       /// <param name=\"pageSize\"></param>\n       /// <param name=\"totalCount\"></param>\n       /// <param name=\"whereLambda\"></param>\n       /// <param name=\"orderbyLambda\"></param>\n       /// <param name=\"isAsc\"></param>\n       /// <returns></returns>\n       public IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, Expression<Func<T, bool>> whereLambda,\n           Expression<Func<T, s>> orderbyLambda, bool isAsc)\n       {\n           return CurrentDal.LoadPageEntities<s>(pageIndex, pageSize, out totalCount, whereLambda, orderbyLambda, isAsc);\n       }\n\n       /// <summary>\n       /// 删除\n       /// </summary>\n       /// <param name=\"entity\"></param>\n       /// <returns></returns>\n       public bool DeleteEntity(T entity)\n       {\n           CurrentDal.DeleteEntity(entity);\n           return CurrentDbSession.SaveChanges();\n       }\n\n       /// <summary>\n       /// 编辑\n       /// </summary>\n       /// <param name=\"entity\"></param>\n       /// <returns></returns>\n       public bool EditEntity(T entity)\n       {\n           CurrentDal.EditEntity(entity);\n           return CurrentDbSession.SaveChanges();\n       }\n\n       /// <summary>\n       /// 添加数据\n       /// </summary>\n       /// <param name=\"entity\"></param>\n       /// <returns></returns>\n       public T AddEntity(T entity)\n       {\n           CurrentDal.AddEntity(entity);\n           CurrentDbSession.SaveChanges();\n           return entity;\n       }\n    }\n}\n```\nUserService类：\n```csharp\nusing PMS.IBLL;\nusing PMS.Model;\n\nnamespace PMS.BLL\n{\n    public partial class UserService : BaseService<User>\n    {\n        public override void SetCurrentDal()\n        {\n            CurrentDal = CurrentDbSession.UserDal;\n        }\n    }\n}\n```\n### 业务逻辑接口层的构建\n直接建立对应的接口并使用UserService类实现IUserService接口\n\nIBaseService接口：\n```csharp\nusing System;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing PMS.IDAL;\n\nnamespace PMS.IBLL\n{\n    public interface IBaseService<T> where T : class,new()\n    {\n        IDbSession CurrentDbSession { get; }\n        IBaseDal<T> CurrentDal { get; set; }\n        void SetCurrentDal();\n        IQueryable<T> LoadEntities(Expression<Func<T, bool>> whereLambda);\n\n        IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount,\n            Expression<Func<T, bool>> whereLambda,\n            Expression<Func<T, s>> orderbyLambda, bool isAsc);\n\n        bool DeleteEntity(T entity);\n        bool EditEntity(T entity);\n        T AddEntity(T entity);\n    }\n}\n```\nIUserService接口:\n```csharp\nusing PMS.Model;\n\nnamespace PMS.IBLL\n{\n    public partial interface IUserService:IBaseService<User>\n    {\n\n    }\n}\n```\n使用UserService类实现IUserService接口:\n```csharp\npublic partial class UserService : BaseService<User>, IUserService\n```\n以上我们就完成了整个框架中关于User类的各层次的实现。","source":"_posts/【MVC学习笔记】1.项目结构搭建及单个类在各个层次中的实现.md","raw":"---\ntitle: 【MVC学习笔记】1.项目结构搭建及单个类在各个层次中的实现\ntags:\n  - MVC\nabbrlink: 21959\ndate: 2016-09-16 18:14:43\n---\n 新人刚开始学习ASP.NET MVC，若有不足之处希望能得到您的指点，不胜感激！\n<!-- more -->\n## 层级结构\n先来一张项目的层级结构图:\n![](http://p4au3q1y8.bkt.clouddn.com/20180218213243/20180218093427987.png)\n Model：模型层，主要是各种类型、枚举以及ORM框架，框架完成数据库和实体类的映射。项目中选用了微软的开源ORM框架 EntityFramework 6.0 （以下简称EF），数据库则选择了微软的轻量级数据库SQL Server Compact 4.0本地数据库（简称Compact），Compact对EF支持比较完美，又属于文档型数据库，部署起来比较简洁。\n\n* ***DAL***：**数据访问层**，主要是对数据库的操作层，为业务逻辑层或表示层提供数据服务。\n\n* ***IDAL***：**数据访问接口层**，是数据访问层的接口，降低耦合。\n\n* ***DALFactory***：**数据会话层**，封装了所有数据操作类实例的创建，将数据访问层与业务逻辑层解耦。\n\n* ***BLL***：**业务逻辑层**，主要负责对数据层的操作，把一些数据层的操作进行组合以完成业务的需要。\n\n* ***IBLL***：**业务逻辑接口层**，业务逻辑层的接口，降低耦合。\n\n* ***WebApp***：**表现层**，是一个ASP.NET MVC项目，完成具体网站的实现。\n\n* ***Common***：**通用层**，用来存放一些工具类。\n\n下面是各个层级之间具体的实现，首先创建以 项目名.层级名 命名的各个层次，除WebApp层为ASP.NET MVC项目外，其余均创建为类库项目。\n![](http://p4au3q1y8.bkt.clouddn.com/20180218213243/20180218093803742.png)\n## 各层级搭建\n### 模型层的构建\n先建立模型层，新建ASP.NET 实体数据模型，关联到已经设计好的数据库，EF自动完成模型类的创建。\n![](http://p4au3q1y8.bkt.clouddn.com/20180218213243/20180218093918538.png)\n### 数据访问层的构建\nDAL层中，我们首先需要一个方法来获取单例的EF数据操纵上下文对象，以保证每个用户访问时只有使用一个上下文对象对数据库进行操作。DbContextFactory.cs\n```csharp\nusing System.Data.Entity;\nusing System.Runtime.Remoting.Messaging;\nusing PMS.Model;\n\nnamespace PMS.DAL\n{\n    public class DbContextFactory\n    {\n        /// <summary>\n        /// 负责创建EF数据操作上下文实例,必须保证线程内唯一\n        /// </summary>\n        public static DbContext CreateContext()\n        {\n            DbContext dbContext = (DbContext)CallContext.GetData(\"dbContext\");\n            if (dbContext != null) return dbContext;\n            dbContext = new PMSEntities();\n            CallContext.SetData(\"dbContext\", dbContext);\n            return dbContext;\n        }\n    }\n}\n```\n为User类创建DAL层，实现查询、分页查询、增加、删除和修改这五个基本的方法：UserDAL.cs\n```csharp\nusing System;\nusing System.Data.Entity;\nusing System.Linq;\nusing PMS.IDAL;\n\nnamespace PMS.DAL\n{\n    public partial class UserDal \n\n        {\n        public DbContext DbEntities = DbContextFactory.CreateContext();\n\n        /// <summary>\n        /// 查询过滤\n        /// </summary>\n        /// <param name=\"whereLamada\">过滤条件Lambda表达式</param>\n        /// <returns>实体集合</returns>\n        public IQueryable<UserDal> LoadEntities(System.Linq.Expressions.Expression<Func<UserDal, bool>> whereLamada)\n        {\n            return DbEntities.Set<UserDal>().Where(whereLamada);\n        }\n\n        /// <summary>\n        /// 分页查询\n        /// </summary>\n        /// <typeparam name=\"TS\">排序类型</typeparam>\n        /// <param name=\"pageIndex\">查询的页码</param>\n        /// <param name=\"pageSize\">每页显示的数目</param>\n        /// <param name=\"totalCount\">符合条件的总行数</param>\n        /// <param name=\"whereLambda\">过滤条件Lambda表达式</param>\n        /// <param name=\"orderbyLambda\">排序Lambda表达式</param>\n        /// <param name=\"isAsc\">排序方向</param>\n        /// <returns>实体集合</returns>\n        public IQueryable<UserDal> LoadPageEntities<TS>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<UserDal, bool>> whereLambda, System.Linq.Expressions.Expression<Func<UserDal, TS>> orderbyLambda, bool isAsc)\n        {\n            var temp = DbEntities.Set<UserDal>().Where(whereLambda);\n            totalCount = temp.Count();\n            temp = isAsc ? temp.OrderBy(orderbyLambda).Skip((pageIndex - 1) * pageSize).Take(pageSize) : temp.OrderByDescending(orderbyLambda).Skip((pageIndex - 1) * pageSize).Take(pageSize);\n            return temp;\n        }\n\n        /// <summary>\n        /// 删除数据\n        /// </summary>\n        /// <param name=\"entity\">待删数据</param>\n        /// <returns>删除结果</returns>\n        public bool DeleteEntity(UserDal entity)\n        {\n            DbEntities.Entry(entity).State = EntityState.Deleted;\n            return true;\n        }\n\n        /// <summary>\n        /// 编辑数据\n        /// </summary>\n        /// <param name=\"entity\">待编辑数据</param>\n        /// <returns>编辑结果</returns>\n        public bool EditEntity(UserDal entity)\n        {\n            DbEntities.Entry(entity).State = EntityState.Modified;\n            return true;\n        }\n\n        /// <summary>\n        /// 添加数据\n        /// </summary>\n        /// <param name=\"entity\">待添加数据</param>\n        /// <returns>已添加数据</returns>\n        public UserDal AddEntity(UserDal entity)\n        {\n            entity = DbEntities.Set<UserDal>().Add(entity);\n            return entity;\n        }       \n    }\n}\n```\n**注**：这里的增删改操作并不即时进行，而是在封装在数据会话层中，以实现工作单元模式，提高数据库的操作效率。\n\n考虑到每个类都需要实现相同的数据操作，我们可以将以上方法封装到一个泛型基类中，各类型只需要继承泛型基类就可以实现以上方法：BaseDal.cs\n```csharp\nusing System;\nusing System.Data.Entity;\nusing System.Linq;\n\nnamespace PMS.DAL\n{\n    public class BaseDal<T> where T:class ,new()\n    {\n        public DbContext DbEntities = DbContextFactory.CreateContext();\n\n        /// <summary>\n        /// 查询过滤\n        /// </summary>\n        /// <param name=\"whereLamada\">过滤条件Lambda表达式</param>\n        /// <returns>实体集合</returns>\n        public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLamada)\n        {\n            return DbEntities.Set<T>().Where(whereLamada);\n        }\n\n        /// <summary>\n        /// 分页查询\n        /// </summary>\n        /// <typeparam name=\"TS\">排序类型</typeparam>\n        /// <param name=\"pageIndex\">查询的页码</param>\n        /// <param name=\"pageSize\">每页显示的数目</param>\n        /// <param name=\"totalCount\">符合条件的总行数</param>\n        /// <param name=\"whereLambda\">过滤条件Lambda表达式</param>\n        /// <param name=\"orderbyLambda\">排序Lambda表达式</param>\n        /// <param name=\"isAsc\">排序方向</param>\n        /// <returns>实体集合</returns>\n        public IQueryable<T> LoadPageEntities<TS>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, TS>> orderbyLambda, bool isAsc)\n        {\n            var temp = DbEntities.Set<T>().Where(whereLambda);\n            totalCount = temp.Count();\n            temp = isAsc ? temp.OrderBy(orderbyLambda).Skip((pageIndex - 1) * pageSize).Take(pageSize) : temp.OrderByDescending(orderbyLambda).Skip((pageIndex - 1) * pageSize).Take(pageSize);\n            return temp;\n        }\n\n        /// <summary>\n        /// 删除数据\n        /// </summary>\n        /// <param name=\"entity\">待删数据</param>\n        /// <returns>删除结果</returns>\n        public bool DeleteEntity(T entity)\n        {\n            DbEntities.Entry(entity).State = EntityState.Deleted;\n            return true;\n        }\n\n        /// <summary>\n        /// 编辑数据\n        /// </summary>\n        /// <param name=\"entity\">待编辑数据</param>\n        /// <returns>编辑结果</returns>\n        public bool EditEntity(T entity)\n        {\n            DbEntities.Entry(entity).State = EntityState.Modified;\n            return true;\n        }\n\n        /// <summary>\n        /// 添加数据\n        /// </summary>\n        /// <param name=\"entity\">待添加数据</param>\n        /// <returns>已添加数据</returns>\n        public T AddEntity(T entity)\n        {\n            entity = DbEntities.Set<T>().Add(entity);\n            //DbEntities.SaveChanges();\n            return entity;\n        }\n    }\n}\n```\nUserDal继承BaseDal\n```csharp\nusing PMS.IDAL;\nusing PMS.Model;\n\nnamespace PMS.DAL\n{\n    public partial class UserDal : BaseDal<User>\n    {\n        \n    }\n}\n```\n### 数据访问接口层的构建\n然后我们建立相应的IbaseDal接口和IUserDal接口，并且使UserDal类实现IUserDal接口\nIBaseDal：\n```csharp\nusing System;\nusing System.Linq;\n\nnamespace PMS.IDAL\n{\n    public interface IBaseDal<T> where T:class,new()\n    {\n        IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLamada);\n\n        IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount,\n            System.Linq.Expressions.Expression<Func<T, bool>> whereLambda,\n            System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc);\n\n        bool DeleteEntity(T entity);\n        \n        bool EditEntity(T entity);\n\n        T AddEntity(T entity);\n    }\n}\n```\nIUserDal：\n```csharp\nusing PMS.Model;\n\nnamespace PMS.IDAL\n{\n    public partial interface IUserDal:IBaseDal<User>\n    {\n\n    }\n}\n```\nUserDal实现IUserDal接口：\n```csharp\npublic partial class UserDal : BaseDal<User>,IUserDal\n```\n### 数据会话层的构建\n抽象工厂类AbstractFactory：\n```csharp\nusing System.Configuration;\nusing System.Reflection;\nusing PMS.IDAL;\n\nnamespace PMS.DALFactory\n{\n    public partial class AbstractFactory\n    {\n        //读取保存在配置文件中的程序集名称与命名空间名\n        private static readonly string AssemblyPath = ConfigurationManager.AppSettings[\"AssemblyPath\"];\n        private static readonly string NameSpace = ConfigurationManager.AppSettings[\"NameSpace\"];\n        /// <summary>\n        /// 获取UserDal的实例\n        /// </summary>\n        /// <returns></returns>\n        public static IUserDal CreateUserInfoDal()\n        {\n            var fullClassName = NameSpace + \".UserInfoDal\";\n            return CreateInstance(fullClassName) as IUserDal;\n        }\n        /// <summary>\n        /// 通过反射获得程序集中某类型的实例\n        /// </summary>\n        /// <param name=\"className\"></param>\n        /// <returns></returns>\n        private static object CreateInstance(string className)\n        {\n            var assembly = Assembly.Load(AssemblyPath);\n            return assembly.CreateInstance(className);\n        }\n    }\n}\n```\n数据会话类DbSession：\n```csharp\nusing System.Data.Entity;\nusing PMS.IDAL;\nusing PMS.DAL;\n\nnamespace PMS.DALFactory\n{\n    public partial class DbSession:IDbSession\n    {\n        public DbContext Db\n        {\n            get { return DbContextFactory.CreateContext(); }\n        }\n\n        private IUserDal _userDal;\n        public IUserDal UserDal\n        {\n            get { return _userDal ?? (_userDal = AbstractFactory.CreateUserInfoDal()); }\n            set { _userDal = value; }\n        }\n\n        /// <summary>\n        /// 工作单元模式，统一保存数据\n        /// </summary>\n        /// <returns></returns>\n        public bool SaveChanges()\n        {\n            return Db.SaveChanges() > 0;\n        }\n    }\n}\n```\n### 业务逻辑层的构建\n业务类基类BaseService\n```csharp\nusing System;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing PMS.DALFactory;\nusing PMS.IDAL;\n\nnamespace PMS.BLL\n{\n    public abstract class BaseService<T> where T:class,new()\n    {\n        public IDbSession CurrentDbSession\n       {\n           get\n           {\n               return new DbSession();\n           }\n       }\n       public IBaseDal<T> CurrentDal { get; set; }\n       public abstract void SetCurrentDal();\n       public BaseService()\n       {\n           SetCurrentDal();//子类一定要实现抽象方法，以指明当前类的子类类型。\n       }\n\n       /// <summary>\n       /// 查询过滤\n       /// </summary>\n       /// <param name=\"whereLambda\"></param>\n       /// <returns></returns>\n       public IQueryable<T> LoadEntities(Expression<Func<T, bool>> whereLambda)\n       {\n           return CurrentDal.LoadEntities(whereLambda);\n       }\n\n       /// <summary>\n       /// 分页\n       /// </summary>\n       /// <typeparam name=\"s\"></typeparam>\n       /// <param name=\"pageIndex\"></param>\n       /// <param name=\"pageSize\"></param>\n       /// <param name=\"totalCount\"></param>\n       /// <param name=\"whereLambda\"></param>\n       /// <param name=\"orderbyLambda\"></param>\n       /// <param name=\"isAsc\"></param>\n       /// <returns></returns>\n       public IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, Expression<Func<T, bool>> whereLambda,\n           Expression<Func<T, s>> orderbyLambda, bool isAsc)\n       {\n           return CurrentDal.LoadPageEntities<s>(pageIndex, pageSize, out totalCount, whereLambda, orderbyLambda, isAsc);\n       }\n\n       /// <summary>\n       /// 删除\n       /// </summary>\n       /// <param name=\"entity\"></param>\n       /// <returns></returns>\n       public bool DeleteEntity(T entity)\n       {\n           CurrentDal.DeleteEntity(entity);\n           return CurrentDbSession.SaveChanges();\n       }\n\n       /// <summary>\n       /// 编辑\n       /// </summary>\n       /// <param name=\"entity\"></param>\n       /// <returns></returns>\n       public bool EditEntity(T entity)\n       {\n           CurrentDal.EditEntity(entity);\n           return CurrentDbSession.SaveChanges();\n       }\n\n       /// <summary>\n       /// 添加数据\n       /// </summary>\n       /// <param name=\"entity\"></param>\n       /// <returns></returns>\n       public T AddEntity(T entity)\n       {\n           CurrentDal.AddEntity(entity);\n           CurrentDbSession.SaveChanges();\n           return entity;\n       }\n    }\n}\n```\nUserService类：\n```csharp\nusing PMS.IBLL;\nusing PMS.Model;\n\nnamespace PMS.BLL\n{\n    public partial class UserService : BaseService<User>\n    {\n        public override void SetCurrentDal()\n        {\n            CurrentDal = CurrentDbSession.UserDal;\n        }\n    }\n}\n```\n### 业务逻辑接口层的构建\n直接建立对应的接口并使用UserService类实现IUserService接口\n\nIBaseService接口：\n```csharp\nusing System;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing PMS.IDAL;\n\nnamespace PMS.IBLL\n{\n    public interface IBaseService<T> where T : class,new()\n    {\n        IDbSession CurrentDbSession { get; }\n        IBaseDal<T> CurrentDal { get; set; }\n        void SetCurrentDal();\n        IQueryable<T> LoadEntities(Expression<Func<T, bool>> whereLambda);\n\n        IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount,\n            Expression<Func<T, bool>> whereLambda,\n            Expression<Func<T, s>> orderbyLambda, bool isAsc);\n\n        bool DeleteEntity(T entity);\n        bool EditEntity(T entity);\n        T AddEntity(T entity);\n    }\n}\n```\nIUserService接口:\n```csharp\nusing PMS.Model;\n\nnamespace PMS.IBLL\n{\n    public partial interface IUserService:IBaseService<User>\n    {\n\n    }\n}\n```\n使用UserService类实现IUserService接口:\n```csharp\npublic partial class UserService : BaseService<User>, IUserService\n```\n以上我们就完成了整个框架中关于User类的各层次的实现。","slug":"【MVC学习笔记】1.项目结构搭建及单个类在各个层次中的实现","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24p2c0075d00o2rfv4b5t","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>新人刚开始学习ASP.NET MVC，若有不足之处希望能得到您的指点，不胜感激！<br><a id=\"more\"></a></p><h2 id=\"层级结构\"><a href=\"#层级结构\" class=\"headerlink\" title=\"层级结构\"></a>层级结构</h2><p>先来一张项目的层级结构图:<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218213243/20180218093427987.png\" alt=\"\"><br>Model：模型层，主要是各种类型、枚举以及ORM框架，框架完成数据库和实体类的映射。项目中选用了微软的开源ORM框架 EntityFramework 6.0 （以下简称EF），数据库则选择了微软的轻量级数据库SQL Server Compact 4.0本地数据库（简称Compact），Compact对EF支持比较完美，又属于文档型数据库，部署起来比较简洁。</p><ul><li><p><strong><em>DAL</em></strong>：<strong>数据访问层</strong>，主要是对数据库的操作层，为业务逻辑层或表示层提供数据服务。</p></li><li><p><strong><em>IDAL</em></strong>：<strong>数据访问接口层</strong>，是数据访问层的接口，降低耦合。</p></li><li><p><strong><em>DALFactory</em></strong>：<strong>数据会话层</strong>，封装了所有数据操作类实例的创建，将数据访问层与业务逻辑层解耦。</p></li><li><p><strong><em>BLL</em></strong>：<strong>业务逻辑层</strong>，主要负责对数据层的操作，把一些数据层的操作进行组合以完成业务的需要。</p></li><li><p><strong><em>IBLL</em></strong>：<strong>业务逻辑接口层</strong>，业务逻辑层的接口，降低耦合。</p></li><li><p><strong><em>WebApp</em></strong>：<strong>表现层</strong>，是一个ASP.NET MVC项目，完成具体网站的实现。</p></li><li><p><strong><em>Common</em></strong>：<strong>通用层</strong>，用来存放一些工具类。</p></li></ul><p>下面是各个层级之间具体的实现，首先创建以 项目名.层级名 命名的各个层次，除WebApp层为ASP.NET MVC项目外，其余均创建为类库项目。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218213243/20180218093803742.png\" alt=\"\"></p><h2 id=\"各层级搭建\"><a href=\"#各层级搭建\" class=\"headerlink\" title=\"各层级搭建\"></a>各层级搭建</h2><h3 id=\"模型层的构建\"><a href=\"#模型层的构建\" class=\"headerlink\" title=\"模型层的构建\"></a>模型层的构建</h3><p>先建立模型层，新建ASP.NET 实体数据模型，关联到已经设计好的数据库，EF自动完成模型类的创建。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218213243/20180218093918538.png\" alt=\"\"></p><h3 id=\"数据访问层的构建\"><a href=\"#数据访问层的构建\" class=\"headerlink\" title=\"数据访问层的构建\"></a>数据访问层的构建</h3><p>DAL层中，我们首先需要一个方法来获取单例的EF数据操纵上下文对象，以保证每个用户访问时只有使用一个上下文对象对数据库进行操作。DbContextFactory.cs<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Data.Entity;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Runtime.Remoting.Messaging;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.DAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DbContextFactory</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 负责创建EF数据操作上下文实例,必须保证线程内唯一</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DbContext <span class=\"title\">CreateContext</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DbContext dbContext = (DbContext)CallContext.GetData(<span class=\"string\">\"dbContext\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dbContext != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> dbContext;</span><br><span class=\"line\">            dbContext = <span class=\"keyword\">new</span> PMSEntities();</span><br><span class=\"line\">            CallContext.SetData(<span class=\"string\">\"dbContext\"</span>, dbContext);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dbContext;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>为User类创建DAL层，实现查询、分页查询、增加、删除和修改这五个基本的方法：UserDAL.cs<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data.Entity;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IDAL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.DAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">UserDal</span> </span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbContext DbEntities = DbContextFactory.CreateContext();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLamada\"&gt;</span>过滤条件Lambda表达式<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>实体集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;UserDal&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;UserDal, <span class=\"keyword\">bool</span>&gt;&gt; whereLamada</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> DbEntities.Set&lt;UserDal&gt;().Where(whereLamada);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 分页查询</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"TS\"&gt;</span>排序类型<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageIndex\"&gt;</span>查询的页码<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageSize\"&gt;</span>每页显示的数目<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"totalCount\"&gt;</span>符合条件的总行数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span>过滤条件Lambda表达式<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"orderbyLambda\"&gt;</span>排序Lambda表达式<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isAsc\"&gt;</span>排序方向<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>实体集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> IQueryable&lt;UserDal&gt; LoadPageEntities&lt;TS&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;UserDal, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;UserDal, TS&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = DbEntities.Set&lt;UserDal&gt;().Where(whereLambda);</span><br><span class=\"line\">            totalCount = temp.Count();</span><br><span class=\"line\">            temp = isAsc ? temp.OrderBy(orderbyLambda).Skip((pageIndex - <span class=\"number\">1</span>) * pageSize).Take(pageSize) : temp.OrderByDescending(orderbyLambda).Skip((pageIndex - <span class=\"number\">1</span>) * pageSize).Take(pageSize);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>待删数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>删除结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">UserDal entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DbEntities.Entry(entity).State = EntityState.Deleted;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 编辑数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>待编辑数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>编辑结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">UserDal entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DbEntities.Entry(entity).State = EntityState.Modified;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>待添加数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>已添加数据<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> UserDal <span class=\"title\">AddEntity</span>(<span class=\"params\">UserDal entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            entity = DbEntities.Set&lt;UserDal&gt;().Add(entity);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">        &#125;       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>注</strong>：这里的增删改操作并不即时进行，而是在封装在数据会话层中，以实现工作单元模式，提高数据库的操作效率。</p><p>考虑到每个类都需要实现相同的数据操作，我们可以将以上方法封装到一个泛型基类中，各类型只需要继承泛型基类就可以实现以上方法：BaseDal.cs<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data.Entity;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.DAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class BaseDal&lt;T&gt; where T:class ,new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbContext DbEntities = DbContextFactory.CreateContext();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLamada\"&gt;</span>过滤条件Lambda表达式<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>实体集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLamada</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> DbEntities.Set&lt;T&gt;().Where(whereLamada);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 分页查询</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"TS\"&gt;</span>排序类型<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageIndex\"&gt;</span>查询的页码<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageSize\"&gt;</span>每页显示的数目<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"totalCount\"&gt;</span>符合条件的总行数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span>过滤条件Lambda表达式<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"orderbyLambda\"&gt;</span>排序Lambda表达式<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isAsc\"&gt;</span>排序方向<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>实体集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> IQueryable&lt;T&gt; LoadPageEntities&lt;TS&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, TS&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = DbEntities.Set&lt;T&gt;().Where(whereLambda);</span><br><span class=\"line\">            totalCount = temp.Count();</span><br><span class=\"line\">            temp = isAsc ? temp.OrderBy(orderbyLambda).Skip((pageIndex - <span class=\"number\">1</span>) * pageSize).Take(pageSize) : temp.OrderByDescending(orderbyLambda).Skip((pageIndex - <span class=\"number\">1</span>) * pageSize).Take(pageSize);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>待删数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>删除结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DbEntities.Entry(entity).State = EntityState.Deleted;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 编辑数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>待编辑数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>编辑结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DbEntities.Entry(entity).State = EntityState.Modified;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>待添加数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>已添加数据<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            entity = DbEntities.Set&lt;T&gt;().Add(entity);</span><br><span class=\"line\">            <span class=\"comment\">//DbEntities.SaveChanges();</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>UserDal继承BaseDal<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> PMS.IDAL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.DAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial class UserDal : BaseDal&lt;User&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"数据访问接口层的构建\"><a href=\"#数据访问接口层的构建\" class=\"headerlink\" title=\"数据访问接口层的构建\"></a>数据访问接口层的构建</h3><p>然后我们建立相应的IbaseDal接口和IUserDal接口，并且使UserDal类实现IUserDal接口<br>IBaseDal：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.IDAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public interface IBaseDal&lt;T&gt; where T:class,new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLamada</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount,</span><br><span class=\"line\">            System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda,</span><br><span class=\"line\">            System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>IUserDal：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.IDAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial interface IUserDal:IBaseDal&lt;User&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>UserDal实现IUserDal接口：<br></p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public partial class UserDal : BaseDal&lt;User&gt;,IUserDal</span><br></pre></td></tr></table></figure><p></p><h3 id=\"数据会话层的构建\"><a href=\"#数据会话层的构建\" class=\"headerlink\" title=\"数据会话层的构建\"></a>数据会话层的构建</h3><p>抽象工厂类AbstractFactory：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Reflection;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IDAL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.DALFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//读取保存在配置文件中的程序集名称与命名空间名</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> AssemblyPath = ConfigurationManager.AppSettings[<span class=\"string\">\"AssemblyPath\"</span>];</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> NameSpace = ConfigurationManager.AppSettings[<span class=\"string\">\"NameSpace\"</span>];</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获取UserDal的实例</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IUserDal <span class=\"title\">CreateUserInfoDal</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> fullClassName = NameSpace + <span class=\"string\">\".UserInfoDal\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> CreateInstance(fullClassName) <span class=\"keyword\">as</span> IUserDal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 通过反射获得程序集中某类型的实例</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"className\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">object</span> <span class=\"title\">CreateInstance</span>(<span class=\"params\"><span class=\"keyword\">string</span> className</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> assembly = Assembly.Load(AssemblyPath);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> assembly.CreateInstance(className);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>数据会话类DbSession：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Data.Entity;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IDAL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.DAL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.DALFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">DbSession</span>:<span class=\"title\">IDbSession</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbContext Db</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> DbContextFactory.CreateContext(); &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> IUserDal _userDal;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> IUserDal UserDal</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _userDal ?? (_userDal = AbstractFactory.CreateUserInfoDal()); &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> &#123; _userDal = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 工作单元模式，统一保存数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"业务逻辑层的构建\"><a href=\"#业务逻辑层的构建\" class=\"headerlink\" title=\"业务逻辑层的构建\"></a>业务逻辑层的构建</h3><p>业务类基类BaseService<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq.Expressions;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.DALFactory;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IDAL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.BLL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public abstract class BaseService&lt;T&gt; where T:class,new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> IDbSession CurrentDbSession</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">get</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DbSession();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> IBaseDal&lt;T&gt; CurrentDal &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">SetCurrentDal</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseService</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           SetCurrentDal();<span class=\"comment\">//子类一定要实现抽象方法，以指明当前类的子类类型。</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> CurrentDal.LoadEntities(whereLambda);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 分页</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"s\"&gt;</span><span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageIndex\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageSize\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"totalCount\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"orderbyLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isAsc\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda,</span><br><span class=\"line\">           Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> CurrentDal.LoadPageEntities&lt;s&gt;(pageIndex, pageSize, <span class=\"keyword\">out</span> totalCount, whereLambda, orderbyLambda, isAsc);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           CurrentDal.DeleteEntity(entity);</span><br><span class=\"line\">           <span class=\"keyword\">return</span> CurrentDbSession.SaveChanges();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 编辑</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           CurrentDal.EditEntity(entity);</span><br><span class=\"line\">           <span class=\"keyword\">return</span> CurrentDbSession.SaveChanges();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           CurrentDal.AddEntity(entity);</span><br><span class=\"line\">           CurrentDbSession.SaveChanges();</span><br><span class=\"line\">           <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>UserService类：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> PMS.IBLL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.BLL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial class UserService : BaseService&lt;User&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">SetCurrentDal</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            CurrentDal = CurrentDbSession.UserDal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"业务逻辑接口层的构建\"><a href=\"#业务逻辑接口层的构建\" class=\"headerlink\" title=\"业务逻辑接口层的构建\"></a>业务逻辑接口层的构建</h3><p>直接建立对应的接口并使用UserService类实现IUserService接口</p><p>IBaseService接口：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq.Expressions;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IDAL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.IBLL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public interface IBaseService&lt;T&gt; where T : class,new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        IDbSession CurrentDbSession &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">        IBaseDal&lt;T&gt; CurrentDal &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SetCurrentDal</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount,</span><br><span class=\"line\">            Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda,</span><br><span class=\"line\">            Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>IUserService接口:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.IBLL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial interface IUserService:IBaseService&lt;User&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用UserService类实现IUserService接口:<br></p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public partial class UserService : BaseService&lt;User&gt;, IUserService</span><br></pre></td></tr></table></figure><p></p><p>以上我们就完成了整个框架中关于User类的各层次的实现。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>新人刚开始学习ASP.NET MVC，若有不足之处希望能得到您的指点，不胜感激！<br>","more":"</p><h2 id=\"层级结构\"><a href=\"#层级结构\" class=\"headerlink\" title=\"层级结构\"></a>层级结构</h2><p>先来一张项目的层级结构图:<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218213243/20180218093427987.png\" alt=\"\"><br>Model：模型层，主要是各种类型、枚举以及ORM框架，框架完成数据库和实体类的映射。项目中选用了微软的开源ORM框架 EntityFramework 6.0 （以下简称EF），数据库则选择了微软的轻量级数据库SQL Server Compact 4.0本地数据库（简称Compact），Compact对EF支持比较完美，又属于文档型数据库，部署起来比较简洁。</p><ul><li><p><strong><em>DAL</em></strong>：<strong>数据访问层</strong>，主要是对数据库的操作层，为业务逻辑层或表示层提供数据服务。</p></li><li><p><strong><em>IDAL</em></strong>：<strong>数据访问接口层</strong>，是数据访问层的接口，降低耦合。</p></li><li><p><strong><em>DALFactory</em></strong>：<strong>数据会话层</strong>，封装了所有数据操作类实例的创建，将数据访问层与业务逻辑层解耦。</p></li><li><p><strong><em>BLL</em></strong>：<strong>业务逻辑层</strong>，主要负责对数据层的操作，把一些数据层的操作进行组合以完成业务的需要。</p></li><li><p><strong><em>IBLL</em></strong>：<strong>业务逻辑接口层</strong>，业务逻辑层的接口，降低耦合。</p></li><li><p><strong><em>WebApp</em></strong>：<strong>表现层</strong>，是一个ASP.NET MVC项目，完成具体网站的实现。</p></li><li><p><strong><em>Common</em></strong>：<strong>通用层</strong>，用来存放一些工具类。</p></li></ul><p>下面是各个层级之间具体的实现，首先创建以 项目名.层级名 命名的各个层次，除WebApp层为ASP.NET MVC项目外，其余均创建为类库项目。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218213243/20180218093803742.png\" alt=\"\"></p><h2 id=\"各层级搭建\"><a href=\"#各层级搭建\" class=\"headerlink\" title=\"各层级搭建\"></a>各层级搭建</h2><h3 id=\"模型层的构建\"><a href=\"#模型层的构建\" class=\"headerlink\" title=\"模型层的构建\"></a>模型层的构建</h3><p>先建立模型层，新建ASP.NET 实体数据模型，关联到已经设计好的数据库，EF自动完成模型类的创建。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218213243/20180218093918538.png\" alt=\"\"></p><h3 id=\"数据访问层的构建\"><a href=\"#数据访问层的构建\" class=\"headerlink\" title=\"数据访问层的构建\"></a>数据访问层的构建</h3><p>DAL层中，我们首先需要一个方法来获取单例的EF数据操纵上下文对象，以保证每个用户访问时只有使用一个上下文对象对数据库进行操作。DbContextFactory.cs<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Data.Entity;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Runtime.Remoting.Messaging;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.DAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DbContextFactory</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 负责创建EF数据操作上下文实例,必须保证线程内唯一</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DbContext <span class=\"title\">CreateContext</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DbContext dbContext = (DbContext)CallContext.GetData(<span class=\"string\">\"dbContext\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dbContext != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> dbContext;</span><br><span class=\"line\">            dbContext = <span class=\"keyword\">new</span> PMSEntities();</span><br><span class=\"line\">            CallContext.SetData(<span class=\"string\">\"dbContext\"</span>, dbContext);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dbContext;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>为User类创建DAL层，实现查询、分页查询、增加、删除和修改这五个基本的方法：UserDAL.cs<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data.Entity;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IDAL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.DAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">UserDal</span> </span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbContext DbEntities = DbContextFactory.CreateContext();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLamada\"&gt;</span>过滤条件Lambda表达式<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>实体集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;UserDal&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;UserDal, <span class=\"keyword\">bool</span>&gt;&gt; whereLamada</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> DbEntities.Set&lt;UserDal&gt;().Where(whereLamada);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 分页查询</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"TS\"&gt;</span>排序类型<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageIndex\"&gt;</span>查询的页码<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageSize\"&gt;</span>每页显示的数目<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"totalCount\"&gt;</span>符合条件的总行数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span>过滤条件Lambda表达式<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"orderbyLambda\"&gt;</span>排序Lambda表达式<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isAsc\"&gt;</span>排序方向<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>实体集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> IQueryable&lt;UserDal&gt; LoadPageEntities&lt;TS&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;UserDal, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;UserDal, TS&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = DbEntities.Set&lt;UserDal&gt;().Where(whereLambda);</span><br><span class=\"line\">            totalCount = temp.Count();</span><br><span class=\"line\">            temp = isAsc ? temp.OrderBy(orderbyLambda).Skip((pageIndex - <span class=\"number\">1</span>) * pageSize).Take(pageSize) : temp.OrderByDescending(orderbyLambda).Skip((pageIndex - <span class=\"number\">1</span>) * pageSize).Take(pageSize);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>待删数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>删除结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">UserDal entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DbEntities.Entry(entity).State = EntityState.Deleted;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 编辑数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>待编辑数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>编辑结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">UserDal entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DbEntities.Entry(entity).State = EntityState.Modified;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>待添加数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>已添加数据<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> UserDal <span class=\"title\">AddEntity</span>(<span class=\"params\">UserDal entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            entity = DbEntities.Set&lt;UserDal&gt;().Add(entity);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">        &#125;       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>注</strong>：这里的增删改操作并不即时进行，而是在封装在数据会话层中，以实现工作单元模式，提高数据库的操作效率。</p><p>考虑到每个类都需要实现相同的数据操作，我们可以将以上方法封装到一个泛型基类中，各类型只需要继承泛型基类就可以实现以上方法：BaseDal.cs<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data.Entity;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.DAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class BaseDal&lt;T&gt; where T:class ,new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbContext DbEntities = DbContextFactory.CreateContext();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLamada\"&gt;</span>过滤条件Lambda表达式<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>实体集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLamada</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> DbEntities.Set&lt;T&gt;().Where(whereLamada);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 分页查询</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"TS\"&gt;</span>排序类型<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageIndex\"&gt;</span>查询的页码<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageSize\"&gt;</span>每页显示的数目<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"totalCount\"&gt;</span>符合条件的总行数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span>过滤条件Lambda表达式<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"orderbyLambda\"&gt;</span>排序Lambda表达式<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isAsc\"&gt;</span>排序方向<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>实体集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> IQueryable&lt;T&gt; LoadPageEntities&lt;TS&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, TS&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = DbEntities.Set&lt;T&gt;().Where(whereLambda);</span><br><span class=\"line\">            totalCount = temp.Count();</span><br><span class=\"line\">            temp = isAsc ? temp.OrderBy(orderbyLambda).Skip((pageIndex - <span class=\"number\">1</span>) * pageSize).Take(pageSize) : temp.OrderByDescending(orderbyLambda).Skip((pageIndex - <span class=\"number\">1</span>) * pageSize).Take(pageSize);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>待删数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>删除结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DbEntities.Entry(entity).State = EntityState.Deleted;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 编辑数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>待编辑数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>编辑结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DbEntities.Entry(entity).State = EntityState.Modified;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>待添加数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>已添加数据<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            entity = DbEntities.Set&lt;T&gt;().Add(entity);</span><br><span class=\"line\">            <span class=\"comment\">//DbEntities.SaveChanges();</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>UserDal继承BaseDal<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> PMS.IDAL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.DAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial class UserDal : BaseDal&lt;User&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"数据访问接口层的构建\"><a href=\"#数据访问接口层的构建\" class=\"headerlink\" title=\"数据访问接口层的构建\"></a>数据访问接口层的构建</h3><p>然后我们建立相应的IbaseDal接口和IUserDal接口，并且使UserDal类实现IUserDal接口<br>IBaseDal：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.IDAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public interface IBaseDal&lt;T&gt; where T:class,new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLamada</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount,</span><br><span class=\"line\">            System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda,</span><br><span class=\"line\">            System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>IUserDal：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.IDAL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial interface IUserDal:IBaseDal&lt;User&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>UserDal实现IUserDal接口：<br></p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public partial class UserDal : BaseDal&lt;User&gt;,IUserDal</span><br></pre></td></tr></table></figure><p></p><h3 id=\"数据会话层的构建\"><a href=\"#数据会话层的构建\" class=\"headerlink\" title=\"数据会话层的构建\"></a>数据会话层的构建</h3><p>抽象工厂类AbstractFactory：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Reflection;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IDAL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.DALFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//读取保存在配置文件中的程序集名称与命名空间名</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> AssemblyPath = ConfigurationManager.AppSettings[<span class=\"string\">\"AssemblyPath\"</span>];</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> NameSpace = ConfigurationManager.AppSettings[<span class=\"string\">\"NameSpace\"</span>];</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获取UserDal的实例</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IUserDal <span class=\"title\">CreateUserInfoDal</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> fullClassName = NameSpace + <span class=\"string\">\".UserInfoDal\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> CreateInstance(fullClassName) <span class=\"keyword\">as</span> IUserDal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 通过反射获得程序集中某类型的实例</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"className\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">object</span> <span class=\"title\">CreateInstance</span>(<span class=\"params\"><span class=\"keyword\">string</span> className</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> assembly = Assembly.Load(AssemblyPath);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> assembly.CreateInstance(className);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>数据会话类DbSession：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Data.Entity;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IDAL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.DAL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.DALFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">DbSession</span>:<span class=\"title\">IDbSession</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbContext Db</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> DbContextFactory.CreateContext(); &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> IUserDal _userDal;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> IUserDal UserDal</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _userDal ?? (_userDal = AbstractFactory.CreateUserInfoDal()); &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> &#123; _userDal = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 工作单元模式，统一保存数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"业务逻辑层的构建\"><a href=\"#业务逻辑层的构建\" class=\"headerlink\" title=\"业务逻辑层的构建\"></a>业务逻辑层的构建</h3><p>业务类基类BaseService<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq.Expressions;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.DALFactory;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IDAL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.BLL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public abstract class BaseService&lt;T&gt; where T:class,new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> IDbSession CurrentDbSession</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">get</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DbSession();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> IBaseDal&lt;T&gt; CurrentDal &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">SetCurrentDal</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseService</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           SetCurrentDal();<span class=\"comment\">//子类一定要实现抽象方法，以指明当前类的子类类型。</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> CurrentDal.LoadEntities(whereLambda);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 分页</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"s\"&gt;</span><span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageIndex\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageSize\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"totalCount\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"orderbyLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isAsc\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda,</span><br><span class=\"line\">           Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> CurrentDal.LoadPageEntities&lt;s&gt;(pageIndex, pageSize, <span class=\"keyword\">out</span> totalCount, whereLambda, orderbyLambda, isAsc);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           CurrentDal.DeleteEntity(entity);</span><br><span class=\"line\">           <span class=\"keyword\">return</span> CurrentDbSession.SaveChanges();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 编辑</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           CurrentDal.EditEntity(entity);</span><br><span class=\"line\">           <span class=\"keyword\">return</span> CurrentDbSession.SaveChanges();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           CurrentDal.AddEntity(entity);</span><br><span class=\"line\">           CurrentDbSession.SaveChanges();</span><br><span class=\"line\">           <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>UserService类：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> PMS.IBLL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.BLL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial class UserService : BaseService&lt;User&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">SetCurrentDal</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            CurrentDal = CurrentDbSession.UserDal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"业务逻辑接口层的构建\"><a href=\"#业务逻辑接口层的构建\" class=\"headerlink\" title=\"业务逻辑接口层的构建\"></a>业务逻辑接口层的构建</h3><p>直接建立对应的接口并使用UserService类实现IUserService接口</p><p>IBaseService接口：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq.Expressions;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.IDAL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.IBLL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public interface IBaseService&lt;T&gt; where T : class,new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        IDbSession CurrentDbSession &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">        IBaseDal&lt;T&gt; CurrentDal &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SetCurrentDal</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount,</span><br><span class=\"line\">            Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda,</span><br><span class=\"line\">            Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>IUserService接口:<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> PMS.Model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.IBLL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial interface IUserService:IBaseService&lt;User&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用UserService类实现IUserService接口:<br></p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public partial class UserService : BaseService&lt;User&gt;, IUserService</span><br></pre></td></tr></table></figure><p></p><p>以上我们就完成了整个框架中关于User类的各层次的实现。</p><!-- rebuild by neat -->"},{"title":"【MVC学习笔记】4.使用Log4Net来进行错误日志的记录","abbrlink":43794,"date":"2016-09-17T01:39:20.000Z","_content":"在Web应用运行过程中，我们难免会遇到程序运行异常，这个时候我们就应该将异常信息记录下来，以便开发人员和维护人员对异常原因进行还原，对异常原因进行修复。在ASP.NET平台中进行日志记录的组件也有很多，如Log4Net、CommonLogging等，我们这里选用Log4Net进行异常日志的记录。\n<!-- more -->\n## 捕获异常\n在ASP.NET MVC中提供了一个全局的异常处理过滤器：HandleErrorAttribute，可以通过该过滤器捕获异常信息。\n\n我们在Models文件夹下新建类型Log4ExceptionAttribute，继承HandleErrorAttribute类，同时重写OnException方法来捕获异常数据：      \n```csharp\nusing System.Web.Mvc;\n\nnamespace PMS.WebApp.Models\n{\n    public class Log4ExceptionAttribute:HandleErrorAttribute\n    {\n        /// <summary>\n        /// 重写OnException方法来捕获异常数据\n        /// </summary>\n        /// <param name=\"filterContext\"></param>\n        public override void OnException(ExceptionContext filterContext)\n        {\n            base.OnException(filterContext);\n            //捕获当前异常数据\n            var ex = filterContext.Exception;\n        }\n    }\n}\n```\n新建过滤器后我们还需要在Global文件中调用的RegisterGlobalFilters方法中完成自己定义异常处理过滤的注册。\n```csharp\nusing System.Web.Mvc;\nusing PMS.WebApp.Models;\n\nnamespace PMS.WebApp\n{\n    public class FilterConfig\n    {\n        public static void RegisterGlobalFilters(GlobalFilterCollection filters)\n        {\n            //filters.Add(new HandleErrorAttribute());\n            filters.Add(new Log4ExceptionAttribute());\n        }\n    }\n}\n```\n## 队列处理\n考虑到多用户并发操作时可能产生的问题，我们需要新建一个队列来进行异常信息的暂存，同时开辟一个线程专门对队列中的异常信息进行处理。\n\n在Log4ExceptionAttribute类中新建一个静态的异常类型的队列，在发生异常后，程序自动触发OnException方法，方法中将当前的异常信息入队后，跳转到错误页面。\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Web.Mvc;\n\nnamespace PMS.WebApp.Models\n{\n    public class Log4ExceptionAttribute:HandleErrorAttribute\n    {\n        public static Queue<Exception> Exceptions=new Queue<Exception>();\n        /// <summary>\n        /// 重写OnException方法来捕获异常数据\n        /// </summary>\n        /// <param name=\"filterContext\"></param>\n        public override void OnException(ExceptionContext filterContext)\n        {\n            base.OnException(filterContext);\n            //捕获当前异常数据\n            var ex = filterContext.Exception;\n            //将异常数据入队\n            Exceptions.Enqueue(ex);\n            //跳转到错误页面\n            filterContext.HttpContext.Response.Redirect(\"/Error.html\");\n        }\n    }\n}\n```\nLog4Net的配置是在应用程序配置文件中进行的，我们先在配置文件中进行Log4Net的配置。Log4Net需要配置的节点位置和SpringNet完全相同，首先需要在configSessions中新增子节点,然后在configuration节点中增加log4net节点完成具体配置。\n```xml\n<configuration>\n  <configSections>\n    <section name=\"entityFramework\" type=\"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" requirePermission=\"false\" />\n    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->\n    \n    <!--↓Log4Net配置↓-->\n    <section name=\"log4net\" type=\"log4net.Config.Log4NetConfigurationSectionHandler, log4net\"/>\n    <!--↑Log4Net配置↑-->\n    \n    <!--↓Spring.Net配置↓-->\n    <sectionGroup name=\"spring\">\n      <section name=\"context\" type=\"Spring.Context.Support.MvcContextHandler, Spring.Web.Mvc4\"/>\n    </sectionGroup>\n    <!--↑Spring.Net配置↑-->\n    \n  </configSections>\n  \n  <!--↓Spring.Net配置↓-->\n  <spring>\n    <context>\n      <resource uri=\"file://~/Config/controllers.xml\"/>\n      <resource uri=\"file://~/Config/services.xml\"/>\n    </context>\n  </spring>\n  <!--↑Spring.Net配置↑-->\n  \n  <!--↓Log4Net配置↓-->\n  <log4net>\n    <!-- OFF, FATAL, ERROR, WARN, INFO, DEBUG, ALL -->\n    <!-- Set root logger level to ERROR and its appenders -->\n    <root>\n      <level value=\"ALL\"/>\n      <appender-ref ref=\"SysAppender\"/>\n    </root>\n\n    <!-- Print only messages of level DEBUG or above in the packages -->\n    <logger name=\"WebLogger\">\n      <level value=\"DEBUG\"/>\n    </logger>\n\n    <appender name=\"SysAppender\" type=\"log4net.Appender.RollingFileAppender,log4net\" >\n      <param name=\"File\" value=\"App_Data/\" />\n      <param name=\"AppendToFile\" value=\"true\" />\n      <param name=\"RollingStyle\" value=\"Date\" />\n      <param name=\"DatePattern\" value=\"&quot;Logs_&quot;yyyyMMdd&quot;.txt&quot;\" />\n      <param name=\"StaticLogFileName\" value=\"false\" />\n      <layout type=\"log4net.Layout.PatternLayout,log4net\">\n        <param name=\"ConversionPattern\" value=\"%d [%t] %-5p %c - %m%n\" />\n        <param name=\"Header\" value=\"&#13;&#10;----------------------header--------------------------&#13;&#10;\" />\n        <param name=\"Footer\" value=\"&#13;&#10;----------------------footer--------------------------&#13;&#10;\" />\n      </layout>\n    </appender>\n    <appender name=\"consoleApp\" type=\"log4net.Appender.ConsoleAppender,log4net\">\n      <layout type=\"log4net.Layout.PatternLayout,log4net\">\n        <param name=\"ConversionPattern\" value=\"%d [%t] %-5p %c - %m%n\" />\n      </layout>\n    </appender>\n  </log4net>\n  <!--↑Log4Net配置↑-->\n  ...\n</configuration>\n```\n## 进阶配置\n在配置文件中可以对日志记录的信息、格式、文件名等作出具体的配置，下面是配置信息的详解\n```xml\n<?xml version=\"1.0\"?>\n<configuration>\n  <configSections>\n    <section name=\"log4net\" \n             type=\"log4net.Config.Log4NetConfigurationSectionHandler,log4net\"/>\n  </configSections>\n  <!--站点日志配置部分-->\n  <log4net>\n    <root>\n      <!--控制级别，由低到高: ALL|DEBUG|INFO|WARN|ERROR|FATAL|OFF-->\n      <!--比如定义级别为INFO，则INFO级别向下的级别，比如DEBUG日志将不会被记录-->\n      <!--如果没有定义LEVEL的值，则缺省为DEBUG-->\n      <level value=\"ERROR\"/>\n      <appender-ref ref=\"RollingFileAppender\"/>\n    </root>\n    <appender name=\"RollingFileAppender\" type=\"log4net.Appender.RollingFileAppender\">\n      <!--日志文件名开头-->\n      <file value=\"c:\\Log\\TestLog4net.TXT\"/>\n      <!--多线程时采用最小锁定-->\n      <lockingModel type=\"log4net.Appender.FileAppender+MinimalLock\"/>\n      <!--日期的格式，每天换一个文件记录，如不设置则永远只记录一天的日志，需设置-->\n      <datePattern value=\"(yyyyMMdd)\"/>\n      <!--是否追加到文件,默认为true，通常无需设置-->\n      <appendToFile value=\"true\"/>\n      <!--变换的形式为日期，这种情况下每天只有一个日志-->\n      <!--此时MaxSizeRollBackups和maximumFileSize的节点设置没有意义-->\n      <!--<rollingStyle value=\"Date\"/>-->\n      <!--变换的形式为日志大小-->\n      <!--这种情况下MaxSizeRollBackups和maximumFileSize的节点设置才有意义-->\n      <RollingStyle value=\"Size\"/>\n      <!--每天记录的日志文件个数，与maximumFileSize配合使用-->\n      <MaxSizeRollBackups value=\"10\"/>\n      <!--每个日志文件的最大大小-->\n      <!--可用的单位:KB|MB|GB-->\n      <!--不要使用小数,否则会一直写入当前日志-->\n      <maximumFileSize value=\"2MB\"/>\n      <!--日志格式-->\n      <layout type=\"log4net.Layout.PatternLayout\">\n        <conversionPattern value=\"%date [%t]%-5p %c - %m%n\"/>\n      </layout>\n    </appender>\n  </log4net>\n</configuration>\n```\n在Global文件中的Application_Start方法中开启一个线程，用于将队列中的错误信息写入日志文件。\n```csharp\nusing System.Linq;\nusing System.Threading;\nusing System.Web.Http;\nusing System.Web.Mvc;\nusing System.Web.Optimization;\nusing System.Web.Routing;\nusing log4net;\nusing PMS.WebApp.Models;\nusing Spring.Web.Mvc;\n\nnamespace PMS.WebApp\n{\n    // 注意: 有关启用 IIS6 或 IIS7 经典模式的说明，\n    // 请访问 http://go.microsoft.com/?LinkId=9394801\n\n    public class MvcApplication : SpringMvcApplication//HttpApplication\n    {\n        protected void Application_Start()\n        {\n            log4net.Config.XmlConfigurator.Configure();//读取Log4Net配置信息\n            AreaRegistration.RegisterAllAreas();\n\n            WebApiConfig.Register(GlobalConfiguration.Configuration);\n            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);\n            RouteConfig.RegisterRoutes(RouteTable.Routes);\n            BundleConfig.RegisterBundles(BundleTable.Bundles);\n\n            //开启一个线程,扫描异常信息队列.\n            var filePath = Server.MapPath(\"/Log/\");\n            ThreadPool.QueueUserWorkItem((a) =>\n            {\n                while (true)\n                {\n                    //判断队列中是否有数据\n                    if (Log4ExceptionAttribute.Exceptions.Any())\n                    {\n                        //出队一条异常信息\n                        var ex = Log4ExceptionAttribute.Exceptions.Dequeue();\n                        //若异常信息不为空\n                        if (ex == null) continue;\n                        //将异常信息写入到日志文件中\n                        var logger = LogManager.GetLogger(\"errorMsg\");\n                        logger.Error(ex.ToString());\n                    }\n                    else\n                    {\n                        //若异常信息队列为空，则线程休息三秒\n                        Thread.Sleep(3000);\n                    }\n                }\n            }, filePath);\n        }\n    }\n}\n```\n成功完成错误日志的配置。 ","source":"_posts/【MVC学习笔记】4.使用Log4Net来进行错误日志的记录.md","raw":"---\ntitle: 【MVC学习笔记】4.使用Log4Net来进行错误日志的记录\ntags:\n  - MVC\n  - Log4Net\nabbrlink: 43794\ndate: 2016-09-17 09:39:20\n---\n在Web应用运行过程中，我们难免会遇到程序运行异常，这个时候我们就应该将异常信息记录下来，以便开发人员和维护人员对异常原因进行还原，对异常原因进行修复。在ASP.NET平台中进行日志记录的组件也有很多，如Log4Net、CommonLogging等，我们这里选用Log4Net进行异常日志的记录。\n<!-- more -->\n## 捕获异常\n在ASP.NET MVC中提供了一个全局的异常处理过滤器：HandleErrorAttribute，可以通过该过滤器捕获异常信息。\n\n我们在Models文件夹下新建类型Log4ExceptionAttribute，继承HandleErrorAttribute类，同时重写OnException方法来捕获异常数据：      \n```csharp\nusing System.Web.Mvc;\n\nnamespace PMS.WebApp.Models\n{\n    public class Log4ExceptionAttribute:HandleErrorAttribute\n    {\n        /// <summary>\n        /// 重写OnException方法来捕获异常数据\n        /// </summary>\n        /// <param name=\"filterContext\"></param>\n        public override void OnException(ExceptionContext filterContext)\n        {\n            base.OnException(filterContext);\n            //捕获当前异常数据\n            var ex = filterContext.Exception;\n        }\n    }\n}\n```\n新建过滤器后我们还需要在Global文件中调用的RegisterGlobalFilters方法中完成自己定义异常处理过滤的注册。\n```csharp\nusing System.Web.Mvc;\nusing PMS.WebApp.Models;\n\nnamespace PMS.WebApp\n{\n    public class FilterConfig\n    {\n        public static void RegisterGlobalFilters(GlobalFilterCollection filters)\n        {\n            //filters.Add(new HandleErrorAttribute());\n            filters.Add(new Log4ExceptionAttribute());\n        }\n    }\n}\n```\n## 队列处理\n考虑到多用户并发操作时可能产生的问题，我们需要新建一个队列来进行异常信息的暂存，同时开辟一个线程专门对队列中的异常信息进行处理。\n\n在Log4ExceptionAttribute类中新建一个静态的异常类型的队列，在发生异常后，程序自动触发OnException方法，方法中将当前的异常信息入队后，跳转到错误页面。\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Web.Mvc;\n\nnamespace PMS.WebApp.Models\n{\n    public class Log4ExceptionAttribute:HandleErrorAttribute\n    {\n        public static Queue<Exception> Exceptions=new Queue<Exception>();\n        /// <summary>\n        /// 重写OnException方法来捕获异常数据\n        /// </summary>\n        /// <param name=\"filterContext\"></param>\n        public override void OnException(ExceptionContext filterContext)\n        {\n            base.OnException(filterContext);\n            //捕获当前异常数据\n            var ex = filterContext.Exception;\n            //将异常数据入队\n            Exceptions.Enqueue(ex);\n            //跳转到错误页面\n            filterContext.HttpContext.Response.Redirect(\"/Error.html\");\n        }\n    }\n}\n```\nLog4Net的配置是在应用程序配置文件中进行的，我们先在配置文件中进行Log4Net的配置。Log4Net需要配置的节点位置和SpringNet完全相同，首先需要在configSessions中新增子节点,然后在configuration节点中增加log4net节点完成具体配置。\n```xml\n<configuration>\n  <configSections>\n    <section name=\"entityFramework\" type=\"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" requirePermission=\"false\" />\n    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->\n    \n    <!--↓Log4Net配置↓-->\n    <section name=\"log4net\" type=\"log4net.Config.Log4NetConfigurationSectionHandler, log4net\"/>\n    <!--↑Log4Net配置↑-->\n    \n    <!--↓Spring.Net配置↓-->\n    <sectionGroup name=\"spring\">\n      <section name=\"context\" type=\"Spring.Context.Support.MvcContextHandler, Spring.Web.Mvc4\"/>\n    </sectionGroup>\n    <!--↑Spring.Net配置↑-->\n    \n  </configSections>\n  \n  <!--↓Spring.Net配置↓-->\n  <spring>\n    <context>\n      <resource uri=\"file://~/Config/controllers.xml\"/>\n      <resource uri=\"file://~/Config/services.xml\"/>\n    </context>\n  </spring>\n  <!--↑Spring.Net配置↑-->\n  \n  <!--↓Log4Net配置↓-->\n  <log4net>\n    <!-- OFF, FATAL, ERROR, WARN, INFO, DEBUG, ALL -->\n    <!-- Set root logger level to ERROR and its appenders -->\n    <root>\n      <level value=\"ALL\"/>\n      <appender-ref ref=\"SysAppender\"/>\n    </root>\n\n    <!-- Print only messages of level DEBUG or above in the packages -->\n    <logger name=\"WebLogger\">\n      <level value=\"DEBUG\"/>\n    </logger>\n\n    <appender name=\"SysAppender\" type=\"log4net.Appender.RollingFileAppender,log4net\" >\n      <param name=\"File\" value=\"App_Data/\" />\n      <param name=\"AppendToFile\" value=\"true\" />\n      <param name=\"RollingStyle\" value=\"Date\" />\n      <param name=\"DatePattern\" value=\"&quot;Logs_&quot;yyyyMMdd&quot;.txt&quot;\" />\n      <param name=\"StaticLogFileName\" value=\"false\" />\n      <layout type=\"log4net.Layout.PatternLayout,log4net\">\n        <param name=\"ConversionPattern\" value=\"%d [%t] %-5p %c - %m%n\" />\n        <param name=\"Header\" value=\"&#13;&#10;----------------------header--------------------------&#13;&#10;\" />\n        <param name=\"Footer\" value=\"&#13;&#10;----------------------footer--------------------------&#13;&#10;\" />\n      </layout>\n    </appender>\n    <appender name=\"consoleApp\" type=\"log4net.Appender.ConsoleAppender,log4net\">\n      <layout type=\"log4net.Layout.PatternLayout,log4net\">\n        <param name=\"ConversionPattern\" value=\"%d [%t] %-5p %c - %m%n\" />\n      </layout>\n    </appender>\n  </log4net>\n  <!--↑Log4Net配置↑-->\n  ...\n</configuration>\n```\n## 进阶配置\n在配置文件中可以对日志记录的信息、格式、文件名等作出具体的配置，下面是配置信息的详解\n```xml\n<?xml version=\"1.0\"?>\n<configuration>\n  <configSections>\n    <section name=\"log4net\" \n             type=\"log4net.Config.Log4NetConfigurationSectionHandler,log4net\"/>\n  </configSections>\n  <!--站点日志配置部分-->\n  <log4net>\n    <root>\n      <!--控制级别，由低到高: ALL|DEBUG|INFO|WARN|ERROR|FATAL|OFF-->\n      <!--比如定义级别为INFO，则INFO级别向下的级别，比如DEBUG日志将不会被记录-->\n      <!--如果没有定义LEVEL的值，则缺省为DEBUG-->\n      <level value=\"ERROR\"/>\n      <appender-ref ref=\"RollingFileAppender\"/>\n    </root>\n    <appender name=\"RollingFileAppender\" type=\"log4net.Appender.RollingFileAppender\">\n      <!--日志文件名开头-->\n      <file value=\"c:\\Log\\TestLog4net.TXT\"/>\n      <!--多线程时采用最小锁定-->\n      <lockingModel type=\"log4net.Appender.FileAppender+MinimalLock\"/>\n      <!--日期的格式，每天换一个文件记录，如不设置则永远只记录一天的日志，需设置-->\n      <datePattern value=\"(yyyyMMdd)\"/>\n      <!--是否追加到文件,默认为true，通常无需设置-->\n      <appendToFile value=\"true\"/>\n      <!--变换的形式为日期，这种情况下每天只有一个日志-->\n      <!--此时MaxSizeRollBackups和maximumFileSize的节点设置没有意义-->\n      <!--<rollingStyle value=\"Date\"/>-->\n      <!--变换的形式为日志大小-->\n      <!--这种情况下MaxSizeRollBackups和maximumFileSize的节点设置才有意义-->\n      <RollingStyle value=\"Size\"/>\n      <!--每天记录的日志文件个数，与maximumFileSize配合使用-->\n      <MaxSizeRollBackups value=\"10\"/>\n      <!--每个日志文件的最大大小-->\n      <!--可用的单位:KB|MB|GB-->\n      <!--不要使用小数,否则会一直写入当前日志-->\n      <maximumFileSize value=\"2MB\"/>\n      <!--日志格式-->\n      <layout type=\"log4net.Layout.PatternLayout\">\n        <conversionPattern value=\"%date [%t]%-5p %c - %m%n\"/>\n      </layout>\n    </appender>\n  </log4net>\n</configuration>\n```\n在Global文件中的Application_Start方法中开启一个线程，用于将队列中的错误信息写入日志文件。\n```csharp\nusing System.Linq;\nusing System.Threading;\nusing System.Web.Http;\nusing System.Web.Mvc;\nusing System.Web.Optimization;\nusing System.Web.Routing;\nusing log4net;\nusing PMS.WebApp.Models;\nusing Spring.Web.Mvc;\n\nnamespace PMS.WebApp\n{\n    // 注意: 有关启用 IIS6 或 IIS7 经典模式的说明，\n    // 请访问 http://go.microsoft.com/?LinkId=9394801\n\n    public class MvcApplication : SpringMvcApplication//HttpApplication\n    {\n        protected void Application_Start()\n        {\n            log4net.Config.XmlConfigurator.Configure();//读取Log4Net配置信息\n            AreaRegistration.RegisterAllAreas();\n\n            WebApiConfig.Register(GlobalConfiguration.Configuration);\n            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);\n            RouteConfig.RegisterRoutes(RouteTable.Routes);\n            BundleConfig.RegisterBundles(BundleTable.Bundles);\n\n            //开启一个线程,扫描异常信息队列.\n            var filePath = Server.MapPath(\"/Log/\");\n            ThreadPool.QueueUserWorkItem((a) =>\n            {\n                while (true)\n                {\n                    //判断队列中是否有数据\n                    if (Log4ExceptionAttribute.Exceptions.Any())\n                    {\n                        //出队一条异常信息\n                        var ex = Log4ExceptionAttribute.Exceptions.Dequeue();\n                        //若异常信息不为空\n                        if (ex == null) continue;\n                        //将异常信息写入到日志文件中\n                        var logger = LogManager.GetLogger(\"errorMsg\");\n                        logger.Error(ex.ToString());\n                    }\n                    else\n                    {\n                        //若异常信息队列为空，则线程休息三秒\n                        Thread.Sleep(3000);\n                    }\n                }\n            }, filePath);\n        }\n    }\n}\n```\n成功完成错误日志的配置。 ","slug":"【MVC学习笔记】4.使用Log4Net来进行错误日志的记录","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24p2e0077d00o01pp3g1v","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>在Web应用运行过程中，我们难免会遇到程序运行异常，这个时候我们就应该将异常信息记录下来，以便开发人员和维护人员对异常原因进行还原，对异常原因进行修复。在ASP.NET平台中进行日志记录的组件也有很多，如Log4Net、CommonLogging等，我们这里选用Log4Net进行异常日志的记录。<br><a id=\"more\"></a></p><h2 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h2><p>在ASP.NET MVC中提供了一个全局的异常处理过滤器：HandleErrorAttribute，可以通过该过滤器捕获异常信息。</p><p>我们在Models文件夹下新建类型Log4ExceptionAttribute，继承HandleErrorAttribute类，同时重写OnException方法来捕获异常数据：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp.Models</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Log4ExceptionAttribute</span>:<span class=\"title\">HandleErrorAttribute</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 重写OnException方法来捕获异常数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filterContext\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnException</span>(<span class=\"params\">ExceptionContext filterContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.OnException(filterContext);</span><br><span class=\"line\">            <span class=\"comment\">//捕获当前异常数据</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> ex = filterContext.Exception;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>新建过滤器后我们还需要在Global文件中调用的RegisterGlobalFilters方法中完成自己定义异常处理过滤的注册。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.WebApp.Models;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FilterConfig</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">RegisterGlobalFilters</span>(<span class=\"params\">GlobalFilterCollection filters</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//filters.Add(new HandleErrorAttribute());</span></span><br><span class=\"line\">            filters.Add(<span class=\"keyword\">new</span> Log4ExceptionAttribute());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"队列处理\"><a href=\"#队列处理\" class=\"headerlink\" title=\"队列处理\"></a>队列处理</h2><p>考虑到多用户并发操作时可能产生的问题，我们需要新建一个队列来进行异常信息的暂存，同时开辟一个线程专门对队列中的异常信息进行处理。</p><p>在Log4ExceptionAttribute类中新建一个静态的异常类型的队列，在发生异常后，程序自动触发OnException方法，方法中将当前的异常信息入队后，跳转到错误页面。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp.Models</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Log4ExceptionAttribute</span>:<span class=\"title\">HandleErrorAttribute</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Queue&lt;Exception&gt; Exceptions=<span class=\"keyword\">new</span> Queue&lt;Exception&gt;();</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 重写OnException方法来捕获异常数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filterContext\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnException</span>(<span class=\"params\">ExceptionContext filterContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.OnException(filterContext);</span><br><span class=\"line\">            <span class=\"comment\">//捕获当前异常数据</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> ex = filterContext.Exception;</span><br><span class=\"line\">            <span class=\"comment\">//将异常数据入队</span></span><br><span class=\"line\">            Exceptions.Enqueue(ex);</span><br><span class=\"line\">            <span class=\"comment\">//跳转到错误页面</span></span><br><span class=\"line\">            filterContext.HttpContext.Response.Redirect(<span class=\"string\">\"/Error.html\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Log4Net的配置是在应用程序配置文件中进行的，我们先在配置文件中进行Log4Net的配置。Log4Net需要配置的节点位置和SpringNet完全相同，首先需要在configSessions中新增子节点,然后在configuration节点中增加log4net节点完成具体配置。<br></p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">configSections</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">name</span>=<span class=\"string\">\"entityFramework\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"</span> <span class=\"attr\">requirePermission</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 --&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--↓Log4Net配置↓--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">name</span>=<span class=\"string\">\"log4net\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Config.Log4NetConfigurationSectionHandler, log4net\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--↑Log4Net配置↑--&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--↓Spring.Net配置↓--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sectionGroup</span> <span class=\"attr\">name</span>=<span class=\"string\">\"spring\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">name</span>=<span class=\"string\">\"context\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Spring.Context.Support.MvcContextHandler, Spring.Web.Mvc4\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sectionGroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--↑Spring.Net配置↑--&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">configSections</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!--↓Spring.Net配置↓--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">spring</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">resource</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"file://~/Config/controllers.xml\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">resource</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"file://~/Config/services.xml\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">spring</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--↑Spring.Net配置↑--&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!--↓Log4Net配置↓--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">log4net</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- OFF, FATAL, ERROR, WARN, INFO, DEBUG, ALL --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Set root logger level to ERROR and its appenders --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"ALL\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"SysAppender\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Print only messages of level DEBUG or above in the packages --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"WebLogger\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"DEBUG\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"SysAppender\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Appender.RollingFileAppender,log4net\"</span> &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"File\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"App_Data/\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppendToFile\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"RollingStyle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Date\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"DatePattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&amp;quot;Logs_&amp;quot;yyyyMMdd&amp;quot;.txt&amp;quot;\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"StaticLogFileName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Layout.PatternLayout,log4net\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%d [%t] %-5p %c - %m%n\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Header\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&amp;#13;&amp;#10;----------------------header--------------------------&amp;#13;&amp;#10;\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Footer\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&amp;#13;&amp;#10;----------------------footer--------------------------&amp;#13;&amp;#10;\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"consoleApp\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Appender.ConsoleAppender,log4net\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Layout.PatternLayout,log4net\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%d [%t] %-5p %c - %m%n\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">log4net</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--↑Log4Net配置↑--&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id=\"进阶配置\"><a href=\"#进阶配置\" class=\"headerlink\" title=\"进阶配置\"></a>进阶配置</h2><p>在配置文件中可以对日志记录的信息、格式、文件名等作出具体的配置，下面是配置信息的详解<br></p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">configSections</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">name</span>=<span class=\"string\">\"log4net\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Config.Log4NetConfigurationSectionHandler,log4net\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">configSections</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--站点日志配置部分--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">log4net</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--控制级别，由低到高: ALL|DEBUG|INFO|WARN|ERROR|FATAL|OFF--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--比如定义级别为INFO，则INFO级别向下的级别，比如DEBUG日志将不会被记录--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--如果没有定义LEVEL的值，则缺省为DEBUG--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"ERROR\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"RollingFileAppender\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"RollingFileAppender\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Appender.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--日志文件名开头--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">file</span> <span class=\"attr\">value</span>=<span class=\"string\">\"c:\\Log\\TestLog4net.TXT\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--多线程时采用最小锁定--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">lockingModel</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Appender.FileAppender+MinimalLock\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--日期的格式，每天换一个文件记录，如不设置则永远只记录一天的日志，需设置--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">datePattern</span> <span class=\"attr\">value</span>=<span class=\"string\">\"(yyyyMMdd)\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--是否追加到文件,默认为true，通常无需设置--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">appendToFile</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--变换的形式为日期，这种情况下每天只有一个日志--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--此时MaxSizeRollBackups和maximumFileSize的节点设置没有意义--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--&lt;rollingStyle value=\"Date\"/&gt;--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--变换的形式为日志大小--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--这种情况下MaxSizeRollBackups和maximumFileSize的节点设置才有意义--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">RollingStyle</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Size\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--每天记录的日志文件个数，与maximumFileSize配合使用--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">MaxSizeRollBackups</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--每个日志文件的最大大小--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--可用的单位:KB|MB|GB--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--不要使用小数,否则会一直写入当前日志--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">maximumFileSize</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2MB\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--日志格式--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Layout.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">conversionPattern</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date [%t]%-5p %c - %m%n\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">log4net</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>在Global文件中的Application_Start方法中开启一个线程，用于将队列中的错误信息写入日志文件。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Optimization;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Routing;</span><br><span class=\"line\"><span class=\"keyword\">using</span> log4net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.WebApp.Models;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Spring.Web.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意: 有关启用 IIS6 或 IIS7 经典模式的说明，</span></span><br><span class=\"line\">    <span class=\"comment\">// 请访问 http://go.microsoft.com/?LinkId=9394801</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MvcApplication</span> : <span class=\"title\">SpringMvcApplication</span><span class=\"comment\">//HttpApplication</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Application_Start</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            log4net.Config.XmlConfigurator.Configure();<span class=\"comment\">//读取Log4Net配置信息</span></span><br><span class=\"line\">            AreaRegistration.RegisterAllAreas();</span><br><span class=\"line\"></span><br><span class=\"line\">            WebApiConfig.Register(GlobalConfiguration.Configuration);</span><br><span class=\"line\">            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);</span><br><span class=\"line\">            RouteConfig.RegisterRoutes(RouteTable.Routes);</span><br><span class=\"line\">            BundleConfig.RegisterBundles(BundleTable.Bundles);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//开启一个线程,扫描异常信息队列.</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> filePath = Server.MapPath(<span class=\"string\">\"/Log/\"</span>);</span><br><span class=\"line\">            ThreadPool.QueueUserWorkItem((a) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//判断队列中是否有数据</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (Log4ExceptionAttribute.Exceptions.Any())</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//出队一条异常信息</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> ex = Log4ExceptionAttribute.Exceptions.Dequeue();</span><br><span class=\"line\">                        <span class=\"comment\">//若异常信息不为空</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (ex == <span class=\"literal\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"comment\">//将异常信息写入到日志文件中</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> logger = LogManager.GetLogger(<span class=\"string\">\"errorMsg\"</span>);</span><br><span class=\"line\">                        logger.Error(ex.ToString());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//若异常信息队列为空，则线程休息三秒</span></span><br><span class=\"line\">                        Thread.Sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, filePath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>成功完成错误日志的配置。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>在Web应用运行过程中，我们难免会遇到程序运行异常，这个时候我们就应该将异常信息记录下来，以便开发人员和维护人员对异常原因进行还原，对异常原因进行修复。在ASP.NET平台中进行日志记录的组件也有很多，如Log4Net、CommonLogging等，我们这里选用Log4Net进行异常日志的记录。<br>","more":"</p><h2 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h2><p>在ASP.NET MVC中提供了一个全局的异常处理过滤器：HandleErrorAttribute，可以通过该过滤器捕获异常信息。</p><p>我们在Models文件夹下新建类型Log4ExceptionAttribute，继承HandleErrorAttribute类，同时重写OnException方法来捕获异常数据：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp.Models</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Log4ExceptionAttribute</span>:<span class=\"title\">HandleErrorAttribute</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 重写OnException方法来捕获异常数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filterContext\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnException</span>(<span class=\"params\">ExceptionContext filterContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.OnException(filterContext);</span><br><span class=\"line\">            <span class=\"comment\">//捕获当前异常数据</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> ex = filterContext.Exception;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>新建过滤器后我们还需要在Global文件中调用的RegisterGlobalFilters方法中完成自己定义异常处理过滤的注册。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.WebApp.Models;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FilterConfig</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">RegisterGlobalFilters</span>(<span class=\"params\">GlobalFilterCollection filters</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//filters.Add(new HandleErrorAttribute());</span></span><br><span class=\"line\">            filters.Add(<span class=\"keyword\">new</span> Log4ExceptionAttribute());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"队列处理\"><a href=\"#队列处理\" class=\"headerlink\" title=\"队列处理\"></a>队列处理</h2><p>考虑到多用户并发操作时可能产生的问题，我们需要新建一个队列来进行异常信息的暂存，同时开辟一个线程专门对队列中的异常信息进行处理。</p><p>在Log4ExceptionAttribute类中新建一个静态的异常类型的队列，在发生异常后，程序自动触发OnException方法，方法中将当前的异常信息入队后，跳转到错误页面。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp.Models</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Log4ExceptionAttribute</span>:<span class=\"title\">HandleErrorAttribute</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Queue&lt;Exception&gt; Exceptions=<span class=\"keyword\">new</span> Queue&lt;Exception&gt;();</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 重写OnException方法来捕获异常数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filterContext\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnException</span>(<span class=\"params\">ExceptionContext filterContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.OnException(filterContext);</span><br><span class=\"line\">            <span class=\"comment\">//捕获当前异常数据</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> ex = filterContext.Exception;</span><br><span class=\"line\">            <span class=\"comment\">//将异常数据入队</span></span><br><span class=\"line\">            Exceptions.Enqueue(ex);</span><br><span class=\"line\">            <span class=\"comment\">//跳转到错误页面</span></span><br><span class=\"line\">            filterContext.HttpContext.Response.Redirect(<span class=\"string\">\"/Error.html\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Log4Net的配置是在应用程序配置文件中进行的，我们先在配置文件中进行Log4Net的配置。Log4Net需要配置的节点位置和SpringNet完全相同，首先需要在configSessions中新增子节点,然后在configuration节点中增加log4net节点完成具体配置。<br></p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">configSections</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">name</span>=<span class=\"string\">\"entityFramework\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"</span> <span class=\"attr\">requirePermission</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 --&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--↓Log4Net配置↓--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">name</span>=<span class=\"string\">\"log4net\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Config.Log4NetConfigurationSectionHandler, log4net\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--↑Log4Net配置↑--&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--↓Spring.Net配置↓--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sectionGroup</span> <span class=\"attr\">name</span>=<span class=\"string\">\"spring\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">name</span>=<span class=\"string\">\"context\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Spring.Context.Support.MvcContextHandler, Spring.Web.Mvc4\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sectionGroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--↑Spring.Net配置↑--&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">configSections</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!--↓Spring.Net配置↓--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">spring</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">resource</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"file://~/Config/controllers.xml\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">resource</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"file://~/Config/services.xml\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">spring</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--↑Spring.Net配置↑--&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!--↓Log4Net配置↓--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">log4net</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- OFF, FATAL, ERROR, WARN, INFO, DEBUG, ALL --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Set root logger level to ERROR and its appenders --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"ALL\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"SysAppender\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Print only messages of level DEBUG or above in the packages --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"WebLogger\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"DEBUG\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"SysAppender\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Appender.RollingFileAppender,log4net\"</span> &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"File\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"App_Data/\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppendToFile\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"RollingStyle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Date\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"DatePattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&amp;quot;Logs_&amp;quot;yyyyMMdd&amp;quot;.txt&amp;quot;\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"StaticLogFileName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Layout.PatternLayout,log4net\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%d [%t] %-5p %c - %m%n\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Header\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&amp;#13;&amp;#10;----------------------header--------------------------&amp;#13;&amp;#10;\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Footer\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&amp;#13;&amp;#10;----------------------footer--------------------------&amp;#13;&amp;#10;\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"consoleApp\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Appender.ConsoleAppender,log4net\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Layout.PatternLayout,log4net\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%d [%t] %-5p %c - %m%n\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">log4net</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--↑Log4Net配置↑--&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id=\"进阶配置\"><a href=\"#进阶配置\" class=\"headerlink\" title=\"进阶配置\"></a>进阶配置</h2><p>在配置文件中可以对日志记录的信息、格式、文件名等作出具体的配置，下面是配置信息的详解<br></p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">configSections</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">name</span>=<span class=\"string\">\"log4net\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Config.Log4NetConfigurationSectionHandler,log4net\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">configSections</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--站点日志配置部分--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">log4net</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--控制级别，由低到高: ALL|DEBUG|INFO|WARN|ERROR|FATAL|OFF--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--比如定义级别为INFO，则INFO级别向下的级别，比如DEBUG日志将不会被记录--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--如果没有定义LEVEL的值，则缺省为DEBUG--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"ERROR\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"RollingFileAppender\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"RollingFileAppender\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Appender.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--日志文件名开头--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">file</span> <span class=\"attr\">value</span>=<span class=\"string\">\"c:\\Log\\TestLog4net.TXT\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--多线程时采用最小锁定--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">lockingModel</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Appender.FileAppender+MinimalLock\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--日期的格式，每天换一个文件记录，如不设置则永远只记录一天的日志，需设置--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">datePattern</span> <span class=\"attr\">value</span>=<span class=\"string\">\"(yyyyMMdd)\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--是否追加到文件,默认为true，通常无需设置--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">appendToFile</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--变换的形式为日期，这种情况下每天只有一个日志--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--此时MaxSizeRollBackups和maximumFileSize的节点设置没有意义--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--&lt;rollingStyle value=\"Date\"/&gt;--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--变换的形式为日志大小--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--这种情况下MaxSizeRollBackups和maximumFileSize的节点设置才有意义--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">RollingStyle</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Size\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--每天记录的日志文件个数，与maximumFileSize配合使用--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">MaxSizeRollBackups</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--每个日志文件的最大大小--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--可用的单位:KB|MB|GB--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--不要使用小数,否则会一直写入当前日志--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">maximumFileSize</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2MB\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--日志格式--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Layout.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">conversionPattern</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date [%t]%-5p %c - %m%n\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">log4net</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>在Global文件中的Application_Start方法中开启一个线程，用于将队列中的错误信息写入日志文件。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Optimization;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Routing;</span><br><span class=\"line\"><span class=\"keyword\">using</span> log4net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> PMS.WebApp.Models;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Spring.Web.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意: 有关启用 IIS6 或 IIS7 经典模式的说明，</span></span><br><span class=\"line\">    <span class=\"comment\">// 请访问 http://go.microsoft.com/?LinkId=9394801</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MvcApplication</span> : <span class=\"title\">SpringMvcApplication</span><span class=\"comment\">//HttpApplication</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Application_Start</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            log4net.Config.XmlConfigurator.Configure();<span class=\"comment\">//读取Log4Net配置信息</span></span><br><span class=\"line\">            AreaRegistration.RegisterAllAreas();</span><br><span class=\"line\"></span><br><span class=\"line\">            WebApiConfig.Register(GlobalConfiguration.Configuration);</span><br><span class=\"line\">            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);</span><br><span class=\"line\">            RouteConfig.RegisterRoutes(RouteTable.Routes);</span><br><span class=\"line\">            BundleConfig.RegisterBundles(BundleTable.Bundles);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//开启一个线程,扫描异常信息队列.</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> filePath = Server.MapPath(<span class=\"string\">\"/Log/\"</span>);</span><br><span class=\"line\">            ThreadPool.QueueUserWorkItem((a) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//判断队列中是否有数据</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (Log4ExceptionAttribute.Exceptions.Any())</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//出队一条异常信息</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> ex = Log4ExceptionAttribute.Exceptions.Dequeue();</span><br><span class=\"line\">                        <span class=\"comment\">//若异常信息不为空</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (ex == <span class=\"literal\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"comment\">//将异常信息写入到日志文件中</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> logger = LogManager.GetLogger(<span class=\"string\">\"errorMsg\"</span>);</span><br><span class=\"line\">                        logger.Error(ex.ToString());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//若异常信息队列为空，则线程休息三秒</span></span><br><span class=\"line\">                        Thread.Sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, filePath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>成功完成错误日志的配置。</p><!-- rebuild by neat -->"},{"title":".Net 使用GeoIP2获取IP的地理位置信息","abbrlink":20420,"date":"2018-02-21T13:25:39.000Z","_content":"[GeoIP® 数据库&服务：业界领先的IP智能](https://www.maxmind.com/zh/geoip2-services-and-databases)，MaxMind GeoIP2 服务能识别互联网用户的地点位置与其他特征，应用广泛，包括个性化定制内容、诈欺检测、广告定向、网站流量分析、执行规定、地理目标定位、地理围栏定位 (geo-fencing)以及数字版权管理。\n<!--more-->\n![](http://p4au3q1y8.bkt.clouddn.com/20180221212532042/20180221093334576.png)\n* [MaxMind是IP地理定位准确性的行业领导者.](https://blog.maxmind.com/2014/01/31/who-has-the-most-accurate-ip-geolocation-data/)\n* [按照不同国家，比较MaxMind GeoIP2数据服务与数据库的准确性](https://www.maxmind.com/zh/geoip2-city-database-accuracy)。\n\n[GeoIP2精准版服务](https://www.maxmind.com/zh/geoip2-precision-services)向您提供本公司最准确的数据，为您省去在您服务器上托管数据或部署更新项目的麻烦。 我们的精准版服务产品可通过API或文件手动上传方式使用，为您提供最新的数据。\n\n[MaxMind的GeoIP2数据库](https://www.maxmind.com/zh/geoip2-databases)为大容量环境提供IP智能数据。 通过在本地托管我们的数据库，您既可避免网络延迟问题，又可避免按每次查询计价的费用。\n\nGeoIP 分为商业版和免费版，免费版比商业版精度差了许多，经测试对于城市定位确实有差距，能否接受看你的精度要求！\n\n## 免费版介绍\n免费版仅有数据库服务，目前有两个版本\n1、GeoLite 版本，网上流传较广，数据库类型为 dat 格式文件，库文件较小、未进行精准度测试且不再更新。\n2、GeoLite2版本，目前最新版本，数据库文件为 mmdb 格式或csv格式。\n[**GeoLite2 特性**](https://dev.maxmind.com/geoip/geoip2/geoip2-city-country-csv-databases/)\n## 下载数据库\n### GeoIP数据库\n[**GeoIP2数据库**](https://www.maxmind.com/zh/geoip2-databases)\n本地维护的数据库适用于容量大、延迟性低的环境，购买机构可以获取站点许可证，即可在公司内进行无限次使用。\n\n* 对于选定地点，含有简体中文、法文、德文、日文、西班牙文、巴西葡萄牙文及俄文版的本地化名称\n* 为多数常用语言提供开放源代码的API\n* 可提供自动更新\n\n### GeoLite2 开源数据库\n#### 数据库\n[GeoLite2数据库](https://dev.maxmind.com/zh-hans/geoip/geoip2/geolite2-开源数据库/)是GeoIP2的免费版，其准确率稍低于付费版。\n#### 技术支持\nMaxMind 不为免费数据库提供技术支持。如果您有问题请前往[stackoverflow’s GeoIP问题以及解答。](http://stackoverflow.com/questions/tagged/geoip)\n#### 许可证\nGeoLite2使用的是开源许可证：[Creative Commons Attribution-ShareAlike 3.0 Unported License](https://creativecommons.org/licenses/by-sa/3.0/deed.zh_TW). 您只需要在页面中添加如下代码即可：\n```html\n该产品使用MaxMind公司的GeoLite2数据，可以在此获取：\n<a href=\"http://www.maxmind.com\">http://www.maxmind.com</a>.\n```\n官方提供 [二次销售许可证](http://www.maxmind.com/zh/geolite2-developer-package).\n\n#### 下载\n\n| 数据库 | \t[MaxMind DB](http://maxmind.github.io/MaxMind-DB/) 二进制格式, 压缩  | [CSV 格式](https://dev.maxmind.com/geoip/geoip2/geoip2-city-country-csv-databases/), 压缩 |\n|:------------:|:---------------:|:-----:|\n| GeoLite2 城市 | \t[Download](http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz) ([md5 校验](http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.md5)) | \t[Download](http://geolite.maxmind.com/download/geoip/database/GeoLite2-City-CSV.zip) ([md5 校验](http://geolite.maxmind.com/download/geoip/database/GeoLite2-City-CSV.zip.md5))|\n| GeoLite2 国家 | \t[Download](http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.mmdb.gz) ([md5 校验](http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.md5)) | \t[Download](http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country-CSV.zip) ([md5 校验](http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country-CSV.zip.md5)) |\n\n#### 更新数据库\n你可以使用 [GeoIP 更新](https://dev.maxmind.com/zh-hans/geoip/geoipupdate/)来自动更新您的数据库。\n#### MaxMind API 接口\n参阅 [GeoIP2 可下载数据库](https://dev.maxmind.com/zh-hans/geoip/geoip2/downloadable/#MaxMind_APIs) 以下载API。付费版和免费版API互通。\n## .Net调用MaxMind API\n.Net调用MaxMind API可以使用官方发布的[nuget包](https://www.nuget.org/packages/MaxMind.GeoIP2/)，官方提供了[文档](http://maxmind.github.io/GeoIP2-dotnet/)和[源码地址](https://github.com/maxmind/GeoIP2-dotnet)。\n### 安装Nuget包\n```\nInstall-Package MaxMind.GeoIP2\n```\n### 代码调用\n因GeoLite2只提供了City和Country两个数据库版本。\n故只能进行这两种调用方式，调用方式非常简单\n#### City\n```csharp\nusing (var reader = new DatabaseReader(\"GeoLite2-City.mmdb\"))\n{\n    var city = reader.City(\"65.49.134.29\");\n}\n```\ncity即为查询结果，结构如下：\n```javascript\n{\n    \"city\": {\n        \"geoname_id\": 5125591,\n        \"names\": {\n            \"en\": \"Macedon\"\n        }\n    },\n    \"continent\": {\n        \"code\": \"NA\",\n        \"geoname_id\": 6255149,\n        \"names\": {\n            \"de\": \"Nordamerika\",\n            \"en\": \"North America\",\n            \"es\": \"Norteamérica\",\n            \"fr\": \"Amérique du Nord\",\n            \"ja\": \"北アメリカ\",\n            \"pt-BR\": \"América do Norte\",\n            \"ru\": \"Северная Америка\",\n            \"zh-CN\": \"北美洲\"\n        }\n    },\n    \"country\": {\n        \"geoname_id\": 6252001,\n        \"is_in_european_union\": false,\n        \"iso_code\": \"US\",\n        \"names\": {\n            \"de\": \"USA\",\n            \"en\": \"United States\",\n            \"es\": \"Estados Unidos\",\n            \"fr\": \"États-Unis\",\n            \"ja\": \"アメリカ合衆国\",\n            \"pt-BR\": \"Estados Unidos\",\n            \"ru\": \"США\",\n            \"zh-CN\": \"美国\"\n        }\n    },\n    \"location\": {\n        \"accuracy_radius\": 20,\n        \"latitude\": 43.1089,\n        \"longitude\": -77.3226,\n        \"metro_code\": 538,\n        \"time_zone\": \"America/New_York\"\n    },\n    \"maxmind\": {},\n    \"postal\": {\n        \"code\": \"14502\"\n    },\n    \"registered_country\": {\n        \"geoname_id\": 6252001,\n        \"is_in_european_union\": false,\n        \"iso_code\": \"US\",\n        \"names\": {\n            \"de\": \"USA\",\n            \"en\": \"United States\",\n            \"es\": \"Estados Unidos\",\n            \"fr\": \"États-Unis\",\n            \"ja\": \"アメリカ合衆国\",\n            \"pt-BR\": \"Estados Unidos\",\n            \"ru\": \"США\",\n            \"zh-CN\": \"美国\"\n        }\n    },\n    \"represented_country\": {\n        \"is_in_european_union\": false,\n        \"names\": {}\n    },\n    \"subdivisions\": [\n        {\n            \"geoname_id\": 5128638,\n            \"iso_code\": \"NY\",\n            \"names\": {\n                \"de\": \"New York\",\n                \"en\": \"New York\",\n                \"es\": \"Nueva York\",\n                \"fr\": \"New York\",\n                \"ja\": \"ニューヨーク州\",\n                \"pt-BR\": \"Nova Iorque\",\n                \"ru\": \"Нью-Йорк\",\n                \"zh-CN\": \"纽约州\"\n            }\n        }\n    ],\n    \"traits\": {\n        \"ip_address\": \"66.66.66.66\",\n        \"is_anonymous\": false,\n        \"is_anonymous_proxy\": false,\n        \"is_anonymous_vpn\": false,\n        \"is_hosting_provider\": false,\n        \"is_legitimate_proxy\": false,\n        \"is_public_proxy\": false,\n        \"is_satellite_provider\": false,\n        \"is_tor_exit_node\": false\n    }\n}\n```\n其中包含了比较详细的信息，有具体的经纬度。\n#### Country\n```csharp\nusing (var reader = new DatabaseReader(\"GeoLite2-Country.mmdb\"))\n{\n    var country = reader.Country(\"66.66.66.66\");\n}\n```\ncountry即为查询结果，结构如下：\n```javascript\n{\n    \"continent\": {\n        \"code\": \"NA\",\n        \"geoname_id\": 6255149,\n        \"names\": {\n            \"de\": \"Nordamerika\",\n            \"en\": \"North America\",\n            \"es\": \"Norteamérica\",\n            \"fr\": \"Amérique du Nord\",\n            \"ja\": \"北アメリカ\",\n            \"pt-BR\": \"América do Norte\",\n            \"ru\": \"Северная Америка\",\n            \"zh-CN\": \"北美洲\"\n        }\n    },\n    \"country\": {\n        \"geoname_id\": 6252001,\n        \"is_in_european_union\": false,\n        \"iso_code\": \"US\",\n        \"names\": {\n            \"de\": \"USA\",\n            \"en\": \"United States\",\n            \"es\": \"Estados Unidos\",\n            \"fr\": \"États-Unis\",\n            \"ja\": \"アメリカ合衆国\",\n            \"pt-BR\": \"Estados Unidos\",\n            \"ru\": \"США\",\n            \"zh-CN\": \"美国\"\n        }\n    },\n    \"maxmind\": {},\n    \"registered_country\": {\n        \"geoname_id\": 6252001,\n        \"is_in_european_union\": false,\n        \"iso_code\": \"US\",\n        \"names\": {\n            \"de\": \"USA\",\n            \"en\": \"United States\",\n            \"es\": \"Estados Unidos\",\n            \"fr\": \"États-Unis\",\n            \"ja\": \"アメリカ合衆国\",\n            \"pt-BR\": \"Estados Unidos\",\n            \"ru\": \"США\",\n            \"zh-CN\": \"美国\"\n        }\n    },\n    \"represented_country\": {\n        \"is_in_european_union\": false,\n        \"names\": {}\n    },\n    \"traits\": {\n        \"ip_address\": \"66.66.66.66\",\n        \"is_anonymous\": false,\n        \"is_anonymous_proxy\": false,\n        \"is_anonymous_vpn\": false,\n        \"is_hosting_provider\": false,\n        \"is_legitimate_proxy\": false,\n        \"is_public_proxy\": false,\n        \"is_satellite_provider\": false,\n        \"is_tor_exit_node\": false\n    }\n}\n```\ncountry数据库中的信息的详细程度较之city就差了很多，但数据库大小仅为city的 1/20，视使用场景来决定使用对应的数据库。\n","source":"_posts/使用GeoIP2获取IP的地理位置信息.md","raw":"---\ntitle: .Net 使用GeoIP2获取IP的地理位置信息\ntags:\n  - GeoIP2\n  - .Net\n  - IP\nabbrlink: 20420\ndate: 2018-02-21 21:25:39\n---\n[GeoIP® 数据库&服务：业界领先的IP智能](https://www.maxmind.com/zh/geoip2-services-and-databases)，MaxMind GeoIP2 服务能识别互联网用户的地点位置与其他特征，应用广泛，包括个性化定制内容、诈欺检测、广告定向、网站流量分析、执行规定、地理目标定位、地理围栏定位 (geo-fencing)以及数字版权管理。\n<!--more-->\n![](http://p4au3q1y8.bkt.clouddn.com/20180221212532042/20180221093334576.png)\n* [MaxMind是IP地理定位准确性的行业领导者.](https://blog.maxmind.com/2014/01/31/who-has-the-most-accurate-ip-geolocation-data/)\n* [按照不同国家，比较MaxMind GeoIP2数据服务与数据库的准确性](https://www.maxmind.com/zh/geoip2-city-database-accuracy)。\n\n[GeoIP2精准版服务](https://www.maxmind.com/zh/geoip2-precision-services)向您提供本公司最准确的数据，为您省去在您服务器上托管数据或部署更新项目的麻烦。 我们的精准版服务产品可通过API或文件手动上传方式使用，为您提供最新的数据。\n\n[MaxMind的GeoIP2数据库](https://www.maxmind.com/zh/geoip2-databases)为大容量环境提供IP智能数据。 通过在本地托管我们的数据库，您既可避免网络延迟问题，又可避免按每次查询计价的费用。\n\nGeoIP 分为商业版和免费版，免费版比商业版精度差了许多，经测试对于城市定位确实有差距，能否接受看你的精度要求！\n\n## 免费版介绍\n免费版仅有数据库服务，目前有两个版本\n1、GeoLite 版本，网上流传较广，数据库类型为 dat 格式文件，库文件较小、未进行精准度测试且不再更新。\n2、GeoLite2版本，目前最新版本，数据库文件为 mmdb 格式或csv格式。\n[**GeoLite2 特性**](https://dev.maxmind.com/geoip/geoip2/geoip2-city-country-csv-databases/)\n## 下载数据库\n### GeoIP数据库\n[**GeoIP2数据库**](https://www.maxmind.com/zh/geoip2-databases)\n本地维护的数据库适用于容量大、延迟性低的环境，购买机构可以获取站点许可证，即可在公司内进行无限次使用。\n\n* 对于选定地点，含有简体中文、法文、德文、日文、西班牙文、巴西葡萄牙文及俄文版的本地化名称\n* 为多数常用语言提供开放源代码的API\n* 可提供自动更新\n\n### GeoLite2 开源数据库\n#### 数据库\n[GeoLite2数据库](https://dev.maxmind.com/zh-hans/geoip/geoip2/geolite2-开源数据库/)是GeoIP2的免费版，其准确率稍低于付费版。\n#### 技术支持\nMaxMind 不为免费数据库提供技术支持。如果您有问题请前往[stackoverflow’s GeoIP问题以及解答。](http://stackoverflow.com/questions/tagged/geoip)\n#### 许可证\nGeoLite2使用的是开源许可证：[Creative Commons Attribution-ShareAlike 3.0 Unported License](https://creativecommons.org/licenses/by-sa/3.0/deed.zh_TW). 您只需要在页面中添加如下代码即可：\n```html\n该产品使用MaxMind公司的GeoLite2数据，可以在此获取：\n<a href=\"http://www.maxmind.com\">http://www.maxmind.com</a>.\n```\n官方提供 [二次销售许可证](http://www.maxmind.com/zh/geolite2-developer-package).\n\n#### 下载\n\n| 数据库 | \t[MaxMind DB](http://maxmind.github.io/MaxMind-DB/) 二进制格式, 压缩  | [CSV 格式](https://dev.maxmind.com/geoip/geoip2/geoip2-city-country-csv-databases/), 压缩 |\n|:------------:|:---------------:|:-----:|\n| GeoLite2 城市 | \t[Download](http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz) ([md5 校验](http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.md5)) | \t[Download](http://geolite.maxmind.com/download/geoip/database/GeoLite2-City-CSV.zip) ([md5 校验](http://geolite.maxmind.com/download/geoip/database/GeoLite2-City-CSV.zip.md5))|\n| GeoLite2 国家 | \t[Download](http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.mmdb.gz) ([md5 校验](http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.md5)) | \t[Download](http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country-CSV.zip) ([md5 校验](http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country-CSV.zip.md5)) |\n\n#### 更新数据库\n你可以使用 [GeoIP 更新](https://dev.maxmind.com/zh-hans/geoip/geoipupdate/)来自动更新您的数据库。\n#### MaxMind API 接口\n参阅 [GeoIP2 可下载数据库](https://dev.maxmind.com/zh-hans/geoip/geoip2/downloadable/#MaxMind_APIs) 以下载API。付费版和免费版API互通。\n## .Net调用MaxMind API\n.Net调用MaxMind API可以使用官方发布的[nuget包](https://www.nuget.org/packages/MaxMind.GeoIP2/)，官方提供了[文档](http://maxmind.github.io/GeoIP2-dotnet/)和[源码地址](https://github.com/maxmind/GeoIP2-dotnet)。\n### 安装Nuget包\n```\nInstall-Package MaxMind.GeoIP2\n```\n### 代码调用\n因GeoLite2只提供了City和Country两个数据库版本。\n故只能进行这两种调用方式，调用方式非常简单\n#### City\n```csharp\nusing (var reader = new DatabaseReader(\"GeoLite2-City.mmdb\"))\n{\n    var city = reader.City(\"65.49.134.29\");\n}\n```\ncity即为查询结果，结构如下：\n```javascript\n{\n    \"city\": {\n        \"geoname_id\": 5125591,\n        \"names\": {\n            \"en\": \"Macedon\"\n        }\n    },\n    \"continent\": {\n        \"code\": \"NA\",\n        \"geoname_id\": 6255149,\n        \"names\": {\n            \"de\": \"Nordamerika\",\n            \"en\": \"North America\",\n            \"es\": \"Norteamérica\",\n            \"fr\": \"Amérique du Nord\",\n            \"ja\": \"北アメリカ\",\n            \"pt-BR\": \"América do Norte\",\n            \"ru\": \"Северная Америка\",\n            \"zh-CN\": \"北美洲\"\n        }\n    },\n    \"country\": {\n        \"geoname_id\": 6252001,\n        \"is_in_european_union\": false,\n        \"iso_code\": \"US\",\n        \"names\": {\n            \"de\": \"USA\",\n            \"en\": \"United States\",\n            \"es\": \"Estados Unidos\",\n            \"fr\": \"États-Unis\",\n            \"ja\": \"アメリカ合衆国\",\n            \"pt-BR\": \"Estados Unidos\",\n            \"ru\": \"США\",\n            \"zh-CN\": \"美国\"\n        }\n    },\n    \"location\": {\n        \"accuracy_radius\": 20,\n        \"latitude\": 43.1089,\n        \"longitude\": -77.3226,\n        \"metro_code\": 538,\n        \"time_zone\": \"America/New_York\"\n    },\n    \"maxmind\": {},\n    \"postal\": {\n        \"code\": \"14502\"\n    },\n    \"registered_country\": {\n        \"geoname_id\": 6252001,\n        \"is_in_european_union\": false,\n        \"iso_code\": \"US\",\n        \"names\": {\n            \"de\": \"USA\",\n            \"en\": \"United States\",\n            \"es\": \"Estados Unidos\",\n            \"fr\": \"États-Unis\",\n            \"ja\": \"アメリカ合衆国\",\n            \"pt-BR\": \"Estados Unidos\",\n            \"ru\": \"США\",\n            \"zh-CN\": \"美国\"\n        }\n    },\n    \"represented_country\": {\n        \"is_in_european_union\": false,\n        \"names\": {}\n    },\n    \"subdivisions\": [\n        {\n            \"geoname_id\": 5128638,\n            \"iso_code\": \"NY\",\n            \"names\": {\n                \"de\": \"New York\",\n                \"en\": \"New York\",\n                \"es\": \"Nueva York\",\n                \"fr\": \"New York\",\n                \"ja\": \"ニューヨーク州\",\n                \"pt-BR\": \"Nova Iorque\",\n                \"ru\": \"Нью-Йорк\",\n                \"zh-CN\": \"纽约州\"\n            }\n        }\n    ],\n    \"traits\": {\n        \"ip_address\": \"66.66.66.66\",\n        \"is_anonymous\": false,\n        \"is_anonymous_proxy\": false,\n        \"is_anonymous_vpn\": false,\n        \"is_hosting_provider\": false,\n        \"is_legitimate_proxy\": false,\n        \"is_public_proxy\": false,\n        \"is_satellite_provider\": false,\n        \"is_tor_exit_node\": false\n    }\n}\n```\n其中包含了比较详细的信息，有具体的经纬度。\n#### Country\n```csharp\nusing (var reader = new DatabaseReader(\"GeoLite2-Country.mmdb\"))\n{\n    var country = reader.Country(\"66.66.66.66\");\n}\n```\ncountry即为查询结果，结构如下：\n```javascript\n{\n    \"continent\": {\n        \"code\": \"NA\",\n        \"geoname_id\": 6255149,\n        \"names\": {\n            \"de\": \"Nordamerika\",\n            \"en\": \"North America\",\n            \"es\": \"Norteamérica\",\n            \"fr\": \"Amérique du Nord\",\n            \"ja\": \"北アメリカ\",\n            \"pt-BR\": \"América do Norte\",\n            \"ru\": \"Северная Америка\",\n            \"zh-CN\": \"北美洲\"\n        }\n    },\n    \"country\": {\n        \"geoname_id\": 6252001,\n        \"is_in_european_union\": false,\n        \"iso_code\": \"US\",\n        \"names\": {\n            \"de\": \"USA\",\n            \"en\": \"United States\",\n            \"es\": \"Estados Unidos\",\n            \"fr\": \"États-Unis\",\n            \"ja\": \"アメリカ合衆国\",\n            \"pt-BR\": \"Estados Unidos\",\n            \"ru\": \"США\",\n            \"zh-CN\": \"美国\"\n        }\n    },\n    \"maxmind\": {},\n    \"registered_country\": {\n        \"geoname_id\": 6252001,\n        \"is_in_european_union\": false,\n        \"iso_code\": \"US\",\n        \"names\": {\n            \"de\": \"USA\",\n            \"en\": \"United States\",\n            \"es\": \"Estados Unidos\",\n            \"fr\": \"États-Unis\",\n            \"ja\": \"アメリカ合衆国\",\n            \"pt-BR\": \"Estados Unidos\",\n            \"ru\": \"США\",\n            \"zh-CN\": \"美国\"\n        }\n    },\n    \"represented_country\": {\n        \"is_in_european_union\": false,\n        \"names\": {}\n    },\n    \"traits\": {\n        \"ip_address\": \"66.66.66.66\",\n        \"is_anonymous\": false,\n        \"is_anonymous_proxy\": false,\n        \"is_anonymous_vpn\": false,\n        \"is_hosting_provider\": false,\n        \"is_legitimate_proxy\": false,\n        \"is_public_proxy\": false,\n        \"is_satellite_provider\": false,\n        \"is_tor_exit_node\": false\n    }\n}\n```\ncountry数据库中的信息的详细程度较之city就差了很多，但数据库大小仅为city的 1/20，视使用场景来决定使用对应的数据库。\n","slug":"使用GeoIP2获取IP的地理位置信息","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24p2f007ad00oem4ai52j","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p><a href=\"https://www.maxmind.com/zh/geoip2-services-and-databases\" target=\"_blank\" rel=\"noopener\">GeoIP® 数据库&amp;服务：业界领先的IP智能</a>，MaxMind GeoIP2 服务能识别互联网用户的地点位置与其他特征，应用广泛，包括个性化定制内容、诈欺检测、广告定向、网站流量分析、执行规定、地理目标定位、地理围栏定位 (geo-fencing)以及数字版权管理。<br><a id=\"more\"></a><br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180221212532042/20180221093334576.png\" alt=\"\"></p><ul><li><a href=\"https://blog.maxmind.com/2014/01/31/who-has-the-most-accurate-ip-geolocation-data/\" target=\"_blank\" rel=\"noopener\">MaxMind是IP地理定位准确性的行业领导者.</a></li><li><a href=\"https://www.maxmind.com/zh/geoip2-city-database-accuracy\" target=\"_blank\" rel=\"noopener\">按照不同国家，比较MaxMind GeoIP2数据服务与数据库的准确性</a>。</li></ul><p><a href=\"https://www.maxmind.com/zh/geoip2-precision-services\" target=\"_blank\" rel=\"noopener\">GeoIP2精准版服务</a>向您提供本公司最准确的数据，为您省去在您服务器上托管数据或部署更新项目的麻烦。 我们的精准版服务产品可通过API或文件手动上传方式使用，为您提供最新的数据。</p><p><a href=\"https://www.maxmind.com/zh/geoip2-databases\" target=\"_blank\" rel=\"noopener\">MaxMind的GeoIP2数据库</a>为大容量环境提供IP智能数据。 通过在本地托管我们的数据库，您既可避免网络延迟问题，又可避免按每次查询计价的费用。</p><p>GeoIP 分为商业版和免费版，免费版比商业版精度差了许多，经测试对于城市定位确实有差距，能否接受看你的精度要求！</p><h2 id=\"免费版介绍\"><a href=\"#免费版介绍\" class=\"headerlink\" title=\"免费版介绍\"></a>免费版介绍</h2><p>免费版仅有数据库服务，目前有两个版本<br>1、GeoLite 版本，网上流传较广，数据库类型为 dat 格式文件，库文件较小、未进行精准度测试且不再更新。<br>2、GeoLite2版本，目前最新版本，数据库文件为 mmdb 格式或csv格式。<br><a href=\"https://dev.maxmind.com/geoip/geoip2/geoip2-city-country-csv-databases/\" target=\"_blank\" rel=\"noopener\"><strong>GeoLite2 特性</strong></a></p><h2 id=\"下载数据库\"><a href=\"#下载数据库\" class=\"headerlink\" title=\"下载数据库\"></a>下载数据库</h2><h3 id=\"GeoIP数据库\"><a href=\"#GeoIP数据库\" class=\"headerlink\" title=\"GeoIP数据库\"></a>GeoIP数据库</h3><p><a href=\"https://www.maxmind.com/zh/geoip2-databases\" target=\"_blank\" rel=\"noopener\"><strong>GeoIP2数据库</strong></a><br>本地维护的数据库适用于容量大、延迟性低的环境，购买机构可以获取站点许可证，即可在公司内进行无限次使用。</p><ul><li>对于选定地点，含有简体中文、法文、德文、日文、西班牙文、巴西葡萄牙文及俄文版的本地化名称</li><li>为多数常用语言提供开放源代码的API</li><li>可提供自动更新</li></ul><h3 id=\"GeoLite2-开源数据库\"><a href=\"#GeoLite2-开源数据库\" class=\"headerlink\" title=\"GeoLite2 开源数据库\"></a>GeoLite2 开源数据库</h3><h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p><a href=\"https://dev.maxmind.com/zh-hans/geoip/geoip2/geolite2-开源数据库/\" target=\"_blank\" rel=\"noopener\">GeoLite2数据库</a>是GeoIP2的免费版，其准确率稍低于付费版。</p><h4 id=\"技术支持\"><a href=\"#技术支持\" class=\"headerlink\" title=\"技术支持\"></a>技术支持</h4><p>MaxMind 不为免费数据库提供技术支持。如果您有问题请前往<a href=\"http://stackoverflow.com/questions/tagged/geoip\" target=\"_blank\" rel=\"noopener\">stackoverflow’s GeoIP问题以及解答。</a></p><h4 id=\"许可证\"><a href=\"#许可证\" class=\"headerlink\" title=\"许可证\"></a>许可证</h4><p>GeoLite2使用的是开源许可证：<a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh_TW\" target=\"_blank\" rel=\"noopener\">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>. 您只需要在页面中添加如下代码即可：<br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">该产品使用MaxMind公司的GeoLite2数据，可以在此获取：</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.maxmind.com\"</span>&gt;</span>http://www.maxmind.com<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.</span><br></pre></td></tr></table></figure><p></p><p>官方提供 <a href=\"http://www.maxmind.com/zh/geolite2-developer-package\" target=\"_blank\" rel=\"noopener\">二次销售许可证</a>.</p><h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4><table><thead><tr><th style=\"text-align:center\">数据库</th><th style=\"text-align:center\"><a href=\"http://maxmind.github.io/MaxMind-DB/\" target=\"_blank\" rel=\"noopener\">MaxMind DB</a> 二进制格式, 压缩</th><th style=\"text-align:center\"><a href=\"https://dev.maxmind.com/geoip/geoip2/geoip2-city-country-csv-databases/\" target=\"_blank\" rel=\"noopener\">CSV 格式</a>, 压缩</th></tr></thead><tbody><tr><td style=\"text-align:center\">GeoLite2 城市</td><td style=\"text-align:center\"><a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz\" target=\"_blank\" rel=\"noopener\">Download</a> (<a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.md5\" target=\"_blank\" rel=\"noopener\">md5 校验</a>)</td><td style=\"text-align:center\"><a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-City-CSV.zip\" target=\"_blank\" rel=\"noopener\">Download</a> (<a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-City-CSV.zip.md5\" target=\"_blank\" rel=\"noopener\">md5 校验</a>)</td></tr><tr><td style=\"text-align:center\">GeoLite2 国家</td><td style=\"text-align:center\"><a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.mmdb.gz\" target=\"_blank\" rel=\"noopener\">Download</a> (<a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.md5\" target=\"_blank\" rel=\"noopener\">md5 校验</a>)</td><td style=\"text-align:center\"><a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country-CSV.zip\" target=\"_blank\" rel=\"noopener\">Download</a> (<a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country-CSV.zip.md5\" target=\"_blank\" rel=\"noopener\">md5 校验</a>)</td></tr></tbody></table><h4 id=\"更新数据库\"><a href=\"#更新数据库\" class=\"headerlink\" title=\"更新数据库\"></a>更新数据库</h4><p>你可以使用 <a href=\"https://dev.maxmind.com/zh-hans/geoip/geoipupdate/\" target=\"_blank\" rel=\"noopener\">GeoIP 更新</a>来自动更新您的数据库。</p><h4 id=\"MaxMind-API-接口\"><a href=\"#MaxMind-API-接口\" class=\"headerlink\" title=\"MaxMind API 接口\"></a>MaxMind API 接口</h4><p>参阅 <a href=\"https://dev.maxmind.com/zh-hans/geoip/geoip2/downloadable/#MaxMind_APIs\" target=\"_blank\" rel=\"noopener\">GeoIP2 可下载数据库</a> 以下载API。付费版和免费版API互通。</p><h2 id=\"Net调用MaxMind-API\"><a href=\"#Net调用MaxMind-API\" class=\"headerlink\" title=\".Net调用MaxMind API\"></a>.Net调用MaxMind API</h2><p>.Net调用MaxMind API可以使用官方发布的<a href=\"https://www.nuget.org/packages/MaxMind.GeoIP2/\" target=\"_blank\" rel=\"noopener\">nuget包</a>，官方提供了<a href=\"http://maxmind.github.io/GeoIP2-dotnet/\" target=\"_blank\" rel=\"noopener\">文档</a>和<a href=\"https://github.com/maxmind/GeoIP2-dotnet\" target=\"_blank\" rel=\"noopener\">源码地址</a>。</p><h3 id=\"安装Nuget包\"><a href=\"#安装Nuget包\" class=\"headerlink\" title=\"安装Nuget包\"></a>安装Nuget包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install-Package MaxMind.GeoIP2</span><br></pre></td></tr></table></figure><h3 id=\"代码调用\"><a href=\"#代码调用\" class=\"headerlink\" title=\"代码调用\"></a>代码调用</h3><p>因GeoLite2只提供了City和Country两个数据库版本。<br>故只能进行这两种调用方式，调用方式非常简单</p><h4 id=\"City\"><a href=\"#City\" class=\"headerlink\" title=\"City\"></a>City</h4><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> DatabaseReader(<span class=\"string\">\"GeoLite2-City.mmdb\"</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> city = reader.City(<span class=\"string\">\"65.49.134.29\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>city即为查询结果，结构如下：<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"city\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">5125591</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"Macedon\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"continent\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"NA\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">6255149</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"Nordamerika\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"North America\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Norteamérica\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"Amérique du Nord\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"北アメリカ\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"América do Norte\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"Северная Америка\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"北美洲\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"country\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">6252001</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_in_european_union\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"iso_code\"</span>: <span class=\"string\">\"US\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"USA\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"United States\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Estados Unidos\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"États-Unis\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"アメリカ合衆国\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"Estados Unidos\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"США\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"美国\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"location\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"accuracy_radius\"</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">        <span class=\"string\">\"latitude\"</span>: <span class=\"number\">43.1089</span>,</span><br><span class=\"line\">        <span class=\"string\">\"longitude\"</span>: <span class=\"number\">-77.3226</span>,</span><br><span class=\"line\">        <span class=\"string\">\"metro_code\"</span>: <span class=\"number\">538</span>,</span><br><span class=\"line\">        <span class=\"string\">\"time_zone\"</span>: <span class=\"string\">\"America/New_York\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"maxmind\"</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"string\">\"postal\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"14502\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"registered_country\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">6252001</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_in_european_union\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"iso_code\"</span>: <span class=\"string\">\"US\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"USA\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"United States\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Estados Unidos\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"États-Unis\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"アメリカ合衆国\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"Estados Unidos\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"США\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"美国\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"represented_country\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"is_in_european_union\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"subdivisions\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">5128638</span>,</span><br><span class=\"line\">            <span class=\"string\">\"iso_code\"</span>: <span class=\"string\">\"NY\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">\"de\"</span>: <span class=\"string\">\"New York\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"en\"</span>: <span class=\"string\">\"New York\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Nueva York\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"New York\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"ニューヨーク州\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"Nova Iorque\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"Нью-Йорк\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"纽约州\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"traits\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"ip_address\"</span>: <span class=\"string\">\"66.66.66.66\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_anonymous\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_anonymous_proxy\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_anonymous_vpn\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_hosting_provider\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_legitimate_proxy\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_public_proxy\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_satellite_provider\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_tor_exit_node\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>其中包含了比较详细的信息，有具体的经纬度。</p><h4 id=\"Country\"><a href=\"#Country\" class=\"headerlink\" title=\"Country\"></a>Country</h4><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> DatabaseReader(<span class=\"string\">\"GeoLite2-Country.mmdb\"</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> country = reader.Country(<span class=\"string\">\"66.66.66.66\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>country即为查询结果，结构如下：<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"continent\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"NA\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">6255149</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"Nordamerika\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"North America\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Norteamérica\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"Amérique du Nord\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"北アメリカ\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"América do Norte\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"Северная Америка\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"北美洲\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"country\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">6252001</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_in_european_union\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"iso_code\"</span>: <span class=\"string\">\"US\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"USA\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"United States\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Estados Unidos\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"États-Unis\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"アメリカ合衆国\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"Estados Unidos\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"США\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"美国\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"maxmind\"</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"string\">\"registered_country\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">6252001</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_in_european_union\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"iso_code\"</span>: <span class=\"string\">\"US\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"USA\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"United States\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Estados Unidos\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"États-Unis\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"アメリカ合衆国\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"Estados Unidos\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"США\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"美国\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"represented_country\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"is_in_european_union\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"traits\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"ip_address\"</span>: <span class=\"string\">\"66.66.66.66\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_anonymous\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_anonymous_proxy\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_anonymous_vpn\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_hosting_provider\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_legitimate_proxy\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_public_proxy\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_satellite_provider\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_tor_exit_node\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>country数据库中的信息的详细程度较之city就差了很多，但数据库大小仅为city的 1/20，视使用场景来决定使用对应的数据库。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p><a href=\"https://www.maxmind.com/zh/geoip2-services-and-databases\" target=\"_blank\" rel=\"noopener\">GeoIP® 数据库&amp;服务：业界领先的IP智能</a>，MaxMind GeoIP2 服务能识别互联网用户的地点位置与其他特征，应用广泛，包括个性化定制内容、诈欺检测、广告定向、网站流量分析、执行规定、地理目标定位、地理围栏定位 (geo-fencing)以及数字版权管理。<br>","more":"<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180221212532042/20180221093334576.png\" alt=\"\"></p><ul><li><a href=\"https://blog.maxmind.com/2014/01/31/who-has-the-most-accurate-ip-geolocation-data/\" target=\"_blank\" rel=\"noopener\">MaxMind是IP地理定位准确性的行业领导者.</a></li><li><a href=\"https://www.maxmind.com/zh/geoip2-city-database-accuracy\" target=\"_blank\" rel=\"noopener\">按照不同国家，比较MaxMind GeoIP2数据服务与数据库的准确性</a>。</li></ul><p><a href=\"https://www.maxmind.com/zh/geoip2-precision-services\" target=\"_blank\" rel=\"noopener\">GeoIP2精准版服务</a>向您提供本公司最准确的数据，为您省去在您服务器上托管数据或部署更新项目的麻烦。 我们的精准版服务产品可通过API或文件手动上传方式使用，为您提供最新的数据。</p><p><a href=\"https://www.maxmind.com/zh/geoip2-databases\" target=\"_blank\" rel=\"noopener\">MaxMind的GeoIP2数据库</a>为大容量环境提供IP智能数据。 通过在本地托管我们的数据库，您既可避免网络延迟问题，又可避免按每次查询计价的费用。</p><p>GeoIP 分为商业版和免费版，免费版比商业版精度差了许多，经测试对于城市定位确实有差距，能否接受看你的精度要求！</p><h2 id=\"免费版介绍\"><a href=\"#免费版介绍\" class=\"headerlink\" title=\"免费版介绍\"></a>免费版介绍</h2><p>免费版仅有数据库服务，目前有两个版本<br>1、GeoLite 版本，网上流传较广，数据库类型为 dat 格式文件，库文件较小、未进行精准度测试且不再更新。<br>2、GeoLite2版本，目前最新版本，数据库文件为 mmdb 格式或csv格式。<br><a href=\"https://dev.maxmind.com/geoip/geoip2/geoip2-city-country-csv-databases/\" target=\"_blank\" rel=\"noopener\"><strong>GeoLite2 特性</strong></a></p><h2 id=\"下载数据库\"><a href=\"#下载数据库\" class=\"headerlink\" title=\"下载数据库\"></a>下载数据库</h2><h3 id=\"GeoIP数据库\"><a href=\"#GeoIP数据库\" class=\"headerlink\" title=\"GeoIP数据库\"></a>GeoIP数据库</h3><p><a href=\"https://www.maxmind.com/zh/geoip2-databases\" target=\"_blank\" rel=\"noopener\"><strong>GeoIP2数据库</strong></a><br>本地维护的数据库适用于容量大、延迟性低的环境，购买机构可以获取站点许可证，即可在公司内进行无限次使用。</p><ul><li>对于选定地点，含有简体中文、法文、德文、日文、西班牙文、巴西葡萄牙文及俄文版的本地化名称</li><li>为多数常用语言提供开放源代码的API</li><li>可提供自动更新</li></ul><h3 id=\"GeoLite2-开源数据库\"><a href=\"#GeoLite2-开源数据库\" class=\"headerlink\" title=\"GeoLite2 开源数据库\"></a>GeoLite2 开源数据库</h3><h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p><a href=\"https://dev.maxmind.com/zh-hans/geoip/geoip2/geolite2-开源数据库/\" target=\"_blank\" rel=\"noopener\">GeoLite2数据库</a>是GeoIP2的免费版，其准确率稍低于付费版。</p><h4 id=\"技术支持\"><a href=\"#技术支持\" class=\"headerlink\" title=\"技术支持\"></a>技术支持</h4><p>MaxMind 不为免费数据库提供技术支持。如果您有问题请前往<a href=\"http://stackoverflow.com/questions/tagged/geoip\" target=\"_blank\" rel=\"noopener\">stackoverflow’s GeoIP问题以及解答。</a></p><h4 id=\"许可证\"><a href=\"#许可证\" class=\"headerlink\" title=\"许可证\"></a>许可证</h4><p>GeoLite2使用的是开源许可证：<a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh_TW\" target=\"_blank\" rel=\"noopener\">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>. 您只需要在页面中添加如下代码即可：<br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">该产品使用MaxMind公司的GeoLite2数据，可以在此获取：</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.maxmind.com\"</span>&gt;</span>http://www.maxmind.com<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.</span><br></pre></td></tr></table></figure><p></p><p>官方提供 <a href=\"http://www.maxmind.com/zh/geolite2-developer-package\" target=\"_blank\" rel=\"noopener\">二次销售许可证</a>.</p><h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4><table><thead><tr><th style=\"text-align:center\">数据库</th><th style=\"text-align:center\"><a href=\"http://maxmind.github.io/MaxMind-DB/\" target=\"_blank\" rel=\"noopener\">MaxMind DB</a> 二进制格式, 压缩</th><th style=\"text-align:center\"><a href=\"https://dev.maxmind.com/geoip/geoip2/geoip2-city-country-csv-databases/\" target=\"_blank\" rel=\"noopener\">CSV 格式</a>, 压缩</th></tr></thead><tbody><tr><td style=\"text-align:center\">GeoLite2 城市</td><td style=\"text-align:center\"><a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz\" target=\"_blank\" rel=\"noopener\">Download</a> (<a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.md5\" target=\"_blank\" rel=\"noopener\">md5 校验</a>)</td><td style=\"text-align:center\"><a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-City-CSV.zip\" target=\"_blank\" rel=\"noopener\">Download</a> (<a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-City-CSV.zip.md5\" target=\"_blank\" rel=\"noopener\">md5 校验</a>)</td></tr><tr><td style=\"text-align:center\">GeoLite2 国家</td><td style=\"text-align:center\"><a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.mmdb.gz\" target=\"_blank\" rel=\"noopener\">Download</a> (<a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.md5\" target=\"_blank\" rel=\"noopener\">md5 校验</a>)</td><td style=\"text-align:center\"><a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country-CSV.zip\" target=\"_blank\" rel=\"noopener\">Download</a> (<a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country-CSV.zip.md5\" target=\"_blank\" rel=\"noopener\">md5 校验</a>)</td></tr></tbody></table><h4 id=\"更新数据库\"><a href=\"#更新数据库\" class=\"headerlink\" title=\"更新数据库\"></a>更新数据库</h4><p>你可以使用 <a href=\"https://dev.maxmind.com/zh-hans/geoip/geoipupdate/\" target=\"_blank\" rel=\"noopener\">GeoIP 更新</a>来自动更新您的数据库。</p><h4 id=\"MaxMind-API-接口\"><a href=\"#MaxMind-API-接口\" class=\"headerlink\" title=\"MaxMind API 接口\"></a>MaxMind API 接口</h4><p>参阅 <a href=\"https://dev.maxmind.com/zh-hans/geoip/geoip2/downloadable/#MaxMind_APIs\" target=\"_blank\" rel=\"noopener\">GeoIP2 可下载数据库</a> 以下载API。付费版和免费版API互通。</p><h2 id=\"Net调用MaxMind-API\"><a href=\"#Net调用MaxMind-API\" class=\"headerlink\" title=\".Net调用MaxMind API\"></a>.Net调用MaxMind API</h2><p>.Net调用MaxMind API可以使用官方发布的<a href=\"https://www.nuget.org/packages/MaxMind.GeoIP2/\" target=\"_blank\" rel=\"noopener\">nuget包</a>，官方提供了<a href=\"http://maxmind.github.io/GeoIP2-dotnet/\" target=\"_blank\" rel=\"noopener\">文档</a>和<a href=\"https://github.com/maxmind/GeoIP2-dotnet\" target=\"_blank\" rel=\"noopener\">源码地址</a>。</p><h3 id=\"安装Nuget包\"><a href=\"#安装Nuget包\" class=\"headerlink\" title=\"安装Nuget包\"></a>安装Nuget包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install-Package MaxMind.GeoIP2</span><br></pre></td></tr></table></figure><h3 id=\"代码调用\"><a href=\"#代码调用\" class=\"headerlink\" title=\"代码调用\"></a>代码调用</h3><p>因GeoLite2只提供了City和Country两个数据库版本。<br>故只能进行这两种调用方式，调用方式非常简单</p><h4 id=\"City\"><a href=\"#City\" class=\"headerlink\" title=\"City\"></a>City</h4><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> DatabaseReader(<span class=\"string\">\"GeoLite2-City.mmdb\"</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> city = reader.City(<span class=\"string\">\"65.49.134.29\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>city即为查询结果，结构如下：<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"city\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">5125591</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"Macedon\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"continent\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"NA\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">6255149</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"Nordamerika\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"North America\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Norteamérica\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"Amérique du Nord\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"北アメリカ\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"América do Norte\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"Северная Америка\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"北美洲\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"country\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">6252001</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_in_european_union\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"iso_code\"</span>: <span class=\"string\">\"US\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"USA\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"United States\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Estados Unidos\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"États-Unis\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"アメリカ合衆国\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"Estados Unidos\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"США\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"美国\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"location\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"accuracy_radius\"</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">        <span class=\"string\">\"latitude\"</span>: <span class=\"number\">43.1089</span>,</span><br><span class=\"line\">        <span class=\"string\">\"longitude\"</span>: <span class=\"number\">-77.3226</span>,</span><br><span class=\"line\">        <span class=\"string\">\"metro_code\"</span>: <span class=\"number\">538</span>,</span><br><span class=\"line\">        <span class=\"string\">\"time_zone\"</span>: <span class=\"string\">\"America/New_York\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"maxmind\"</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"string\">\"postal\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"14502\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"registered_country\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">6252001</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_in_european_union\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"iso_code\"</span>: <span class=\"string\">\"US\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"USA\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"United States\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Estados Unidos\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"États-Unis\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"アメリカ合衆国\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"Estados Unidos\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"США\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"美国\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"represented_country\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"is_in_european_union\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"subdivisions\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">5128638</span>,</span><br><span class=\"line\">            <span class=\"string\">\"iso_code\"</span>: <span class=\"string\">\"NY\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">\"de\"</span>: <span class=\"string\">\"New York\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"en\"</span>: <span class=\"string\">\"New York\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Nueva York\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"New York\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"ニューヨーク州\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"Nova Iorque\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"Нью-Йорк\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"纽约州\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"traits\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"ip_address\"</span>: <span class=\"string\">\"66.66.66.66\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_anonymous\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_anonymous_proxy\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_anonymous_vpn\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_hosting_provider\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_legitimate_proxy\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_public_proxy\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_satellite_provider\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_tor_exit_node\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>其中包含了比较详细的信息，有具体的经纬度。</p><h4 id=\"Country\"><a href=\"#Country\" class=\"headerlink\" title=\"Country\"></a>Country</h4><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> DatabaseReader(<span class=\"string\">\"GeoLite2-Country.mmdb\"</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> country = reader.Country(<span class=\"string\">\"66.66.66.66\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>country即为查询结果，结构如下：<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"continent\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"NA\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">6255149</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"Nordamerika\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"North America\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Norteamérica\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"Amérique du Nord\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"北アメリカ\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"América do Norte\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"Северная Америка\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"北美洲\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"country\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">6252001</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_in_european_union\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"iso_code\"</span>: <span class=\"string\">\"US\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"USA\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"United States\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Estados Unidos\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"États-Unis\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"アメリカ合衆国\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"Estados Unidos\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"США\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"美国\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"maxmind\"</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"string\">\"registered_country\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"geoname_id\"</span>: <span class=\"number\">6252001</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_in_european_union\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"iso_code\"</span>: <span class=\"string\">\"US\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"de\"</span>: <span class=\"string\">\"USA\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"en\"</span>: <span class=\"string\">\"United States\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"es\"</span>: <span class=\"string\">\"Estados Unidos\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"fr\"</span>: <span class=\"string\">\"États-Unis\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ja\"</span>: <span class=\"string\">\"アメリカ合衆国\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pt-BR\"</span>: <span class=\"string\">\"Estados Unidos\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"ru\"</span>: <span class=\"string\">\"США\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"zh-CN\"</span>: <span class=\"string\">\"美国\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"represented_country\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"is_in_european_union\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"names\"</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"traits\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"ip_address\"</span>: <span class=\"string\">\"66.66.66.66\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_anonymous\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_anonymous_proxy\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_anonymous_vpn\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_hosting_provider\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_legitimate_proxy\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_public_proxy\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_satellite_provider\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"is_tor_exit_node\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>country数据库中的信息的详细程度较之city就差了很多，但数据库大小仅为city的 1/20，视使用场景来决定使用对应的数据库。</p><!-- rebuild by neat -->"},{"title":"一木禾网盘文件下载地址批量获取实现","abbrlink":19316,"date":"2016-02-01T07:54:58.000Z","_content":"流程清晰之后，我们就可以制作软件来对网盘地址链接批量处理得到下载链接。\n<!-- more -->\n## 选型\n我们的整个操作流程类似模拟浏览器操作，最好的解决方法其实是使用Selenium直接操作浏览器抓取。不过这方面我还没什么研究，就直接用最近发现的[木鱼](https://blog.fishlee.net/)大牛的 [FSLib.Network](https://github.com/iccfish/fslib.network) 库来实现。这个类库是实现了HTTP访问过程中对Cookie的自动处理，在大多数情况下都可以模拟浏览器。\n使用nuget在项目中安装 **FSLib.Network** 包:\n> **Install-Package network.fishlee.net**\n\n## 获取流程实现\n下面来依据流程完成通过页面地址来获得文件下载连接的方法：\n```csharp\nprivate async void GetDownLoadUrl(string fileUrl)\n{\n    //建立HTTP客户端\n    var client = new HttpClient();\n    //用于接收验证码\n    StringBuilder Result;\n    //验证码的字符数组\n    byte[] bytes;\n    //用于接收下载链接\n    string downPath = string.Empty;\n    //通过正则匹配到链接中的 fileid\n   int id = Convert.ToInt32(Extract(fileUrl, \"\\\\d{7,}\"));\n    //有时会出现一级域名为ymhwp的情况，这里先做一下替换，以防不测\n    fileUrl = fileUrl.Replace(\"ymhwp\", \"yimuhe\");\n    //创建展示页面请求\n    var filecontext = client.Create<string>(HttpMethod.Get, fileUrl);\n    //发送请求\n    await filecontext.SendTask();\n    if (filecontext.IsValid())//如果请求成功\n    {\n        //替换链接中的fil为down，使其成为下载页面地址\n        fileUrl = fileUrl.Replace(\"file\", \"down\");\n        //创建下载页面请求\n         var downcontext = client.Create<string>(HttpMethod.Get, fileUrl);\n        await downcontext.SendTask();\n        if (downcontext.IsValid())\n        {\n            //设置初始返回值为0，表示验证码输入错误，即识别失败\n            int response = 0;\n            while (response == 0)//循环识别，直到识别成功\n            {\n                //创建验证码图片请求\n                   var vcode = client.Create<Byte[]>(HttpMethod.Get, \"http://www.yimuhe.com/n_downcode.php\");\n                await vcode.SendTask();\n                if (vcode.IsValid())\n                {\n                    //将获取到的验证码图片存入字节数组中\n                    bytes = vcode.Result;\n                    Result = new StringBuilder('\\0', 256);\n                    //识别验证码\n                    GetVcodeFromBuffer(1, bytes, bytes.Length, Result);\n                    //创建检验验证码请求\n                    var resp = client.Create<string>(HttpMethod.Post,\n                        \"http://www.yimuhe.com/n_downcode.php\", data: \"action=yz&id=\" + id + \"&code=\" + Result);\n                    await resp.SendTask();\n                    if (resp.IsValid())\n                    {\n                        //返回验证码校验值、成功为1失败为0\n                        response = Convert.ToInt32(resp.Result);\n                    }\n                }\n            }\n            //创建获取下载地址请求\n            var h1 = client.Create<string>(HttpMethod.Post,\n                    \"http://www.yimuhe.com/n_dd.php?file_id=\" + id + \"&ser=99\", refer: \"http://www.yimuhe.com/down-2546737.html\", data: id.ToString());\n            await h1.SendTask();\n            if (h1.IsValid())\n            {\n                //通过HtmlAgilityPack库完成html解析，获得下载地址\n                   HtmlDocument html = new HtmlDocument();\n                html.LoadHtml(h1.Result);\n                downPath = html.GetElementbyId(\"downs\").Attributes[\"href\"].Value;\n                tBAfter.AppendText(downPath + NewLine);\n            }\n        }\n\n    }\n}\n```\n### 批量获取实现\n我的批量实现思路为将要获取的链接加入一个队列当中，线程从队头移出数据一条进行地址获取，获取成功不进行操作，失败则将地址添回到队尾。循环获取直到队列为空。另一个队列储存正在处理的数据，仅当两个线程均为空时才会陆续结束所有线程。线程执行的方法在上边的方法基础上又做了一些修改。\n\n具体实现代码如下：\n```csharp\nprivate async void GetDownLoadUrl()\n{\n    //当链接队列和正在处理队列存在不为空时，循环执行以下代码\n    while (_pathList.Count > 0 || _pathReady.Count > 0)\n    {\n        //当链接队列不为空时\n        if (_pathList.Count > 0)\n        {\n\n            //从队头取出一条数据\n            string fileUrl = _pathList[0];\n            _pathList.RemoveAt(0);\n            _pathReady.Add(fileUrl);\n            //建立HTTP客户端\n            var client = new HttpClient();\n            //用于接收验证码\n            StringBuilder Result;\n            //验证码的字符数组\n            byte[] bytes;\n            //用于接收下载链接\n            string downPath = string.Empty;\n            //通过正则匹配到链接中的 fileid\n            int id = Convert.ToInt32(Extract(fileUrl, \"\\\\d{7,}\"));\n            //有时会出现一级域名为ymhwp的情况，这里先做一下替换，以防不测\n            fileUrl = fileUrl.Replace(\"ymhwp\", \"yimuhe\");\n            //创建展示页面请求\n            var filecontext = client.Create<string>(HttpMethod.Get, fileUrl);\n            //发送请求\n            await filecontext.SendTask();\n            if (filecontext.IsValid())//如果请求成功\n            {\n                //替换链接中的fil为down，使其成为下载页面地址\n                fileUrl = fileUrl.Replace(\"file\", \"down\");\n                //创建下载页面请求\n                var downcontext = client.Create<string>(HttpMethod.Get, fileUrl);\n                await downcontext.SendTask();\n                if (downcontext.IsValid())\n                {\n                    //设置初始返回值为0，表示验证码输入错误，即识别失败\n                    int response = 0;\n                    while (response == 0)//循环识别，直到识别成功\n                    {\n                        //创建验证码图片请求\n                        var vcode = client.Create<Byte[]>(HttpMethod.Get, \"http://www.yimuhe.com/n_downcode.php\");\n                        await vcode.SendTask();\n                        if (vcode.IsValid())\n                        {\n                            //将获取到的验证码图片存入字节数组中\n                            bytes = vcode.Result;\n                            Result = new StringBuilder('\\0', 256);\n                            //识别验证码\n                            GetVcodeFromBuffer(1, bytes, bytes.Length, Result);\n                            //创建检验验证码请求\n                            var resp = client.Create<string>(HttpMethod.Post,\n                                \"http://www.yimuhe.com/n_downcode.php\", data: \"action=yz&id=\" + id + \"&code=\" + Result);\n                            await resp.SendTask();\n                            if (resp.IsValid())\n                            {\n                                //返回验证码校验值、成功为1失败为0\n                                response = Convert.ToInt32(resp.Result);\n                            }\n                        }\n                    }\n                    //创建获取下载地址请求\n                    var h1 = client.Create<string>(HttpMethod.Post,\n                            \"http://www.yimuhe.com/n_dd.php?file_id=\" + id + \"&ser=99\", refer: \"http://www.yimuhe.com/down-2546737.html\", data: id.ToString());\n                    await h1.SendTask();\n                    if (h1.IsValid())\n                    {\n                        //通过HtmlAgilityPack库完成html解析，获得下载地址\n                        HtmlDocument html = new HtmlDocument();\n                        html.LoadHtml(h1.Result);\n                        downPath = html.GetElementbyId(\"downs\").Attributes[\"href\"].Value;\n                        //将获取到的地址显示到界面\n                        tBAfter.AppendText(downPath + NewLine);\n                    }\n                }\n            }\n            //如果downPath为空，则请求失败\n            if (string.IsNullOrWhiteSpace(downPath))\n            {\n                //将请求链接添回队尾\n                _pathList.Add(path);\n            }\n            //处理完毕，移出当前处理队列\n            _pathReady.Remove(path);\n        }\n    }\n}\n```\n\n## 结束\n本文旨在抛砖引玉，因为一些都懂得的原因，就不给出成品的下载地址了，有需要的童鞋可以自行完成。","source":"_posts/一木禾网盘文件下载地址批量获取实现.md","raw":"---\ntitle: 一木禾网盘文件下载地址批量获取实现\ntags:\n  - 爬虫\nabbrlink: 19316\ndate: 2016-02-01 15:54:58\n---\n流程清晰之后，我们就可以制作软件来对网盘地址链接批量处理得到下载链接。\n<!-- more -->\n## 选型\n我们的整个操作流程类似模拟浏览器操作，最好的解决方法其实是使用Selenium直接操作浏览器抓取。不过这方面我还没什么研究，就直接用最近发现的[木鱼](https://blog.fishlee.net/)大牛的 [FSLib.Network](https://github.com/iccfish/fslib.network) 库来实现。这个类库是实现了HTTP访问过程中对Cookie的自动处理，在大多数情况下都可以模拟浏览器。\n使用nuget在项目中安装 **FSLib.Network** 包:\n> **Install-Package network.fishlee.net**\n\n## 获取流程实现\n下面来依据流程完成通过页面地址来获得文件下载连接的方法：\n```csharp\nprivate async void GetDownLoadUrl(string fileUrl)\n{\n    //建立HTTP客户端\n    var client = new HttpClient();\n    //用于接收验证码\n    StringBuilder Result;\n    //验证码的字符数组\n    byte[] bytes;\n    //用于接收下载链接\n    string downPath = string.Empty;\n    //通过正则匹配到链接中的 fileid\n   int id = Convert.ToInt32(Extract(fileUrl, \"\\\\d{7,}\"));\n    //有时会出现一级域名为ymhwp的情况，这里先做一下替换，以防不测\n    fileUrl = fileUrl.Replace(\"ymhwp\", \"yimuhe\");\n    //创建展示页面请求\n    var filecontext = client.Create<string>(HttpMethod.Get, fileUrl);\n    //发送请求\n    await filecontext.SendTask();\n    if (filecontext.IsValid())//如果请求成功\n    {\n        //替换链接中的fil为down，使其成为下载页面地址\n        fileUrl = fileUrl.Replace(\"file\", \"down\");\n        //创建下载页面请求\n         var downcontext = client.Create<string>(HttpMethod.Get, fileUrl);\n        await downcontext.SendTask();\n        if (downcontext.IsValid())\n        {\n            //设置初始返回值为0，表示验证码输入错误，即识别失败\n            int response = 0;\n            while (response == 0)//循环识别，直到识别成功\n            {\n                //创建验证码图片请求\n                   var vcode = client.Create<Byte[]>(HttpMethod.Get, \"http://www.yimuhe.com/n_downcode.php\");\n                await vcode.SendTask();\n                if (vcode.IsValid())\n                {\n                    //将获取到的验证码图片存入字节数组中\n                    bytes = vcode.Result;\n                    Result = new StringBuilder('\\0', 256);\n                    //识别验证码\n                    GetVcodeFromBuffer(1, bytes, bytes.Length, Result);\n                    //创建检验验证码请求\n                    var resp = client.Create<string>(HttpMethod.Post,\n                        \"http://www.yimuhe.com/n_downcode.php\", data: \"action=yz&id=\" + id + \"&code=\" + Result);\n                    await resp.SendTask();\n                    if (resp.IsValid())\n                    {\n                        //返回验证码校验值、成功为1失败为0\n                        response = Convert.ToInt32(resp.Result);\n                    }\n                }\n            }\n            //创建获取下载地址请求\n            var h1 = client.Create<string>(HttpMethod.Post,\n                    \"http://www.yimuhe.com/n_dd.php?file_id=\" + id + \"&ser=99\", refer: \"http://www.yimuhe.com/down-2546737.html\", data: id.ToString());\n            await h1.SendTask();\n            if (h1.IsValid())\n            {\n                //通过HtmlAgilityPack库完成html解析，获得下载地址\n                   HtmlDocument html = new HtmlDocument();\n                html.LoadHtml(h1.Result);\n                downPath = html.GetElementbyId(\"downs\").Attributes[\"href\"].Value;\n                tBAfter.AppendText(downPath + NewLine);\n            }\n        }\n\n    }\n}\n```\n### 批量获取实现\n我的批量实现思路为将要获取的链接加入一个队列当中，线程从队头移出数据一条进行地址获取，获取成功不进行操作，失败则将地址添回到队尾。循环获取直到队列为空。另一个队列储存正在处理的数据，仅当两个线程均为空时才会陆续结束所有线程。线程执行的方法在上边的方法基础上又做了一些修改。\n\n具体实现代码如下：\n```csharp\nprivate async void GetDownLoadUrl()\n{\n    //当链接队列和正在处理队列存在不为空时，循环执行以下代码\n    while (_pathList.Count > 0 || _pathReady.Count > 0)\n    {\n        //当链接队列不为空时\n        if (_pathList.Count > 0)\n        {\n\n            //从队头取出一条数据\n            string fileUrl = _pathList[0];\n            _pathList.RemoveAt(0);\n            _pathReady.Add(fileUrl);\n            //建立HTTP客户端\n            var client = new HttpClient();\n            //用于接收验证码\n            StringBuilder Result;\n            //验证码的字符数组\n            byte[] bytes;\n            //用于接收下载链接\n            string downPath = string.Empty;\n            //通过正则匹配到链接中的 fileid\n            int id = Convert.ToInt32(Extract(fileUrl, \"\\\\d{7,}\"));\n            //有时会出现一级域名为ymhwp的情况，这里先做一下替换，以防不测\n            fileUrl = fileUrl.Replace(\"ymhwp\", \"yimuhe\");\n            //创建展示页面请求\n            var filecontext = client.Create<string>(HttpMethod.Get, fileUrl);\n            //发送请求\n            await filecontext.SendTask();\n            if (filecontext.IsValid())//如果请求成功\n            {\n                //替换链接中的fil为down，使其成为下载页面地址\n                fileUrl = fileUrl.Replace(\"file\", \"down\");\n                //创建下载页面请求\n                var downcontext = client.Create<string>(HttpMethod.Get, fileUrl);\n                await downcontext.SendTask();\n                if (downcontext.IsValid())\n                {\n                    //设置初始返回值为0，表示验证码输入错误，即识别失败\n                    int response = 0;\n                    while (response == 0)//循环识别，直到识别成功\n                    {\n                        //创建验证码图片请求\n                        var vcode = client.Create<Byte[]>(HttpMethod.Get, \"http://www.yimuhe.com/n_downcode.php\");\n                        await vcode.SendTask();\n                        if (vcode.IsValid())\n                        {\n                            //将获取到的验证码图片存入字节数组中\n                            bytes = vcode.Result;\n                            Result = new StringBuilder('\\0', 256);\n                            //识别验证码\n                            GetVcodeFromBuffer(1, bytes, bytes.Length, Result);\n                            //创建检验验证码请求\n                            var resp = client.Create<string>(HttpMethod.Post,\n                                \"http://www.yimuhe.com/n_downcode.php\", data: \"action=yz&id=\" + id + \"&code=\" + Result);\n                            await resp.SendTask();\n                            if (resp.IsValid())\n                            {\n                                //返回验证码校验值、成功为1失败为0\n                                response = Convert.ToInt32(resp.Result);\n                            }\n                        }\n                    }\n                    //创建获取下载地址请求\n                    var h1 = client.Create<string>(HttpMethod.Post,\n                            \"http://www.yimuhe.com/n_dd.php?file_id=\" + id + \"&ser=99\", refer: \"http://www.yimuhe.com/down-2546737.html\", data: id.ToString());\n                    await h1.SendTask();\n                    if (h1.IsValid())\n                    {\n                        //通过HtmlAgilityPack库完成html解析，获得下载地址\n                        HtmlDocument html = new HtmlDocument();\n                        html.LoadHtml(h1.Result);\n                        downPath = html.GetElementbyId(\"downs\").Attributes[\"href\"].Value;\n                        //将获取到的地址显示到界面\n                        tBAfter.AppendText(downPath + NewLine);\n                    }\n                }\n            }\n            //如果downPath为空，则请求失败\n            if (string.IsNullOrWhiteSpace(downPath))\n            {\n                //将请求链接添回队尾\n                _pathList.Add(path);\n            }\n            //处理完毕，移出当前处理队列\n            _pathReady.Remove(path);\n        }\n    }\n}\n```\n\n## 结束\n本文旨在抛砖引玉，因为一些都懂得的原因，就不给出成品的下载地址了，有需要的童鞋可以自行完成。","slug":"一木禾网盘文件下载地址批量获取实现","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24p2h007cd00on02pmpa6","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>流程清晰之后，我们就可以制作软件来对网盘地址链接批量处理得到下载链接。<br><a id=\"more\"></a></p><h2 id=\"选型\"><a href=\"#选型\" class=\"headerlink\" title=\"选型\"></a>选型</h2><p>我们的整个操作流程类似模拟浏览器操作，最好的解决方法其实是使用Selenium直接操作浏览器抓取。不过这方面我还没什么研究，就直接用最近发现的<a href=\"https://blog.fishlee.net/\" target=\"_blank\" rel=\"noopener\">木鱼</a>大牛的 <a href=\"https://github.com/iccfish/fslib.network\" target=\"_blank\" rel=\"noopener\">FSLib.Network</a> 库来实现。这个类库是实现了HTTP访问过程中对Cookie的自动处理，在大多数情况下都可以模拟浏览器。<br>使用nuget在项目中安装 <strong>FSLib.Network</strong> 包:</p><blockquote><p><strong>Install-Package network.fishlee.net</strong></p></blockquote><h2 id=\"获取流程实现\"><a href=\"#获取流程实现\" class=\"headerlink\" title=\"获取流程实现\"></a>获取流程实现</h2><p>下面来依据流程完成通过页面地址来获得文件下载连接的方法：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> <span class=\"keyword\">void</span> <span class=\"title\">GetDownLoadUrl</span>(<span class=\"params\"><span class=\"keyword\">string</span> fileUrl</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//建立HTTP客户端</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> client = <span class=\"keyword\">new</span> HttpClient();</span><br><span class=\"line\">    <span class=\"comment\">//用于接收验证码</span></span><br><span class=\"line\">    StringBuilder Result;</span><br><span class=\"line\">    <span class=\"comment\">//验证码的字符数组</span></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes;</span><br><span class=\"line\">    <span class=\"comment\">//用于接收下载链接</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> downPath = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"comment\">//通过正则匹配到链接中的 fileid</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> id = Convert.ToInt32(Extract(fileUrl, <span class=\"string\">\"\\\\d&#123;7,&#125;\"</span>));</span><br><span class=\"line\">    <span class=\"comment\">//有时会出现一级域名为ymhwp的情况，这里先做一下替换，以防不测</span></span><br><span class=\"line\">    fileUrl = fileUrl.Replace(<span class=\"string\">\"ymhwp\"</span>, <span class=\"string\">\"yimuhe\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//创建展示页面请求</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> filecontext = client.Create&lt;<span class=\"keyword\">string</span>&gt;(HttpMethod.Get, fileUrl);</span><br><span class=\"line\">    <span class=\"comment\">//发送请求</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> filecontext.SendTask();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (filecontext.IsValid())<span class=\"comment\">//如果请求成功</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//替换链接中的fil为down，使其成为下载页面地址</span></span><br><span class=\"line\">        fileUrl = fileUrl.Replace(<span class=\"string\">\"file\"</span>, <span class=\"string\">\"down\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//创建下载页面请求</span></span><br><span class=\"line\">         <span class=\"keyword\">var</span> downcontext = client.Create&lt;<span class=\"keyword\">string</span>&gt;(HttpMethod.Get, fileUrl);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> downcontext.SendTask();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (downcontext.IsValid())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置初始返回值为0，表示验证码输入错误，即识别失败</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> response = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (response == <span class=\"number\">0</span>)<span class=\"comment\">//循环识别，直到识别成功</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//创建验证码图片请求</span></span><br><span class=\"line\">                   <span class=\"keyword\">var</span> vcode = client.Create&lt;Byte[]&gt;(HttpMethod.Get, <span class=\"string\">\"http://www.yimuhe.com/n_downcode.php\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">await</span> vcode.SendTask();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (vcode.IsValid())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//将获取到的验证码图片存入字节数组中</span></span><br><span class=\"line\">                    bytes = vcode.Result;</span><br><span class=\"line\">                    Result = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">'\\0'</span>, <span class=\"number\">256</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//识别验证码</span></span><br><span class=\"line\">                    GetVcodeFromBuffer(<span class=\"number\">1</span>, bytes, bytes.Length, Result);</span><br><span class=\"line\">                    <span class=\"comment\">//创建检验验证码请求</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> resp = client.Create&lt;<span class=\"keyword\">string</span>&gt;(HttpMethod.Post,</span><br><span class=\"line\">                        <span class=\"string\">\"http://www.yimuhe.com/n_downcode.php\"</span>, data: <span class=\"string\">\"action=yz&amp;id=\"</span> + id + <span class=\"string\">\"&amp;code=\"</span> + Result);</span><br><span class=\"line\">                    <span class=\"keyword\">await</span> resp.SendTask();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (resp.IsValid())</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//返回验证码校验值、成功为1失败为0</span></span><br><span class=\"line\">                        response = Convert.ToInt32(resp.Result);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//创建获取下载地址请求</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> h1 = client.Create&lt;<span class=\"keyword\">string</span>&gt;(HttpMethod.Post,</span><br><span class=\"line\">                    <span class=\"string\">\"http://www.yimuhe.com/n_dd.php?file_id=\"</span> + id + <span class=\"string\">\"&amp;ser=99\"</span>, refer: <span class=\"string\">\"http://www.yimuhe.com/down-2546737.html\"</span>, data: id.ToString());</span><br><span class=\"line\">            <span class=\"keyword\">await</span> h1.SendTask();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (h1.IsValid())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//通过HtmlAgilityPack库完成html解析，获得下载地址</span></span><br><span class=\"line\">                   HtmlDocument html = <span class=\"keyword\">new</span> HtmlDocument();</span><br><span class=\"line\">                html.LoadHtml(h1.Result);</span><br><span class=\"line\">                downPath = html.GetElementbyId(<span class=\"string\">\"downs\"</span>).Attributes[<span class=\"string\">\"href\"</span>].Value;</span><br><span class=\"line\">                tBAfter.AppendText(downPath + NewLine);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"批量获取实现\"><a href=\"#批量获取实现\" class=\"headerlink\" title=\"批量获取实现\"></a>批量获取实现</h3><p>我的批量实现思路为将要获取的链接加入一个队列当中，线程从队头移出数据一条进行地址获取，获取成功不进行操作，失败则将地址添回到队尾。循环获取直到队列为空。另一个队列储存正在处理的数据，仅当两个线程均为空时才会陆续结束所有线程。线程执行的方法在上边的方法基础上又做了一些修改。</p><p>具体实现代码如下：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> <span class=\"keyword\">void</span> <span class=\"title\">GetDownLoadUrl</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//当链接队列和正在处理队列存在不为空时，循环执行以下代码</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (_pathList.Count &gt; <span class=\"number\">0</span> || _pathReady.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//当链接队列不为空时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_pathList.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//从队头取出一条数据</span></span><br><span class=\"line\">            <span class=\"keyword\">string</span> fileUrl = _pathList[<span class=\"number\">0</span>];</span><br><span class=\"line\">            _pathList.RemoveAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            _pathReady.Add(fileUrl);</span><br><span class=\"line\">            <span class=\"comment\">//建立HTTP客户端</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> client = <span class=\"keyword\">new</span> HttpClient();</span><br><span class=\"line\">            <span class=\"comment\">//用于接收验证码</span></span><br><span class=\"line\">            StringBuilder Result;</span><br><span class=\"line\">            <span class=\"comment\">//验证码的字符数组</span></span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes;</span><br><span class=\"line\">            <span class=\"comment\">//用于接收下载链接</span></span><br><span class=\"line\">            <span class=\"keyword\">string</span> downPath = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">            <span class=\"comment\">//通过正则匹配到链接中的 fileid</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> id = Convert.ToInt32(Extract(fileUrl, <span class=\"string\">\"\\\\d&#123;7,&#125;\"</span>));</span><br><span class=\"line\">            <span class=\"comment\">//有时会出现一级域名为ymhwp的情况，这里先做一下替换，以防不测</span></span><br><span class=\"line\">            fileUrl = fileUrl.Replace(<span class=\"string\">\"ymhwp\"</span>, <span class=\"string\">\"yimuhe\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//创建展示页面请求</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> filecontext = client.Create&lt;<span class=\"keyword\">string</span>&gt;(HttpMethod.Get, fileUrl);</span><br><span class=\"line\">            <span class=\"comment\">//发送请求</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> filecontext.SendTask();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filecontext.IsValid())<span class=\"comment\">//如果请求成功</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//替换链接中的fil为down，使其成为下载页面地址</span></span><br><span class=\"line\">                fileUrl = fileUrl.Replace(<span class=\"string\">\"file\"</span>, <span class=\"string\">\"down\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">//创建下载页面请求</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> downcontext = client.Create&lt;<span class=\"keyword\">string</span>&gt;(HttpMethod.Get, fileUrl);</span><br><span class=\"line\">                <span class=\"keyword\">await</span> downcontext.SendTask();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (downcontext.IsValid())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//设置初始返回值为0，表示验证码输入错误，即识别失败</span></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> response = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (response == <span class=\"number\">0</span>)<span class=\"comment\">//循环识别，直到识别成功</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//创建验证码图片请求</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> vcode = client.Create&lt;Byte[]&gt;(HttpMethod.Get, <span class=\"string\">\"http://www.yimuhe.com/n_downcode.php\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">await</span> vcode.SendTask();</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (vcode.IsValid())</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//将获取到的验证码图片存入字节数组中</span></span><br><span class=\"line\">                            bytes = vcode.Result;</span><br><span class=\"line\">                            Result = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">'\\0'</span>, <span class=\"number\">256</span>);</span><br><span class=\"line\">                            <span class=\"comment\">//识别验证码</span></span><br><span class=\"line\">                            GetVcodeFromBuffer(<span class=\"number\">1</span>, bytes, bytes.Length, Result);</span><br><span class=\"line\">                            <span class=\"comment\">//创建检验验证码请求</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> resp = client.Create&lt;<span class=\"keyword\">string</span>&gt;(HttpMethod.Post,</span><br><span class=\"line\">                                <span class=\"string\">\"http://www.yimuhe.com/n_downcode.php\"</span>, data: <span class=\"string\">\"action=yz&amp;id=\"</span> + id + <span class=\"string\">\"&amp;code=\"</span> + Result);</span><br><span class=\"line\">                            <span class=\"keyword\">await</span> resp.SendTask();</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (resp.IsValid())</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"comment\">//返回验证码校验值、成功为1失败为0</span></span><br><span class=\"line\">                                response = Convert.ToInt32(resp.Result);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//创建获取下载地址请求</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> h1 = client.Create&lt;<span class=\"keyword\">string</span>&gt;(HttpMethod.Post,</span><br><span class=\"line\">                            <span class=\"string\">\"http://www.yimuhe.com/n_dd.php?file_id=\"</span> + id + <span class=\"string\">\"&amp;ser=99\"</span>, refer: <span class=\"string\">\"http://www.yimuhe.com/down-2546737.html\"</span>, data: id.ToString());</span><br><span class=\"line\">                    <span class=\"keyword\">await</span> h1.SendTask();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (h1.IsValid())</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//通过HtmlAgilityPack库完成html解析，获得下载地址</span></span><br><span class=\"line\">                        HtmlDocument html = <span class=\"keyword\">new</span> HtmlDocument();</span><br><span class=\"line\">                        html.LoadHtml(h1.Result);</span><br><span class=\"line\">                        downPath = html.GetElementbyId(<span class=\"string\">\"downs\"</span>).Attributes[<span class=\"string\">\"href\"</span>].Value;</span><br><span class=\"line\">                        <span class=\"comment\">//将获取到的地址显示到界面</span></span><br><span class=\"line\">                        tBAfter.AppendText(downPath + NewLine);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果downPath为空，则请求失败</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(downPath))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//将请求链接添回队尾</span></span><br><span class=\"line\">                _pathList.Add(path);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//处理完毕，移出当前处理队列</span></span><br><span class=\"line\">            _pathReady.Remove(path);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h2><p>本文旨在抛砖引玉，因为一些都懂得的原因，就不给出成品的下载地址了，有需要的童鞋可以自行完成。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>流程清晰之后，我们就可以制作软件来对网盘地址链接批量处理得到下载链接。<br>","more":"</p><h2 id=\"选型\"><a href=\"#选型\" class=\"headerlink\" title=\"选型\"></a>选型</h2><p>我们的整个操作流程类似模拟浏览器操作，最好的解决方法其实是使用Selenium直接操作浏览器抓取。不过这方面我还没什么研究，就直接用最近发现的<a href=\"https://blog.fishlee.net/\" target=\"_blank\" rel=\"noopener\">木鱼</a>大牛的 <a href=\"https://github.com/iccfish/fslib.network\" target=\"_blank\" rel=\"noopener\">FSLib.Network</a> 库来实现。这个类库是实现了HTTP访问过程中对Cookie的自动处理，在大多数情况下都可以模拟浏览器。<br>使用nuget在项目中安装 <strong>FSLib.Network</strong> 包:</p><blockquote><p><strong>Install-Package network.fishlee.net</strong></p></blockquote><h2 id=\"获取流程实现\"><a href=\"#获取流程实现\" class=\"headerlink\" title=\"获取流程实现\"></a>获取流程实现</h2><p>下面来依据流程完成通过页面地址来获得文件下载连接的方法：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> <span class=\"keyword\">void</span> <span class=\"title\">GetDownLoadUrl</span>(<span class=\"params\"><span class=\"keyword\">string</span> fileUrl</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//建立HTTP客户端</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> client = <span class=\"keyword\">new</span> HttpClient();</span><br><span class=\"line\">    <span class=\"comment\">//用于接收验证码</span></span><br><span class=\"line\">    StringBuilder Result;</span><br><span class=\"line\">    <span class=\"comment\">//验证码的字符数组</span></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes;</span><br><span class=\"line\">    <span class=\"comment\">//用于接收下载链接</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> downPath = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"comment\">//通过正则匹配到链接中的 fileid</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> id = Convert.ToInt32(Extract(fileUrl, <span class=\"string\">\"\\\\d&#123;7,&#125;\"</span>));</span><br><span class=\"line\">    <span class=\"comment\">//有时会出现一级域名为ymhwp的情况，这里先做一下替换，以防不测</span></span><br><span class=\"line\">    fileUrl = fileUrl.Replace(<span class=\"string\">\"ymhwp\"</span>, <span class=\"string\">\"yimuhe\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//创建展示页面请求</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> filecontext = client.Create&lt;<span class=\"keyword\">string</span>&gt;(HttpMethod.Get, fileUrl);</span><br><span class=\"line\">    <span class=\"comment\">//发送请求</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> filecontext.SendTask();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (filecontext.IsValid())<span class=\"comment\">//如果请求成功</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//替换链接中的fil为down，使其成为下载页面地址</span></span><br><span class=\"line\">        fileUrl = fileUrl.Replace(<span class=\"string\">\"file\"</span>, <span class=\"string\">\"down\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//创建下载页面请求</span></span><br><span class=\"line\">         <span class=\"keyword\">var</span> downcontext = client.Create&lt;<span class=\"keyword\">string</span>&gt;(HttpMethod.Get, fileUrl);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> downcontext.SendTask();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (downcontext.IsValid())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置初始返回值为0，表示验证码输入错误，即识别失败</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> response = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (response == <span class=\"number\">0</span>)<span class=\"comment\">//循环识别，直到识别成功</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//创建验证码图片请求</span></span><br><span class=\"line\">                   <span class=\"keyword\">var</span> vcode = client.Create&lt;Byte[]&gt;(HttpMethod.Get, <span class=\"string\">\"http://www.yimuhe.com/n_downcode.php\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">await</span> vcode.SendTask();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (vcode.IsValid())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//将获取到的验证码图片存入字节数组中</span></span><br><span class=\"line\">                    bytes = vcode.Result;</span><br><span class=\"line\">                    Result = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">'\\0'</span>, <span class=\"number\">256</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//识别验证码</span></span><br><span class=\"line\">                    GetVcodeFromBuffer(<span class=\"number\">1</span>, bytes, bytes.Length, Result);</span><br><span class=\"line\">                    <span class=\"comment\">//创建检验验证码请求</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> resp = client.Create&lt;<span class=\"keyword\">string</span>&gt;(HttpMethod.Post,</span><br><span class=\"line\">                        <span class=\"string\">\"http://www.yimuhe.com/n_downcode.php\"</span>, data: <span class=\"string\">\"action=yz&amp;id=\"</span> + id + <span class=\"string\">\"&amp;code=\"</span> + Result);</span><br><span class=\"line\">                    <span class=\"keyword\">await</span> resp.SendTask();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (resp.IsValid())</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//返回验证码校验值、成功为1失败为0</span></span><br><span class=\"line\">                        response = Convert.ToInt32(resp.Result);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//创建获取下载地址请求</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> h1 = client.Create&lt;<span class=\"keyword\">string</span>&gt;(HttpMethod.Post,</span><br><span class=\"line\">                    <span class=\"string\">\"http://www.yimuhe.com/n_dd.php?file_id=\"</span> + id + <span class=\"string\">\"&amp;ser=99\"</span>, refer: <span class=\"string\">\"http://www.yimuhe.com/down-2546737.html\"</span>, data: id.ToString());</span><br><span class=\"line\">            <span class=\"keyword\">await</span> h1.SendTask();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (h1.IsValid())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//通过HtmlAgilityPack库完成html解析，获得下载地址</span></span><br><span class=\"line\">                   HtmlDocument html = <span class=\"keyword\">new</span> HtmlDocument();</span><br><span class=\"line\">                html.LoadHtml(h1.Result);</span><br><span class=\"line\">                downPath = html.GetElementbyId(<span class=\"string\">\"downs\"</span>).Attributes[<span class=\"string\">\"href\"</span>].Value;</span><br><span class=\"line\">                tBAfter.AppendText(downPath + NewLine);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"批量获取实现\"><a href=\"#批量获取实现\" class=\"headerlink\" title=\"批量获取实现\"></a>批量获取实现</h3><p>我的批量实现思路为将要获取的链接加入一个队列当中，线程从队头移出数据一条进行地址获取，获取成功不进行操作，失败则将地址添回到队尾。循环获取直到队列为空。另一个队列储存正在处理的数据，仅当两个线程均为空时才会陆续结束所有线程。线程执行的方法在上边的方法基础上又做了一些修改。</p><p>具体实现代码如下：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> <span class=\"keyword\">void</span> <span class=\"title\">GetDownLoadUrl</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//当链接队列和正在处理队列存在不为空时，循环执行以下代码</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (_pathList.Count &gt; <span class=\"number\">0</span> || _pathReady.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//当链接队列不为空时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_pathList.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//从队头取出一条数据</span></span><br><span class=\"line\">            <span class=\"keyword\">string</span> fileUrl = _pathList[<span class=\"number\">0</span>];</span><br><span class=\"line\">            _pathList.RemoveAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            _pathReady.Add(fileUrl);</span><br><span class=\"line\">            <span class=\"comment\">//建立HTTP客户端</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> client = <span class=\"keyword\">new</span> HttpClient();</span><br><span class=\"line\">            <span class=\"comment\">//用于接收验证码</span></span><br><span class=\"line\">            StringBuilder Result;</span><br><span class=\"line\">            <span class=\"comment\">//验证码的字符数组</span></span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes;</span><br><span class=\"line\">            <span class=\"comment\">//用于接收下载链接</span></span><br><span class=\"line\">            <span class=\"keyword\">string</span> downPath = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">            <span class=\"comment\">//通过正则匹配到链接中的 fileid</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> id = Convert.ToInt32(Extract(fileUrl, <span class=\"string\">\"\\\\d&#123;7,&#125;\"</span>));</span><br><span class=\"line\">            <span class=\"comment\">//有时会出现一级域名为ymhwp的情况，这里先做一下替换，以防不测</span></span><br><span class=\"line\">            fileUrl = fileUrl.Replace(<span class=\"string\">\"ymhwp\"</span>, <span class=\"string\">\"yimuhe\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//创建展示页面请求</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> filecontext = client.Create&lt;<span class=\"keyword\">string</span>&gt;(HttpMethod.Get, fileUrl);</span><br><span class=\"line\">            <span class=\"comment\">//发送请求</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> filecontext.SendTask();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filecontext.IsValid())<span class=\"comment\">//如果请求成功</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//替换链接中的fil为down，使其成为下载页面地址</span></span><br><span class=\"line\">                fileUrl = fileUrl.Replace(<span class=\"string\">\"file\"</span>, <span class=\"string\">\"down\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">//创建下载页面请求</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> downcontext = client.Create&lt;<span class=\"keyword\">string</span>&gt;(HttpMethod.Get, fileUrl);</span><br><span class=\"line\">                <span class=\"keyword\">await</span> downcontext.SendTask();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (downcontext.IsValid())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//设置初始返回值为0，表示验证码输入错误，即识别失败</span></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> response = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (response == <span class=\"number\">0</span>)<span class=\"comment\">//循环识别，直到识别成功</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//创建验证码图片请求</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> vcode = client.Create&lt;Byte[]&gt;(HttpMethod.Get, <span class=\"string\">\"http://www.yimuhe.com/n_downcode.php\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">await</span> vcode.SendTask();</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (vcode.IsValid())</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//将获取到的验证码图片存入字节数组中</span></span><br><span class=\"line\">                            bytes = vcode.Result;</span><br><span class=\"line\">                            Result = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">'\\0'</span>, <span class=\"number\">256</span>);</span><br><span class=\"line\">                            <span class=\"comment\">//识别验证码</span></span><br><span class=\"line\">                            GetVcodeFromBuffer(<span class=\"number\">1</span>, bytes, bytes.Length, Result);</span><br><span class=\"line\">                            <span class=\"comment\">//创建检验验证码请求</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> resp = client.Create&lt;<span class=\"keyword\">string</span>&gt;(HttpMethod.Post,</span><br><span class=\"line\">                                <span class=\"string\">\"http://www.yimuhe.com/n_downcode.php\"</span>, data: <span class=\"string\">\"action=yz&amp;id=\"</span> + id + <span class=\"string\">\"&amp;code=\"</span> + Result);</span><br><span class=\"line\">                            <span class=\"keyword\">await</span> resp.SendTask();</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (resp.IsValid())</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"comment\">//返回验证码校验值、成功为1失败为0</span></span><br><span class=\"line\">                                response = Convert.ToInt32(resp.Result);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//创建获取下载地址请求</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> h1 = client.Create&lt;<span class=\"keyword\">string</span>&gt;(HttpMethod.Post,</span><br><span class=\"line\">                            <span class=\"string\">\"http://www.yimuhe.com/n_dd.php?file_id=\"</span> + id + <span class=\"string\">\"&amp;ser=99\"</span>, refer: <span class=\"string\">\"http://www.yimuhe.com/down-2546737.html\"</span>, data: id.ToString());</span><br><span class=\"line\">                    <span class=\"keyword\">await</span> h1.SendTask();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (h1.IsValid())</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//通过HtmlAgilityPack库完成html解析，获得下载地址</span></span><br><span class=\"line\">                        HtmlDocument html = <span class=\"keyword\">new</span> HtmlDocument();</span><br><span class=\"line\">                        html.LoadHtml(h1.Result);</span><br><span class=\"line\">                        downPath = html.GetElementbyId(<span class=\"string\">\"downs\"</span>).Attributes[<span class=\"string\">\"href\"</span>].Value;</span><br><span class=\"line\">                        <span class=\"comment\">//将获取到的地址显示到界面</span></span><br><span class=\"line\">                        tBAfter.AppendText(downPath + NewLine);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果downPath为空，则请求失败</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(downPath))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//将请求链接添回队尾</span></span><br><span class=\"line\">                _pathList.Add(path);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//处理完毕，移出当前处理队列</span></span><br><span class=\"line\">            _pathReady.Remove(path);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h2><p>本文旨在抛砖引玉，因为一些都懂得的原因，就不给出成品的下载地址了，有需要的童鞋可以自行完成。</p><!-- rebuild by neat -->"},{"title":"面试·网站后台开发工程师·总结","abbrlink":61268,"date":"2018-03-11T14:46:44.000Z","_content":"关于2018年3月9日面试某公司网站后台开发工程师的一些总结。\n<!--more-->\n<!--多益-->\n## 面试问题总结\n　　面试官非常nice，可能是因为之前通过同学跟他有过一些间接交流，所以开场时问了我：“我让XXX告诉你去学习一下.Net Core，你学的怎么样了。”\n　　瞬间整个人就不那么紧张了。之后面试官首先问了我一些我目前主要使用的C#桌面软件开发的一些知识，之后在逐渐的把问题转到.Net Core，从中可以感觉得出面试官对于基础知识即为擅长，问的问题大量的都是非常细节性的，由于我在.Net Core上并没有付出很多的学习时间，而且主要是“自定向下”的学习，主要学习怎么使用，这些细节就了解的不那么清楚了，所以整个面试确实有不少问题没能回答得上来。\n　　下面是具体没能答上来问题的具体分析。\n### 桌面开发\n#### Winform 多线程状态下应该怎样保持界面响应\n　　当时回答了可以使用.Net Framework 4.5版本以上支持的语法糖await\\asnyc来进行多线程请求，或者是新开线程完成操作，或者使用Application.DoEvent()这样的函数强行保持界面响应。\n　　当时应该是有些紧张，没有准确get到面试官真正想要问的问题，事后思考感觉面试官真正想问的应该是[使用委托解决方法的跨线程调用问题](cjepod20f002mh8kbydftcdjw.html)这种类型的委托问题，所以这道题也算是没有回答好。\n### 数据库\n#### 数据库横表、纵表转换\n　　这道题确实是忘记了大学学习的知识，也没反应过来横纵表转换到底是什么概念，下面直接写一个例子吧。\n  \n**横表结构: ** ***Achievement***\n\n>|  ID  | 姓名  | 语文 | 数学 | 英语 |\n| :------------: |:---------------:|:-----:|:-----:|:-----:|\n| 1 | 张三 | 80 | 90 | 70 |\n| 2 | 李四 | 90 | 85 | 95 |\n| 3 | 王五 | 88 | 75 | 90 |\n\n**转换后的表结构**\n>|  ID  | 姓名  | 科目 | 成绩 |\n| :------------: |:---------------:|:-----:|:-----:|\n| 1 | 张三 | 语文 | 80 |\n| 2 | 张三 | 数学 | 90 |\n| 3 | 张三 | 英语 | 70 |\n| 4 | 李四 | 语文 | 90 |\n| 5 | 李四 | 数学 | 80 |\n| 6 | 李四 | 英语 | 99 |\n| 7 | 王五 | 语文 | 85 |\n| 8 | 王五 | 数学 | 96 |\n| 9 | 王五 | 英语 | 88 |\n```sql\nSELECT　姓名,'语文'　AS　科目,语文　AS　成绩　FROM　Achievement　UNION　ALL\nSELECT　姓名,'数学'　AS　科目,数学　AS　成绩　FROM　Achievement　UNION　ALL　\nSELECT　姓名,'英语'　AS　科目,英语　AS　成绩　FROM　Achievement\nORDER　BY　姓名,科目　DESC;\n```\n### .Net Core\n　　下面题目中的一些.Net Core的细节，我会引用来自本人购买的 张剑桥 先生的《ASP.NET Core 跨平台开发从入门到实战》一书中的内容，如果希望获得更多的知识请直接在各大平台购买本书，若侵犯了您的权利，请联系删除。\n#### .Net Core 程序增加中间件在什么位置\n> 　　在 ASP.NET Core 中，你可以使用中间件构建你的请求处理管道。ASP.NET Core 中间件为一个HttpContext 执行异步逻辑，然后按顺序调用下一个中间件或者直接终止请求。一般来说，要使用一个中间件，只需在Configure方法里调用 IApplicationBuilder 上一个对应的扩展方法即可。\n\n#### 静态文件访问开启\n>　　为了能够使用静态文件服务，必须配置中间件，把静态文件中间件加入到管道内。静态文件中间件可通过下述方法来配置：在项目中增加 Microsoft.AspNetCore.StaticFiles包依赖，然后从 Startup.Configure 中调用.UseStaticFiles扩展方法：\n\n```csharp\n// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    app.UseStaticFiles();\n}\n```\n#### 配置使用Session\n　　与上面的静态文件相同，需要首先依赖 Microsoft.AspNetCore.Session 包，然后从Startup.Configure 中调用.UseSession方法。\n```csharp\n// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    app.UseSession();\n}\n```\n#### EF Core如何启用懒加载\nEF6中是默认开启懒加载的，可以通过修改配置文件来进行修改，而到了EF Core中，则可以在 DbContext 的 OnConfiguring 方法中添加对 UseLazyLoadingProxies() 扩展方法调用即可。\n```csharp\npublic class WayneContext : DbContext\n{\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        var sqlConnectionStringBuilder = new SqlConnectionStringBuilder {\n            DataSource = \"****\",\n            InitialCatalog = \"Wayne\",\n            UserID = \"sa\",\n            Password = \"sa\"\n        };\n\n        optionsBuilder.UseSqlServer(sqlConnectionStringBuilder.ConnectionString);\n\n        optionsBuilder.UseLazyLoadingProxies();\n\n        base.OnConfiguring(optionsBuilder);\n    }\n}\n```\n#### Asp.Net Core的热部署是怎么实现的\n　　以MVC模板为例，其实是在 Program 类中的 CreateWebHostBuilder 方法中实现的。\n```csharp\nusing Microsoft.AspNetCore;\nusing Microsoft.AspNetCore.Hosting;\n\nnamespace TestCore\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateWebHostBuilder(args).Build().Run();\n        }\n\n        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n            WebHost.CreateDefaultBuilder(args)\n                .UseStartup<Startup>();\n    }\n}\n```\n　　第十四行，WebHost.CreateDefaultBuilder(args)方法中巨硬封装了读取配置文件的操作。F12反编译转到源码。\n```csharp\n/// <summary>\n///   Initializes a new instance of the <see cref=\"T:Microsoft.AspNetCore.Hosting.WebHostBuilder\" /> class with pre-configured defaults.\n/// </summary>\n/// <remarks>\n///   The following defaults are applied to the returned <see cref=\"T:Microsoft.AspNetCore.Hosting.WebHostBuilder\" />:\n///     use Kestrel as the web server and configure it using the application's configuration providers,\n///     set the <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.ContentRootPath\" /> to the result of <see cref=\"M:System.IO.Directory.GetCurrentDirectory\" />,\n///     load <see cref=\"T:Microsoft.Extensions.Configuration.IConfiguration\" /> from 'appsettings.json' and 'appsettings.[<see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />].json',\n///     load <see cref=\"T:Microsoft.Extensions.Configuration.IConfiguration\" /> from User Secrets when <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" /> is 'Development' using the entry assembly,\n///     load <see cref=\"T:Microsoft.Extensions.Configuration.IConfiguration\" /> from environment variables,\n///     load <see cref=\"T:Microsoft.Extensions.Configuration.IConfiguration\" /> from supplied command line args,\n///     configures the <see cref=\"T:Microsoft.Extensions.Logging.ILoggerFactory\" /> to log to the console and debug output,\n///     enables IIS integration,\n///     and enables the ability for frameworks to bind their options to their default configuration sections.\n/// </remarks>\n/// <param name=\"args\">The command line args.</param>\n/// <returns>The initialized <see cref=\"T:Microsoft.AspNetCore.Hosting.IWebHostBuilder\" />.</returns>\npublic static IWebHostBuilder CreateDefaultBuilder(string[] args)\n{\n    IWebHostBuilder hostBuilder = new WebHostBuilder().UseKestrel((Action<WebHostBuilderContext, KestrelServerOptions>)((builderContext, options) => options.Configure((IConfiguration)builderContext.Configuration.GetSection(\"Kestrel\")))).UseContentRoot(Directory.GetCurrentDirectory()).ConfigureAppConfiguration((Action<WebHostBuilderContext, IConfigurationBuilder>)((hostingContext, config) =>\n\t{\n\t\tIHostingEnvironment hostingEnvironment = hostingContext.HostingEnvironment;\n\t\tconfig.AddJsonFile(\"appsettings.json\", true, true).AddJsonFile(string.Format(\"appsettings.{0}.json\", (object)hostingEnvironment.EnvironmentName), true, true);\n\t\tif (hostingEnvironment.IsDevelopment())\n\t\t{\n\t\t\tAssembly assembly = Assembly.Load(new AssemblyName(hostingEnvironment.ApplicationName));\n\t\t\tif (assembly != (Assembly)null)\n\t\t\t\tconfig.AddUserSecrets(assembly, true);\n\t\t}\n\t\tconfig.AddEnvironmentVariables();\n\t\tif (args == null)\n\t\treturn;\n\t\tconfig.AddCommandLine(args);\n\t}))\n\t.ConfigureLogging((Action<WebHostBuilderContext, ILoggingBuilder>)((hostingContext, logging) =>\n\t{\n\t\tlogging.AddConfiguration((IConfiguration)hostingContext.Configuration.GetSection(\"Logging\"));\n\t\tlogging.AddConsole();\n\t\tlogging.AddDebug();\n\t}))\n\t.UseIISIntegration().UseDefaultServiceProvider((Action<WebHostBuilderContext, ServiceProviderOptions>)((context, options) => options.ValidateScopes = context.HostingEnvironment.IsDevelopment()));\n    if (args != null)\n        hostBuilder.UseConfiguration((IConfiguration)new ConfigurationBuilder().AddCommandLine(args).Build());\n    return hostBuilder;\n}\n```\n第23行 中 \n```csharp\nconfig.AddJsonFile(\"appsettings.json\", true, true).AddJsonFile(string.Format(\"appsettings.{0}.json\", (object)hostingEnvironment.EnvironmentName), true, true);\n```\n继续查看config扩展方法AddJsonFile的源码\n```csharp\n/// <summary>\n/// Adds the JSON configuration provider at <paramref name=\"path\" /> to <paramref name=\"builder\" />.\n/// </summary>\n/// <param name=\"builder\">The <see cref=\"T:Microsoft.Extensions.Configuration.IConfigurationBuilder\" /> to add to.</param>\n/// <param name=\"path\">Path relative to the base path stored in\n/// <see cref=\"P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties\" /> of <paramref name=\"builder\" />.</param>\n/// <param name=\"optional\">Whether the file is optional.</param>\n/// <param name=\"reloadOnChange\">Whether the configuration should be reloaded if the file changes.</param>\n/// <returns>The <see cref=\"T:Microsoft.Extensions.Configuration.IConfigurationBuilder\" />.</returns>\npublic static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, string path, bool optional, bool reloadOnChange)\n{\n    return builder.AddJsonFile((IFileProvider) null, path, optional, reloadOnChange);\n}\n```\n形参中的第四个参数为\n```csharp\n/// <param name=\"reloadOnChange\">Whether the configuration should be reloaded if the file changes.</param>\n    ```\n当这个参数被设置为 **true** 时即可实现热更新。\n\n#### 怎样修改绑定的地址\n在 Program 类的 CreateWebHostBuilder 中增加 UseUrls 方法的调用\n```csharp\npublic static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n            WebHost.CreateDefaultBuilder(args)\n                .UseUrls(\"http://localhost:5001\")\n                .UseStartup<Startup>();\n```\n\n#### 更改实体类后怎样同步更改到数据库\n**主要要使用EF的cli命令**\n提交更改\n```console\ndotnet ef migrations Add InitialCreate\n```\n同步到数据库\n```console\ndotnet ef database update\n```\n回滚到之前的某一次提交\n```console\ndotnet ef migrations update InitialCreate\n```\n回滚后同步代码回滚\n```console\ndotnet ef migrations remove\n```\n将更改生成SQL脚本（一般是为了方便部署到正式环境）\n```console\ndotnet ef migrations script\n```\n\n    ","source":"_posts/关于20180313.md","raw":"---\ntitle: 面试·网站后台开发工程师·总结\ntags:\n  - 面试\n  - 网站后台开发工程师\n  - 总结\nabbrlink: 61268\ndate: 2018-03-11 22:46:44\n---\n关于2018年3月9日面试某公司网站后台开发工程师的一些总结。\n<!--more-->\n<!--多益-->\n## 面试问题总结\n　　面试官非常nice，可能是因为之前通过同学跟他有过一些间接交流，所以开场时问了我：“我让XXX告诉你去学习一下.Net Core，你学的怎么样了。”\n　　瞬间整个人就不那么紧张了。之后面试官首先问了我一些我目前主要使用的C#桌面软件开发的一些知识，之后在逐渐的把问题转到.Net Core，从中可以感觉得出面试官对于基础知识即为擅长，问的问题大量的都是非常细节性的，由于我在.Net Core上并没有付出很多的学习时间，而且主要是“自定向下”的学习，主要学习怎么使用，这些细节就了解的不那么清楚了，所以整个面试确实有不少问题没能回答得上来。\n　　下面是具体没能答上来问题的具体分析。\n### 桌面开发\n#### Winform 多线程状态下应该怎样保持界面响应\n　　当时回答了可以使用.Net Framework 4.5版本以上支持的语法糖await\\asnyc来进行多线程请求，或者是新开线程完成操作，或者使用Application.DoEvent()这样的函数强行保持界面响应。\n　　当时应该是有些紧张，没有准确get到面试官真正想要问的问题，事后思考感觉面试官真正想问的应该是[使用委托解决方法的跨线程调用问题](cjepod20f002mh8kbydftcdjw.html)这种类型的委托问题，所以这道题也算是没有回答好。\n### 数据库\n#### 数据库横表、纵表转换\n　　这道题确实是忘记了大学学习的知识，也没反应过来横纵表转换到底是什么概念，下面直接写一个例子吧。\n  \n**横表结构: ** ***Achievement***\n\n>|  ID  | 姓名  | 语文 | 数学 | 英语 |\n| :------------: |:---------------:|:-----:|:-----:|:-----:|\n| 1 | 张三 | 80 | 90 | 70 |\n| 2 | 李四 | 90 | 85 | 95 |\n| 3 | 王五 | 88 | 75 | 90 |\n\n**转换后的表结构**\n>|  ID  | 姓名  | 科目 | 成绩 |\n| :------------: |:---------------:|:-----:|:-----:|\n| 1 | 张三 | 语文 | 80 |\n| 2 | 张三 | 数学 | 90 |\n| 3 | 张三 | 英语 | 70 |\n| 4 | 李四 | 语文 | 90 |\n| 5 | 李四 | 数学 | 80 |\n| 6 | 李四 | 英语 | 99 |\n| 7 | 王五 | 语文 | 85 |\n| 8 | 王五 | 数学 | 96 |\n| 9 | 王五 | 英语 | 88 |\n```sql\nSELECT　姓名,'语文'　AS　科目,语文　AS　成绩　FROM　Achievement　UNION　ALL\nSELECT　姓名,'数学'　AS　科目,数学　AS　成绩　FROM　Achievement　UNION　ALL　\nSELECT　姓名,'英语'　AS　科目,英语　AS　成绩　FROM　Achievement\nORDER　BY　姓名,科目　DESC;\n```\n### .Net Core\n　　下面题目中的一些.Net Core的细节，我会引用来自本人购买的 张剑桥 先生的《ASP.NET Core 跨平台开发从入门到实战》一书中的内容，如果希望获得更多的知识请直接在各大平台购买本书，若侵犯了您的权利，请联系删除。\n#### .Net Core 程序增加中间件在什么位置\n> 　　在 ASP.NET Core 中，你可以使用中间件构建你的请求处理管道。ASP.NET Core 中间件为一个HttpContext 执行异步逻辑，然后按顺序调用下一个中间件或者直接终止请求。一般来说，要使用一个中间件，只需在Configure方法里调用 IApplicationBuilder 上一个对应的扩展方法即可。\n\n#### 静态文件访问开启\n>　　为了能够使用静态文件服务，必须配置中间件，把静态文件中间件加入到管道内。静态文件中间件可通过下述方法来配置：在项目中增加 Microsoft.AspNetCore.StaticFiles包依赖，然后从 Startup.Configure 中调用.UseStaticFiles扩展方法：\n\n```csharp\n// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    app.UseStaticFiles();\n}\n```\n#### 配置使用Session\n　　与上面的静态文件相同，需要首先依赖 Microsoft.AspNetCore.Session 包，然后从Startup.Configure 中调用.UseSession方法。\n```csharp\n// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    app.UseSession();\n}\n```\n#### EF Core如何启用懒加载\nEF6中是默认开启懒加载的，可以通过修改配置文件来进行修改，而到了EF Core中，则可以在 DbContext 的 OnConfiguring 方法中添加对 UseLazyLoadingProxies() 扩展方法调用即可。\n```csharp\npublic class WayneContext : DbContext\n{\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        var sqlConnectionStringBuilder = new SqlConnectionStringBuilder {\n            DataSource = \"****\",\n            InitialCatalog = \"Wayne\",\n            UserID = \"sa\",\n            Password = \"sa\"\n        };\n\n        optionsBuilder.UseSqlServer(sqlConnectionStringBuilder.ConnectionString);\n\n        optionsBuilder.UseLazyLoadingProxies();\n\n        base.OnConfiguring(optionsBuilder);\n    }\n}\n```\n#### Asp.Net Core的热部署是怎么实现的\n　　以MVC模板为例，其实是在 Program 类中的 CreateWebHostBuilder 方法中实现的。\n```csharp\nusing Microsoft.AspNetCore;\nusing Microsoft.AspNetCore.Hosting;\n\nnamespace TestCore\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateWebHostBuilder(args).Build().Run();\n        }\n\n        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n            WebHost.CreateDefaultBuilder(args)\n                .UseStartup<Startup>();\n    }\n}\n```\n　　第十四行，WebHost.CreateDefaultBuilder(args)方法中巨硬封装了读取配置文件的操作。F12反编译转到源码。\n```csharp\n/// <summary>\n///   Initializes a new instance of the <see cref=\"T:Microsoft.AspNetCore.Hosting.WebHostBuilder\" /> class with pre-configured defaults.\n/// </summary>\n/// <remarks>\n///   The following defaults are applied to the returned <see cref=\"T:Microsoft.AspNetCore.Hosting.WebHostBuilder\" />:\n///     use Kestrel as the web server and configure it using the application's configuration providers,\n///     set the <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.ContentRootPath\" /> to the result of <see cref=\"M:System.IO.Directory.GetCurrentDirectory\" />,\n///     load <see cref=\"T:Microsoft.Extensions.Configuration.IConfiguration\" /> from 'appsettings.json' and 'appsettings.[<see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />].json',\n///     load <see cref=\"T:Microsoft.Extensions.Configuration.IConfiguration\" /> from User Secrets when <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" /> is 'Development' using the entry assembly,\n///     load <see cref=\"T:Microsoft.Extensions.Configuration.IConfiguration\" /> from environment variables,\n///     load <see cref=\"T:Microsoft.Extensions.Configuration.IConfiguration\" /> from supplied command line args,\n///     configures the <see cref=\"T:Microsoft.Extensions.Logging.ILoggerFactory\" /> to log to the console and debug output,\n///     enables IIS integration,\n///     and enables the ability for frameworks to bind their options to their default configuration sections.\n/// </remarks>\n/// <param name=\"args\">The command line args.</param>\n/// <returns>The initialized <see cref=\"T:Microsoft.AspNetCore.Hosting.IWebHostBuilder\" />.</returns>\npublic static IWebHostBuilder CreateDefaultBuilder(string[] args)\n{\n    IWebHostBuilder hostBuilder = new WebHostBuilder().UseKestrel((Action<WebHostBuilderContext, KestrelServerOptions>)((builderContext, options) => options.Configure((IConfiguration)builderContext.Configuration.GetSection(\"Kestrel\")))).UseContentRoot(Directory.GetCurrentDirectory()).ConfigureAppConfiguration((Action<WebHostBuilderContext, IConfigurationBuilder>)((hostingContext, config) =>\n\t{\n\t\tIHostingEnvironment hostingEnvironment = hostingContext.HostingEnvironment;\n\t\tconfig.AddJsonFile(\"appsettings.json\", true, true).AddJsonFile(string.Format(\"appsettings.{0}.json\", (object)hostingEnvironment.EnvironmentName), true, true);\n\t\tif (hostingEnvironment.IsDevelopment())\n\t\t{\n\t\t\tAssembly assembly = Assembly.Load(new AssemblyName(hostingEnvironment.ApplicationName));\n\t\t\tif (assembly != (Assembly)null)\n\t\t\t\tconfig.AddUserSecrets(assembly, true);\n\t\t}\n\t\tconfig.AddEnvironmentVariables();\n\t\tif (args == null)\n\t\treturn;\n\t\tconfig.AddCommandLine(args);\n\t}))\n\t.ConfigureLogging((Action<WebHostBuilderContext, ILoggingBuilder>)((hostingContext, logging) =>\n\t{\n\t\tlogging.AddConfiguration((IConfiguration)hostingContext.Configuration.GetSection(\"Logging\"));\n\t\tlogging.AddConsole();\n\t\tlogging.AddDebug();\n\t}))\n\t.UseIISIntegration().UseDefaultServiceProvider((Action<WebHostBuilderContext, ServiceProviderOptions>)((context, options) => options.ValidateScopes = context.HostingEnvironment.IsDevelopment()));\n    if (args != null)\n        hostBuilder.UseConfiguration((IConfiguration)new ConfigurationBuilder().AddCommandLine(args).Build());\n    return hostBuilder;\n}\n```\n第23行 中 \n```csharp\nconfig.AddJsonFile(\"appsettings.json\", true, true).AddJsonFile(string.Format(\"appsettings.{0}.json\", (object)hostingEnvironment.EnvironmentName), true, true);\n```\n继续查看config扩展方法AddJsonFile的源码\n```csharp\n/// <summary>\n/// Adds the JSON configuration provider at <paramref name=\"path\" /> to <paramref name=\"builder\" />.\n/// </summary>\n/// <param name=\"builder\">The <see cref=\"T:Microsoft.Extensions.Configuration.IConfigurationBuilder\" /> to add to.</param>\n/// <param name=\"path\">Path relative to the base path stored in\n/// <see cref=\"P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties\" /> of <paramref name=\"builder\" />.</param>\n/// <param name=\"optional\">Whether the file is optional.</param>\n/// <param name=\"reloadOnChange\">Whether the configuration should be reloaded if the file changes.</param>\n/// <returns>The <see cref=\"T:Microsoft.Extensions.Configuration.IConfigurationBuilder\" />.</returns>\npublic static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, string path, bool optional, bool reloadOnChange)\n{\n    return builder.AddJsonFile((IFileProvider) null, path, optional, reloadOnChange);\n}\n```\n形参中的第四个参数为\n```csharp\n/// <param name=\"reloadOnChange\">Whether the configuration should be reloaded if the file changes.</param>\n    ```\n当这个参数被设置为 **true** 时即可实现热更新。\n\n#### 怎样修改绑定的地址\n在 Program 类的 CreateWebHostBuilder 中增加 UseUrls 方法的调用\n```csharp\npublic static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n            WebHost.CreateDefaultBuilder(args)\n                .UseUrls(\"http://localhost:5001\")\n                .UseStartup<Startup>();\n```\n\n#### 更改实体类后怎样同步更改到数据库\n**主要要使用EF的cli命令**\n提交更改\n```console\ndotnet ef migrations Add InitialCreate\n```\n同步到数据库\n```console\ndotnet ef database update\n```\n回滚到之前的某一次提交\n```console\ndotnet ef migrations update InitialCreate\n```\n回滚后同步代码回滚\n```console\ndotnet ef migrations remove\n```\n将更改生成SQL脚本（一般是为了方便部署到正式环境）\n```console\ndotnet ef migrations script\n```\n\n    ","slug":"关于20180313","published":1,"updated":"2018-03-14T02:59:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24p2i007dd00olzy3fmgo","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>关于2018年3月9日面试某公司网站后台开发工程师的一些总结。<br><a id=\"more\"></a><br></p><h2 id=\"面试问题总结\"><a href=\"#面试问题总结\" class=\"headerlink\" title=\"面试问题总结\"></a>面试问题总结</h2><p>面试官非常nice，可能是因为之前通过同学跟他有过一些间接交流，所以开场时问了我：“我让XXX告诉你去学习一下.Net Core，你学的怎么样了。”<br>瞬间整个人就不那么紧张了。之后面试官首先问了我一些我目前主要使用的C#桌面软件开发的一些知识，之后在逐渐的把问题转到.Net Core，从中可以感觉得出面试官对于基础知识即为擅长，问的问题大量的都是非常细节性的，由于我在.Net Core上并没有付出很多的学习时间，而且主要是“自定向下”的学习，主要学习怎么使用，这些细节就了解的不那么清楚了，所以整个面试确实有不少问题没能回答得上来。<br>下面是具体没能答上来问题的具体分析。</p><h3 id=\"桌面开发\"><a href=\"#桌面开发\" class=\"headerlink\" title=\"桌面开发\"></a>桌面开发</h3><h4 id=\"Winform-多线程状态下应该怎样保持界面响应\"><a href=\"#Winform-多线程状态下应该怎样保持界面响应\" class=\"headerlink\" title=\"Winform 多线程状态下应该怎样保持界面响应\"></a>Winform 多线程状态下应该怎样保持界面响应</h4><p>当时回答了可以使用.Net Framework 4.5版本以上支持的语法糖await\\asnyc来进行多线程请求，或者是新开线程完成操作，或者使用Application.DoEvent()这样的函数强行保持界面响应。<br>当时应该是有些紧张，没有准确get到面试官真正想要问的问题，事后思考感觉面试官真正想问的应该是<a href=\"cjepod20f002mh8kbydftcdjw.html\">使用委托解决方法的跨线程调用问题</a>这种类型的委托问题，所以这道题也算是没有回答好。</p><h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><h4 id=\"数据库横表、纵表转换\"><a href=\"#数据库横表、纵表转换\" class=\"headerlink\" title=\"数据库横表、纵表转换\"></a>数据库横表、纵表转换</h4><p>这道题确实是忘记了大学学习的知识，也没反应过来横纵表转换到底是什么概念，下面直接写一个例子吧。</p><p><strong>横表结构: </strong><strong><em>Achievement</em></strong></p><blockquote><table><thead><tr><th style=\"text-align:center\">ID</th><th style=\"text-align:center\">姓名</th><th style=\"text-align:center\">语文</th><th style=\"text-align:center\">数学</th><th style=\"text-align:center\">英语</th></tr></thead><tbody><tr><td style=\"text-align:center\">1</td><td style=\"text-align:center\">张三</td><td style=\"text-align:center\">80</td><td style=\"text-align:center\">90</td><td style=\"text-align:center\">70</td></tr><tr><td style=\"text-align:center\">2</td><td style=\"text-align:center\">李四</td><td style=\"text-align:center\">90</td><td style=\"text-align:center\">85</td><td style=\"text-align:center\">95</td></tr><tr><td style=\"text-align:center\">3</td><td style=\"text-align:center\">王五</td><td style=\"text-align:center\">88</td><td style=\"text-align:center\">75</td><td style=\"text-align:center\">90</td></tr></tbody></table></blockquote><p><strong>转换后的表结构</strong></p><blockquote><table><thead><tr><th style=\"text-align:center\">ID</th><th style=\"text-align:center\">姓名</th><th style=\"text-align:center\">科目</th><th style=\"text-align:center\">成绩</th></tr></thead><tbody><tr><td style=\"text-align:center\">1</td><td style=\"text-align:center\">张三</td><td style=\"text-align:center\">语文</td><td style=\"text-align:center\">80</td></tr><tr><td style=\"text-align:center\">2</td><td style=\"text-align:center\">张三</td><td style=\"text-align:center\">数学</td><td style=\"text-align:center\">90</td></tr><tr><td style=\"text-align:center\">3</td><td style=\"text-align:center\">张三</td><td style=\"text-align:center\">英语</td><td style=\"text-align:center\">70</td></tr><tr><td style=\"text-align:center\">4</td><td style=\"text-align:center\">李四</td><td style=\"text-align:center\">语文</td><td style=\"text-align:center\">90</td></tr><tr><td style=\"text-align:center\">5</td><td style=\"text-align:center\">李四</td><td style=\"text-align:center\">数学</td><td style=\"text-align:center\">80</td></tr><tr><td style=\"text-align:center\">6</td><td style=\"text-align:center\">李四</td><td style=\"text-align:center\">英语</td><td style=\"text-align:center\">99</td></tr><tr><td style=\"text-align:center\">7</td><td style=\"text-align:center\">王五</td><td style=\"text-align:center\">语文</td><td style=\"text-align:center\">85</td></tr><tr><td style=\"text-align:center\">8</td><td style=\"text-align:center\">王五</td><td style=\"text-align:center\">数学</td><td style=\"text-align:center\">96</td></tr><tr><td style=\"text-align:center\">9</td><td style=\"text-align:center\">王五</td><td style=\"text-align:center\">英语</td><td style=\"text-align:center\">88</td></tr></tbody></table><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span>　姓名,<span class=\"string\">'语文'</span>　<span class=\"keyword\">AS</span>　科目,语文　<span class=\"keyword\">AS</span>　成绩　<span class=\"keyword\">FROM</span>　Achievement　<span class=\"keyword\">UNION</span>　ALL</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span>　姓名,<span class=\"string\">'数学'</span>　<span class=\"keyword\">AS</span>　科目,数学　<span class=\"keyword\">AS</span>　成绩　<span class=\"keyword\">FROM</span>　Achievement　<span class=\"keyword\">UNION</span>　ALL　</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span>　姓名,<span class=\"string\">'英语'</span>　<span class=\"keyword\">AS</span>　科目,英语　<span class=\"keyword\">AS</span>　成绩　<span class=\"keyword\">FROM</span>　Achievement</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span>　<span class=\"keyword\">BY</span>　姓名,科目　<span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure></blockquote><h3 id=\"Net-Core\"><a href=\"#Net-Core\" class=\"headerlink\" title=\".Net Core\"></a>.Net Core</h3><p>下面题目中的一些.Net Core的细节，我会引用来自本人购买的 张剑桥 先生的《ASP.NET Core 跨平台开发从入门到实战》一书中的内容，如果希望获得更多的知识请直接在各大平台购买本书，若侵犯了您的权利，请联系删除。</p><h4 id=\"Net-Core-程序增加中间件在什么位置\"><a href=\"#Net-Core-程序增加中间件在什么位置\" class=\"headerlink\" title=\".Net Core 程序增加中间件在什么位置\"></a>.Net Core 程序增加中间件在什么位置</h4><blockquote><p>在 ASP.NET Core 中，你可以使用中间件构建你的请求处理管道。ASP.NET Core 中间件为一个HttpContext 执行异步逻辑，然后按顺序调用下一个中间件或者直接终止请求。一般来说，要使用一个中间件，只需在Configure方法里调用 IApplicationBuilder 上一个对应的扩展方法即可。</p></blockquote><h4 id=\"静态文件访问开启\"><a href=\"#静态文件访问开启\" class=\"headerlink\" title=\"静态文件访问开启\"></a>静态文件访问开启</h4><blockquote><p>为了能够使用静态文件服务，必须配置中间件，把静态文件中间件加入到管道内。静态文件中间件可通过下述方法来配置：在项目中增加 Microsoft.AspNetCore.StaticFiles包依赖，然后从 Startup.Configure 中调用.UseStaticFiles扩展方法：</p></blockquote><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    app.UseStaticFiles();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"配置使用Session\"><a href=\"#配置使用Session\" class=\"headerlink\" title=\"配置使用Session\"></a>配置使用Session</h4><p>与上面的静态文件相同，需要首先依赖 Microsoft.AspNetCore.Session 包，然后从Startup.Configure 中调用.UseSession方法。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    app.UseSession();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"EF-Core如何启用懒加载\"><a href=\"#EF-Core如何启用懒加载\" class=\"headerlink\" title=\"EF Core如何启用懒加载\"></a>EF Core如何启用懒加载</h4><p>EF6中是默认开启懒加载的，可以通过修改配置文件来进行修改，而到了EF Core中，则可以在 DbContext 的 OnConfiguring 方法中添加对 UseLazyLoadingProxies() 扩展方法调用即可。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WayneContext</span> : <span class=\"title\">DbContext</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnConfiguring</span>(<span class=\"params\">DbContextOptionsBuilder optionsBuilder</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sqlConnectionStringBuilder = <span class=\"keyword\">new</span> SqlConnectionStringBuilder &#123;</span><br><span class=\"line\">            DataSource = <span class=\"string\">\"****\"</span>,</span><br><span class=\"line\">            InitialCatalog = <span class=\"string\">\"Wayne\"</span>,</span><br><span class=\"line\">            UserID = <span class=\"string\">\"sa\"</span>,</span><br><span class=\"line\">            Password = <span class=\"string\">\"sa\"</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        optionsBuilder.UseSqlServer(sqlConnectionStringBuilder.ConnectionString);</span><br><span class=\"line\"></span><br><span class=\"line\">        optionsBuilder.UseLazyLoadingProxies();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">base</span>.OnConfiguring(optionsBuilder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"Asp-Net-Core的热部署是怎么实现的\"><a href=\"#Asp-Net-Core的热部署是怎么实现的\" class=\"headerlink\" title=\"Asp.Net Core的热部署是怎么实现的\"></a>Asp.Net Core的热部署是怎么实现的</h4><p>以MVC模板为例，其实是在 Program 类中的 CreateWebHostBuilder 方法中实现的。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">TestCore</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            CreateWebHostBuilder(args).Build().Run();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IWebHostBuilder <span class=\"title\">CreateWebHostBuilder</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span>=&gt;</span><br><span class=\"line\">            WebHost.CreateDefaultBuilder(args)</span><br><span class=\"line\">                .UseStartup&lt;Startup&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>第十四行，WebHost.CreateDefaultBuilder(args)方法中巨硬封装了读取配置文件的操作。F12反编译转到源码。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>   Initializes a new instance of the <span class=\"doctag\">&lt;see cref=\"T:Microsoft.AspNetCore.Hosting.WebHostBuilder\" /&gt;</span> class with pre-configured defaults.</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;remarks&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>   The following defaults are applied to the returned <span class=\"doctag\">&lt;see cref=\"T:Microsoft.AspNetCore.Hosting.WebHostBuilder\" /&gt;</span>:</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     use Kestrel as the web server and configure it using the application's configuration providers,</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     set the <span class=\"doctag\">&lt;see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.ContentRootPath\" /&gt;</span> to the result of <span class=\"doctag\">&lt;see cref=\"M:System.IO.Directory.GetCurrentDirectory\" /&gt;</span>,</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     load <span class=\"doctag\">&lt;see cref=\"T:Microsoft.Extensions.Configuration.IConfiguration\" /&gt;</span> from 'appsettings.json' and 'appsettings.[<span class=\"doctag\">&lt;see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" /&gt;</span>].json',</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     load <span class=\"doctag\">&lt;see cref=\"T:Microsoft.Extensions.Configuration.IConfiguration\" /&gt;</span> from User Secrets when <span class=\"doctag\">&lt;see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" /&gt;</span> is 'Development' using the entry assembly,</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     load <span class=\"doctag\">&lt;see cref=\"T:Microsoft.Extensions.Configuration.IConfiguration\" /&gt;</span> from environment variables,</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     load <span class=\"doctag\">&lt;see cref=\"T:Microsoft.Extensions.Configuration.IConfiguration\" /&gt;</span> from supplied command line args,</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     configures the <span class=\"doctag\">&lt;see cref=\"T:Microsoft.Extensions.Logging.ILoggerFactory\" /&gt;</span> to log to the console and debug output,</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     enables IIS integration,</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     and enables the ability for frameworks to bind their options to their default configuration sections.</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/remarks&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"args\"&gt;</span>The command line args.<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>The initialized <span class=\"doctag\">&lt;see cref=\"T:Microsoft.AspNetCore.Hosting.IWebHostBuilder\" /&gt;</span>.<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IWebHostBuilder <span class=\"title\">CreateDefaultBuilder</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    IWebHostBuilder hostBuilder = <span class=\"keyword\">new</span> WebHostBuilder().UseKestrel((Action&lt;WebHostBuilderContext, KestrelServerOptions&gt;)((builderContext, options) =&gt; options.Configure((IConfiguration)builderContext.Configuration.GetSection(<span class=\"string\">\"Kestrel\"</span>)))).UseContentRoot(Directory.GetCurrentDirectory()).ConfigureAppConfiguration((Action&lt;WebHostBuilderContext, IConfigurationBuilder&gt;)((hostingContext, config) =&gt;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tIHostingEnvironment hostingEnvironment = hostingContext.HostingEnvironment;</span><br><span class=\"line\">\t\tconfig.AddJsonFile(<span class=\"string\">\"appsettings.json\"</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>).AddJsonFile(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"appsettings.&#123;0&#125;.json\"</span>, (<span class=\"keyword\">object</span>)hostingEnvironment.EnvironmentName), <span class=\"literal\">true</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (hostingEnvironment.IsDevelopment())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tAssembly assembly = Assembly.Load(<span class=\"keyword\">new</span> AssemblyName(hostingEnvironment.ApplicationName));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (assembly != (Assembly)<span class=\"literal\">null</span>)</span><br><span class=\"line\">\t\t\t\tconfig.AddUserSecrets(assembly, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tconfig.AddEnvironmentVariables();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (args == <span class=\"literal\">null</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\tconfig.AddCommandLine(args);</span><br><span class=\"line\">\t&#125;))</span><br><span class=\"line\">\t.ConfigureLogging((Action&lt;WebHostBuilderContext, ILoggingBuilder&gt;)((hostingContext, logging) =&gt;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlogging.AddConfiguration((IConfiguration)hostingContext.Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</span><br><span class=\"line\">\t\tlogging.AddConsole();</span><br><span class=\"line\">\t\tlogging.AddDebug();</span><br><span class=\"line\">\t&#125;))</span><br><span class=\"line\">\t.UseIISIntegration().UseDefaultServiceProvider((Action&lt;WebHostBuilderContext, ServiceProviderOptions&gt;)((context, options) =&gt; options.ValidateScopes = context.HostingEnvironment.IsDevelopment()));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        hostBuilder.UseConfiguration((IConfiguration)<span class=\"keyword\">new</span> ConfigurationBuilder().AddCommandLine(args).Build());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hostBuilder;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>第23行 中<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.AddJsonFile(<span class=\"string\">\"appsettings.json\"</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>).AddJsonFile(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"appsettings.&#123;0&#125;.json\"</span>, (<span class=\"keyword\">object</span>)hostingEnvironment.EnvironmentName), <span class=\"literal\">true</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure><p></p><p>继续查看config扩展方法AddJsonFile的源码<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Adds the JSON configuration provider at <span class=\"doctag\">&lt;paramref name=\"path\" /&gt;</span> to <span class=\"doctag\">&lt;paramref name=\"builder\" /&gt;</span>.</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"builder\"&gt;</span>The <span class=\"doctag\">&lt;see cref=\"T:Microsoft.Extensions.Configuration.IConfigurationBuilder\" /&gt;</span> to add to.<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"path\"&gt;</span>Path relative to the base path stored in</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;see cref=\"P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties\" /&gt;</span> of <span class=\"doctag\">&lt;paramref name=\"builder\" /&gt;</span>.<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"optional\"&gt;</span>Whether the file is optional.<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"reloadOnChange\"&gt;</span>Whether the configuration should be reloaded if the file changes.<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>The <span class=\"doctag\">&lt;see cref=\"T:Microsoft.Extensions.Configuration.IConfigurationBuilder\" /&gt;</span>.<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IConfigurationBuilder <span class=\"title\">AddJsonFile</span>(<span class=\"params\"><span class=\"keyword\">this</span> IConfigurationBuilder builder, <span class=\"keyword\">string</span> path, <span class=\"keyword\">bool</span> optional, <span class=\"keyword\">bool</span> reloadOnChange</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> builder.AddJsonFile((IFileProvider) <span class=\"literal\">null</span>, path, optional, reloadOnChange);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>形参中的第四个参数为<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"reloadOnChange\"&gt;</span>Whether the configuration should be reloaded if the file changes.<span class=\"doctag\">&lt;/param&gt;</span></span></span><br></pre></td></tr></table></figure><p></p><p>当这个参数被设置为 <strong>true</strong> 时即可实现热更新。</p><h4 id=\"怎样修改绑定的地址\"><a href=\"#怎样修改绑定的地址\" class=\"headerlink\" title=\"怎样修改绑定的地址\"></a>怎样修改绑定的地址</h4><p>在 Program 类的 CreateWebHostBuilder 中增加 UseUrls 方法的调用<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IWebHostBuilder <span class=\"title\">CreateWebHostBuilder</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span>=&gt;</span><br><span class=\"line\">            WebHost.CreateDefaultBuilder(args)</span><br><span class=\"line\">                .UseUrls(<span class=\"string\">\"http://localhost:5001\"</span>)</span><br><span class=\"line\">                .UseStartup&lt;Startup&gt;();</span><br></pre></td></tr></table></figure><p></p><h4 id=\"更改实体类后怎样同步更改到数据库\"><a href=\"#更改实体类后怎样同步更改到数据库\" class=\"headerlink\" title=\"更改实体类后怎样同步更改到数据库\"></a>更改实体类后怎样同步更改到数据库</h4><p><strong>主要要使用EF的cli命令</strong><br>提交更改<br></p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet ef migrations Add InitialCreate</span><br></pre></td></tr></table></figure><p></p><p>同步到数据库<br></p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet ef database update</span><br></pre></td></tr></table></figure><p></p><p>回滚到之前的某一次提交<br></p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet ef migrations update InitialCreate</span><br></pre></td></tr></table></figure><p></p><p>回滚后同步代码回滚<br></p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet ef migrations remove</span><br></pre></td></tr></table></figure><p></p><p>将更改生成SQL脚本（一般是为了方便部署到正式环境）<br></p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet ef migrations script</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>关于2018年3月9日面试某公司网站后台开发工程师的一些总结。<br>","more":"<br></p><h2 id=\"面试问题总结\"><a href=\"#面试问题总结\" class=\"headerlink\" title=\"面试问题总结\"></a>面试问题总结</h2><p>面试官非常nice，可能是因为之前通过同学跟他有过一些间接交流，所以开场时问了我：“我让XXX告诉你去学习一下.Net Core，你学的怎么样了。”<br>瞬间整个人就不那么紧张了。之后面试官首先问了我一些我目前主要使用的C#桌面软件开发的一些知识，之后在逐渐的把问题转到.Net Core，从中可以感觉得出面试官对于基础知识即为擅长，问的问题大量的都是非常细节性的，由于我在.Net Core上并没有付出很多的学习时间，而且主要是“自定向下”的学习，主要学习怎么使用，这些细节就了解的不那么清楚了，所以整个面试确实有不少问题没能回答得上来。<br>下面是具体没能答上来问题的具体分析。</p><h3 id=\"桌面开发\"><a href=\"#桌面开发\" class=\"headerlink\" title=\"桌面开发\"></a>桌面开发</h3><h4 id=\"Winform-多线程状态下应该怎样保持界面响应\"><a href=\"#Winform-多线程状态下应该怎样保持界面响应\" class=\"headerlink\" title=\"Winform 多线程状态下应该怎样保持界面响应\"></a>Winform 多线程状态下应该怎样保持界面响应</h4><p>当时回答了可以使用.Net Framework 4.5版本以上支持的语法糖await\\asnyc来进行多线程请求，或者是新开线程完成操作，或者使用Application.DoEvent()这样的函数强行保持界面响应。<br>当时应该是有些紧张，没有准确get到面试官真正想要问的问题，事后思考感觉面试官真正想问的应该是<a href=\"cjepod20f002mh8kbydftcdjw.html\">使用委托解决方法的跨线程调用问题</a>这种类型的委托问题，所以这道题也算是没有回答好。</p><h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><h4 id=\"数据库横表、纵表转换\"><a href=\"#数据库横表、纵表转换\" class=\"headerlink\" title=\"数据库横表、纵表转换\"></a>数据库横表、纵表转换</h4><p>这道题确实是忘记了大学学习的知识，也没反应过来横纵表转换到底是什么概念，下面直接写一个例子吧。</p><p><strong>横表结构: </strong><strong><em>Achievement</em></strong></p><blockquote><table><thead><tr><th style=\"text-align:center\">ID</th><th style=\"text-align:center\">姓名</th><th style=\"text-align:center\">语文</th><th style=\"text-align:center\">数学</th><th style=\"text-align:center\">英语</th></tr></thead><tbody><tr><td style=\"text-align:center\">1</td><td style=\"text-align:center\">张三</td><td style=\"text-align:center\">80</td><td style=\"text-align:center\">90</td><td style=\"text-align:center\">70</td></tr><tr><td style=\"text-align:center\">2</td><td style=\"text-align:center\">李四</td><td style=\"text-align:center\">90</td><td style=\"text-align:center\">85</td><td style=\"text-align:center\">95</td></tr><tr><td style=\"text-align:center\">3</td><td style=\"text-align:center\">王五</td><td style=\"text-align:center\">88</td><td style=\"text-align:center\">75</td><td style=\"text-align:center\">90</td></tr></tbody></table></blockquote><p><strong>转换后的表结构</strong></p><blockquote><table><thead><tr><th style=\"text-align:center\">ID</th><th style=\"text-align:center\">姓名</th><th style=\"text-align:center\">科目</th><th style=\"text-align:center\">成绩</th></tr></thead><tbody><tr><td style=\"text-align:center\">1</td><td style=\"text-align:center\">张三</td><td style=\"text-align:center\">语文</td><td style=\"text-align:center\">80</td></tr><tr><td style=\"text-align:center\">2</td><td style=\"text-align:center\">张三</td><td style=\"text-align:center\">数学</td><td style=\"text-align:center\">90</td></tr><tr><td style=\"text-align:center\">3</td><td style=\"text-align:center\">张三</td><td style=\"text-align:center\">英语</td><td style=\"text-align:center\">70</td></tr><tr><td style=\"text-align:center\">4</td><td style=\"text-align:center\">李四</td><td style=\"text-align:center\">语文</td><td style=\"text-align:center\">90</td></tr><tr><td style=\"text-align:center\">5</td><td style=\"text-align:center\">李四</td><td style=\"text-align:center\">数学</td><td style=\"text-align:center\">80</td></tr><tr><td style=\"text-align:center\">6</td><td style=\"text-align:center\">李四</td><td style=\"text-align:center\">英语</td><td style=\"text-align:center\">99</td></tr><tr><td style=\"text-align:center\">7</td><td style=\"text-align:center\">王五</td><td style=\"text-align:center\">语文</td><td style=\"text-align:center\">85</td></tr><tr><td style=\"text-align:center\">8</td><td style=\"text-align:center\">王五</td><td style=\"text-align:center\">数学</td><td style=\"text-align:center\">96</td></tr><tr><td style=\"text-align:center\">9</td><td style=\"text-align:center\">王五</td><td style=\"text-align:center\">英语</td><td style=\"text-align:center\">88</td></tr></tbody></table><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span>　姓名,<span class=\"string\">'语文'</span>　<span class=\"keyword\">AS</span>　科目,语文　<span class=\"keyword\">AS</span>　成绩　<span class=\"keyword\">FROM</span>　Achievement　<span class=\"keyword\">UNION</span>　ALL</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span>　姓名,<span class=\"string\">'数学'</span>　<span class=\"keyword\">AS</span>　科目,数学　<span class=\"keyword\">AS</span>　成绩　<span class=\"keyword\">FROM</span>　Achievement　<span class=\"keyword\">UNION</span>　ALL　</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span>　姓名,<span class=\"string\">'英语'</span>　<span class=\"keyword\">AS</span>　科目,英语　<span class=\"keyword\">AS</span>　成绩　<span class=\"keyword\">FROM</span>　Achievement</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span>　<span class=\"keyword\">BY</span>　姓名,科目　<span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure></blockquote><h3 id=\"Net-Core\"><a href=\"#Net-Core\" class=\"headerlink\" title=\".Net Core\"></a>.Net Core</h3><p>下面题目中的一些.Net Core的细节，我会引用来自本人购买的 张剑桥 先生的《ASP.NET Core 跨平台开发从入门到实战》一书中的内容，如果希望获得更多的知识请直接在各大平台购买本书，若侵犯了您的权利，请联系删除。</p><h4 id=\"Net-Core-程序增加中间件在什么位置\"><a href=\"#Net-Core-程序增加中间件在什么位置\" class=\"headerlink\" title=\".Net Core 程序增加中间件在什么位置\"></a>.Net Core 程序增加中间件在什么位置</h4><blockquote><p>在 ASP.NET Core 中，你可以使用中间件构建你的请求处理管道。ASP.NET Core 中间件为一个HttpContext 执行异步逻辑，然后按顺序调用下一个中间件或者直接终止请求。一般来说，要使用一个中间件，只需在Configure方法里调用 IApplicationBuilder 上一个对应的扩展方法即可。</p></blockquote><h4 id=\"静态文件访问开启\"><a href=\"#静态文件访问开启\" class=\"headerlink\" title=\"静态文件访问开启\"></a>静态文件访问开启</h4><blockquote><p>为了能够使用静态文件服务，必须配置中间件，把静态文件中间件加入到管道内。静态文件中间件可通过下述方法来配置：在项目中增加 Microsoft.AspNetCore.StaticFiles包依赖，然后从 Startup.Configure 中调用.UseStaticFiles扩展方法：</p></blockquote><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    app.UseStaticFiles();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"配置使用Session\"><a href=\"#配置使用Session\" class=\"headerlink\" title=\"配置使用Session\"></a>配置使用Session</h4><p>与上面的静态文件相同，需要首先依赖 Microsoft.AspNetCore.Session 包，然后从Startup.Configure 中调用.UseSession方法。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    app.UseSession();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"EF-Core如何启用懒加载\"><a href=\"#EF-Core如何启用懒加载\" class=\"headerlink\" title=\"EF Core如何启用懒加载\"></a>EF Core如何启用懒加载</h4><p>EF6中是默认开启懒加载的，可以通过修改配置文件来进行修改，而到了EF Core中，则可以在 DbContext 的 OnConfiguring 方法中添加对 UseLazyLoadingProxies() 扩展方法调用即可。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WayneContext</span> : <span class=\"title\">DbContext</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnConfiguring</span>(<span class=\"params\">DbContextOptionsBuilder optionsBuilder</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sqlConnectionStringBuilder = <span class=\"keyword\">new</span> SqlConnectionStringBuilder &#123;</span><br><span class=\"line\">            DataSource = <span class=\"string\">\"****\"</span>,</span><br><span class=\"line\">            InitialCatalog = <span class=\"string\">\"Wayne\"</span>,</span><br><span class=\"line\">            UserID = <span class=\"string\">\"sa\"</span>,</span><br><span class=\"line\">            Password = <span class=\"string\">\"sa\"</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        optionsBuilder.UseSqlServer(sqlConnectionStringBuilder.ConnectionString);</span><br><span class=\"line\"></span><br><span class=\"line\">        optionsBuilder.UseLazyLoadingProxies();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">base</span>.OnConfiguring(optionsBuilder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"Asp-Net-Core的热部署是怎么实现的\"><a href=\"#Asp-Net-Core的热部署是怎么实现的\" class=\"headerlink\" title=\"Asp.Net Core的热部署是怎么实现的\"></a>Asp.Net Core的热部署是怎么实现的</h4><p>以MVC模板为例，其实是在 Program 类中的 CreateWebHostBuilder 方法中实现的。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">TestCore</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            CreateWebHostBuilder(args).Build().Run();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IWebHostBuilder <span class=\"title\">CreateWebHostBuilder</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span>=&gt;</span><br><span class=\"line\">            WebHost.CreateDefaultBuilder(args)</span><br><span class=\"line\">                .UseStartup&lt;Startup&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>第十四行，WebHost.CreateDefaultBuilder(args)方法中巨硬封装了读取配置文件的操作。F12反编译转到源码。<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>   Initializes a new instance of the <span class=\"doctag\">&lt;see cref=\"T:Microsoft.AspNetCore.Hosting.WebHostBuilder\" /&gt;</span> class with pre-configured defaults.</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;remarks&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>   The following defaults are applied to the returned <span class=\"doctag\">&lt;see cref=\"T:Microsoft.AspNetCore.Hosting.WebHostBuilder\" /&gt;</span>:</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     use Kestrel as the web server and configure it using the application's configuration providers,</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     set the <span class=\"doctag\">&lt;see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.ContentRootPath\" /&gt;</span> to the result of <span class=\"doctag\">&lt;see cref=\"M:System.IO.Directory.GetCurrentDirectory\" /&gt;</span>,</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     load <span class=\"doctag\">&lt;see cref=\"T:Microsoft.Extensions.Configuration.IConfiguration\" /&gt;</span> from 'appsettings.json' and 'appsettings.[<span class=\"doctag\">&lt;see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" /&gt;</span>].json',</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     load <span class=\"doctag\">&lt;see cref=\"T:Microsoft.Extensions.Configuration.IConfiguration\" /&gt;</span> from User Secrets when <span class=\"doctag\">&lt;see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" /&gt;</span> is 'Development' using the entry assembly,</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     load <span class=\"doctag\">&lt;see cref=\"T:Microsoft.Extensions.Configuration.IConfiguration\" /&gt;</span> from environment variables,</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     load <span class=\"doctag\">&lt;see cref=\"T:Microsoft.Extensions.Configuration.IConfiguration\" /&gt;</span> from supplied command line args,</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     configures the <span class=\"doctag\">&lt;see cref=\"T:Microsoft.Extensions.Logging.ILoggerFactory\" /&gt;</span> to log to the console and debug output,</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     enables IIS integration,</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span>     and enables the ability for frameworks to bind their options to their default configuration sections.</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/remarks&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"args\"&gt;</span>The command line args.<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>The initialized <span class=\"doctag\">&lt;see cref=\"T:Microsoft.AspNetCore.Hosting.IWebHostBuilder\" /&gt;</span>.<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IWebHostBuilder <span class=\"title\">CreateDefaultBuilder</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    IWebHostBuilder hostBuilder = <span class=\"keyword\">new</span> WebHostBuilder().UseKestrel((Action&lt;WebHostBuilderContext, KestrelServerOptions&gt;)((builderContext, options) =&gt; options.Configure((IConfiguration)builderContext.Configuration.GetSection(<span class=\"string\">\"Kestrel\"</span>)))).UseContentRoot(Directory.GetCurrentDirectory()).ConfigureAppConfiguration((Action&lt;WebHostBuilderContext, IConfigurationBuilder&gt;)((hostingContext, config) =&gt;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tIHostingEnvironment hostingEnvironment = hostingContext.HostingEnvironment;</span><br><span class=\"line\">\t\tconfig.AddJsonFile(<span class=\"string\">\"appsettings.json\"</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>).AddJsonFile(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"appsettings.&#123;0&#125;.json\"</span>, (<span class=\"keyword\">object</span>)hostingEnvironment.EnvironmentName), <span class=\"literal\">true</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (hostingEnvironment.IsDevelopment())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tAssembly assembly = Assembly.Load(<span class=\"keyword\">new</span> AssemblyName(hostingEnvironment.ApplicationName));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (assembly != (Assembly)<span class=\"literal\">null</span>)</span><br><span class=\"line\">\t\t\t\tconfig.AddUserSecrets(assembly, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tconfig.AddEnvironmentVariables();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (args == <span class=\"literal\">null</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\tconfig.AddCommandLine(args);</span><br><span class=\"line\">\t&#125;))</span><br><span class=\"line\">\t.ConfigureLogging((Action&lt;WebHostBuilderContext, ILoggingBuilder&gt;)((hostingContext, logging) =&gt;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlogging.AddConfiguration((IConfiguration)hostingContext.Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</span><br><span class=\"line\">\t\tlogging.AddConsole();</span><br><span class=\"line\">\t\tlogging.AddDebug();</span><br><span class=\"line\">\t&#125;))</span><br><span class=\"line\">\t.UseIISIntegration().UseDefaultServiceProvider((Action&lt;WebHostBuilderContext, ServiceProviderOptions&gt;)((context, options) =&gt; options.ValidateScopes = context.HostingEnvironment.IsDevelopment()));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        hostBuilder.UseConfiguration((IConfiguration)<span class=\"keyword\">new</span> ConfigurationBuilder().AddCommandLine(args).Build());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hostBuilder;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>第23行 中<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.AddJsonFile(<span class=\"string\">\"appsettings.json\"</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>).AddJsonFile(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"appsettings.&#123;0&#125;.json\"</span>, (<span class=\"keyword\">object</span>)hostingEnvironment.EnvironmentName), <span class=\"literal\">true</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure><p></p><p>继续查看config扩展方法AddJsonFile的源码<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Adds the JSON configuration provider at <span class=\"doctag\">&lt;paramref name=\"path\" /&gt;</span> to <span class=\"doctag\">&lt;paramref name=\"builder\" /&gt;</span>.</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"builder\"&gt;</span>The <span class=\"doctag\">&lt;see cref=\"T:Microsoft.Extensions.Configuration.IConfigurationBuilder\" /&gt;</span> to add to.<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"path\"&gt;</span>Path relative to the base path stored in</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;see cref=\"P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties\" /&gt;</span> of <span class=\"doctag\">&lt;paramref name=\"builder\" /&gt;</span>.<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"optional\"&gt;</span>Whether the file is optional.<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"reloadOnChange\"&gt;</span>Whether the configuration should be reloaded if the file changes.<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>The <span class=\"doctag\">&lt;see cref=\"T:Microsoft.Extensions.Configuration.IConfigurationBuilder\" /&gt;</span>.<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IConfigurationBuilder <span class=\"title\">AddJsonFile</span>(<span class=\"params\"><span class=\"keyword\">this</span> IConfigurationBuilder builder, <span class=\"keyword\">string</span> path, <span class=\"keyword\">bool</span> optional, <span class=\"keyword\">bool</span> reloadOnChange</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> builder.AddJsonFile((IFileProvider) <span class=\"literal\">null</span>, path, optional, reloadOnChange);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>形参中的第四个参数为<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"reloadOnChange\"&gt;</span>Whether the configuration should be reloaded if the file changes.<span class=\"doctag\">&lt;/param&gt;</span></span></span><br></pre></td></tr></table></figure><p></p><p>当这个参数被设置为 <strong>true</strong> 时即可实现热更新。</p><h4 id=\"怎样修改绑定的地址\"><a href=\"#怎样修改绑定的地址\" class=\"headerlink\" title=\"怎样修改绑定的地址\"></a>怎样修改绑定的地址</h4><p>在 Program 类的 CreateWebHostBuilder 中增加 UseUrls 方法的调用<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IWebHostBuilder <span class=\"title\">CreateWebHostBuilder</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span>=&gt;</span><br><span class=\"line\">            WebHost.CreateDefaultBuilder(args)</span><br><span class=\"line\">                .UseUrls(<span class=\"string\">\"http://localhost:5001\"</span>)</span><br><span class=\"line\">                .UseStartup&lt;Startup&gt;();</span><br></pre></td></tr></table></figure><p></p><h4 id=\"更改实体类后怎样同步更改到数据库\"><a href=\"#更改实体类后怎样同步更改到数据库\" class=\"headerlink\" title=\"更改实体类后怎样同步更改到数据库\"></a>更改实体类后怎样同步更改到数据库</h4><p><strong>主要要使用EF的cli命令</strong><br>提交更改<br></p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet ef migrations Add InitialCreate</span><br></pre></td></tr></table></figure><p></p><p>同步到数据库<br></p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet ef database update</span><br></pre></td></tr></table></figure><p></p><p>回滚到之前的某一次提交<br></p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet ef migrations update InitialCreate</span><br></pre></td></tr></table></figure><p></p><p>回滚后同步代码回滚<br></p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet ef migrations remove</span><br></pre></td></tr></table></figure><p></p><p>将更改生成SQL脚本（一般是为了方便部署到正式环境）<br></p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet ef migrations script</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":".Net 百度语音Demo(语音识别、语音合成）","abbrlink":628,"date":"2018-02-22T12:15:00.000Z","_content":"> 百度语音，面向广大开发者永久免费开放语音合成技术。所采用的离在线融合技术，根据当前网络状况，自动判断使用本地引擎或者云端引擎，进行语音合成，再也不用担心流量消耗了！\n\n本Demo将使用官方提供的C#版本RestApi SDK制作一个Winfrom软件，实现以下两个功能。\n* TTS语音合成：可选择语速、音调、音量及发言人\n* ASR语音识别：使用NAudio进行语音录制并识别\n<!--more-->\n\n## Prepare\n在正式使用之前，我们需要在百度语音获取API key以及SDK文件。\n### 获取API Key\n在百度语音[应用管理](http://yuyin.baidu.com/app/)页面创建新应用。\n按照创建引导一步步来即可，注意在选择服务时同时勾选语音识别和语音合成，这样API Key就可以同时用于TTS和ASR了。\n### 下载离线SDK\n下载[C#版本](http://ai.baidu.com/download?sdkId=37)的RestApi SDK。\n![](http://p4au3q1y8.bkt.clouddn.com/20180222133806577/20180222083859597.png)\n## Coding\n使用Nuget安装Newtonsoft.Json和NAudio、手动引用官方提供的ApiSdk.dll文件。\n\n接下来查看官方Demo中有关语音的SpeechDemo.cs文件\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing Baidu.Aip.Speech;\n\nnamespace Baidu.Aip.Demo\n{\n    class SpeechDemo\n    {\n        private readonly Asr _asrClient;\n        private readonly Tts _ttsClient;\n\n        public SpeechDemo()\n        {\n            _asrClient = new Asr(\"Api Key\", \"Secret Key\");\n            _ttsClient = new Tts(\"Api Key\", \"Secret Key\");\n        }\n\n        // 识别本地文件\n        public void AsrData()\n        {\n            var data = File.ReadAllBytes(\"语音pcm文件地址\");\n            var result = _asrClient.Recognize(data, \"pcm\", 16000);\n            Console.Write(result);\n        }\n\n        // 识别URL中的语音文件\n        public void AsrUrl()\n        {\n            var result = _asrClient.Recoginze(\n                \"http://xxx.com/待识别的pcm文件地址\", \n                \"http://xxx.com/识别结果回调地址\", \n                \"pcm\", \n                16000);\n            Console.WriteLine(result);\n        }\n\n        // 合成\n        public void Tts()\n        {\n            // 可选参数\n            var option = new Dictionary<string, object>()\n            {\n                {\"spd\", 5}, // 语速\n                {\"vol\", 7}, // 音量\n                {\"per\", 4}  // 发音人，4：情感度丫丫童声\n            };\n            var result = _ttsClient.Synthesis(\"众里寻他千百度\", option);\n\n            if (result.ErrorCode == 0)  // 或 result.Success\n            {\n                File.WriteAllBytes(\"合成的语音文件本地存储地址.mp3\", result.Data);\n            }\n        }\n    }\n}\n```\n从代码示例中，我们可以看出语音识别API需要的源语音文件为pcm格式，我们使用[**NAudio**](https://github.com/naudio/NAudio)来获取麦克风数据并保存为pcm格式以使用API，同样的也使用[**NAudio**](https://github.com/naudio/NAudio)实时预览录制的数据和播放TTS合成的数据。\n\n### 将官方Demo封装成SpeechHelper\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Baidu.Aip.Speech;\n\nnamespace BaiduSpeechDemo\n{\n    static class SpeechHelper\n    {\n        private static readonly Asr AsrClient;\n        private static readonly Tts TtsClient;\n\n        static SpeechHelper()\n        {\n            AsrClient = new Asr(\"BWf8AWrvS5h6Y45NAOP3zaGp\", \"490737eca7a6ff4d20375d1696c7e548\");\n            TtsClient = new Tts(\"BWf8AWrvS5h6Y45NAOP3zaGp\", \"490737eca7a6ff4d20375d1696c7e548\");\n        }\n\n        // 识别本地文件\n        public static AsrResult AsrData(string path)\n        {\n            var data = File.ReadAllBytes(path);\n            var result = AsrClient.Recognize(data, \"pcm\", 8000);\n            return result.ToObject<AsrResult>();\n        }\n\n        // 识别URL中的语音文件\n        public static AsrResult AsrUrl(string url, string callback = \"\")\n        {\n            var result = AsrClient.Recoginze(\n                url,\n                callback,\n                \"pcm\",\n                16000);\n            return result.ToObject<AsrResult>();\n        }\n\n        // 合成\n        public static bool Tts(string input, string path, int spd = 5, int pit = 5, int vol = 6, int per = 4)\n        {\n            // 可选参数\n            var option = new Dictionary<string, object>\n            {\n                {\"spd\", spd}, // 语速，取值0-9，默认为5中语速\n                {\"pit\", pit}, // 音调，取值0-9，默认为5中语调\n                {\"vol\", vol}, // 音量，取值0-15，默认为5中音量\n                {\"per\", per}  // 发音人选择, 0为普通女声，1为普通男生，3为情感合成-度逍遥，4为情感合成-度丫丫，默认为普通女声\n            };\n            var result = TtsClient.Synthesis(input, option);\n\n            if (result.Success) File.WriteAllBytes(path, result.Data);\n\n            //Console.WriteLine(result.Serialize());\n\n            return result.Success;\n        }\n\n    }\n}\n```\n\n### [NAudio](https://github.com/naudio/NAudio)录制麦克风数据为pcm格式并实时预览\nNAudio提供了[同时进行录制和播放的Demo](http://markheath.net/post/how-to-record-and-play-audio-at-same0)，其中的SavingWaveProvider可以直接拿来使用，只要传入合适的参数即可将保存文件的格式由示例中的wav改为pcm，下面是修改后的调用代码。\n具体则是修改WaveIn的声明：\n```csharp\n// 设置记录器\n// WaveFormat.CreateCustomFormat 参数依次为 格式\\采样率\\声道\\每秒平均码率\\单位采样点的字节数\\采样位数\n_recorder = new WaveIn { WaveFormat = WaveFormat.CreateCustomFormat(WaveFormatEncoding.Pcm, 8000, 1, 16000, 2, 16) };\n```\n下面给出修改后的开始录制和结束录制的代码\n```csharp\nprivate WaveIn _recorder;\nprivate BufferedWaveProvider _bufferedWaveProvider;\nprivate SavingWaveProvider _savingWaveProvider;\nprivate WaveOut _player;\n\nprivate void OnStartRecordingClick(object sender, EventArgs e)\n{\n    // 设置记录器\n    // 参数依次为 格式\\采样率\\声道\\每秒平均码率\\单位采样点的字节数\\采样位数\n    _recorder = new WaveIn { WaveFormat = WaveFormat.CreateCustomFormat(WaveFormatEncoding.Pcm, 8000, 1, 16000, 2, 16) };\n    _recorder.DataAvailable += RecorderOnDataAvailable;\n\n    // 建立我们的信号链\n    _bufferedWaveProvider = new BufferedWaveProvider(_recorder.WaveFormat);\n\n    _fileName = Path.Combine(\"temp\", Guid.NewGuid() + \".pcm\");\n    _savingWaveProvider = new SavingWaveProvider(_bufferedWaveProvider, _fileName);\n\n    //设置播放\n    _player = new WaveOut();\n    _player.Init(_savingWaveProvider);\n\n    // 开始播放和录制\n    _player.Play();\n    _recorder.StartRecording();\n}\n\nprivate void RecorderOnDataAvailable(object sender, WaveInEventArgs waveInEventArgs)\n{\n    _bufferedWaveProvider.AddSamples(waveInEventArgs.Buffer, 0, waveInEventArgs.BytesRecorded);\n}\n\nprivate void OnStopRecordingClick(object sender, EventArgs e)\n{\n    // 停止录制\n    _recorder.StopRecording();\n    // 停止播放\n    _player.Stop();\n    // 最终完成 WAV 文件\n    _savingWaveProvider.Dispose();\n    \n    // 请求百度ASR API\n    var a = SpeechHelper.AsrData(_fileName);\n}\n```\n### TTS完成\n窗体界面拖好TTS选项的布局\n![](http://p4au3q1y8.bkt.clouddn.com/20180222133806577/20180222094352273.png)\n完成按钮点击事件的逻辑\n```csharp\nprivate void btnTts_Click(object sender, EventArgs e)\n{\n    // 临时保存路径\n    var musicPath = Path.Combine(\"temp\", Guid.NewGuid() + \".mp3\");\n\n    // 发言人\n    var per = cbPer.SelectedIndex >= 2 ? cbPer.SelectedIndex + 1 : cbPer.SelectedIndex;\n\n    //调用Baidu TTS Api\n    if (!SpeechHelper.Tts(tbContext.Text, musicPath, (int)nudSpd.Value, (int)nudPit.Value, (int)nudVol.Value, per)) return;\n\n    //播放请求得到的结果\n    IWavePlayer waveOutDevice = new WaveOut();\n    var audioFileReader = new AudioFileReader(musicPath);\n    waveOutDevice.Init(audioFileReader);\n    waveOutDevice.Play();\n\n    //播放结束后销毁播放对象\n    waveOutDevice.PlaybackStopped += delegate\n    {\n        waveOutDevice?.Stop();\n        waveOutDevice?.Dispose();\n        waveOutDevice = null;\n    };\n}\n```\n## Complete\n最终成品如下：\n![](http://p4au3q1y8.bkt.clouddn.com/20180222133806577/20180222094601387.png)\n**完整代码托管在[GitHub](https://github.com/WayneShao/BaiduSpeechDemo)**\n\n**代码中我自己的Api Key并没有删除，望手下留情，别给我搞封了。**","source":"_posts/百度语音测试.md","raw":"---\ntitle: .Net 百度语音Demo(语音识别、语音合成）\ntags:\n  - 百度语音识别\n  - ASR\n  - TTS\n  - NAudio\ncategories: []\nabbrlink: 628\ndate: 2018-02-22 20:15:00\n---\n> 百度语音，面向广大开发者永久免费开放语音合成技术。所采用的离在线融合技术，根据当前网络状况，自动判断使用本地引擎或者云端引擎，进行语音合成，再也不用担心流量消耗了！\n\n本Demo将使用官方提供的C#版本RestApi SDK制作一个Winfrom软件，实现以下两个功能。\n* TTS语音合成：可选择语速、音调、音量及发言人\n* ASR语音识别：使用NAudio进行语音录制并识别\n<!--more-->\n\n## Prepare\n在正式使用之前，我们需要在百度语音获取API key以及SDK文件。\n### 获取API Key\n在百度语音[应用管理](http://yuyin.baidu.com/app/)页面创建新应用。\n按照创建引导一步步来即可，注意在选择服务时同时勾选语音识别和语音合成，这样API Key就可以同时用于TTS和ASR了。\n### 下载离线SDK\n下载[C#版本](http://ai.baidu.com/download?sdkId=37)的RestApi SDK。\n![](http://p4au3q1y8.bkt.clouddn.com/20180222133806577/20180222083859597.png)\n## Coding\n使用Nuget安装Newtonsoft.Json和NAudio、手动引用官方提供的ApiSdk.dll文件。\n\n接下来查看官方Demo中有关语音的SpeechDemo.cs文件\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing Baidu.Aip.Speech;\n\nnamespace Baidu.Aip.Demo\n{\n    class SpeechDemo\n    {\n        private readonly Asr _asrClient;\n        private readonly Tts _ttsClient;\n\n        public SpeechDemo()\n        {\n            _asrClient = new Asr(\"Api Key\", \"Secret Key\");\n            _ttsClient = new Tts(\"Api Key\", \"Secret Key\");\n        }\n\n        // 识别本地文件\n        public void AsrData()\n        {\n            var data = File.ReadAllBytes(\"语音pcm文件地址\");\n            var result = _asrClient.Recognize(data, \"pcm\", 16000);\n            Console.Write(result);\n        }\n\n        // 识别URL中的语音文件\n        public void AsrUrl()\n        {\n            var result = _asrClient.Recoginze(\n                \"http://xxx.com/待识别的pcm文件地址\", \n                \"http://xxx.com/识别结果回调地址\", \n                \"pcm\", \n                16000);\n            Console.WriteLine(result);\n        }\n\n        // 合成\n        public void Tts()\n        {\n            // 可选参数\n            var option = new Dictionary<string, object>()\n            {\n                {\"spd\", 5}, // 语速\n                {\"vol\", 7}, // 音量\n                {\"per\", 4}  // 发音人，4：情感度丫丫童声\n            };\n            var result = _ttsClient.Synthesis(\"众里寻他千百度\", option);\n\n            if (result.ErrorCode == 0)  // 或 result.Success\n            {\n                File.WriteAllBytes(\"合成的语音文件本地存储地址.mp3\", result.Data);\n            }\n        }\n    }\n}\n```\n从代码示例中，我们可以看出语音识别API需要的源语音文件为pcm格式，我们使用[**NAudio**](https://github.com/naudio/NAudio)来获取麦克风数据并保存为pcm格式以使用API，同样的也使用[**NAudio**](https://github.com/naudio/NAudio)实时预览录制的数据和播放TTS合成的数据。\n\n### 将官方Demo封装成SpeechHelper\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Baidu.Aip.Speech;\n\nnamespace BaiduSpeechDemo\n{\n    static class SpeechHelper\n    {\n        private static readonly Asr AsrClient;\n        private static readonly Tts TtsClient;\n\n        static SpeechHelper()\n        {\n            AsrClient = new Asr(\"BWf8AWrvS5h6Y45NAOP3zaGp\", \"490737eca7a6ff4d20375d1696c7e548\");\n            TtsClient = new Tts(\"BWf8AWrvS5h6Y45NAOP3zaGp\", \"490737eca7a6ff4d20375d1696c7e548\");\n        }\n\n        // 识别本地文件\n        public static AsrResult AsrData(string path)\n        {\n            var data = File.ReadAllBytes(path);\n            var result = AsrClient.Recognize(data, \"pcm\", 8000);\n            return result.ToObject<AsrResult>();\n        }\n\n        // 识别URL中的语音文件\n        public static AsrResult AsrUrl(string url, string callback = \"\")\n        {\n            var result = AsrClient.Recoginze(\n                url,\n                callback,\n                \"pcm\",\n                16000);\n            return result.ToObject<AsrResult>();\n        }\n\n        // 合成\n        public static bool Tts(string input, string path, int spd = 5, int pit = 5, int vol = 6, int per = 4)\n        {\n            // 可选参数\n            var option = new Dictionary<string, object>\n            {\n                {\"spd\", spd}, // 语速，取值0-9，默认为5中语速\n                {\"pit\", pit}, // 音调，取值0-9，默认为5中语调\n                {\"vol\", vol}, // 音量，取值0-15，默认为5中音量\n                {\"per\", per}  // 发音人选择, 0为普通女声，1为普通男生，3为情感合成-度逍遥，4为情感合成-度丫丫，默认为普通女声\n            };\n            var result = TtsClient.Synthesis(input, option);\n\n            if (result.Success) File.WriteAllBytes(path, result.Data);\n\n            //Console.WriteLine(result.Serialize());\n\n            return result.Success;\n        }\n\n    }\n}\n```\n\n### [NAudio](https://github.com/naudio/NAudio)录制麦克风数据为pcm格式并实时预览\nNAudio提供了[同时进行录制和播放的Demo](http://markheath.net/post/how-to-record-and-play-audio-at-same0)，其中的SavingWaveProvider可以直接拿来使用，只要传入合适的参数即可将保存文件的格式由示例中的wav改为pcm，下面是修改后的调用代码。\n具体则是修改WaveIn的声明：\n```csharp\n// 设置记录器\n// WaveFormat.CreateCustomFormat 参数依次为 格式\\采样率\\声道\\每秒平均码率\\单位采样点的字节数\\采样位数\n_recorder = new WaveIn { WaveFormat = WaveFormat.CreateCustomFormat(WaveFormatEncoding.Pcm, 8000, 1, 16000, 2, 16) };\n```\n下面给出修改后的开始录制和结束录制的代码\n```csharp\nprivate WaveIn _recorder;\nprivate BufferedWaveProvider _bufferedWaveProvider;\nprivate SavingWaveProvider _savingWaveProvider;\nprivate WaveOut _player;\n\nprivate void OnStartRecordingClick(object sender, EventArgs e)\n{\n    // 设置记录器\n    // 参数依次为 格式\\采样率\\声道\\每秒平均码率\\单位采样点的字节数\\采样位数\n    _recorder = new WaveIn { WaveFormat = WaveFormat.CreateCustomFormat(WaveFormatEncoding.Pcm, 8000, 1, 16000, 2, 16) };\n    _recorder.DataAvailable += RecorderOnDataAvailable;\n\n    // 建立我们的信号链\n    _bufferedWaveProvider = new BufferedWaveProvider(_recorder.WaveFormat);\n\n    _fileName = Path.Combine(\"temp\", Guid.NewGuid() + \".pcm\");\n    _savingWaveProvider = new SavingWaveProvider(_bufferedWaveProvider, _fileName);\n\n    //设置播放\n    _player = new WaveOut();\n    _player.Init(_savingWaveProvider);\n\n    // 开始播放和录制\n    _player.Play();\n    _recorder.StartRecording();\n}\n\nprivate void RecorderOnDataAvailable(object sender, WaveInEventArgs waveInEventArgs)\n{\n    _bufferedWaveProvider.AddSamples(waveInEventArgs.Buffer, 0, waveInEventArgs.BytesRecorded);\n}\n\nprivate void OnStopRecordingClick(object sender, EventArgs e)\n{\n    // 停止录制\n    _recorder.StopRecording();\n    // 停止播放\n    _player.Stop();\n    // 最终完成 WAV 文件\n    _savingWaveProvider.Dispose();\n    \n    // 请求百度ASR API\n    var a = SpeechHelper.AsrData(_fileName);\n}\n```\n### TTS完成\n窗体界面拖好TTS选项的布局\n![](http://p4au3q1y8.bkt.clouddn.com/20180222133806577/20180222094352273.png)\n完成按钮点击事件的逻辑\n```csharp\nprivate void btnTts_Click(object sender, EventArgs e)\n{\n    // 临时保存路径\n    var musicPath = Path.Combine(\"temp\", Guid.NewGuid() + \".mp3\");\n\n    // 发言人\n    var per = cbPer.SelectedIndex >= 2 ? cbPer.SelectedIndex + 1 : cbPer.SelectedIndex;\n\n    //调用Baidu TTS Api\n    if (!SpeechHelper.Tts(tbContext.Text, musicPath, (int)nudSpd.Value, (int)nudPit.Value, (int)nudVol.Value, per)) return;\n\n    //播放请求得到的结果\n    IWavePlayer waveOutDevice = new WaveOut();\n    var audioFileReader = new AudioFileReader(musicPath);\n    waveOutDevice.Init(audioFileReader);\n    waveOutDevice.Play();\n\n    //播放结束后销毁播放对象\n    waveOutDevice.PlaybackStopped += delegate\n    {\n        waveOutDevice?.Stop();\n        waveOutDevice?.Dispose();\n        waveOutDevice = null;\n    };\n}\n```\n## Complete\n最终成品如下：\n![](http://p4au3q1y8.bkt.clouddn.com/20180222133806577/20180222094601387.png)\n**完整代码托管在[GitHub](https://github.com/WayneShao/BaiduSpeechDemo)**\n\n**代码中我自己的Api Key并没有删除，望手下留情，别给我搞封了。**","slug":"百度语音测试","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24p2j007gd00o9fva7nf8","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><blockquote><p>百度语音，面向广大开发者永久免费开放语音合成技术。所采用的离在线融合技术，根据当前网络状况，自动判断使用本地引擎或者云端引擎，进行语音合成，再也不用担心流量消耗了！</p></blockquote><p>本Demo将使用官方提供的C#版本RestApi SDK制作一个Winfrom软件，实现以下两个功能。</p><ul><li>TTS语音合成：可选择语速、音调、音量及发言人</li><li>ASR语音识别：使用NAudio进行语音录制并识别<a id=\"more\"></a></li></ul><h2 id=\"Prepare\"><a href=\"#Prepare\" class=\"headerlink\" title=\"Prepare\"></a>Prepare</h2><p>在正式使用之前，我们需要在百度语音获取API key以及SDK文件。</p><h3 id=\"获取API-Key\"><a href=\"#获取API-Key\" class=\"headerlink\" title=\"获取API Key\"></a>获取API Key</h3><p>在百度语音<a href=\"http://yuyin.baidu.com/app/\" target=\"_blank\" rel=\"noopener\">应用管理</a>页面创建新应用。<br>按照创建引导一步步来即可，注意在选择服务时同时勾选语音识别和语音合成，这样API Key就可以同时用于TTS和ASR了。</p><h3 id=\"下载离线SDK\"><a href=\"#下载离线SDK\" class=\"headerlink\" title=\"下载离线SDK\"></a>下载离线SDK</h3><p>下载<a href=\"http://ai.baidu.com/download?sdkId=37\" target=\"_blank\" rel=\"noopener\">C#版本</a>的RestApi SDK。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180222133806577/20180222083859597.png\" alt=\"\"></p><h2 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2><p>使用Nuget安装Newtonsoft.Json和NAudio、手动引用官方提供的ApiSdk.dll文件。</p><p>接下来查看官方Demo中有关语音的SpeechDemo.cs文件<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Baidu.Aip.Speech;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Baidu.Aip.Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">SpeechDemo</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Asr _asrClient;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Tts _ttsClient;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpeechDemo</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _asrClient = <span class=\"keyword\">new</span> Asr(<span class=\"string\">\"Api Key\"</span>, <span class=\"string\">\"Secret Key\"</span>);</span><br><span class=\"line\">            _ttsClient = <span class=\"keyword\">new</span> Tts(<span class=\"string\">\"Api Key\"</span>, <span class=\"string\">\"Secret Key\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 识别本地文件</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AsrData</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> data = File.ReadAllBytes(<span class=\"string\">\"语音pcm文件地址\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = _asrClient.Recognize(data, <span class=\"string\">\"pcm\"</span>, <span class=\"number\">16000</span>);</span><br><span class=\"line\">            Console.Write(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 识别URL中的语音文件</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AsrUrl</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = _asrClient.Recoginze(</span><br><span class=\"line\">                <span class=\"string\">\"http://xxx.com/待识别的pcm文件地址\"</span>, </span><br><span class=\"line\">                <span class=\"string\">\"http://xxx.com/识别结果回调地址\"</span>, </span><br><span class=\"line\">                <span class=\"string\">\"pcm\"</span>, </span><br><span class=\"line\">                <span class=\"number\">16000</span>);</span><br><span class=\"line\">            Console.WriteLine(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 合成</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Tts</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 可选参数</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> option = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt;()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &#123;<span class=\"string\">\"spd\"</span>, <span class=\"number\">5</span>&#125;, <span class=\"comment\">// 语速</span></span><br><span class=\"line\">                &#123;<span class=\"string\">\"vol\"</span>, <span class=\"number\">7</span>&#125;, <span class=\"comment\">// 音量</span></span><br><span class=\"line\">                &#123;<span class=\"string\">\"per\"</span>, <span class=\"number\">4</span>&#125;  <span class=\"comment\">// 发音人，4：情感度丫丫童声</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = _ttsClient.Synthesis(<span class=\"string\">\"众里寻他千百度\"</span>, option);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result.ErrorCode == <span class=\"number\">0</span>)  <span class=\"comment\">// 或 result.Success</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                File.WriteAllBytes(<span class=\"string\">\"合成的语音文件本地存储地址.mp3\"</span>, result.Data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>从代码示例中，我们可以看出语音识别API需要的源语音文件为pcm格式，我们使用<a href=\"https://github.com/naudio/NAudio\" target=\"_blank\" rel=\"noopener\"><strong>NAudio</strong></a>来获取麦克风数据并保存为pcm格式以使用API，同样的也使用<a href=\"https://github.com/naudio/NAudio\" target=\"_blank\" rel=\"noopener\"><strong>NAudio</strong></a>实时预览录制的数据和播放TTS合成的数据。</p><h3 id=\"将官方Demo封装成SpeechHelper\"><a href=\"#将官方Demo封装成SpeechHelper\" class=\"headerlink\" title=\"将官方Demo封装成SpeechHelper\"></a>将官方Demo封装成SpeechHelper</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Baidu.Aip.Speech;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">BaiduSpeechDemo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">SpeechHelper</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Asr AsrClient;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Tts TtsClient;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">SpeechHelper</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            AsrClient = <span class=\"keyword\">new</span> Asr(<span class=\"string\">\"BWf8AWrvS5h6Y45NAOP3zaGp\"</span>, <span class=\"string\">\"490737eca7a6ff4d20375d1696c7e548\"</span>);</span><br><span class=\"line\">            TtsClient = <span class=\"keyword\">new</span> Tts(<span class=\"string\">\"BWf8AWrvS5h6Y45NAOP3zaGp\"</span>, <span class=\"string\">\"490737eca7a6ff4d20375d1696c7e548\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 识别本地文件</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AsrResult <span class=\"title\">AsrData</span>(<span class=\"params\"><span class=\"keyword\">string</span> path</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> data = File.ReadAllBytes(path);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = AsrClient.Recognize(data, <span class=\"string\">\"pcm\"</span>, <span class=\"number\">8000</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result.ToObject&lt;AsrResult&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 识别URL中的语音文件</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AsrResult <span class=\"title\">AsrUrl</span>(<span class=\"params\"><span class=\"keyword\">string</span> url, <span class=\"keyword\">string</span> callback = <span class=\"string\">\"\"</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = AsrClient.Recoginze(</span><br><span class=\"line\">                url,</span><br><span class=\"line\">                callback,</span><br><span class=\"line\">                <span class=\"string\">\"pcm\"</span>,</span><br><span class=\"line\">                <span class=\"number\">16000</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result.ToObject&lt;AsrResult&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 合成</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">Tts</span>(<span class=\"params\"><span class=\"keyword\">string</span> input, <span class=\"keyword\">string</span> path, <span class=\"keyword\">int</span> spd = <span class=\"number\">5</span>, <span class=\"keyword\">int</span> pit = <span class=\"number\">5</span>, <span class=\"keyword\">int</span> vol = <span class=\"number\">6</span>, <span class=\"keyword\">int</span> per = <span class=\"number\">4</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 可选参数</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> option = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &#123;<span class=\"string\">\"spd\"</span>, spd&#125;, <span class=\"comment\">// 语速，取值0-9，默认为5中语速</span></span><br><span class=\"line\">                &#123;<span class=\"string\">\"pit\"</span>, pit&#125;, <span class=\"comment\">// 音调，取值0-9，默认为5中语调</span></span><br><span class=\"line\">                &#123;<span class=\"string\">\"vol\"</span>, vol&#125;, <span class=\"comment\">// 音量，取值0-15，默认为5中音量</span></span><br><span class=\"line\">                &#123;<span class=\"string\">\"per\"</span>, per&#125;  <span class=\"comment\">// 发音人选择, 0为普通女声，1为普通男生，3为情感合成-度逍遥，4为情感合成-度丫丫，默认为普通女声</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = TtsClient.Synthesis(input, option);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result.Success) File.WriteAllBytes(path, result.Data);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//Console.WriteLine(result.Serialize());</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result.Success;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"NAudio录制麦克风数据为pcm格式并实时预览\"><a href=\"#NAudio录制麦克风数据为pcm格式并实时预览\" class=\"headerlink\" title=\"NAudio录制麦克风数据为pcm格式并实时预览\"></a><a href=\"https://github.com/naudio/NAudio\" target=\"_blank\" rel=\"noopener\">NAudio</a>录制麦克风数据为pcm格式并实时预览</h3><p>NAudio提供了<a href=\"http://markheath.net/post/how-to-record-and-play-audio-at-same0\" target=\"_blank\" rel=\"noopener\">同时进行录制和播放的Demo</a>，其中的SavingWaveProvider可以直接拿来使用，只要传入合适的参数即可将保存文件的格式由示例中的wav改为pcm，下面是修改后的调用代码。<br>具体则是修改WaveIn的声明：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置记录器</span></span><br><span class=\"line\"><span class=\"comment\">// WaveFormat.CreateCustomFormat 参数依次为 格式\\采样率\\声道\\每秒平均码率\\单位采样点的字节数\\采样位数</span></span><br><span class=\"line\">_recorder = <span class=\"keyword\">new</span> WaveIn &#123; WaveFormat = WaveFormat.CreateCustomFormat(WaveFormatEncoding.Pcm, <span class=\"number\">8000</span>, <span class=\"number\">1</span>, <span class=\"number\">16000</span>, <span class=\"number\">2</span>, <span class=\"number\">16</span>) &#125;;</span><br></pre></td></tr></table></figure><p></p><p>下面给出修改后的开始录制和结束录制的代码<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> WaveIn _recorder;</span><br><span class=\"line\"><span class=\"keyword\">private</span> BufferedWaveProvider _bufferedWaveProvider;</span><br><span class=\"line\"><span class=\"keyword\">private</span> SavingWaveProvider _savingWaveProvider;</span><br><span class=\"line\"><span class=\"keyword\">private</span> WaveOut _player;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">OnStartRecordingClick</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置记录器</span></span><br><span class=\"line\">    <span class=\"comment\">// 参数依次为 格式\\采样率\\声道\\每秒平均码率\\单位采样点的字节数\\采样位数</span></span><br><span class=\"line\">    _recorder = <span class=\"keyword\">new</span> WaveIn &#123; WaveFormat = WaveFormat.CreateCustomFormat(WaveFormatEncoding.Pcm, <span class=\"number\">8000</span>, <span class=\"number\">1</span>, <span class=\"number\">16000</span>, <span class=\"number\">2</span>, <span class=\"number\">16</span>) &#125;;</span><br><span class=\"line\">    _recorder.DataAvailable += RecorderOnDataAvailable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 建立我们的信号链</span></span><br><span class=\"line\">    _bufferedWaveProvider = <span class=\"keyword\">new</span> BufferedWaveProvider(_recorder.WaveFormat);</span><br><span class=\"line\"></span><br><span class=\"line\">    _fileName = Path.Combine(<span class=\"string\">\"temp\"</span>, Guid.NewGuid() + <span class=\"string\">\".pcm\"</span>);</span><br><span class=\"line\">    _savingWaveProvider = <span class=\"keyword\">new</span> SavingWaveProvider(_bufferedWaveProvider, _fileName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置播放</span></span><br><span class=\"line\">    _player = <span class=\"keyword\">new</span> WaveOut();</span><br><span class=\"line\">    _player.Init(_savingWaveProvider);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 开始播放和录制</span></span><br><span class=\"line\">    _player.Play();</span><br><span class=\"line\">    _recorder.StartRecording();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">RecorderOnDataAvailable</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, WaveInEventArgs waveInEventArgs</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    _bufferedWaveProvider.AddSamples(waveInEventArgs.Buffer, <span class=\"number\">0</span>, waveInEventArgs.BytesRecorded);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">OnStopRecordingClick</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 停止录制</span></span><br><span class=\"line\">    _recorder.StopRecording();</span><br><span class=\"line\">    <span class=\"comment\">// 停止播放</span></span><br><span class=\"line\">    _player.Stop();</span><br><span class=\"line\">    <span class=\"comment\">// 最终完成 WAV 文件</span></span><br><span class=\"line\">    _savingWaveProvider.Dispose();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 请求百度ASR API</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = SpeechHelper.AsrData(_fileName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"TTS完成\"><a href=\"#TTS完成\" class=\"headerlink\" title=\"TTS完成\"></a>TTS完成</h3><p>窗体界面拖好TTS选项的布局<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180222133806577/20180222094352273.png\" alt=\"\"><br>完成按钮点击事件的逻辑<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">btnTts_Click</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 临时保存路径</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> musicPath = Path.Combine(<span class=\"string\">\"temp\"</span>, Guid.NewGuid() + <span class=\"string\">\".mp3\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发言人</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> per = cbPer.SelectedIndex &gt;= <span class=\"number\">2</span> ? cbPer.SelectedIndex + <span class=\"number\">1</span> : cbPer.SelectedIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//调用Baidu TTS Api</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!SpeechHelper.Tts(tbContext.Text, musicPath, (<span class=\"keyword\">int</span>)nudSpd.Value, (<span class=\"keyword\">int</span>)nudPit.Value, (<span class=\"keyword\">int</span>)nudVol.Value, per)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//播放请求得到的结果</span></span><br><span class=\"line\">    IWavePlayer waveOutDevice = <span class=\"keyword\">new</span> WaveOut();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> audioFileReader = <span class=\"keyword\">new</span> AudioFileReader(musicPath);</span><br><span class=\"line\">    waveOutDevice.Init(audioFileReader);</span><br><span class=\"line\">    waveOutDevice.Play();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//播放结束后销毁播放对象</span></span><br><span class=\"line\">    waveOutDevice.PlaybackStopped += <span class=\"keyword\">delegate</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waveOutDevice?.Stop();</span><br><span class=\"line\">        waveOutDevice?.Dispose();</span><br><span class=\"line\">        waveOutDevice = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"Complete\"><a href=\"#Complete\" class=\"headerlink\" title=\"Complete\"></a>Complete</h2><p>最终成品如下：<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180222133806577/20180222094601387.png\" alt=\"\"><br><strong>完整代码托管在<a href=\"https://github.com/WayneShao/BaiduSpeechDemo\" target=\"_blank\" rel=\"noopener\">GitHub</a></strong></p><p><strong>代码中我自己的Api Key并没有删除，望手下留情，别给我搞封了。</strong></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><blockquote><p>百度语音，面向广大开发者永久免费开放语音合成技术。所采用的离在线融合技术，根据当前网络状况，自动判断使用本地引擎或者云端引擎，进行语音合成，再也不用担心流量消耗了！</p></blockquote><p>本Demo将使用官方提供的C#版本RestApi SDK制作一个Winfrom软件，实现以下两个功能。</p><ul><li>TTS语音合成：可选择语速、音调、音量及发言人</li><li>ASR语音识别：使用NAudio进行语音录制并识别","more":"</li></ul><h2 id=\"Prepare\"><a href=\"#Prepare\" class=\"headerlink\" title=\"Prepare\"></a>Prepare</h2><p>在正式使用之前，我们需要在百度语音获取API key以及SDK文件。</p><h3 id=\"获取API-Key\"><a href=\"#获取API-Key\" class=\"headerlink\" title=\"获取API Key\"></a>获取API Key</h3><p>在百度语音<a href=\"http://yuyin.baidu.com/app/\" target=\"_blank\" rel=\"noopener\">应用管理</a>页面创建新应用。<br>按照创建引导一步步来即可，注意在选择服务时同时勾选语音识别和语音合成，这样API Key就可以同时用于TTS和ASR了。</p><h3 id=\"下载离线SDK\"><a href=\"#下载离线SDK\" class=\"headerlink\" title=\"下载离线SDK\"></a>下载离线SDK</h3><p>下载<a href=\"http://ai.baidu.com/download?sdkId=37\" target=\"_blank\" rel=\"noopener\">C#版本</a>的RestApi SDK。<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180222133806577/20180222083859597.png\" alt=\"\"></p><h2 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2><p>使用Nuget安装Newtonsoft.Json和NAudio、手动引用官方提供的ApiSdk.dll文件。</p><p>接下来查看官方Demo中有关语音的SpeechDemo.cs文件<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Baidu.Aip.Speech;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Baidu.Aip.Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">SpeechDemo</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Asr _asrClient;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Tts _ttsClient;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpeechDemo</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _asrClient = <span class=\"keyword\">new</span> Asr(<span class=\"string\">\"Api Key\"</span>, <span class=\"string\">\"Secret Key\"</span>);</span><br><span class=\"line\">            _ttsClient = <span class=\"keyword\">new</span> Tts(<span class=\"string\">\"Api Key\"</span>, <span class=\"string\">\"Secret Key\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 识别本地文件</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AsrData</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> data = File.ReadAllBytes(<span class=\"string\">\"语音pcm文件地址\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = _asrClient.Recognize(data, <span class=\"string\">\"pcm\"</span>, <span class=\"number\">16000</span>);</span><br><span class=\"line\">            Console.Write(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 识别URL中的语音文件</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AsrUrl</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = _asrClient.Recoginze(</span><br><span class=\"line\">                <span class=\"string\">\"http://xxx.com/待识别的pcm文件地址\"</span>, </span><br><span class=\"line\">                <span class=\"string\">\"http://xxx.com/识别结果回调地址\"</span>, </span><br><span class=\"line\">                <span class=\"string\">\"pcm\"</span>, </span><br><span class=\"line\">                <span class=\"number\">16000</span>);</span><br><span class=\"line\">            Console.WriteLine(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 合成</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Tts</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 可选参数</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> option = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt;()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &#123;<span class=\"string\">\"spd\"</span>, <span class=\"number\">5</span>&#125;, <span class=\"comment\">// 语速</span></span><br><span class=\"line\">                &#123;<span class=\"string\">\"vol\"</span>, <span class=\"number\">7</span>&#125;, <span class=\"comment\">// 音量</span></span><br><span class=\"line\">                &#123;<span class=\"string\">\"per\"</span>, <span class=\"number\">4</span>&#125;  <span class=\"comment\">// 发音人，4：情感度丫丫童声</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = _ttsClient.Synthesis(<span class=\"string\">\"众里寻他千百度\"</span>, option);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result.ErrorCode == <span class=\"number\">0</span>)  <span class=\"comment\">// 或 result.Success</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                File.WriteAllBytes(<span class=\"string\">\"合成的语音文件本地存储地址.mp3\"</span>, result.Data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>从代码示例中，我们可以看出语音识别API需要的源语音文件为pcm格式，我们使用<a href=\"https://github.com/naudio/NAudio\" target=\"_blank\" rel=\"noopener\"><strong>NAudio</strong></a>来获取麦克风数据并保存为pcm格式以使用API，同样的也使用<a href=\"https://github.com/naudio/NAudio\" target=\"_blank\" rel=\"noopener\"><strong>NAudio</strong></a>实时预览录制的数据和播放TTS合成的数据。</p><h3 id=\"将官方Demo封装成SpeechHelper\"><a href=\"#将官方Demo封装成SpeechHelper\" class=\"headerlink\" title=\"将官方Demo封装成SpeechHelper\"></a>将官方Demo封装成SpeechHelper</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Baidu.Aip.Speech;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">BaiduSpeechDemo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">SpeechHelper</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Asr AsrClient;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Tts TtsClient;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">SpeechHelper</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            AsrClient = <span class=\"keyword\">new</span> Asr(<span class=\"string\">\"BWf8AWrvS5h6Y45NAOP3zaGp\"</span>, <span class=\"string\">\"490737eca7a6ff4d20375d1696c7e548\"</span>);</span><br><span class=\"line\">            TtsClient = <span class=\"keyword\">new</span> Tts(<span class=\"string\">\"BWf8AWrvS5h6Y45NAOP3zaGp\"</span>, <span class=\"string\">\"490737eca7a6ff4d20375d1696c7e548\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 识别本地文件</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AsrResult <span class=\"title\">AsrData</span>(<span class=\"params\"><span class=\"keyword\">string</span> path</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> data = File.ReadAllBytes(path);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = AsrClient.Recognize(data, <span class=\"string\">\"pcm\"</span>, <span class=\"number\">8000</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result.ToObject&lt;AsrResult&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 识别URL中的语音文件</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AsrResult <span class=\"title\">AsrUrl</span>(<span class=\"params\"><span class=\"keyword\">string</span> url, <span class=\"keyword\">string</span> callback = <span class=\"string\">\"\"</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = AsrClient.Recoginze(</span><br><span class=\"line\">                url,</span><br><span class=\"line\">                callback,</span><br><span class=\"line\">                <span class=\"string\">\"pcm\"</span>,</span><br><span class=\"line\">                <span class=\"number\">16000</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result.ToObject&lt;AsrResult&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 合成</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">Tts</span>(<span class=\"params\"><span class=\"keyword\">string</span> input, <span class=\"keyword\">string</span> path, <span class=\"keyword\">int</span> spd = <span class=\"number\">5</span>, <span class=\"keyword\">int</span> pit = <span class=\"number\">5</span>, <span class=\"keyword\">int</span> vol = <span class=\"number\">6</span>, <span class=\"keyword\">int</span> per = <span class=\"number\">4</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 可选参数</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> option = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &#123;<span class=\"string\">\"spd\"</span>, spd&#125;, <span class=\"comment\">// 语速，取值0-9，默认为5中语速</span></span><br><span class=\"line\">                &#123;<span class=\"string\">\"pit\"</span>, pit&#125;, <span class=\"comment\">// 音调，取值0-9，默认为5中语调</span></span><br><span class=\"line\">                &#123;<span class=\"string\">\"vol\"</span>, vol&#125;, <span class=\"comment\">// 音量，取值0-15，默认为5中音量</span></span><br><span class=\"line\">                &#123;<span class=\"string\">\"per\"</span>, per&#125;  <span class=\"comment\">// 发音人选择, 0为普通女声，1为普通男生，3为情感合成-度逍遥，4为情感合成-度丫丫，默认为普通女声</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = TtsClient.Synthesis(input, option);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result.Success) File.WriteAllBytes(path, result.Data);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//Console.WriteLine(result.Serialize());</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result.Success;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"NAudio录制麦克风数据为pcm格式并实时预览\"><a href=\"#NAudio录制麦克风数据为pcm格式并实时预览\" class=\"headerlink\" title=\"NAudio录制麦克风数据为pcm格式并实时预览\"></a><a href=\"https://github.com/naudio/NAudio\" target=\"_blank\" rel=\"noopener\">NAudio</a>录制麦克风数据为pcm格式并实时预览</h3><p>NAudio提供了<a href=\"http://markheath.net/post/how-to-record-and-play-audio-at-same0\" target=\"_blank\" rel=\"noopener\">同时进行录制和播放的Demo</a>，其中的SavingWaveProvider可以直接拿来使用，只要传入合适的参数即可将保存文件的格式由示例中的wav改为pcm，下面是修改后的调用代码。<br>具体则是修改WaveIn的声明：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置记录器</span></span><br><span class=\"line\"><span class=\"comment\">// WaveFormat.CreateCustomFormat 参数依次为 格式\\采样率\\声道\\每秒平均码率\\单位采样点的字节数\\采样位数</span></span><br><span class=\"line\">_recorder = <span class=\"keyword\">new</span> WaveIn &#123; WaveFormat = WaveFormat.CreateCustomFormat(WaveFormatEncoding.Pcm, <span class=\"number\">8000</span>, <span class=\"number\">1</span>, <span class=\"number\">16000</span>, <span class=\"number\">2</span>, <span class=\"number\">16</span>) &#125;;</span><br></pre></td></tr></table></figure><p></p><p>下面给出修改后的开始录制和结束录制的代码<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> WaveIn _recorder;</span><br><span class=\"line\"><span class=\"keyword\">private</span> BufferedWaveProvider _bufferedWaveProvider;</span><br><span class=\"line\"><span class=\"keyword\">private</span> SavingWaveProvider _savingWaveProvider;</span><br><span class=\"line\"><span class=\"keyword\">private</span> WaveOut _player;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">OnStartRecordingClick</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置记录器</span></span><br><span class=\"line\">    <span class=\"comment\">// 参数依次为 格式\\采样率\\声道\\每秒平均码率\\单位采样点的字节数\\采样位数</span></span><br><span class=\"line\">    _recorder = <span class=\"keyword\">new</span> WaveIn &#123; WaveFormat = WaveFormat.CreateCustomFormat(WaveFormatEncoding.Pcm, <span class=\"number\">8000</span>, <span class=\"number\">1</span>, <span class=\"number\">16000</span>, <span class=\"number\">2</span>, <span class=\"number\">16</span>) &#125;;</span><br><span class=\"line\">    _recorder.DataAvailable += RecorderOnDataAvailable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 建立我们的信号链</span></span><br><span class=\"line\">    _bufferedWaveProvider = <span class=\"keyword\">new</span> BufferedWaveProvider(_recorder.WaveFormat);</span><br><span class=\"line\"></span><br><span class=\"line\">    _fileName = Path.Combine(<span class=\"string\">\"temp\"</span>, Guid.NewGuid() + <span class=\"string\">\".pcm\"</span>);</span><br><span class=\"line\">    _savingWaveProvider = <span class=\"keyword\">new</span> SavingWaveProvider(_bufferedWaveProvider, _fileName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置播放</span></span><br><span class=\"line\">    _player = <span class=\"keyword\">new</span> WaveOut();</span><br><span class=\"line\">    _player.Init(_savingWaveProvider);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 开始播放和录制</span></span><br><span class=\"line\">    _player.Play();</span><br><span class=\"line\">    _recorder.StartRecording();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">RecorderOnDataAvailable</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, WaveInEventArgs waveInEventArgs</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    _bufferedWaveProvider.AddSamples(waveInEventArgs.Buffer, <span class=\"number\">0</span>, waveInEventArgs.BytesRecorded);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">OnStopRecordingClick</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 停止录制</span></span><br><span class=\"line\">    _recorder.StopRecording();</span><br><span class=\"line\">    <span class=\"comment\">// 停止播放</span></span><br><span class=\"line\">    _player.Stop();</span><br><span class=\"line\">    <span class=\"comment\">// 最终完成 WAV 文件</span></span><br><span class=\"line\">    _savingWaveProvider.Dispose();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 请求百度ASR API</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = SpeechHelper.AsrData(_fileName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"TTS完成\"><a href=\"#TTS完成\" class=\"headerlink\" title=\"TTS完成\"></a>TTS完成</h3><p>窗体界面拖好TTS选项的布局<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180222133806577/20180222094352273.png\" alt=\"\"><br>完成按钮点击事件的逻辑<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">btnTts_Click</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 临时保存路径</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> musicPath = Path.Combine(<span class=\"string\">\"temp\"</span>, Guid.NewGuid() + <span class=\"string\">\".mp3\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发言人</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> per = cbPer.SelectedIndex &gt;= <span class=\"number\">2</span> ? cbPer.SelectedIndex + <span class=\"number\">1</span> : cbPer.SelectedIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//调用Baidu TTS Api</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!SpeechHelper.Tts(tbContext.Text, musicPath, (<span class=\"keyword\">int</span>)nudSpd.Value, (<span class=\"keyword\">int</span>)nudPit.Value, (<span class=\"keyword\">int</span>)nudVol.Value, per)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//播放请求得到的结果</span></span><br><span class=\"line\">    IWavePlayer waveOutDevice = <span class=\"keyword\">new</span> WaveOut();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> audioFileReader = <span class=\"keyword\">new</span> AudioFileReader(musicPath);</span><br><span class=\"line\">    waveOutDevice.Init(audioFileReader);</span><br><span class=\"line\">    waveOutDevice.Play();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//播放结束后销毁播放对象</span></span><br><span class=\"line\">    waveOutDevice.PlaybackStopped += <span class=\"keyword\">delegate</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waveOutDevice?.Stop();</span><br><span class=\"line\">        waveOutDevice?.Dispose();</span><br><span class=\"line\">        waveOutDevice = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"Complete\"><a href=\"#Complete\" class=\"headerlink\" title=\"Complete\"></a>Complete</h2><p>最终成品如下：<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180222133806577/20180222094601387.png\" alt=\"\"><br><strong>完整代码托管在<a href=\"https://github.com/WayneShao/BaiduSpeechDemo\" target=\"_blank\" rel=\"noopener\">GitHub</a></strong></p><p><strong>代码中我自己的Api Key并没有删除，望手下留情，别给我搞封了。</strong></p><!-- rebuild by neat -->"},{"title":"【MVC学习笔记】7.使用极验验证来制作更高逼格的验证码","abbrlink":47398,"date":"2016-09-20T12:15:16.000Z","_content":"在之前的项目中，如果有需要使用验证码，基本都是自己用GDI+画图出来，简单好用，但是却也存在了一些小问题，首先若较少干扰线，则安全性不是很高，验证码容易被机器识别，若多画太多干扰线条，机器人识别率下降的同时，人眼的识别率也同步下降（震惊哭）。更为重要的是，GDI+绘制的验证码一般来说也不会很美观，如果做一个炫酷的登陆界面却配了这样一个验证码，画风诡异，丑到极致。\n\n再后来浏览网页的过程中，发现很多很多网站项目中都使用了一种叫极验验证的验证码，采用移动滑块的方式进行验证，方便美观。而一番搜索之后了解到，官方提供的免费版也足以应付我手头的大多数项目了，不禁想把在MVC学习过程中试着使用极验验证来作为登录的验证码。\n<!-- more -->\n极验官方提供了[C#的SDK和Demo](https://github.com/GeeTeam/gt-csharp-sdk)供开发者参考，不过是Webform版本的，可读性不是很高，而现在使用Webform进行网站开发的也基本消失了，我将在官方Webform代码的基础上，将其用在ASP.NET MVC程序中。\n## 注册极验\n到极验官网注册账号之后进入后台管理界面，点击添加验证\n![](http://p4au3q1y8.bkt.clouddn.com/20180218223716/20180218103931147.png)\n添加后我们可以得到ID和KEY\n![](http://p4au3q1y8.bkt.clouddn.com/20180218223716/20180218103949448.png)\n## 完成验证逻辑\n### 首先我们需要引入官方的[Geetestlib类](https://github.com/GeeTeam/gt-csharp-sdk/blob/master/src/GeetestSDK/GeetestSDK/GeetestLib.cs)\n```csharp\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Net;\nusing System.IO;\n\nnamespace PMS.WebApp.Models\n{\n    /// <summary>\n    /// GeetestLib 极验验证C# SDK基本库\n    /// </summary>\n    public class GeetestLib\n    {\n        /// <summary>\n        /// SDK版本号\n        /// </summary>\n        public const String version = \"3.2.0\";\n        /// <summary>\n        /// SDK开发语言\n        /// </summary>\n        public const String sdkLang = \"csharp\";\n        /// <summary>\n        /// 极验验证API URL\n        /// </summary>\n        protected const String apiUrl = \"http://api.geetest.com\";\n        /// <summary>\n        /// register url\n        /// </summary>\n        protected const String registerUrl = \"/register.php\";\n        /// <summary>\n        /// validate url\n        /// </summary>\n        protected const String validateUrl = \"/validate.php\";\n        /// <summary>\n        /// 极验验证API服务状态Session Key\n        /// </summary>\n        public const String gtServerStatusSessionKey = \"gt_server_status\";\n        /// <summary>\n        /// 极验验证二次验证表单数据 Chllenge\n        /// </summary>\n        public const String fnGeetestChallenge = \"geetest_challenge\";\n        /// <summary>\n        /// 极验验证二次验证表单数据 Validate\n        /// </summary>\n        public const String fnGeetestValidate = \"geetest_validate\";\n        /// <summary>\n        /// 极验验证二次验证表单数据 Seccode\n        /// </summary>\n        public const String fnGeetestSeccode = \"geetest_seccode\";\n        private String userID = \"\";\n        private String responseStr = \"\";\n        private String captchaID = \"\";\n        private String privateKey = \"\";\n\n        /// <summary>\n        /// 验证成功结果字符串\n        /// </summary>\n        public const int successResult = 1;\n        /// <summary>\n        /// 证结失败验果字符串\n        /// </summary>\n        public const int failResult = 0;\n        /// <summary>\n        /// 判定为机器人结果字符串\n        /// </summary>\n        public const String forbiddenResult = \"forbidden\";\n\n        /// <summary>\n        /// GeetestLib构造函数\n        /// </summary>\n        /// <param name=\"publicKey\">极验验证公钥</param>\n        /// <param name=\"privateKey\">极验验证私钥</param>\n        public GeetestLib(String publicKey, String privateKey)\n        {\n            this.privateKey = privateKey;\n            this.captchaID = publicKey;\n        }\n        private int getRandomNum()\n        {\n            Random rand =new Random();\n            int randRes = rand.Next(100);\n            return randRes;\n        }\n\n        /// <summary>\n        /// 验证初始化预处理\n        /// </summary>\n        /// <returns>初始化结果</returns>\n        public Byte preProcess()\n        {\n            if (this.captchaID == null)\n            {\n                Console.WriteLine(\"publicKey is null!\");\n            }\n            else\n            {\n                String challenge = this.registerChallenge();\n                if (challenge.Length == 32)\n                {\n                    this.getSuccessPreProcessRes(challenge);\n                    return 1;\n                }\n                else\n                {\n                    this.getFailPreProcessRes();\n                    Console.WriteLine(\"Server regist challenge failed!\");\n                }\n            }\n\n            return 0;\n\n        }\n        public Byte preProcess(String userID)\n        {\n            if (this.captchaID == null)\n            {\n                Console.WriteLine(\"publicKey is null!\");\n            }\n            else\n            {\n                this.userID = userID;\n                String challenge = this.registerChallenge();\n                if (challenge.Length == 32)\n                {\n                    this.getSuccessPreProcessRes(challenge);\n                    return 1;\n                }\n                else\n                {\n                    this.getFailPreProcessRes();\n                    Console.WriteLine(\"Server regist challenge failed!\");\n                }\n            }\n\n            return 0;\n\n        }\n        public String getResponseStr()\n        {\n            return this.responseStr;\n        }\n        /// <summary>\n        /// 预处理失败后的返回格式串\n        /// </summary>\n        private void getFailPreProcessRes()\n        {\n            int rand1 = this.getRandomNum();\n            int rand2 = this.getRandomNum();\n            String md5Str1 = this.md5Encode(rand1 + \"\");\n            String md5Str2 = this.md5Encode(rand2 + \"\");\n            String challenge = md5Str1 + md5Str2.Substring(0, 2);\n            this.responseStr = \"{\" + string.Format(\n                 \"\\\"success\\\":{0},\\\"gt\\\":\\\"{1}\\\",\\\"challenge\\\":\\\"{2}\\\"\", 0,\n                this.captchaID, challenge) + \"}\";\n        }\n        /// <summary>\n        /// 预处理成功后的标准串\n        /// </summary>\n        private void getSuccessPreProcessRes(String challenge)\n        {\n            challenge = this.md5Encode(challenge + this.privateKey);\n            this.responseStr =\"{\" + string.Format(\n                \"\\\"success\\\":{0},\\\"gt\\\":\\\"{1}\\\",\\\"challenge\\\":\\\"{2}\\\"\", 1, \n                this.captchaID, challenge) + \"}\";\n        }\n        /// <summary>\n        /// failback模式的验证方式\n        /// </summary>\n        /// <param name=\"challenge\">failback模式下用于与validate一起解码答案， 判断验证是否正确</param>\n        /// <param name=\"validate\">failback模式下用于与challenge一起解码答案， 判断验证是否正确</param>\n        /// <param name=\"seccode\">failback模式下，其实是个没用的参数</param>\n        /// <returns>验证结果</returns>\n        public int failbackValidateRequest(String challenge, String validate, String seccode)\n        {\n            if (!this.requestIsLegal(challenge, validate, seccode)) return GeetestLib.failResult;\n            String[] validateStr = validate.Split('_');\n            String encodeAns = validateStr[0];\n            String encodeFullBgImgIndex = validateStr[1];\n            String encodeImgGrpIndex = validateStr[2];\n            int decodeAns = this.decodeResponse(challenge, encodeAns);\n            int decodeFullBgImgIndex = this.decodeResponse(challenge, encodeFullBgImgIndex);\n            int decodeImgGrpIndex = this.decodeResponse(challenge, encodeImgGrpIndex);\n            int validateResult = this.validateFailImage(decodeAns, decodeFullBgImgIndex, decodeImgGrpIndex);\n            return validateResult;\n        }\n        private int validateFailImage(int ans, int full_bg_index, int img_grp_index)\n        {\n            const int thread = 3;\n            String full_bg_name = this.md5Encode(full_bg_index + \"\").Substring(0, 10);\n            String bg_name = md5Encode(img_grp_index + \"\").Substring(10, 10);\n            String answer_decode = \"\";\n            for (int i = 0;i < 9; i++)\n            {\n                if (i % 2 == 0) answer_decode += full_bg_name.ElementAt(i);\n                else if (i % 2 == 1) answer_decode += bg_name.ElementAt(i);\n            }\n            String x_decode = answer_decode.Substring(4);\n            int x_int = Convert.ToInt32(x_decode, 16);\n            int result = x_int % 200;\n            if (result < 40) result = 40;\n            if (Math.Abs(ans - result) < thread) return GeetestLib.successResult;\n            else return GeetestLib.failResult;\n        }\n        private Boolean requestIsLegal(String challenge, String validate, String seccode)\n        {\n            if (challenge.Equals(string.Empty) || validate.Equals(string.Empty) || seccode.Equals(string.Empty)) return false;\n            return true;\n        }\n\n        /// <summary>\n        /// 向gt-server进行二次验证\n        /// </summary>\n        /// <param name=\"challenge\">本次验证会话的唯一标识</param>\n        /// <param name=\"validate\">拖动完成后server端返回的验证结果标识字符串</param>\n        /// <param name=\"seccode\">验证结果的校验码，如果gt-server返回的不与这个值相等则表明验证失败</param>\n        /// <returns>二次验证结果</returns>\n        public int enhencedValidateRequest(String challenge, String validate, String seccode)\n        {\n            if (!this.requestIsLegal(challenge, validate, seccode)) return GeetestLib.failResult;\n            if (validate.Length > 0 && checkResultByPrivate(challenge, validate))\n            {\n                String query = \"seccode=\" + seccode + \"&sdk=csharp_\" + GeetestLib.version;\n                String response = \"\";\n                try\n                {\n                    response = postValidate(query);\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine(e);\n                }\n                if (response.Equals(md5Encode(seccode)))\n                {\n                    return GeetestLib.successResult;\n                }\n            }\n            return GeetestLib.failResult;\n        }\n        public int enhencedValidateRequest(String challenge, String validate, String seccode, String userID)\n        {\n            if (!this.requestIsLegal(challenge, validate, seccode)) return GeetestLib.failResult;\n            if (validate.Length > 0 && checkResultByPrivate(challenge, validate))\n            {\n                String query = \"seccode=\" + seccode + \"&user_id=\" + userID + \"&sdk=csharp_\" + GeetestLib.version;\n                String response = \"\";\n                try\n                {\n                    response = postValidate(query);\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine(e);\n                }\n                if (response.Equals(md5Encode(seccode)))\n                {\n                    return GeetestLib.successResult;\n                }\n            }\n            return GeetestLib.failResult;\n        }\n        private String readContentFromGet(String url)\n        {\n            try\n            {\n                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n                request.Timeout = 20000;\n                HttpWebResponse response = (HttpWebResponse)request.GetResponse();\n                Stream myResponseStream = response.GetResponseStream();\n                StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding(\"utf-8\"));\n                String retString = myStreamReader.ReadToEnd();\n                myStreamReader.Close();\n                myResponseStream.Close();\n                return retString;\n            }\n           catch\n           {\n               return \"\";     \n           }\n\n        }\n        private String registerChallenge()\n        {\n            String url = \"\";\n            if (string.Empty.Equals(this.userID))\n            {\n                url = string.Format(\"{0}{1}?gt={2}\", GeetestLib.apiUrl, GeetestLib.registerUrl, this.captchaID);\n            }\n            else\n            {\n                url = string.Format(\"{0}{1}?gt={2}&user_id={3}\", GeetestLib.apiUrl, GeetestLib.registerUrl, this.captchaID, this.userID);\n            }\n            string retString = this.readContentFromGet(url);\n            return retString;\n        }\n        private Boolean checkResultByPrivate(String origin, String validate)\n        {\n            String encodeStr = md5Encode(privateKey + \"geetest\" + origin);\n            return validate.Equals(encodeStr);\n        }\n        private String postValidate(String data)\n        {\n            String url = string.Format(\"{0}{1}\", GeetestLib.apiUrl, GeetestLib.validateUrl);\n            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n            request.Method = \"POST\";\n            request.ContentType = \"application/x-www-form-urlencoded\";\n            request.ContentLength = Encoding.UTF8.GetByteCount(data);\n            // 发送数据\n            Stream myRequestStream = request.GetRequestStream();\n            byte[] requestBytes = System.Text.Encoding.ASCII.GetBytes(data);\n            myRequestStream.Write(requestBytes, 0, requestBytes.Length);\n            myRequestStream.Close();\n\n            HttpWebResponse response = (HttpWebResponse)request.GetResponse();\n            // 读取返回信息\n            Stream myResponseStream = response.GetResponseStream();\n            StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding(\"utf-8\"));\n            string retString = myStreamReader.ReadToEnd();\n            myStreamReader.Close();\n            myResponseStream.Close();\n\n            return retString;\n\n        }\n        private int decodeRandBase(String challenge)\n        {\n            String baseStr = challenge.Substring(32, 2);\n            List<int> tempList = new List<int>();\n            for(int i = 0; i < baseStr.Length; i++)\n            {\n                int tempAscii = (int)baseStr[i];\n                tempList.Add((tempAscii > 57) ? (tempAscii - 87)\n                    : (tempAscii - 48));\n            }\n            int result = tempList.ElementAt(0) * 36 + tempList.ElementAt(1);\n            return result;\n        }\n        private int decodeResponse(String challenge, String str)\n        {\n            if (str.Length>100) return 0;\n            int[] shuzi = new int[] { 1, 2, 5, 10, 50};\n            String chongfu = \"\";\n            Hashtable key = new Hashtable();\n            int count = 0;\n            for (int i=0;i<challenge.Length;i++)\n            {\n                String item = challenge.ElementAt(i) + \"\";\n                if (chongfu.Contains(item)) continue;\n                else\n                {\n                    int value = shuzi[count % 5];\n                    chongfu += item;\n                    count++;\n                    key.Add(item, value);\n                }\n            }\n            int res = 0;\n            for (int i = 0; i < str.Length; i++) res += (int)key[str[i]+\"\"];\n            res = res - this.decodeRandBase(challenge);\n            return res;\n        }\n        private String md5Encode(String plainText)\n        {\n            MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider();\n            string t2 = BitConverter.ToString(md5.ComputeHash(UTF8Encoding.Default.GetBytes(plainText)));\n            t2 = t2.Replace(\"-\", \"\");\n            t2 = t2.ToLower();\n            return t2;\n        }\n\n    }\n}\n```\n### 获取验证码\n引入Jquery库\n```html\n<script src=\"~/Content/plugins/jquery/jquery-1.8.2.min.js\"></script>\n```\n添加用于放置验证码的div（需要放到form表单中）\n```html\n<div id=\"geetest-container\">\n\n</div>\n```\n添加JS代码用于获取验证码\n```html\n<script>\n    window.addEventListener('load', processGeeTest);\n\n    function processGeeTest() {\n        $.ajax({\n            // 获取id，challenge，success（是否启用failback）\n            url: \"/Login/GeekTest\",\n            type: \"get\",\n            dataType: \"json\", // 使用jsonp格式\n            success: function (data) {\n                // 使用initGeetest接口\n                // 参数1：配置参数，与创建Geetest实例时接受的参数一致\n                // 参数2：回调，回调的第一个参数验证码对象，之后可以使用它做appendTo之类的事件\n                initGeetest({\n                    gt: data.gt,\n                    challenge: data.challenge,\n                    product: \"float\", // 产品形式\n                    offline: !data.success\n                },\n                    handler);\n            }\n        });\n    }\n\n    var handler = function (captchaObj) {\n        // 将验证码加到id为captcha的元素里\n        captchaObj.appendTo(\"#geetest-container\");\n\n        captchaObj.onSuccess = function (e) {\n            console.log(e);\n        }\n\n    };\n</script>\n```\nprocessGeeTest方法中我们异步请求的地址“/Login/GeekTest”就是获取验证码是后台需要执行的方法\n```csharp\npublic ActionResult GeekTest()\n{\n    return Content(GetCaptcha(),\"application/json\");\n}\n\nprivate string GetCaptcha()\n{\n    var geetest = new GeetestLib(\"3594e0d834df77cedc7351a02b5b06a4\", \"b961c8081ce88af7e32a3f45d00dff84\");\n    var gtServerStatus = geetest.preProcess();\n    Session[GeetestLib.gtServerStatusSessionKey] = gtServerStatus;\n    return geetest.getResponseStr();\n}\n```\n### 校验验证码\n注意，当提交form表单时，会将三个和极验有关的参数传到后台方法（geetest_challenge、geetest_validate、geetest_seccode），若验证码未验证成功，则参数为空值。\n\n后台验证方法为：\n```csharp\nprivate bool CheckGeeTestResult()\n{\n    var geetest = new GeetestLib(\"3594e0d834df77cedc7351a02b5b06a4\", \"b961c8081ce88af7e32a3f45d00dff84 \");\n    var gtServerStatusCode = (byte)Session[GeetestLib.gtServerStatusSessionKey];\n    var userId = (string)Session[\"userID\"];\n\n    var challenge = Request.Form.Get(GeetestLib.fnGeetestChallenge);\n    var validate = Request.Form.Get(GeetestLib.fnGeetestValidate);\n    var seccode = Request.Form.Get(GeetestLib.fnGeetestSeccode);\n    var result = gtServerStatusCode == 1 ? geetest.enhencedValidateRequest(challenge, validate, seccode, userId) : geetest.failbackValidateRequest(challenge, validate, seccode);\n    return result == 1;\n}\n```\n我们可以在表单中判断验证码是否成功校验：\n```csharp\npublic ActionResult Login()\n{\n    if (!CheckGeeTestResult())\n        return Content(\"no:请先完成验证操作。\");\n    ....\n}\n```","source":"_posts/【MVC学习笔记】7.使用极验验证来制作更高逼格的验证码.md","raw":"---\ntitle: 【MVC学习笔记】7.使用极验验证来制作更高逼格的验证码\ntags:\n  - MVC\n  - 极验\nabbrlink: 47398\ndate: 2016-09-20 20:15:16\n---\n在之前的项目中，如果有需要使用验证码，基本都是自己用GDI+画图出来，简单好用，但是却也存在了一些小问题，首先若较少干扰线，则安全性不是很高，验证码容易被机器识别，若多画太多干扰线条，机器人识别率下降的同时，人眼的识别率也同步下降（震惊哭）。更为重要的是，GDI+绘制的验证码一般来说也不会很美观，如果做一个炫酷的登陆界面却配了这样一个验证码，画风诡异，丑到极致。\n\n再后来浏览网页的过程中，发现很多很多网站项目中都使用了一种叫极验验证的验证码，采用移动滑块的方式进行验证，方便美观。而一番搜索之后了解到，官方提供的免费版也足以应付我手头的大多数项目了，不禁想把在MVC学习过程中试着使用极验验证来作为登录的验证码。\n<!-- more -->\n极验官方提供了[C#的SDK和Demo](https://github.com/GeeTeam/gt-csharp-sdk)供开发者参考，不过是Webform版本的，可读性不是很高，而现在使用Webform进行网站开发的也基本消失了，我将在官方Webform代码的基础上，将其用在ASP.NET MVC程序中。\n## 注册极验\n到极验官网注册账号之后进入后台管理界面，点击添加验证\n![](http://p4au3q1y8.bkt.clouddn.com/20180218223716/20180218103931147.png)\n添加后我们可以得到ID和KEY\n![](http://p4au3q1y8.bkt.clouddn.com/20180218223716/20180218103949448.png)\n## 完成验证逻辑\n### 首先我们需要引入官方的[Geetestlib类](https://github.com/GeeTeam/gt-csharp-sdk/blob/master/src/GeetestSDK/GeetestSDK/GeetestLib.cs)\n```csharp\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Net;\nusing System.IO;\n\nnamespace PMS.WebApp.Models\n{\n    /// <summary>\n    /// GeetestLib 极验验证C# SDK基本库\n    /// </summary>\n    public class GeetestLib\n    {\n        /// <summary>\n        /// SDK版本号\n        /// </summary>\n        public const String version = \"3.2.0\";\n        /// <summary>\n        /// SDK开发语言\n        /// </summary>\n        public const String sdkLang = \"csharp\";\n        /// <summary>\n        /// 极验验证API URL\n        /// </summary>\n        protected const String apiUrl = \"http://api.geetest.com\";\n        /// <summary>\n        /// register url\n        /// </summary>\n        protected const String registerUrl = \"/register.php\";\n        /// <summary>\n        /// validate url\n        /// </summary>\n        protected const String validateUrl = \"/validate.php\";\n        /// <summary>\n        /// 极验验证API服务状态Session Key\n        /// </summary>\n        public const String gtServerStatusSessionKey = \"gt_server_status\";\n        /// <summary>\n        /// 极验验证二次验证表单数据 Chllenge\n        /// </summary>\n        public const String fnGeetestChallenge = \"geetest_challenge\";\n        /// <summary>\n        /// 极验验证二次验证表单数据 Validate\n        /// </summary>\n        public const String fnGeetestValidate = \"geetest_validate\";\n        /// <summary>\n        /// 极验验证二次验证表单数据 Seccode\n        /// </summary>\n        public const String fnGeetestSeccode = \"geetest_seccode\";\n        private String userID = \"\";\n        private String responseStr = \"\";\n        private String captchaID = \"\";\n        private String privateKey = \"\";\n\n        /// <summary>\n        /// 验证成功结果字符串\n        /// </summary>\n        public const int successResult = 1;\n        /// <summary>\n        /// 证结失败验果字符串\n        /// </summary>\n        public const int failResult = 0;\n        /// <summary>\n        /// 判定为机器人结果字符串\n        /// </summary>\n        public const String forbiddenResult = \"forbidden\";\n\n        /// <summary>\n        /// GeetestLib构造函数\n        /// </summary>\n        /// <param name=\"publicKey\">极验验证公钥</param>\n        /// <param name=\"privateKey\">极验验证私钥</param>\n        public GeetestLib(String publicKey, String privateKey)\n        {\n            this.privateKey = privateKey;\n            this.captchaID = publicKey;\n        }\n        private int getRandomNum()\n        {\n            Random rand =new Random();\n            int randRes = rand.Next(100);\n            return randRes;\n        }\n\n        /// <summary>\n        /// 验证初始化预处理\n        /// </summary>\n        /// <returns>初始化结果</returns>\n        public Byte preProcess()\n        {\n            if (this.captchaID == null)\n            {\n                Console.WriteLine(\"publicKey is null!\");\n            }\n            else\n            {\n                String challenge = this.registerChallenge();\n                if (challenge.Length == 32)\n                {\n                    this.getSuccessPreProcessRes(challenge);\n                    return 1;\n                }\n                else\n                {\n                    this.getFailPreProcessRes();\n                    Console.WriteLine(\"Server regist challenge failed!\");\n                }\n            }\n\n            return 0;\n\n        }\n        public Byte preProcess(String userID)\n        {\n            if (this.captchaID == null)\n            {\n                Console.WriteLine(\"publicKey is null!\");\n            }\n            else\n            {\n                this.userID = userID;\n                String challenge = this.registerChallenge();\n                if (challenge.Length == 32)\n                {\n                    this.getSuccessPreProcessRes(challenge);\n                    return 1;\n                }\n                else\n                {\n                    this.getFailPreProcessRes();\n                    Console.WriteLine(\"Server regist challenge failed!\");\n                }\n            }\n\n            return 0;\n\n        }\n        public String getResponseStr()\n        {\n            return this.responseStr;\n        }\n        /// <summary>\n        /// 预处理失败后的返回格式串\n        /// </summary>\n        private void getFailPreProcessRes()\n        {\n            int rand1 = this.getRandomNum();\n            int rand2 = this.getRandomNum();\n            String md5Str1 = this.md5Encode(rand1 + \"\");\n            String md5Str2 = this.md5Encode(rand2 + \"\");\n            String challenge = md5Str1 + md5Str2.Substring(0, 2);\n            this.responseStr = \"{\" + string.Format(\n                 \"\\\"success\\\":{0},\\\"gt\\\":\\\"{1}\\\",\\\"challenge\\\":\\\"{2}\\\"\", 0,\n                this.captchaID, challenge) + \"}\";\n        }\n        /// <summary>\n        /// 预处理成功后的标准串\n        /// </summary>\n        private void getSuccessPreProcessRes(String challenge)\n        {\n            challenge = this.md5Encode(challenge + this.privateKey);\n            this.responseStr =\"{\" + string.Format(\n                \"\\\"success\\\":{0},\\\"gt\\\":\\\"{1}\\\",\\\"challenge\\\":\\\"{2}\\\"\", 1, \n                this.captchaID, challenge) + \"}\";\n        }\n        /// <summary>\n        /// failback模式的验证方式\n        /// </summary>\n        /// <param name=\"challenge\">failback模式下用于与validate一起解码答案， 判断验证是否正确</param>\n        /// <param name=\"validate\">failback模式下用于与challenge一起解码答案， 判断验证是否正确</param>\n        /// <param name=\"seccode\">failback模式下，其实是个没用的参数</param>\n        /// <returns>验证结果</returns>\n        public int failbackValidateRequest(String challenge, String validate, String seccode)\n        {\n            if (!this.requestIsLegal(challenge, validate, seccode)) return GeetestLib.failResult;\n            String[] validateStr = validate.Split('_');\n            String encodeAns = validateStr[0];\n            String encodeFullBgImgIndex = validateStr[1];\n            String encodeImgGrpIndex = validateStr[2];\n            int decodeAns = this.decodeResponse(challenge, encodeAns);\n            int decodeFullBgImgIndex = this.decodeResponse(challenge, encodeFullBgImgIndex);\n            int decodeImgGrpIndex = this.decodeResponse(challenge, encodeImgGrpIndex);\n            int validateResult = this.validateFailImage(decodeAns, decodeFullBgImgIndex, decodeImgGrpIndex);\n            return validateResult;\n        }\n        private int validateFailImage(int ans, int full_bg_index, int img_grp_index)\n        {\n            const int thread = 3;\n            String full_bg_name = this.md5Encode(full_bg_index + \"\").Substring(0, 10);\n            String bg_name = md5Encode(img_grp_index + \"\").Substring(10, 10);\n            String answer_decode = \"\";\n            for (int i = 0;i < 9; i++)\n            {\n                if (i % 2 == 0) answer_decode += full_bg_name.ElementAt(i);\n                else if (i % 2 == 1) answer_decode += bg_name.ElementAt(i);\n            }\n            String x_decode = answer_decode.Substring(4);\n            int x_int = Convert.ToInt32(x_decode, 16);\n            int result = x_int % 200;\n            if (result < 40) result = 40;\n            if (Math.Abs(ans - result) < thread) return GeetestLib.successResult;\n            else return GeetestLib.failResult;\n        }\n        private Boolean requestIsLegal(String challenge, String validate, String seccode)\n        {\n            if (challenge.Equals(string.Empty) || validate.Equals(string.Empty) || seccode.Equals(string.Empty)) return false;\n            return true;\n        }\n\n        /// <summary>\n        /// 向gt-server进行二次验证\n        /// </summary>\n        /// <param name=\"challenge\">本次验证会话的唯一标识</param>\n        /// <param name=\"validate\">拖动完成后server端返回的验证结果标识字符串</param>\n        /// <param name=\"seccode\">验证结果的校验码，如果gt-server返回的不与这个值相等则表明验证失败</param>\n        /// <returns>二次验证结果</returns>\n        public int enhencedValidateRequest(String challenge, String validate, String seccode)\n        {\n            if (!this.requestIsLegal(challenge, validate, seccode)) return GeetestLib.failResult;\n            if (validate.Length > 0 && checkResultByPrivate(challenge, validate))\n            {\n                String query = \"seccode=\" + seccode + \"&sdk=csharp_\" + GeetestLib.version;\n                String response = \"\";\n                try\n                {\n                    response = postValidate(query);\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine(e);\n                }\n                if (response.Equals(md5Encode(seccode)))\n                {\n                    return GeetestLib.successResult;\n                }\n            }\n            return GeetestLib.failResult;\n        }\n        public int enhencedValidateRequest(String challenge, String validate, String seccode, String userID)\n        {\n            if (!this.requestIsLegal(challenge, validate, seccode)) return GeetestLib.failResult;\n            if (validate.Length > 0 && checkResultByPrivate(challenge, validate))\n            {\n                String query = \"seccode=\" + seccode + \"&user_id=\" + userID + \"&sdk=csharp_\" + GeetestLib.version;\n                String response = \"\";\n                try\n                {\n                    response = postValidate(query);\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine(e);\n                }\n                if (response.Equals(md5Encode(seccode)))\n                {\n                    return GeetestLib.successResult;\n                }\n            }\n            return GeetestLib.failResult;\n        }\n        private String readContentFromGet(String url)\n        {\n            try\n            {\n                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n                request.Timeout = 20000;\n                HttpWebResponse response = (HttpWebResponse)request.GetResponse();\n                Stream myResponseStream = response.GetResponseStream();\n                StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding(\"utf-8\"));\n                String retString = myStreamReader.ReadToEnd();\n                myStreamReader.Close();\n                myResponseStream.Close();\n                return retString;\n            }\n           catch\n           {\n               return \"\";     \n           }\n\n        }\n        private String registerChallenge()\n        {\n            String url = \"\";\n            if (string.Empty.Equals(this.userID))\n            {\n                url = string.Format(\"{0}{1}?gt={2}\", GeetestLib.apiUrl, GeetestLib.registerUrl, this.captchaID);\n            }\n            else\n            {\n                url = string.Format(\"{0}{1}?gt={2}&user_id={3}\", GeetestLib.apiUrl, GeetestLib.registerUrl, this.captchaID, this.userID);\n            }\n            string retString = this.readContentFromGet(url);\n            return retString;\n        }\n        private Boolean checkResultByPrivate(String origin, String validate)\n        {\n            String encodeStr = md5Encode(privateKey + \"geetest\" + origin);\n            return validate.Equals(encodeStr);\n        }\n        private String postValidate(String data)\n        {\n            String url = string.Format(\"{0}{1}\", GeetestLib.apiUrl, GeetestLib.validateUrl);\n            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n            request.Method = \"POST\";\n            request.ContentType = \"application/x-www-form-urlencoded\";\n            request.ContentLength = Encoding.UTF8.GetByteCount(data);\n            // 发送数据\n            Stream myRequestStream = request.GetRequestStream();\n            byte[] requestBytes = System.Text.Encoding.ASCII.GetBytes(data);\n            myRequestStream.Write(requestBytes, 0, requestBytes.Length);\n            myRequestStream.Close();\n\n            HttpWebResponse response = (HttpWebResponse)request.GetResponse();\n            // 读取返回信息\n            Stream myResponseStream = response.GetResponseStream();\n            StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding(\"utf-8\"));\n            string retString = myStreamReader.ReadToEnd();\n            myStreamReader.Close();\n            myResponseStream.Close();\n\n            return retString;\n\n        }\n        private int decodeRandBase(String challenge)\n        {\n            String baseStr = challenge.Substring(32, 2);\n            List<int> tempList = new List<int>();\n            for(int i = 0; i < baseStr.Length; i++)\n            {\n                int tempAscii = (int)baseStr[i];\n                tempList.Add((tempAscii > 57) ? (tempAscii - 87)\n                    : (tempAscii - 48));\n            }\n            int result = tempList.ElementAt(0) * 36 + tempList.ElementAt(1);\n            return result;\n        }\n        private int decodeResponse(String challenge, String str)\n        {\n            if (str.Length>100) return 0;\n            int[] shuzi = new int[] { 1, 2, 5, 10, 50};\n            String chongfu = \"\";\n            Hashtable key = new Hashtable();\n            int count = 0;\n            for (int i=0;i<challenge.Length;i++)\n            {\n                String item = challenge.ElementAt(i) + \"\";\n                if (chongfu.Contains(item)) continue;\n                else\n                {\n                    int value = shuzi[count % 5];\n                    chongfu += item;\n                    count++;\n                    key.Add(item, value);\n                }\n            }\n            int res = 0;\n            for (int i = 0; i < str.Length; i++) res += (int)key[str[i]+\"\"];\n            res = res - this.decodeRandBase(challenge);\n            return res;\n        }\n        private String md5Encode(String plainText)\n        {\n            MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider();\n            string t2 = BitConverter.ToString(md5.ComputeHash(UTF8Encoding.Default.GetBytes(plainText)));\n            t2 = t2.Replace(\"-\", \"\");\n            t2 = t2.ToLower();\n            return t2;\n        }\n\n    }\n}\n```\n### 获取验证码\n引入Jquery库\n```html\n<script src=\"~/Content/plugins/jquery/jquery-1.8.2.min.js\"></script>\n```\n添加用于放置验证码的div（需要放到form表单中）\n```html\n<div id=\"geetest-container\">\n\n</div>\n```\n添加JS代码用于获取验证码\n```html\n<script>\n    window.addEventListener('load', processGeeTest);\n\n    function processGeeTest() {\n        $.ajax({\n            // 获取id，challenge，success（是否启用failback）\n            url: \"/Login/GeekTest\",\n            type: \"get\",\n            dataType: \"json\", // 使用jsonp格式\n            success: function (data) {\n                // 使用initGeetest接口\n                // 参数1：配置参数，与创建Geetest实例时接受的参数一致\n                // 参数2：回调，回调的第一个参数验证码对象，之后可以使用它做appendTo之类的事件\n                initGeetest({\n                    gt: data.gt,\n                    challenge: data.challenge,\n                    product: \"float\", // 产品形式\n                    offline: !data.success\n                },\n                    handler);\n            }\n        });\n    }\n\n    var handler = function (captchaObj) {\n        // 将验证码加到id为captcha的元素里\n        captchaObj.appendTo(\"#geetest-container\");\n\n        captchaObj.onSuccess = function (e) {\n            console.log(e);\n        }\n\n    };\n</script>\n```\nprocessGeeTest方法中我们异步请求的地址“/Login/GeekTest”就是获取验证码是后台需要执行的方法\n```csharp\npublic ActionResult GeekTest()\n{\n    return Content(GetCaptcha(),\"application/json\");\n}\n\nprivate string GetCaptcha()\n{\n    var geetest = new GeetestLib(\"3594e0d834df77cedc7351a02b5b06a4\", \"b961c8081ce88af7e32a3f45d00dff84\");\n    var gtServerStatus = geetest.preProcess();\n    Session[GeetestLib.gtServerStatusSessionKey] = gtServerStatus;\n    return geetest.getResponseStr();\n}\n```\n### 校验验证码\n注意，当提交form表单时，会将三个和极验有关的参数传到后台方法（geetest_challenge、geetest_validate、geetest_seccode），若验证码未验证成功，则参数为空值。\n\n后台验证方法为：\n```csharp\nprivate bool CheckGeeTestResult()\n{\n    var geetest = new GeetestLib(\"3594e0d834df77cedc7351a02b5b06a4\", \"b961c8081ce88af7e32a3f45d00dff84 \");\n    var gtServerStatusCode = (byte)Session[GeetestLib.gtServerStatusSessionKey];\n    var userId = (string)Session[\"userID\"];\n\n    var challenge = Request.Form.Get(GeetestLib.fnGeetestChallenge);\n    var validate = Request.Form.Get(GeetestLib.fnGeetestValidate);\n    var seccode = Request.Form.Get(GeetestLib.fnGeetestSeccode);\n    var result = gtServerStatusCode == 1 ? geetest.enhencedValidateRequest(challenge, validate, seccode, userId) : geetest.failbackValidateRequest(challenge, validate, seccode);\n    return result == 1;\n}\n```\n我们可以在表单中判断验证码是否成功校验：\n```csharp\npublic ActionResult Login()\n{\n    if (!CheckGeeTestResult())\n        return Content(\"no:请先完成验证操作。\");\n    ....\n}\n```","slug":"【MVC学习笔记】7.使用极验验证来制作更高逼格的验证码","published":1,"updated":"2018-03-07T03:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjno24p4l0084d00odols8d5x","content":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>在之前的项目中，如果有需要使用验证码，基本都是自己用GDI+画图出来，简单好用，但是却也存在了一些小问题，首先若较少干扰线，则安全性不是很高，验证码容易被机器识别，若多画太多干扰线条，机器人识别率下降的同时，人眼的识别率也同步下降（震惊哭）。更为重要的是，GDI+绘制的验证码一般来说也不会很美观，如果做一个炫酷的登陆界面却配了这样一个验证码，画风诡异，丑到极致。</p><p>再后来浏览网页的过程中，发现很多很多网站项目中都使用了一种叫极验验证的验证码，采用移动滑块的方式进行验证，方便美观。而一番搜索之后了解到，官方提供的免费版也足以应付我手头的大多数项目了，不禁想把在MVC学习过程中试着使用极验验证来作为登录的验证码。<br><a id=\"more\"></a><br>极验官方提供了<a href=\"https://github.com/GeeTeam/gt-csharp-sdk\" target=\"_blank\" rel=\"noopener\">C#的SDK和Demo</a>供开发者参考，不过是Webform版本的，可读性不是很高，而现在使用Webform进行网站开发的也基本消失了，我将在官方Webform代码的基础上，将其用在ASP.NET MVC程序中。</p><h2 id=\"注册极验\"><a href=\"#注册极验\" class=\"headerlink\" title=\"注册极验\"></a>注册极验</h2><p>到极验官网注册账号之后进入后台管理界面，点击添加验证<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218223716/20180218103931147.png\" alt=\"\"><br>添加后我们可以得到ID和KEY<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218223716/20180218103949448.png\" alt=\"\"></p><h2 id=\"完成验证逻辑\"><a href=\"#完成验证逻辑\" class=\"headerlink\" title=\"完成验证逻辑\"></a>完成验证逻辑</h2><h3 id=\"首先我们需要引入官方的Geetestlib类\"><a href=\"#首先我们需要引入官方的Geetestlib类\" class=\"headerlink\" title=\"首先我们需要引入官方的Geetestlib类\"></a>首先我们需要引入官方的<a href=\"https://github.com/GeeTeam/gt-csharp-sdk/blob/master/src/GeetestSDK/GeetestSDK/GeetestLib.cs\" target=\"_blank\" rel=\"noopener\">Geetestlib类</a></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Security.Cryptography;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp.Models</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> GeetestLib 极验验证C# SDK基本库</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">GeetestLib</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SDK版本号</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> String version = <span class=\"string\">\"3.2.0\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SDK开发语言</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> String sdkLang = <span class=\"string\">\"csharp\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 极验验证API URL</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">const</span> String apiUrl = <span class=\"string\">\"http://api.geetest.com\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> register url</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">const</span> String registerUrl = <span class=\"string\">\"/register.php\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> validate url</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">const</span> String validateUrl = <span class=\"string\">\"/validate.php\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 极验验证API服务状态Session Key</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> String gtServerStatusSessionKey = <span class=\"string\">\"gt_server_status\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 极验验证二次验证表单数据 Chllenge</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> String fnGeetestChallenge = <span class=\"string\">\"geetest_challenge\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 极验验证二次验证表单数据 Validate</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> String fnGeetestValidate = <span class=\"string\">\"geetest_validate\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 极验验证二次验证表单数据 Seccode</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> String fnGeetestSeccode = <span class=\"string\">\"geetest_seccode\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String userID = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String responseStr = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String captchaID = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String privateKey = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 验证成功结果字符串</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> successResult = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 证结失败验果字符串</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> failResult = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 判定为机器人结果字符串</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> String forbiddenResult = <span class=\"string\">\"forbidden\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> GeetestLib构造函数</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"publicKey\"&gt;</span>极验验证公钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"privateKey\"&gt;</span>极验验证私钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GeetestLib</span>(<span class=\"params\">String publicKey, String privateKey</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.privateKey = privateKey;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.captchaID = publicKey;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getRandomNum</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Random rand =<span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> randRes = rand.Next(<span class=\"number\">100</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> randRes;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 验证初始化预处理</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>初始化结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Byte <span class=\"title\">preProcess</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.captchaID == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"publicKey is null!\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                String challenge = <span class=\"keyword\">this</span>.registerChallenge();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (challenge.Length == <span class=\"number\">32</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.getSuccessPreProcessRes(challenge);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.getFailPreProcessRes();</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">\"Server regist challenge failed!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Byte <span class=\"title\">preProcess</span>(<span class=\"params\">String userID</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.captchaID == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"publicKey is null!\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.userID = userID;</span><br><span class=\"line\">                String challenge = <span class=\"keyword\">this</span>.registerChallenge();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (challenge.Length == <span class=\"number\">32</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.getSuccessPreProcessRes(challenge);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.getFailPreProcessRes();</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">\"Server regist challenge failed!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getResponseStr</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.responseStr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 预处理失败后的返回格式串</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getFailPreProcessRes</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rand1 = <span class=\"keyword\">this</span>.getRandomNum();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rand2 = <span class=\"keyword\">this</span>.getRandomNum();</span><br><span class=\"line\">            String md5Str1 = <span class=\"keyword\">this</span>.md5Encode(rand1 + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            String md5Str2 = <span class=\"keyword\">this</span>.md5Encode(rand2 + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            String challenge = md5Str1 + md5Str2.Substring(<span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.responseStr = <span class=\"string\">\"&#123;\"</span> + <span class=\"keyword\">string</span>.Format(</span><br><span class=\"line\">                 <span class=\"string\">\"\\\"success\\\":&#123;0&#125;,\\\"gt\\\":\\\"&#123;1&#125;\\\",\\\"challenge\\\":\\\"&#123;2&#125;\\\"\"</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.captchaID, challenge) + <span class=\"string\">\"&#125;\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 预处理成功后的标准串</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getSuccessPreProcessRes</span>(<span class=\"params\">String challenge</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            challenge = <span class=\"keyword\">this</span>.md5Encode(challenge + <span class=\"keyword\">this</span>.privateKey);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.responseStr =<span class=\"string\">\"&#123;\"</span> + <span class=\"keyword\">string</span>.Format(</span><br><span class=\"line\">                <span class=\"string\">\"\\\"success\\\":&#123;0&#125;,\\\"gt\\\":\\\"&#123;1&#125;\\\",\\\"challenge\\\":\\\"&#123;2&#125;\\\"\"</span>, <span class=\"number\">1</span>, </span><br><span class=\"line\">                <span class=\"keyword\">this</span>.captchaID, challenge) + <span class=\"string\">\"&#125;\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> failback模式的验证方式</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"challenge\"&gt;</span>failback模式下用于与validate一起解码答案， 判断验证是否正确<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"validate\"&gt;</span>failback模式下用于与challenge一起解码答案， 判断验证是否正确<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"seccode\"&gt;</span>failback模式下，其实是个没用的参数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>验证结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">failbackValidateRequest</span>(<span class=\"params\">String challenge, String validate, String seccode</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.requestIsLegal(challenge, validate, seccode)) <span class=\"keyword\">return</span> GeetestLib.failResult;</span><br><span class=\"line\">            String[] validateStr = validate.Split(<span class=\"string\">'_'</span>);</span><br><span class=\"line\">            String encodeAns = validateStr[<span class=\"number\">0</span>];</span><br><span class=\"line\">            String encodeFullBgImgIndex = validateStr[<span class=\"number\">1</span>];</span><br><span class=\"line\">            String encodeImgGrpIndex = validateStr[<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> decodeAns = <span class=\"keyword\">this</span>.decodeResponse(challenge, encodeAns);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> decodeFullBgImgIndex = <span class=\"keyword\">this</span>.decodeResponse(challenge, encodeFullBgImgIndex);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> decodeImgGrpIndex = <span class=\"keyword\">this</span>.decodeResponse(challenge, encodeImgGrpIndex);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> validateResult = <span class=\"keyword\">this</span>.validateFailImage(decodeAns, decodeFullBgImgIndex, decodeImgGrpIndex);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> validateResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">validateFailImage</span>(<span class=\"params\"><span class=\"keyword\">int</span> ans, <span class=\"keyword\">int</span> full_bg_index, <span class=\"keyword\">int</span> img_grp_index</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> thread = <span class=\"number\">3</span>;</span><br><span class=\"line\">            String full_bg_name = <span class=\"keyword\">this</span>.md5Encode(full_bg_index + <span class=\"string\">\"\"</span>).Substring(<span class=\"number\">0</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">            String bg_name = md5Encode(img_grp_index + <span class=\"string\">\"\"</span>).Substring(<span class=\"number\">10</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">            String answer_decode = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">9</span>; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) answer_decode += full_bg_name.ElementAt(i);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">1</span>) answer_decode += bg_name.ElementAt(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String x_decode = answer_decode.Substring(<span class=\"number\">4</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x_int = Convert.ToInt32(x_decode, <span class=\"number\">16</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> result = x_int % <span class=\"number\">200</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result &lt; <span class=\"number\">40</span>) result = <span class=\"number\">40</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Math.Abs(ans - result) &lt; thread) <span class=\"keyword\">return</span> GeetestLib.successResult;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> GeetestLib.failResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> Boolean <span class=\"title\">requestIsLegal</span>(<span class=\"params\">String challenge, String validate, String seccode</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (challenge.Equals(<span class=\"keyword\">string</span>.Empty) || validate.Equals(<span class=\"keyword\">string</span>.Empty) || seccode.Equals(<span class=\"keyword\">string</span>.Empty)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 向gt-server进行二次验证</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"challenge\"&gt;</span>本次验证会话的唯一标识<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"validate\"&gt;</span>拖动完成后server端返回的验证结果标识字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"seccode\"&gt;</span>验证结果的校验码，如果gt-server返回的不与这个值相等则表明验证失败<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>二次验证结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">enhencedValidateRequest</span>(<span class=\"params\">String challenge, String validate, String seccode</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.requestIsLegal(challenge, validate, seccode)) <span class=\"keyword\">return</span> GeetestLib.failResult;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (validate.Length &gt; <span class=\"number\">0</span> &amp;&amp; checkResultByPrivate(challenge, validate))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                String query = <span class=\"string\">\"seccode=\"</span> + seccode + <span class=\"string\">\"&amp;sdk=csharp_\"</span> + GeetestLib.version;</span><br><span class=\"line\">                String response = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    response = postValidate(query);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Console.WriteLine(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response.Equals(md5Encode(seccode)))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> GeetestLib.successResult;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> GeetestLib.failResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">enhencedValidateRequest</span>(<span class=\"params\">String challenge, String validate, String seccode, String userID</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.requestIsLegal(challenge, validate, seccode)) <span class=\"keyword\">return</span> GeetestLib.failResult;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (validate.Length &gt; <span class=\"number\">0</span> &amp;&amp; checkResultByPrivate(challenge, validate))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                String query = <span class=\"string\">\"seccode=\"</span> + seccode + <span class=\"string\">\"&amp;user_id=\"</span> + userID + <span class=\"string\">\"&amp;sdk=csharp_\"</span> + GeetestLib.version;</span><br><span class=\"line\">                String response = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    response = postValidate(query);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Console.WriteLine(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response.Equals(md5Encode(seccode)))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> GeetestLib.successResult;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> GeetestLib.failResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">readContentFromGet</span>(<span class=\"params\">String url</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);</span><br><span class=\"line\">                request.Timeout = <span class=\"number\">20000</span>;</span><br><span class=\"line\">                HttpWebResponse response = (HttpWebResponse)request.GetResponse();</span><br><span class=\"line\">                Stream myResponseStream = response.GetResponseStream();</span><br><span class=\"line\">                StreamReader myStreamReader = <span class=\"keyword\">new</span> StreamReader(myResponseStream, Encoding.GetEncoding(<span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">                String retString = myStreamReader.ReadToEnd();</span><br><span class=\"line\">                myStreamReader.Close();</span><br><span class=\"line\">                myResponseStream.Close();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> retString;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           <span class=\"keyword\">catch</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;     </span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">registerChallenge</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            String url = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.Empty.Equals(<span class=\"keyword\">this</span>.userID))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                url = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"&#123;0&#125;&#123;1&#125;?gt=&#123;2&#125;\"</span>, GeetestLib.apiUrl, GeetestLib.registerUrl, <span class=\"keyword\">this</span>.captchaID);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                url = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"&#123;0&#125;&#123;1&#125;?gt=&#123;2&#125;&amp;user_id=&#123;3&#125;\"</span>, GeetestLib.apiUrl, GeetestLib.registerUrl, <span class=\"keyword\">this</span>.captchaID, <span class=\"keyword\">this</span>.userID);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> retString = <span class=\"keyword\">this</span>.readContentFromGet(url);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> retString;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> Boolean <span class=\"title\">checkResultByPrivate</span>(<span class=\"params\">String origin, String validate</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            String encodeStr = md5Encode(privateKey + <span class=\"string\">\"geetest\"</span> + origin);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> validate.Equals(encodeStr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">postValidate</span>(<span class=\"params\">String data</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            String url = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"&#123;0&#125;&#123;1&#125;\"</span>, GeetestLib.apiUrl, GeetestLib.validateUrl);</span><br><span class=\"line\">            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);</span><br><span class=\"line\">            request.Method = <span class=\"string\">\"POST\"</span>;</span><br><span class=\"line\">            request.ContentType = <span class=\"string\">\"application/x-www-form-urlencoded\"</span>;</span><br><span class=\"line\">            request.ContentLength = Encoding.UTF8.GetByteCount(data);</span><br><span class=\"line\">            <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">            Stream myRequestStream = request.GetRequestStream();</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] requestBytes = System.Text.Encoding.ASCII.GetBytes(data);</span><br><span class=\"line\">            myRequestStream.Write(requestBytes, <span class=\"number\">0</span>, requestBytes.Length);</span><br><span class=\"line\">            myRequestStream.Close();</span><br><span class=\"line\"></span><br><span class=\"line\">            HttpWebResponse response = (HttpWebResponse)request.GetResponse();</span><br><span class=\"line\">            <span class=\"comment\">// 读取返回信息</span></span><br><span class=\"line\">            Stream myResponseStream = response.GetResponseStream();</span><br><span class=\"line\">            StreamReader myStreamReader = <span class=\"keyword\">new</span> StreamReader(myResponseStream, Encoding.GetEncoding(<span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">            <span class=\"keyword\">string</span> retString = myStreamReader.ReadToEnd();</span><br><span class=\"line\">            myStreamReader.Close();</span><br><span class=\"line\">            myResponseStream.Close();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> retString;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">decodeRandBase</span>(<span class=\"params\">String challenge</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            String baseStr = challenge.Substring(<span class=\"number\">32</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">            List&lt;<span class=\"keyword\">int</span>&gt; tempList = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; baseStr.Length; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tempAscii = (<span class=\"keyword\">int</span>)baseStr[i];</span><br><span class=\"line\">                tempList.Add((tempAscii &gt; <span class=\"number\">57</span>) ? (tempAscii - <span class=\"number\">87</span>)</span><br><span class=\"line\">                    : (tempAscii - <span class=\"number\">48</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> result = tempList.ElementAt(<span class=\"number\">0</span>) * <span class=\"number\">36</span> + tempList.ElementAt(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">decodeResponse</span>(<span class=\"params\">String challenge, String str</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (str.Length&gt;<span class=\"number\">100</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] shuzi = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\">            String chongfu = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            Hashtable key = <span class=\"keyword\">new</span> Hashtable();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;challenge.Length;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                String item = challenge.ElementAt(i) + <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (chongfu.Contains(item)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> <span class=\"keyword\">value</span> = shuzi[count % <span class=\"number\">5</span>];</span><br><span class=\"line\">                    chongfu += item;</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                    key.Add(item, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.Length; i++) res += (<span class=\"keyword\">int</span>)key[str[i]+<span class=\"string\">\"\"</span>];</span><br><span class=\"line\">            res = res - <span class=\"keyword\">this</span>.decodeRandBase(challenge);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">md5Encode</span>(<span class=\"params\">String plainText</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            MD5CryptoServiceProvider md5 = <span class=\"keyword\">new</span> MD5CryptoServiceProvider();</span><br><span class=\"line\">            <span class=\"keyword\">string</span> t2 = BitConverter.ToString(md5.ComputeHash(UTF8Encoding.Default.GetBytes(plainText)));</span><br><span class=\"line\">            t2 = t2.Replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            t2 = t2.ToLower();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"获取验证码\"><a href=\"#获取验证码\" class=\"headerlink\" title=\"获取验证码\"></a>获取验证码</h3><p>引入Jquery库<br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"~/Content/plugins/jquery/jquery-1.8.2.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>添加用于放置验证码的div（需要放到form表单中）<br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"geetest-container\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>添加JS代码用于获取验证码<br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, processGeeTest);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processGeeTest</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 获取id，challenge，success（是否启用failback）</span></span></span><br><span class=\"line\"><span class=\"javascript\">            url: <span class=\"string\">\"/Login/GeekTest\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            type: <span class=\"string\">\"get\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            dataType: <span class=\"string\">\"json\"</span>, <span class=\"comment\">// 使用jsonp格式</span></span></span><br><span class=\"line\"><span class=\"javascript\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 使用initGeetest接口</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 参数1：配置参数，与创建Geetest实例时接受的参数一致</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 参数2：回调，回调的第一个参数验证码对象，之后可以使用它做appendTo之类的事件</span></span></span><br><span class=\"line\"><span class=\"undefined\">                initGeetest(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    gt: data.gt,</span></span><br><span class=\"line\"><span class=\"undefined\">                    challenge: data.challenge,</span></span><br><span class=\"line\"><span class=\"javascript\">                    product: <span class=\"string\">\"float\"</span>, <span class=\"comment\">// 产品形式</span></span></span><br><span class=\"line\"><span class=\"undefined\">                    offline: !data.success</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">                    handler);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> handler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">captchaObj</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 将验证码加到id为captcha的元素里</span></span></span><br><span class=\"line\"><span class=\"javascript\">        captchaObj.appendTo(<span class=\"string\">\"#geetest-container\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        captchaObj.onSuccess = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(e);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>processGeeTest方法中我们异步请求的地址“/Login/GeekTest”就是获取验证码是后台需要执行的方法<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">GeekTest</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Content(GetCaptcha(),<span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> <span class=\"title\">GetCaptcha</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> geetest = <span class=\"keyword\">new</span> GeetestLib(<span class=\"string\">\"3594e0d834df77cedc7351a02b5b06a4\"</span>, <span class=\"string\">\"b961c8081ce88af7e32a3f45d00dff84\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gtServerStatus = geetest.preProcess();</span><br><span class=\"line\">    Session[GeetestLib.gtServerStatusSessionKey] = gtServerStatus;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> geetest.getResponseStr();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"校验验证码\"><a href=\"#校验验证码\" class=\"headerlink\" title=\"校验验证码\"></a>校验验证码</h3><p>注意，当提交form表单时，会将三个和极验有关的参数传到后台方法（geetest_challenge、geetest_validate、geetest_seccode），若验证码未验证成功，则参数为空值。</p><p>后台验证方法为：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> <span class=\"title\">CheckGeeTestResult</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> geetest = <span class=\"keyword\">new</span> GeetestLib(<span class=\"string\">\"3594e0d834df77cedc7351a02b5b06a4\"</span>, <span class=\"string\">\"b961c8081ce88af7e32a3f45d00dff84 \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gtServerStatusCode = (<span class=\"keyword\">byte</span>)Session[GeetestLib.gtServerStatusSessionKey];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> userId = (<span class=\"keyword\">string</span>)Session[<span class=\"string\">\"userID\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> challenge = Request.Form.Get(GeetestLib.fnGeetestChallenge);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> validate = Request.Form.Get(GeetestLib.fnGeetestValidate);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> seccode = Request.Form.Get(GeetestLib.fnGeetestSeccode);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = gtServerStatusCode == <span class=\"number\">1</span> ? geetest.enhencedValidateRequest(challenge, validate, seccode, userId) : geetest.failbackValidateRequest(challenge, validate, seccode);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们可以在表单中判断验证码是否成功校验：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Login</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!CheckGeeTestResult())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">\"no:请先完成验证操作。\"</span>);</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Oct 25 2018 11:57:59 GMT+0800 (GMT+08:00) --><p>在之前的项目中，如果有需要使用验证码，基本都是自己用GDI+画图出来，简单好用，但是却也存在了一些小问题，首先若较少干扰线，则安全性不是很高，验证码容易被机器识别，若多画太多干扰线条，机器人识别率下降的同时，人眼的识别率也同步下降（震惊哭）。更为重要的是，GDI+绘制的验证码一般来说也不会很美观，如果做一个炫酷的登陆界面却配了这样一个验证码，画风诡异，丑到极致。</p><p>再后来浏览网页的过程中，发现很多很多网站项目中都使用了一种叫极验验证的验证码，采用移动滑块的方式进行验证，方便美观。而一番搜索之后了解到，官方提供的免费版也足以应付我手头的大多数项目了，不禁想把在MVC学习过程中试着使用极验验证来作为登录的验证码。<br>","more":"<br>极验官方提供了<a href=\"https://github.com/GeeTeam/gt-csharp-sdk\" target=\"_blank\" rel=\"noopener\">C#的SDK和Demo</a>供开发者参考，不过是Webform版本的，可读性不是很高，而现在使用Webform进行网站开发的也基本消失了，我将在官方Webform代码的基础上，将其用在ASP.NET MVC程序中。</p><h2 id=\"注册极验\"><a href=\"#注册极验\" class=\"headerlink\" title=\"注册极验\"></a>注册极验</h2><p>到极验官网注册账号之后进入后台管理界面，点击添加验证<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218223716/20180218103931147.png\" alt=\"\"><br>添加后我们可以得到ID和KEY<br><img src=\"http://p4au3q1y8.bkt.clouddn.com/20180218223716/20180218103949448.png\" alt=\"\"></p><h2 id=\"完成验证逻辑\"><a href=\"#完成验证逻辑\" class=\"headerlink\" title=\"完成验证逻辑\"></a>完成验证逻辑</h2><h3 id=\"首先我们需要引入官方的Geetestlib类\"><a href=\"#首先我们需要引入官方的Geetestlib类\" class=\"headerlink\" title=\"首先我们需要引入官方的Geetestlib类\"></a>首先我们需要引入官方的<a href=\"https://github.com/GeeTeam/gt-csharp-sdk/blob/master/src/GeetestSDK/GeetestSDK/GeetestLib.cs\" target=\"_blank\" rel=\"noopener\">Geetestlib类</a></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Security.Cryptography;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PMS.WebApp.Models</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> GeetestLib 极验验证C# SDK基本库</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">GeetestLib</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SDK版本号</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> String version = <span class=\"string\">\"3.2.0\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SDK开发语言</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> String sdkLang = <span class=\"string\">\"csharp\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 极验验证API URL</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">const</span> String apiUrl = <span class=\"string\">\"http://api.geetest.com\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> register url</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">const</span> String registerUrl = <span class=\"string\">\"/register.php\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> validate url</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">const</span> String validateUrl = <span class=\"string\">\"/validate.php\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 极验验证API服务状态Session Key</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> String gtServerStatusSessionKey = <span class=\"string\">\"gt_server_status\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 极验验证二次验证表单数据 Chllenge</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> String fnGeetestChallenge = <span class=\"string\">\"geetest_challenge\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 极验验证二次验证表单数据 Validate</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> String fnGeetestValidate = <span class=\"string\">\"geetest_validate\"</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 极验验证二次验证表单数据 Seccode</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> String fnGeetestSeccode = <span class=\"string\">\"geetest_seccode\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String userID = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String responseStr = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String captchaID = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String privateKey = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 验证成功结果字符串</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> successResult = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 证结失败验果字符串</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> failResult = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 判定为机器人结果字符串</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> String forbiddenResult = <span class=\"string\">\"forbidden\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> GeetestLib构造函数</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"publicKey\"&gt;</span>极验验证公钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"privateKey\"&gt;</span>极验验证私钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GeetestLib</span>(<span class=\"params\">String publicKey, String privateKey</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.privateKey = privateKey;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.captchaID = publicKey;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getRandomNum</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Random rand =<span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> randRes = rand.Next(<span class=\"number\">100</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> randRes;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 验证初始化预处理</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>初始化结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Byte <span class=\"title\">preProcess</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.captchaID == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"publicKey is null!\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                String challenge = <span class=\"keyword\">this</span>.registerChallenge();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (challenge.Length == <span class=\"number\">32</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.getSuccessPreProcessRes(challenge);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.getFailPreProcessRes();</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">\"Server regist challenge failed!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Byte <span class=\"title\">preProcess</span>(<span class=\"params\">String userID</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.captchaID == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"publicKey is null!\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.userID = userID;</span><br><span class=\"line\">                String challenge = <span class=\"keyword\">this</span>.registerChallenge();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (challenge.Length == <span class=\"number\">32</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.getSuccessPreProcessRes(challenge);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.getFailPreProcessRes();</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">\"Server regist challenge failed!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getResponseStr</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.responseStr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 预处理失败后的返回格式串</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getFailPreProcessRes</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rand1 = <span class=\"keyword\">this</span>.getRandomNum();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rand2 = <span class=\"keyword\">this</span>.getRandomNum();</span><br><span class=\"line\">            String md5Str1 = <span class=\"keyword\">this</span>.md5Encode(rand1 + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            String md5Str2 = <span class=\"keyword\">this</span>.md5Encode(rand2 + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            String challenge = md5Str1 + md5Str2.Substring(<span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.responseStr = <span class=\"string\">\"&#123;\"</span> + <span class=\"keyword\">string</span>.Format(</span><br><span class=\"line\">                 <span class=\"string\">\"\\\"success\\\":&#123;0&#125;,\\\"gt\\\":\\\"&#123;1&#125;\\\",\\\"challenge\\\":\\\"&#123;2&#125;\\\"\"</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.captchaID, challenge) + <span class=\"string\">\"&#125;\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 预处理成功后的标准串</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getSuccessPreProcessRes</span>(<span class=\"params\">String challenge</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            challenge = <span class=\"keyword\">this</span>.md5Encode(challenge + <span class=\"keyword\">this</span>.privateKey);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.responseStr =<span class=\"string\">\"&#123;\"</span> + <span class=\"keyword\">string</span>.Format(</span><br><span class=\"line\">                <span class=\"string\">\"\\\"success\\\":&#123;0&#125;,\\\"gt\\\":\\\"&#123;1&#125;\\\",\\\"challenge\\\":\\\"&#123;2&#125;\\\"\"</span>, <span class=\"number\">1</span>, </span><br><span class=\"line\">                <span class=\"keyword\">this</span>.captchaID, challenge) + <span class=\"string\">\"&#125;\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> failback模式的验证方式</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"challenge\"&gt;</span>failback模式下用于与validate一起解码答案， 判断验证是否正确<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"validate\"&gt;</span>failback模式下用于与challenge一起解码答案， 判断验证是否正确<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"seccode\"&gt;</span>failback模式下，其实是个没用的参数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>验证结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">failbackValidateRequest</span>(<span class=\"params\">String challenge, String validate, String seccode</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.requestIsLegal(challenge, validate, seccode)) <span class=\"keyword\">return</span> GeetestLib.failResult;</span><br><span class=\"line\">            String[] validateStr = validate.Split(<span class=\"string\">'_'</span>);</span><br><span class=\"line\">            String encodeAns = validateStr[<span class=\"number\">0</span>];</span><br><span class=\"line\">            String encodeFullBgImgIndex = validateStr[<span class=\"number\">1</span>];</span><br><span class=\"line\">            String encodeImgGrpIndex = validateStr[<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> decodeAns = <span class=\"keyword\">this</span>.decodeResponse(challenge, encodeAns);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> decodeFullBgImgIndex = <span class=\"keyword\">this</span>.decodeResponse(challenge, encodeFullBgImgIndex);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> decodeImgGrpIndex = <span class=\"keyword\">this</span>.decodeResponse(challenge, encodeImgGrpIndex);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> validateResult = <span class=\"keyword\">this</span>.validateFailImage(decodeAns, decodeFullBgImgIndex, decodeImgGrpIndex);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> validateResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">validateFailImage</span>(<span class=\"params\"><span class=\"keyword\">int</span> ans, <span class=\"keyword\">int</span> full_bg_index, <span class=\"keyword\">int</span> img_grp_index</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> thread = <span class=\"number\">3</span>;</span><br><span class=\"line\">            String full_bg_name = <span class=\"keyword\">this</span>.md5Encode(full_bg_index + <span class=\"string\">\"\"</span>).Substring(<span class=\"number\">0</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">            String bg_name = md5Encode(img_grp_index + <span class=\"string\">\"\"</span>).Substring(<span class=\"number\">10</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">            String answer_decode = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">9</span>; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) answer_decode += full_bg_name.ElementAt(i);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">1</span>) answer_decode += bg_name.ElementAt(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String x_decode = answer_decode.Substring(<span class=\"number\">4</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x_int = Convert.ToInt32(x_decode, <span class=\"number\">16</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> result = x_int % <span class=\"number\">200</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result &lt; <span class=\"number\">40</span>) result = <span class=\"number\">40</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Math.Abs(ans - result) &lt; thread) <span class=\"keyword\">return</span> GeetestLib.successResult;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> GeetestLib.failResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> Boolean <span class=\"title\">requestIsLegal</span>(<span class=\"params\">String challenge, String validate, String seccode</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (challenge.Equals(<span class=\"keyword\">string</span>.Empty) || validate.Equals(<span class=\"keyword\">string</span>.Empty) || seccode.Equals(<span class=\"keyword\">string</span>.Empty)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 向gt-server进行二次验证</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"challenge\"&gt;</span>本次验证会话的唯一标识<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"validate\"&gt;</span>拖动完成后server端返回的验证结果标识字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"seccode\"&gt;</span>验证结果的校验码，如果gt-server返回的不与这个值相等则表明验证失败<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>二次验证结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">enhencedValidateRequest</span>(<span class=\"params\">String challenge, String validate, String seccode</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.requestIsLegal(challenge, validate, seccode)) <span class=\"keyword\">return</span> GeetestLib.failResult;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (validate.Length &gt; <span class=\"number\">0</span> &amp;&amp; checkResultByPrivate(challenge, validate))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                String query = <span class=\"string\">\"seccode=\"</span> + seccode + <span class=\"string\">\"&amp;sdk=csharp_\"</span> + GeetestLib.version;</span><br><span class=\"line\">                String response = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    response = postValidate(query);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Console.WriteLine(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response.Equals(md5Encode(seccode)))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> GeetestLib.successResult;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> GeetestLib.failResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">enhencedValidateRequest</span>(<span class=\"params\">String challenge, String validate, String seccode, String userID</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.requestIsLegal(challenge, validate, seccode)) <span class=\"keyword\">return</span> GeetestLib.failResult;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (validate.Length &gt; <span class=\"number\">0</span> &amp;&amp; checkResultByPrivate(challenge, validate))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                String query = <span class=\"string\">\"seccode=\"</span> + seccode + <span class=\"string\">\"&amp;user_id=\"</span> + userID + <span class=\"string\">\"&amp;sdk=csharp_\"</span> + GeetestLib.version;</span><br><span class=\"line\">                String response = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    response = postValidate(query);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Console.WriteLine(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response.Equals(md5Encode(seccode)))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> GeetestLib.successResult;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> GeetestLib.failResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">readContentFromGet</span>(<span class=\"params\">String url</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);</span><br><span class=\"line\">                request.Timeout = <span class=\"number\">20000</span>;</span><br><span class=\"line\">                HttpWebResponse response = (HttpWebResponse)request.GetResponse();</span><br><span class=\"line\">                Stream myResponseStream = response.GetResponseStream();</span><br><span class=\"line\">                StreamReader myStreamReader = <span class=\"keyword\">new</span> StreamReader(myResponseStream, Encoding.GetEncoding(<span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">                String retString = myStreamReader.ReadToEnd();</span><br><span class=\"line\">                myStreamReader.Close();</span><br><span class=\"line\">                myResponseStream.Close();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> retString;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           <span class=\"keyword\">catch</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;     </span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">registerChallenge</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            String url = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.Empty.Equals(<span class=\"keyword\">this</span>.userID))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                url = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"&#123;0&#125;&#123;1&#125;?gt=&#123;2&#125;\"</span>, GeetestLib.apiUrl, GeetestLib.registerUrl, <span class=\"keyword\">this</span>.captchaID);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                url = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"&#123;0&#125;&#123;1&#125;?gt=&#123;2&#125;&amp;user_id=&#123;3&#125;\"</span>, GeetestLib.apiUrl, GeetestLib.registerUrl, <span class=\"keyword\">this</span>.captchaID, <span class=\"keyword\">this</span>.userID);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> retString = <span class=\"keyword\">this</span>.readContentFromGet(url);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> retString;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> Boolean <span class=\"title\">checkResultByPrivate</span>(<span class=\"params\">String origin, String validate</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            String encodeStr = md5Encode(privateKey + <span class=\"string\">\"geetest\"</span> + origin);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> validate.Equals(encodeStr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">postValidate</span>(<span class=\"params\">String data</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            String url = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"&#123;0&#125;&#123;1&#125;\"</span>, GeetestLib.apiUrl, GeetestLib.validateUrl);</span><br><span class=\"line\">            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);</span><br><span class=\"line\">            request.Method = <span class=\"string\">\"POST\"</span>;</span><br><span class=\"line\">            request.ContentType = <span class=\"string\">\"application/x-www-form-urlencoded\"</span>;</span><br><span class=\"line\">            request.ContentLength = Encoding.UTF8.GetByteCount(data);</span><br><span class=\"line\">            <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">            Stream myRequestStream = request.GetRequestStream();</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] requestBytes = System.Text.Encoding.ASCII.GetBytes(data);</span><br><span class=\"line\">            myRequestStream.Write(requestBytes, <span class=\"number\">0</span>, requestBytes.Length);</span><br><span class=\"line\">            myRequestStream.Close();</span><br><span class=\"line\"></span><br><span class=\"line\">            HttpWebResponse response = (HttpWebResponse)request.GetResponse();</span><br><span class=\"line\">            <span class=\"comment\">// 读取返回信息</span></span><br><span class=\"line\">            Stream myResponseStream = response.GetResponseStream();</span><br><span class=\"line\">            StreamReader myStreamReader = <span class=\"keyword\">new</span> StreamReader(myResponseStream, Encoding.GetEncoding(<span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">            <span class=\"keyword\">string</span> retString = myStreamReader.ReadToEnd();</span><br><span class=\"line\">            myStreamReader.Close();</span><br><span class=\"line\">            myResponseStream.Close();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> retString;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">decodeRandBase</span>(<span class=\"params\">String challenge</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            String baseStr = challenge.Substring(<span class=\"number\">32</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">            List&lt;<span class=\"keyword\">int</span>&gt; tempList = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; baseStr.Length; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tempAscii = (<span class=\"keyword\">int</span>)baseStr[i];</span><br><span class=\"line\">                tempList.Add((tempAscii &gt; <span class=\"number\">57</span>) ? (tempAscii - <span class=\"number\">87</span>)</span><br><span class=\"line\">                    : (tempAscii - <span class=\"number\">48</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> result = tempList.ElementAt(<span class=\"number\">0</span>) * <span class=\"number\">36</span> + tempList.ElementAt(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">decodeResponse</span>(<span class=\"params\">String challenge, String str</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (str.Length&gt;<span class=\"number\">100</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] shuzi = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\">            String chongfu = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            Hashtable key = <span class=\"keyword\">new</span> Hashtable();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;challenge.Length;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                String item = challenge.ElementAt(i) + <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (chongfu.Contains(item)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> <span class=\"keyword\">value</span> = shuzi[count % <span class=\"number\">5</span>];</span><br><span class=\"line\">                    chongfu += item;</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                    key.Add(item, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.Length; i++) res += (<span class=\"keyword\">int</span>)key[str[i]+<span class=\"string\">\"\"</span>];</span><br><span class=\"line\">            res = res - <span class=\"keyword\">this</span>.decodeRandBase(challenge);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">md5Encode</span>(<span class=\"params\">String plainText</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            MD5CryptoServiceProvider md5 = <span class=\"keyword\">new</span> MD5CryptoServiceProvider();</span><br><span class=\"line\">            <span class=\"keyword\">string</span> t2 = BitConverter.ToString(md5.ComputeHash(UTF8Encoding.Default.GetBytes(plainText)));</span><br><span class=\"line\">            t2 = t2.Replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            t2 = t2.ToLower();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"获取验证码\"><a href=\"#获取验证码\" class=\"headerlink\" title=\"获取验证码\"></a>获取验证码</h3><p>引入Jquery库<br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"~/Content/plugins/jquery/jquery-1.8.2.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>添加用于放置验证码的div（需要放到form表单中）<br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"geetest-container\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>添加JS代码用于获取验证码<br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, processGeeTest);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processGeeTest</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 获取id，challenge，success（是否启用failback）</span></span></span><br><span class=\"line\"><span class=\"javascript\">            url: <span class=\"string\">\"/Login/GeekTest\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            type: <span class=\"string\">\"get\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            dataType: <span class=\"string\">\"json\"</span>, <span class=\"comment\">// 使用jsonp格式</span></span></span><br><span class=\"line\"><span class=\"javascript\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 使用initGeetest接口</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 参数1：配置参数，与创建Geetest实例时接受的参数一致</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 参数2：回调，回调的第一个参数验证码对象，之后可以使用它做appendTo之类的事件</span></span></span><br><span class=\"line\"><span class=\"undefined\">                initGeetest(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    gt: data.gt,</span></span><br><span class=\"line\"><span class=\"undefined\">                    challenge: data.challenge,</span></span><br><span class=\"line\"><span class=\"javascript\">                    product: <span class=\"string\">\"float\"</span>, <span class=\"comment\">// 产品形式</span></span></span><br><span class=\"line\"><span class=\"undefined\">                    offline: !data.success</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">                    handler);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> handler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">captchaObj</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 将验证码加到id为captcha的元素里</span></span></span><br><span class=\"line\"><span class=\"javascript\">        captchaObj.appendTo(<span class=\"string\">\"#geetest-container\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        captchaObj.onSuccess = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(e);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>processGeeTest方法中我们异步请求的地址“/Login/GeekTest”就是获取验证码是后台需要执行的方法<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">GeekTest</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Content(GetCaptcha(),<span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> <span class=\"title\">GetCaptcha</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> geetest = <span class=\"keyword\">new</span> GeetestLib(<span class=\"string\">\"3594e0d834df77cedc7351a02b5b06a4\"</span>, <span class=\"string\">\"b961c8081ce88af7e32a3f45d00dff84\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gtServerStatus = geetest.preProcess();</span><br><span class=\"line\">    Session[GeetestLib.gtServerStatusSessionKey] = gtServerStatus;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> geetest.getResponseStr();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"校验验证码\"><a href=\"#校验验证码\" class=\"headerlink\" title=\"校验验证码\"></a>校验验证码</h3><p>注意，当提交form表单时，会将三个和极验有关的参数传到后台方法（geetest_challenge、geetest_validate、geetest_seccode），若验证码未验证成功，则参数为空值。</p><p>后台验证方法为：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> <span class=\"title\">CheckGeeTestResult</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> geetest = <span class=\"keyword\">new</span> GeetestLib(<span class=\"string\">\"3594e0d834df77cedc7351a02b5b06a4\"</span>, <span class=\"string\">\"b961c8081ce88af7e32a3f45d00dff84 \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gtServerStatusCode = (<span class=\"keyword\">byte</span>)Session[GeetestLib.gtServerStatusSessionKey];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> userId = (<span class=\"keyword\">string</span>)Session[<span class=\"string\">\"userID\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> challenge = Request.Form.Get(GeetestLib.fnGeetestChallenge);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> validate = Request.Form.Get(GeetestLib.fnGeetestValidate);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> seccode = Request.Form.Get(GeetestLib.fnGeetestSeccode);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = gtServerStatusCode == <span class=\"number\">1</span> ? geetest.enhencedValidateRequest(challenge, validate, seccode, userId) : geetest.failbackValidateRequest(challenge, validate, seccode);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们可以在表单中判断验证码是否成功校验：<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Login</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!CheckGeeTestResult())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">\"no:请先完成验证操作。\"</span>);</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"}],"PostAsset":[],"PostCategory":[{"post_id":"cjno24osk000ad00o3d9pd91q","category_id":"cjno24osr000dd00oz8beltjj","_id":"cjno24osz000od00owoug56b8"},{"post_id":"cjno24p240071d00oc3m3fdbk","category_id":"cjno24osr000dd00oz8beltjj","_id":"cjno24p2e0078d00omvah3784"}],"PostTag":[{"post_id":"cjno24os20000d00obban920b","tag_id":"cjno24osb0002d00o1ct4q4v8","_id":"cjno24ost000fd00ohwj8qzkm"},{"post_id":"cjno24os20000d00obban920b","tag_id":"cjno24osg0006d00ovrt47vh5","_id":"cjno24osu000hd00oo4oo76gd"},{"post_id":"cjno24os20000d00obban920b","tag_id":"cjno24osk0009d00ooi4thcv8","_id":"cjno24osw000kd00o17cz026v"},{"post_id":"cjno24os90001d00obvz2i0wg","tag_id":"cjno24osr000cd00oba1pg19h","_id":"cjno24osx000md00o32sn6wdg"},{"post_id":"cjno24osu000gd00ouxf4603e","tag_id":"cjno24osb0002d00o1ct4q4v8","_id":"cjno24osz000qd00ohont3tf5"},{"post_id":"cjno24osu000gd00ouxf4603e","tag_id":"cjno24osg0006d00ovrt47vh5","_id":"cjno24ot1000sd00ow4dto2yi"},{"post_id":"cjno24osu000gd00ouxf4603e","tag_id":"cjno24osk0009d00ooi4thcv8","_id":"cjno24ot2000vd00ozis5r8jv"},{"post_id":"cjno24osw000ld00o7ldan8cf","tag_id":"cjno24osb0002d00o1ct4q4v8","_id":"cjno24ot3000xd00oofewj464"},{"post_id":"cjno24osw000ld00o7ldan8cf","tag_id":"cjno24osg0006d00ovrt47vh5","_id":"cjno24ot7000zd00ox0vqkpw7"},{"post_id":"cjno24osw000ld00o7ldan8cf","tag_id":"cjno24osk0009d00ooi4thcv8","_id":"cjno24ot80012d00o1rovggok"},{"post_id":"cjno24osy000nd00ob3ztojtc","tag_id":"cjno24osb0002d00o1ct4q4v8","_id":"cjno24ota0014d00ob4y1ayg1"},{"post_id":"cjno24osy000nd00ob3ztojtc","tag_id":"cjno24osg0006d00ovrt47vh5","_id":"cjno24otd0017d00of9lybj6v"},{"post_id":"cjno24osy000nd00ob3ztojtc","tag_id":"cjno24osk0009d00ooi4thcv8","_id":"cjno24ote0019d00ovu1gjy21"},{"post_id":"cjno24ot0000rd00o8jq4yraz","tag_id":"cjno24osb0002d00o1ct4q4v8","_id":"cjno24oth001cd00oj4aa3d73"},{"post_id":"cjno24ot0000rd00o8jq4yraz","tag_id":"cjno24osg0006d00ovrt47vh5","_id":"cjno24otj001ed00opgo8g5xx"},{"post_id":"cjno24ot0000rd00o8jq4yraz","tag_id":"cjno24osk0009d00ooi4thcv8","_id":"cjno24otl001hd00olvzjyw1v"},{"post_id":"cjno24osd0003d00o7di0hhwq","tag_id":"cjno24osv000id00owi7pohzt","_id":"cjno24otn001jd00owqluxmeg"},{"post_id":"cjno24osd0003d00o7di0hhwq","tag_id":"cjno24osz000pd00omi6du5uc","_id":"cjno24otp001md00othzftak2"},{"post_id":"cjno24ot2000wd00oaw0egcks","tag_id":"cjno24osb0002d00o1ct4q4v8","_id":"cjno24otq001od00o7u2c7rsx"},{"post_id":"cjno24ot2000wd00oaw0egcks","tag_id":"cjno24osg0006d00ovrt47vh5","_id":"cjno24ots001rd00obu0jl6ql"},{"post_id":"cjno24ot2000wd00oaw0egcks","tag_id":"cjno24osk0009d00ooi4thcv8","_id":"cjno24ott001td00op4fkvjin"},{"post_id":"cjno24ot80011d00oumv71utn","tag_id":"cjno24osb0002d00o1ct4q4v8","_id":"cjno24otv001vd00o9ffnb4qz"},{"post_id":"cjno24ot80011d00oumv71utn","tag_id":"cjno24osg0006d00ovrt47vh5","_id":"cjno24oty001yd00oc25t4xz6"},{"post_id":"cjno24ot80011d00oumv71utn","tag_id":"cjno24osk0009d00ooi4thcv8","_id":"cjno24ou00020d00o7q7mo2ir"},{"post_id":"cjno24ose0004d00odsb3uhtt","tag_id":"cjno24ot2000ud00o0e0ycj7t","_id":"cjno24ou10023d00og1ozelab"},{"post_id":"cjno24ose0004d00odsb3uhtt","tag_id":"cjno24ot70010d00oa2npwmes","_id":"cjno24ou30025d00o4sosjxxq"},{"post_id":"cjno24osf0005d00owhmh9spv","tag_id":"cjno24osk0009d00ooi4thcv8","_id":"cjno24ou40028d00o8767iqgx"},{"post_id":"cjno24osf0005d00owhmh9spv","tag_id":"cjno24otf001ad00o969a7z58","_id":"cjno24ou5002ad00oj6wyxzig"},{"post_id":"cjno24osh0007d00otg9nz0os","tag_id":"cjno24osk0009d00ooi4thcv8","_id":"cjno24ou7002dd00orf6kfulh"},{"post_id":"cjno24osh0007d00otg9nz0os","tag_id":"cjno24otp001ld00od4g9me8e","_id":"cjno24ou8002fd00orsvestx4"},{"post_id":"cjno24osh0007d00otg9nz0os","tag_id":"cjno24ots001qd00oyigmiah5","_id":"cjno24ou9002hd00ou6og0jfx"},{"post_id":"cjno24osh0007d00otg9nz0os","tag_id":"cjno24otv001wd00ol80j1aji","_id":"cjno24ouc002kd00ovgo4jw65"},{"post_id":"cjno24osh0007d00otg9nz0os","tag_id":"cjno24ou00021d00ohllq6d10","_id":"cjno24oud002md00oqllqtjwh"},{"post_id":"cjno24ou7002ed00oqwm8ab65","tag_id":"cjno24ou00021d00ohllq6d10","_id":"cjno24oue002pd00oaq0ime71"},{"post_id":"cjno24osi0008d00ovo15nkpv","tag_id":"cjno24ou40027d00o4xhr30wv","_id":"cjno24ouf002rd00o21pz94bw"},{"post_id":"cjno24osi0008d00ovo15nkpv","tag_id":"cjno24ou6002cd00obps0ilb0","_id":"cjno24ouh002ud00opgx4ywbl"},{"post_id":"cjno24osk000ad00o3d9pd91q","tag_id":"cjno24oua002id00o157el3ax","_id":"cjno24ouk002wd00oqugpuqs4"},{"post_id":"cjno24osk000ad00o3d9pd91q","tag_id":"cjno24oud002nd00oyxggqudq","_id":"cjno24oum002zd00ol56xzdt8"},{"post_id":"cjno24osp000bd00ok5s3flwa","tag_id":"cjno24osb0002d00o1ct4q4v8","_id":"cjno24ouo0032d00o6f6pv832"},{"post_id":"cjno24osp000bd00ok5s3flwa","tag_id":"cjno24osg0006d00ovrt47vh5","_id":"cjno24ouo0033d00o4feqhky3"},{"post_id":"cjno24osp000bd00ok5s3flwa","tag_id":"cjno24osk0009d00ooi4thcv8","_id":"cjno24ouo0035d00oqbuwerwh"},{"post_id":"cjno24osp000bd00ok5s3flwa","tag_id":"cjno24ouh002td00olc7znldz","_id":"cjno24ouo0036d00oxb1kz2g8"},{"post_id":"cjno24osp000bd00ok5s3flwa","tag_id":"cjno24oul002yd00or5z4epim","_id":"cjno24oup0038d00ot52p912t"},{"post_id":"cjno24oss000ed00ox4hz4jju","tag_id":"cjno24oun0031d00o7b7s341d","_id":"cjno24ouq003bd00oo7zwy7sf"},{"post_id":"cjno24oss000ed00ox4hz4jju","tag_id":"cjno24ouo0034d00ox1o24avw","_id":"cjno24ouq003cd00ovr9awuw1"},{"post_id":"cjno24oss000ed00ox4hz4jju","tag_id":"cjno24oup0037d00o0mhqzmaj","_id":"cjno24ouq003ed00o66d0roou"},{"post_id":"cjno24oss000ed00ox4hz4jju","tag_id":"cjno24oup0039d00omafsertq","_id":"cjno24ouq003fd00o4d9e58bz"},{"post_id":"cjno24osv000jd00o0bsxtcbu","tag_id":"cjno24oup003ad00osp4b7rls","_id":"cjno24our003hd00o5vsdjo16"},{"post_id":"cjno24osv000jd00o0bsxtcbu","tag_id":"cjno24ouq003dd00opqnd7y9j","_id":"cjno24our003id00oyuz9xh88"},{"post_id":"cjno24ot1000td00ow6c5si2c","tag_id":"cjno24osb0002d00o1ct4q4v8","_id":"cjno24our003kd00o5rbft4r1"},{"post_id":"cjno24ot1000td00ow6c5si2c","tag_id":"cjno24osg0006d00ovrt47vh5","_id":"cjno24ous003ld00om8mdgv7h"},{"post_id":"cjno24ot1000td00ow6c5si2c","tag_id":"cjno24osk0009d00ooi4thcv8","_id":"cjno24ous003nd00oeywu0m41"},{"post_id":"cjno24ot1000td00ow6c5si2c","tag_id":"cjno24ouq003gd00ow962dkd2","_id":"cjno24ous003od00osnyob7qz"},{"post_id":"cjno24ot4000yd00oh5hue7a6","tag_id":"cjno24osb0002d00o1ct4q4v8","_id":"cjno24out003qd00oqdp0y1yz"},{"post_id":"cjno24ot4000yd00oh5hue7a6","tag_id":"cjno24osg0006d00ovrt47vh5","_id":"cjno24out003rd00ots75hlfo"},{"post_id":"cjno24ot4000yd00oh5hue7a6","tag_id":"cjno24osk0009d00ooi4thcv8","_id":"cjno24out003td00o1nh3u4wp"},{"post_id":"cjno24ot4000yd00oh5hue7a6","tag_id":"cjno24our003jd00os5lobhke","_id":"cjno24out003ud00otvwmjw0x"},{"post_id":"cjno24ot90013d00of900sm84","tag_id":"cjno24ou40027d00o4xhr30wv","_id":"cjno24ouv003wd00oh6dde8fi"},{"post_id":"cjno24ot90013d00of900sm84","tag_id":"cjno24out003pd00o0dlzndni","_id":"cjno24ouv003xd00o11l9jfge"},{"post_id":"cjno24ot90013d00of900sm84","tag_id":"cjno24out003sd00ouxita9mg","_id":"cjno24ouv003zd00otee24a6s"},{"post_id":"cjno24otb0016d00o3jza6nfc","tag_id":"cjno24ou40027d00o4xhr30wv","_id":"cjno24ouw0041d00obyxsoyo4"},{"post_id":"cjno24otb0016d00o3jza6nfc","tag_id":"cjno24ouv003yd00orr5lb70p","_id":"cjno24ouw0042d00olyqelbmr"},{"post_id":"cjno24ote0018d00obon6u5ys","tag_id":"cjno24ou40027d00o4xhr30wv","_id":"cjno24oux0046d00opkx9ayqi"},{"post_id":"cjno24ote0018d00obon6u5ys","tag_id":"cjno24ouw0043d00o6swhqkoz","_id":"cjno24oux0047d00oc2g6zel7"},{"post_id":"cjno24ote0018d00obon6u5ys","tag_id":"cjno24oux0044d00ovt6w12fi","_id":"cjno24ouy0049d00ovkd64p5t"},{"post_id":"cjno24otf001bd00o1y9rfp2z","tag_id":"cjno24osr000cd00oba1pg19h","_id":"cjno24ouy004ad00o951h0nnn"},{"post_id":"cjno24otf001bd00o1y9rfp2z","tag_id":"cjno24oux0045d00oc3rjpwf3","_id":"cjno24ouy004cd00o9vplg437"},{"post_id":"cjno24oti001dd00oie8cbvdh","tag_id":"cjno24oux0048d00o2szukz2z","_id":"cjno24ouz004fd00oj4wqd74n"},{"post_id":"cjno24oti001dd00oie8cbvdh","tag_id":"cjno24ouy004bd00o7r9n2ork","_id":"cjno24ouz004gd00o2lqa9ljg"},{"post_id":"cjno24oti001dd00oie8cbvdh","tag_id":"cjno24ouy004dd00of2kfspm8","_id":"cjno24ov0004id00owo5nfwym"},{"post_id":"cjno24otl001id00okuifft2s","tag_id":"cjno24oux0048d00o2szukz2z","_id":"cjno24ov1004kd00omrmxnt5j"},{"post_id":"cjno24otl001id00okuifft2s","tag_id":"cjno24ouz004hd00oq6jv4enr","_id":"cjno24ov1004ld00osc9068nm"},{"post_id":"cjno24otn001kd00oiq3mvekn","tag_id":"cjno24ou00021d00ohllq6d10","_id":"cjno24ov2004od00ouoo540a0"},{"post_id":"cjno24otn001kd00oiq3mvekn","tag_id":"cjno24osk0009d00ooi4thcv8","_id":"cjno24ov2004pd00of1riwnrb"},{"post_id":"cjno24otn001kd00oiq3mvekn","tag_id":"cjno24ov1004md00ojpb2swgp","_id":"cjno24ov2004rd00o4w36d650"},{"post_id":"cjno24otp001nd00olgbzug6n","tag_id":"cjno24ou00021d00ohllq6d10","_id":"cjno24ov5004ud00oo2hstrke"},{"post_id":"cjno24otp001nd00olgbzug6n","tag_id":"cjno24ov2004qd00obeheoskk","_id":"cjno24ov5004vd00oeg6s5foq"},{"post_id":"cjno24otp001nd00olgbzug6n","tag_id":"cjno24osk0009d00ooi4thcv8","_id":"cjno24ov5004xd00o90kodrts"},{"post_id":"cjno24otp001nd00olgbzug6n","tag_id":"cjno24ov3004sd00opdtb1ej6","_id":"cjno24ov6004yd00ov3lb2f0d"},{"post_id":"cjno24otr001pd00oym12js8d","tag_id":"cjno24ou00021d00ohllq6d10","_id":"cjno24ov70050d00oss0egtep"},{"post_id":"cjno24otr001pd00oym12js8d","tag_id":"cjno24ov5004wd00ovh46vp2b","_id":"cjno24ov70051d00ows1cal88"},{"post_id":"cjno24ots001sd00o3a0m2e4y","tag_id":"cjno24ou00021d00ohllq6d10","_id":"cjno24ov90054d00oa77o9wmw"},{"post_id":"cjno24ots001sd00o3a0m2e4y","tag_id":"cjno24ov5004wd00ovh46vp2b","_id":"cjno24ov90055d00oylannhfk"},{"post_id":"cjno24otu001ud00o9wrba3jb","tag_id":"cjno24ou00021d00ohllq6d10","_id":"cjno24ova0058d00ouh3362pk"},{"post_id":"cjno24otu001ud00o9wrba3jb","tag_id":"cjno24ov1004md00ojpb2swgp","_id":"cjno24ovb0059d00oaxlvvj1n"},{"post_id":"cjno24otx001xd00oaw67jnz5","tag_id":"cjno24ou00021d00ohllq6d10","_id":"cjno24ovc005cd00o14wsgxgf"},{"post_id":"cjno24otx001xd00oaw67jnz5","tag_id":"cjno24ovb005ad00ojddl6hr3","_id":"cjno24ovc005dd00ogv6yjwt0"},{"post_id":"cjno24otz001zd00oe7zumi0g","tag_id":"cjno24ou00021d00ohllq6d10","_id":"cjno24ovd005fd00och0qdibx"},{"post_id":"cjno24ou00022d00oxh5h5mik","tag_id":"cjno24ou00021d00ohllq6d10","_id":"cjno24ove005id00oan6ol34a"},{"post_id":"cjno24ou00022d00oxh5h5mik","tag_id":"cjno24ovd005gd00ovphrvpms","_id":"cjno24ove005jd00oha4a4826"},{"post_id":"cjno24ou10024d00otzvvn4ce","tag_id":"cjno24ou00021d00ohllq6d10","_id":"cjno24ove005ld00okfsjlglp"},{"post_id":"cjno24ou10024d00otzvvn4ce","tag_id":"cjno24ovd005hd00oagsd8kfn","_id":"cjno24ove005md00ogic29dcc"},{"post_id":"cjno24ou30026d00oqluizzot","tag_id":"cjno24ove005kd00oiniz9nfs","_id":"cjno24ovf005pd00o5rxvprod"},{"post_id":"cjno24ou30026d00oqluizzot","tag_id":"cjno24ot2000ud00o0e0ycj7t","_id":"cjno24ovf005qd00oa53o3wsc"},{"post_id":"cjno24ou30026d00oqluizzot","tag_id":"cjno24ouh002td00olc7znldz","_id":"cjno24ovg005sd00onmlqzalb"},{"post_id":"cjno24ou40029d00od0a1xprz","tag_id":"cjno24ove005kd00oiniz9nfs","_id":"cjno24ovh005ud00os6cy51hu"},{"post_id":"cjno24ou40029d00od0a1xprz","tag_id":"cjno24ot2000ud00o0e0ycj7t","_id":"cjno24ovh005vd00oz9ksrgcj"},{"post_id":"cjno24ou40029d00od0a1xprz","tag_id":"cjno24ovg005rd00o6dijetwr","_id":"cjno24ovh005xd00oq633dtt2"},{"post_id":"cjno24ou6002bd00oi4damau4","tag_id":"cjno24ove005kd00oiniz9nfs","_id":"cjno24ovi005yd00o6h0xeq2y"},{"post_id":"cjno24ou6002bd00oi4damau4","tag_id":"cjno24ot2000ud00o0e0ycj7t","_id":"cjno24ovi0060d00owk4nu909"},{"post_id":"cjno24ou8002gd00oo1jn73wq","tag_id":"cjno24osr000cd00oba1pg19h","_id":"cjno24ovi0062d00owk6t9toa"},{"post_id":"cjno24ou8002gd00oo1jn73wq","tag_id":"cjno24ovh005wd00o7qaqnqxu","_id":"cjno24ovj0063d00o6z3hz9sy"},{"post_id":"cjno24ou8002gd00oo1jn73wq","tag_id":"cjno24ovi005zd00o0px7ezx9","_id":"cjno24ovj0065d00ogp7k8cx1"},{"post_id":"cjno24oua002jd00oirs4xkgl","tag_id":"cjno24ovi0061d00ohk3n2ib1","_id":"cjno24ovk0068d00o4qrf8lni"},{"post_id":"cjno24oua002jd00oirs4xkgl","tag_id":"cjno24ovj0064d00olhanvnak","_id":"cjno24ovk0069d00o03mr7x1o"},{"post_id":"cjno24oua002jd00oirs4xkgl","tag_id":"cjno24ovj0066d00o71b7eky4","_id":"cjno24ovl006bd00ovcq82fv8"},{"post_id":"cjno24oua002jd00oirs4xkgl","tag_id":"cjno24osk0009d00ooi4thcv8","_id":"cjno24ovl006cd00ozbj5uahw"},{"post_id":"cjno24ouc002ld00o6xysdzx2","tag_id":"cjno24ovj0067d00ovx7j1fub","_id":"cjno24ovl006ed00o9673ku2d"},{"post_id":"cjno24ouc002ld00o6xysdzx2","tag_id":"cjno24ovk006ad00o5xcyrvif","_id":"cjno24ovm006fd00oh25r2r4s"},{"post_id":"cjno24oud002od00oal3l1uqv","tag_id":"cjno24ovl006dd00oye0s4ccm","_id":"cjno24ovn006hd00odd4ntqgm"},{"post_id":"cjno24oug002sd00ojeoy1fh1","tag_id":"cjno24ovl006dd00oye0s4ccm","_id":"cjno24ovo006kd00ocpg924yn"},{"post_id":"cjno24oug002sd00ojeoy1fh1","tag_id":"cjno24ovn006id00ojcwtmwyf","_id":"cjno24ovo006ld00oq10yuqst"},{"post_id":"cjno24oug002sd00ojeoy1fh1","tag_id":"cjno24ou00021d00ohllq6d10","_id":"cjno24ovo006nd00orgj91a4n"},{"post_id":"cjno24oui002vd00oczsq3w9v","tag_id":"cjno24ovn006jd00oatyeo7s4","_id":"cjno24ovp006pd00ojiacdx8t"},{"post_id":"cjno24oui002vd00oczsq3w9v","tag_id":"cjno24ovo006md00o4kwals3k","_id":"cjno24ovp006qd00ohs2gj6it"},{"post_id":"cjno24ouk002xd00opukdy88n","tag_id":"cjno24ovl006dd00oye0s4ccm","_id":"cjno24ovp006sd00o1o6hvh2c"},{"post_id":"cjno24oum0030d00of6d0hbmf","tag_id":"cjno24ovp006rd00oe4tdprxj","_id":"cjno24ovr006wd00oq9cq34z5"},{"post_id":"cjno24oum0030d00of6d0hbmf","tag_id":"cjno24ovq006td00oyig3wgxa","_id":"cjno24ovr006xd00ouoaowe63"},{"post_id":"cjno24oum0030d00of6d0hbmf","tag_id":"cjno24ovq006ud00oi3e5pero","_id":"cjno24ovr006yd00opgya5ohl"},{"post_id":"cjno24oum0030d00of6d0hbmf","tag_id":"cjno24ovq006vd00owh1b0yi1","_id":"cjno24ovr006zd00oqdk71me3"},{"post_id":"cjno24p270073d00oe5g1p38g","tag_id":"cjno24ou40027d00o4xhr30wv","_id":"cjno24p2d0076d00oq5edbacj"},{"post_id":"cjno24p2c0075d00o2rfv4b5t","tag_id":"cjno24ou40027d00o4xhr30wv","_id":"cjno24p2f0079d00omaqjylb9"},{"post_id":"cjno24p2h007cd00on02pmpa6","tag_id":"cjno24ou00021d00ohllq6d10","_id":"cjno24p2j007fd00oheztma1d"},{"post_id":"cjno24p240071d00oc3m3fdbk","tag_id":"cjno24osk0009d00ooi4thcv8","_id":"cjno24p2n007id00o6uue7fjn"},{"post_id":"cjno24p240071d00oc3m3fdbk","tag_id":"cjno24p2c0074d00ovibwcoae","_id":"cjno24p2n007jd00octxtdwiw"},{"post_id":"cjno24p240071d00oc3m3fdbk","tag_id":"cjno24p2g007bd00oevexnce6","_id":"cjno24p2n007ld00o4sflpo18"},{"post_id":"cjno24p240071d00oc3m3fdbk","tag_id":"cjno24p2j007ed00oqhp6sl3d","_id":"cjno24p2o007md00ojthpr01s"},{"post_id":"cjno24p2e0077d00o01pp3g1v","tag_id":"cjno24ou40027d00o4xhr30wv","_id":"cjno24p2o007od00oygzaidfc"},{"post_id":"cjno24p2e0077d00o01pp3g1v","tag_id":"cjno24p2m007hd00o2br66cks","_id":"cjno24p2o007pd00oq4gmwltc"},{"post_id":"cjno24p2f007ad00oem4ai52j","tag_id":"cjno24p2n007kd00oei683038","_id":"cjno24p2p007rd00oqv446owu"},{"post_id":"cjno24p2f007ad00oem4ai52j","tag_id":"cjno24p2o007nd00ojz5slwy3","_id":"cjno24p2p007sd00oe716ggf1"},{"post_id":"cjno24p2f007ad00oem4ai52j","tag_id":"cjno24ovn006id00ojcwtmwyf","_id":"cjno24p2q007ud00o8cjv155s"},{"post_id":"cjno24p2i007dd00olzy3fmgo","tag_id":"cjno24p2p007qd00oofje4va8","_id":"cjno24p2r007xd00otao6gdw6"},{"post_id":"cjno24p2i007dd00olzy3fmgo","tag_id":"cjno24p2p007td00oiba64bls","_id":"cjno24p2r007yd00o1lmmr62g"},{"post_id":"cjno24p2i007dd00olzy3fmgo","tag_id":"cjno24p2q007vd00ogbjul6ze","_id":"cjno24p2r007zd00ozn29oy49"},{"post_id":"cjno24p2j007gd00o9fva7nf8","tag_id":"cjno24p2q007wd00obii2emj4","_id":"cjno24p2r0080d00op6kx47me"},{"post_id":"cjno24p2j007gd00o9fva7nf8","tag_id":"cjno24ovp006rd00oe4tdprxj","_id":"cjno24p2s0081d00oxa3dvivo"},{"post_id":"cjno24p2j007gd00o9fva7nf8","tag_id":"cjno24ovq006td00oyig3wgxa","_id":"cjno24p2s0082d00o1d805mzf"},{"post_id":"cjno24p2j007gd00o9fva7nf8","tag_id":"cjno24ovq006ud00oi3e5pero","_id":"cjno24p2s0083d00ocm7m35my"},{"post_id":"cjno24p4l0084d00odols8d5x","tag_id":"cjno24ou40027d00o4xhr30wv","_id":"cjno24p4p0086d00ob1k4d8tg"},{"post_id":"cjno24p4l0084d00odols8d5x","tag_id":"cjno24p4o0085d00odih23vwp","_id":"cjno24p4q0087d00ofiukxte1"}],"Tag":[{"name":"51NOD","_id":"cjno24osb0002d00o1ct4q4v8"},{"name":"刷题","_id":"cjno24osg0006d00ovrt47vh5"},{"name":"C#","_id":"cjno24osk0009d00ooi4thcv8"},{"name":"Winform","_id":"cjno24osr000cd00oba1pg19h"},{"name":"特性","_id":"cjno24osv000id00owi7pohzt"},{"name":"扩展方法","_id":"cjno24osz000pd00omi6du5uc"},{"name":"算法","_id":"cjno24ot2000ud00o0e0ycj7t"},{"name":"质数","_id":"cjno24ot70010d00oa2npwmes"},{"name":"硬件信息","_id":"cjno24otf001ad00o969a7z58"},{"name":"下载","_id":"cjno24otp001ld00od4g9me8e"},{"name":"IDM","_id":"cjno24ots001qd00oyigmiah5"},{"name":"迅雷","_id":"cjno24otv001wd00ol80j1aji"},{"name":"爬虫","_id":"cjno24ou00021d00ohllq6d10"},{"name":"MVC","_id":"cjno24ou40027d00o4xhr30wv"},{"name":"索引","_id":"cjno24ou6002cd00obps0ilb0"},{"name":"EFCore","_id":"cjno24oua002id00o157el3ax"},{"name":"MySQL","_id":"cjno24oud002nd00oyxggqudq"},{"name":"Prim","_id":"cjno24ouh002td00olc7znldz"},{"name":"贪心","_id":"cjno24oul002yd00or5z4epim"},{"name":"nginx-rtmp","_id":"cjno24oun0031d00o7b7s341d"},{"name":"流媒体","_id":"cjno24ouo0034d00ox1o24avw"},{"name":"hls","_id":"cjno24oup0037d00o0mhqzmaj"},{"name":"点播","_id":"cjno24oup0039d00omafsertq"},{"name":"redhat","_id":"cjno24oup003ad00osp4b7rls"},{"name":"yum源","_id":"cjno24ouq003dd00opqnd7y9j"},{"name":"贪心算法","_id":"cjno24ouq003gd00ow962dkd2"},{"name":"概率","_id":"cjno24our003jd00os5lobhke"},{"name":"Spring.Net","_id":"cjno24out003pd00o0dlzndni"},{"name":"IOC","_id":"cjno24out003sd00ouxita9mg"},{"name":"登录验证","_id":"cjno24ouv003yd00orr5lb70p"},{"name":"Memcache","_id":"cjno24ouw0043d00o6swhqkoz"},{"name":"分布式","_id":"cjno24oux0044d00ovt6w12fi"},{"name":"单例，C#","_id":"cjno24oux0045d00oc3rjpwf3"},{"name":"Java","_id":"cjno24oux0048d00o2szukz2z"},{"name":"beanUtils","_id":"cjno24ouy004bd00o7r9n2ork"},{"name":"javabean","_id":"cjno24ouy004dd00of2kfspm8"},{"name":"反射","_id":"cjno24ouz004hd00oq6jv4enr"},{"name":"ScrapySharp","_id":"cjno24ov1004md00ojpb2swgp"},{"name":"ARSoft.Tools.Net","_id":"cjno24ov2004qd00obeheoskk"},{"name":"DNS","_id":"cjno24ov3004sd00opdtb1ej6"},{"name":"缓存","_id":"cjno24ov5004wd00ovh46vp2b"},{"name":"UrlFilter","_id":"cjno24ovb005ad00ojddl6hr3"},{"name":"Extractor","_id":"cjno24ovd005gd00ovphrvpms"},{"name":"Bloom Filter","_id":"cjno24ovd005hd00oagsd8kfn"},{"name":"迷宫","_id":"cjno24ove005kd00oiniz9nfs"},{"name":"递归分割","_id":"cjno24ovg005rd00o6dijetwr"},{"name":"跨线程","_id":"cjno24ovh005wd00o7qaqnqxu"},{"name":"委托","_id":"cjno24ovi005zd00o0px7ezx9"},{"name":"广州医保","_id":"cjno24ovi0061d00ohk3n2ib1"},{"name":"HG_Interface.dll","_id":"cjno24ovj0064d00olhanvnak"},{"name":"外部组件异常","_id":"cjno24ovj0066d00o71b7eky4"},{"name":".Net Core","_id":"cjno24ovj0067d00ovx7j1fub"},{"name":"IIS","_id":"cjno24ovk006ad00o5xcyrvif"},{"name":"软件心得","_id":"cjno24ovl006dd00oye0s4ccm"},{"name":"IP","_id":"cjno24ovn006id00ojcwtmwyf"},{"name":"InnoSetup","_id":"cjno24ovn006jd00oatyeo7s4"},{"name":"安装包","_id":"cjno24ovo006md00o4kwals3k"},{"name":"ASR","_id":"cjno24ovp006rd00oe4tdprxj"},{"name":"TTS","_id":"cjno24ovq006td00oyig3wgxa"},{"name":"NAudio","_id":"cjno24ovq006ud00oi3e5pero"},{"name":"讯飞语音识别","_id":"cjno24ovq006vd00owh1b0yi1"},{"name":"selenium","_id":"cjno24p2c0074d00ovibwcoae"},{"name":"full page screenshot","_id":"cjno24p2g007bd00oevexnce6"},{"name":"全页面截图","_id":"cjno24p2j007ed00oqhp6sl3d"},{"name":"Log4Net","_id":"cjno24p2m007hd00o2br66cks"},{"name":"GeoIP2","_id":"cjno24p2n007kd00oei683038"},{"name":".Net","_id":"cjno24p2o007nd00ojz5slwy3"},{"name":"面试","_id":"cjno24p2p007qd00oofje4va8"},{"name":"网站后台开发工程师","_id":"cjno24p2p007td00oiba64bls"},{"name":"总结","_id":"cjno24p2q007vd00ogbjul6ze"},{"name":"百度语音识别","_id":"cjno24p2q007wd00obii2emj4"},{"name":"极验","_id":"cjno24p4o0085d00odih23vwp"}]}}